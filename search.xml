<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024-总结</title>
      <link href="//post/2024-lastday.html"/>
      <url>//post/2024-lastday.html</url>
      
        <content type="html"><![CDATA[<h1 id="2024-总结"><a href="#2024-总结" class="headerlink" title="2024-总结"></a>2024-总结</h1><p>第三年写年度总结，结束这幸运的一年。</p><p>这一年算是人生的关键路径上的一个点，前半年在本科的水深火热之中，后半年就投身到紧张却又快乐的研一生活。幸运的分配到本科的宿舍楼，但重新走进新校园，物是人非。</p><p>记得毕业那天，走到大一的宿舍门口，一想四年过的也算得上精彩。起起伏伏，跌跌撞撞，还是顺利走完了全程，值得为自己喝彩。</p><p>看着朋友们各奔前程，心里是真心感觉高兴，还不来得及感伤，就被派到无锡去学习交流。</p><p>坐在称为“800里加急送牛马”的京沪线上，脑子里还是昨天的毕业典礼，和早晨的告别。</p><p>从小在北方长大，第一次完全暴露在南方的酷暑和暴雨中，第一次与千百只蟑螂斗争，都算是深刻的回忆了。一个人在周末逛遍了无锡的每个角落，白天坐在办公室俯瞰太湖，感觉步入社会也不是很久远的事情。</p><p>感谢女朋友千里迢迢来陪我出差，一起玩了江浙沪，非常开心。</p><p>很开心的在这一年选择了自己努力的方向，成为芯片行业的一份子。坦白来讲，除了兴趣使然选择这个行业，也有被互联网的强度吓到的成分，不过选择了现在的赛道后，发现不过是跳出一个火坑又踏入一口油锅哈哈。不得不说，在这一年，也是我下定决心的第一年，才认识的国内半导体的内忧外患之深。</p><p>不得不说作为离产业界较远的未毕业学生，尝试从互联网获得行业动态是的我很容易被自媒体的信息蒙蔽双眼，陷入焦虑。但好在在年初找到了属于自己的破局之路。真的走入行业的大门，才发现个人的渺小其实无力改变太多，过多的选择只会让我陷入循环无法自拔。</p><p>但是幸运的是，仿佛贵人相助般的在八月加入了cix ，在这里学到了第一课，更是认识了一同夹缝生存的朋友，和愿意真心教我们的前辈们。无论是技术上的还是对行业的理解上，学到了很多。我认为这是今年最大的幸运之一。于我而言证明我长达一年的努力不是无意义的，也给我挤身入行增加了不少勇气与信心。非常感激大家。这样让我放慢了脚步不向之前那么急功近利，让我更相信缘分哈哈哈。</p><p>九月开学典礼标志我开始研究生生活，遇到性格很好的室友们，住回刚怀念一个月的学五，开启研究生之旅。</p><p>坦白来说最后这四个月，是真的感到开心。完成工作的同时还能培养兴趣，哪怕这种轻松可能只是短暂的几个月，也值得纪念。结束和女朋友长达多年的异地长跑，第一次在北京团聚，是另一件让我感到幸运的事情。周末可以一起探索更多的地方，一起体验更多的生活。希望新的一年可以一起走遍北京的角角落落，拍遍北京的每一道风景。妈妈在十二月复查恢复很好，也让我感到十分幸运。让我更觉得家人和朋友是我生命中最重要的一部分。</p><p>希望新的一年，可以收获更多的幸运。也希望自己变得更有勇气去面对未知的未来。</p><p>新年快乐，万事顺意！</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>v扩展翻译总结”</title>
      <link href="//post/riscv%20v%E6%89%A9%E5%B1%95%E7%BF%BB%E8%AF%91%E6%80%BB%E7%BB%93.html"/>
      <url>//post/riscv%20v%E6%89%A9%E5%B1%95%E7%BF%BB%E8%AF%91%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a><font style="color:rgb(0,0,0);">参数</font></h2><p><font style="color:rgb(25, 27, 31);">每个支持向量扩展的 hart 都有三个参数的定义</font></p><ol><li>单个向量元素<font style="color:rgb(25, 27, 31);">的最大长度</font><em><font style="color:rgb(25, 27, 31);">ELEN</font></em><font style="color:rgb(25, 27, 31);"> （</font><font style="color:#DF2A3F;">以bit为单位</font><font style="color:rgb(25, 27, 31);">，下同），要求 </font><em><font style="color:rgb(25, 27, 31);">ELEN ≥ 8</font></em><font style="color:rgb(25, 27, 31);">，并且</font><font style="color:#DF2A3F;">必须为2的幂</font><font style="color:rgb(25, 27, 31);">。</font></li></ol><p><font style="color:rgb(25, 27, 31);">2．</font><strong><font style="color:#DF2A3F;">向量寄存器</font></strong><font style="color:rgb(25, 27, 31);">的bit数</font><em><font style="color:rgb(25, 27, 31);">VLEN</font></em><font style="color:rgb(25, 27, 31);">，要求</font><em><font style="color:rgb(25, 27, 31);">VLEN ≥ ELEN</font></em><font style="color:rgb(25, 27, 31);">，并且必须是2的幂。</font></p><p><font style="color:rgb(25, 27, 31);">3．分段距离（The striping distance in bits）</font><em><font style="color:rgb(25, 27, 31);">SLEN</font></em><font style="color:rgb(25, 27, 31);">，要求必须为</font><em><font style="color:rgb(25, 27, 31);">VLEN ≥ SLEN ≥ 32</font></em><font style="color:rgb(25, 27, 31);">，并且必须为2的幂，不能大于2的16次。</font></p><p><em><strong><font style="color:rgb(25, 27, 31);">Note：</font></strong>__<font style="color:rgb(25, 27, 31);">可以在平台配置文件上给这些参数设置其他约束，例如，要求 ELEN ≥ max（XLEN，FLEN），或要求最小 VLEN 值，或设置 SLEN 值，或要求 SLEN = VLEN。</font></em></p><p>有一种提议是允许 ELEN 随着 LMUL 变化，这样的话，会使得不一定满足 VLEN≥ELEN 。_</p><p><font style="color:rgb(25, 27, 31);">ISA 支持编写</font><font style="color:rgb(25, 27, 31);">代码，在某些约束下，这些代码可以在具有这些不同参数值的 harts 上执行。</font></p><h2 id="Vector-Extension-Programmer’s-Model"><a href="#Vector-Extension-Programmer’s-Model" class="headerlink" title="Vector Extension Programmer’s Model"></a><font style="color:rgb(0,0,0);">Vector Extension Programmer’s Model</font></h2><p> 向量扩展为基础的标量 RISC-V ISA 添加了 32 个向量寄存器，以及 7 个非特权 CSR（vstart, vxsat, vxrm, vcsr, vtype, vl, vlenb）  </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202411102056273.png"></p><h3 id="Vector-Registers"><a href="#Vector-Registers" class="headerlink" title="Vector Registers"></a><font style="color:rgb(0,0,0);">Vector Registers</font></h3><p><font style="color:rgb(0,0,0);"> 向量扩展为基础的标量 RISC-V ISA 添加了 32 个架构向量寄存器，v0 到 v31。每个向量寄存器具有 VLEN 位的状态。  </font></p><h3 id="Vector-Context-Status-in-mstatus"><a href="#Vector-Context-Status-in-mstatus" class="headerlink" title="Vector Context Status in mstatus"></a><font style="color:rgb(0,0,0);">Vector Context Status in mstatus</font></h3><p><font style="color:rgb(0,0,0);">msrarus中的[10:9]控制v扩展开关，如果没开但有v扩展指令，会有异常</font></p><h3 id="Vector-type-register-vtype"><a href="#Vector-type-register-vtype" class="headerlink" title="Vector type register, vtype"></a><font style="color:rgb(0,0,0);">Vector type register, vtype</font></h3><p>向量类型决定了每个向量寄存器中元素的组织，以及多个向量寄存器如何分组。vtype寄存器还指示如何处理向量结果中超过当前向量长度的元素。</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727167100849-1d4f6359-91ed-47b8-afc5-2d17eeced384.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vtype的初衷是为了使vector扩展指令集能适配32位编码空间</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">在执行一条vector指令之前,可以分别使用vset{i} vl{i}来设置vtype的field和vector length</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">这两个值可以在后续指令中使用-+</font></li></ul><h4 id="Vector-selected-element-width-vsew-2-0-每个元素的大小"><a href="#Vector-selected-element-width-vsew-2-0-每个元素的大小" class="headerlink" title="Vector selected element width vsew[2:0] 每个元素的大小"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector selected element width vsew[2:0] 每个元素的大小</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">这个field用来动态设置selected element width(SEW). 默认情况下,一个vector寄存器被分成VLEN/SEW 个元素.<br></font><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727167500469-17a32667-bb96-4233-8974-065fa82c0f46.png"></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727167510995-2f1b636f-620b-4236-8b6f-5fd0d82869ee.png"></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">SEW越大, 一个v寄存器中的元素个数越少</font></li></ul><h4 id="Vector-Register-Grouping-vlmul-2-0-一个group多少个寄存器"><a href="#Vector-Register-Grouping-vlmul-2-0-一个group多少个寄存器" class="headerlink" title="Vector Register Grouping (vlmul[2:0]) 一个group多少个寄存器"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Register Grouping (vlmul[2:0]) 一个group多少个寄存器</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">多个Vector寄存器可以被组成一个group。比如通用向量寄存器一共32个，设置LMUL为8，就可以将全部的通用寄存器分成4组，每组包含了8个连续的向量寄存器，这种分组的方式增加了向量寄存器组中元素的个数</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">LMUL默认是1, 具体实现时</font><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">必须支持LMUL=1,2,4,8</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vlmul是一个有符号数, </font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">LMUL=2</font><sup><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vlmul[2:0]</font></sup></li><li><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">SEW和lmul配置错误时会置位vtype中的vill bit</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">LMUL也可以是小数, 当存在混合长度的向量时, 小数LMUL可以增加vector寄存器的利用率. 具体来说当LMUL是小数时, 表示向量指令只操作一个向量的一部分. 例如VLEN=128, SEW=8, VLMAX表示一条向量指令所能操作的向量最大个数. 如果LMUL=1/8, 表示1/8个向量为一组, 则此时VLMAX=128/8/8 = 2, 也就是一条向量指令最多能操作一条向量的2个元素.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">LMUL为小数值时, 不是任意小数都能支持的, 最小支持</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">SEW</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">min</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">/ELEN</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">. 其中ELEN是最大支持的向量bit数, 需要保证LMUL乘上一个向量最大的元素个数大于等于1.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">下表给出了不同LMUL对应的group个数, VLMAX以及所用到的vector寄存器个数</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727168733130-cc5bdb41-d476-4457-94d3-e1acffc94856.png"></p><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">n如果小于1 ，一个group中只有一个寄存器，并且这个寄存器使用的bit数比实际的少<br></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">lmul代表一个group包含几个寄存器（最少一个）</font></p><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">举例：</font></p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">VLEN=SLEN=128bByte        F E D C B A 9 8 7 6 5 4 3 2 1 0SEW=8b      F E D C B A 9 8 7 6 5 4 3 2 1 0SEW=16b       7   6   5   4   3   2   1   0SEW=32b           3       2       1       0SEW=64b                   1               0SEW=128b                                  0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个group有一个vector寄存器，一个元素占sew大小</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">Example, VLEN=SLEN=128b, LMUL=1/4Byte        F E D C B A 9 8 7 6 5 4 3 2 1 0SEW=8b      - - - - - - - - - - - - 3 2 1 0SEW=16b       -   -   -   -   -   -   1   0SEW=32b           -       -       -       0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个group有4个寄存器</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">VLEN=SLEN=128b, SEW=32b, LMUL=4Byte          F E D C B A 9 8 7 6 5 4 3 2 1 0v4*n                3       2       1       0v4*n+1              7       6       5       4v4*n+2              B       A       9       8v4*n+3              F       E       D       C<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Vector-Tail-Agnostic-and-Vector-Mask-Agnostic-vta-and-vma"><a href="#Vector-Tail-Agnostic-and-Vector-Mask-Agnostic-vta-and-vma" class="headerlink" title="Vector Tail Agnostic and Vector Mask Agnostic vta and vma"></a><font style="color:rgb(0,0,0);">Vector Tail Agnostic and Vector Mask Agnostic vta and vma</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">首先来看一下定义:</font><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量指令执行期间操作的元素索引可以分为四个不相交的子集。</font><ul><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">预启动元素（The prestart elements）:</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">是指索引小于</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vstart&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">寄存器初始值的元素。预启动元素不会引发异常，也不会更新目标向量寄存器。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">活跃元素（The active elements）:</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 指的是向量指令执行期间，在当前向量长度范围内的元素，并且在该元素位置启用了当前掩码。活动元素可以引发异常并更新目标向量寄存器组。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">非活跃元素（The inactive elements）:</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">指的是向量指令执行期间，在当前向量长度范围内的元素，但是在该元素位置禁用了当前掩码。 除非指定了masked agnostic（ </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vtype.vma = 1&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> ），否则非活跃元素不会引发异常，也不会更新任何目标向量寄存器组，在 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vtype.vma = 1&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 这种情况下，非活跃元素可能会被1覆盖。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">尾部元素（The tail elements）:</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 是超出当前向量长度设置的元素。 尾部元素不会引发异常，并且只在指定了tail agnostic尾部不可知性（vtype.vta = 1）的情况下，才会更新目标向量寄存器组，在这种情况下，尾部元素可能会被1覆盖。 当LMUL &lt;1时，尾部包含VLMAX之后的元素，这些元素保存在同一向量寄存器中。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">主体部分（body）:</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 用于表示活跃元素或非活跃元素的集合，即在预启动元素之后但在尾部元素之前。</font></li></ul></li></ul></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727172020114-02341d50-503a-4279-8dc7-d511c51eca21.png"></li><li>这两个位分别在执行矢量指令的过程中修改了目标尾部元素和目标非活动掩码元素的行为。</li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727242781854-a91b42f8-0630-41ab-b281-6077c2613cfd.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对尾部元素的mask行为将被视为tail-agnostic, 无论vta如何配置.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">tail-agnostic: 尾部、</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">inactive </font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">元素可以保持不变 也可全置为1，可以不用管</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">undisturbed：尾部、</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">inactive </font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">元素要保持和之前 一致</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">agnostic策略实际上是为了兼容带有向量寄存器重命名的机器设计的. 如果只有undisturbed策略, 那么在寄存器重命名的时候就需要将旧的物理目的寄存器的内容复制到新的物理目的寄存器. 而设置为agnostic之后就可以忽略掉这部分无效的内容.</font></li><li><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">对于超标量的流水线，会采用寄存器重命名的方式，来避免WAW以及WAR这两类hazard。那程序的逻辑寄存器会映射到物理寄存器，映射后的对应关系会更新到重命名映射表中。那对于undisturbed策略，需要目的寄存器相应的元素保持原来的值。那么在用新的物理寄存器重命名时，还需要根据重命名映射表，查到原有的映射关系，再把这部分元素的值先读出来，写到重命名后的对应元素位置。这种方式对于压根儿不关心尾部元素集合或者被屏蔽元素集合的值的后续操作，就既降低了性能，又增加了不必要的功耗。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对于普通的in-order流水线，可以采用这种undisturbed的策略。对于超标量的流水线，使用agnostic策略就显得更加明智。</font></li></ul><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">ta # Tail agnostic tu # Tail undisturbed ma # Mask agnostic mu # Mask undisturbed vsetvli t0, a0, e32, m4, ta, ma # Tail agnostic, mask agnostic vsetvli t0, a0, e32, m4, tu, ma # Tail undisturbed, mask agnostic vsetvli t0, a0, e32, m4, ta, mu # Tail agnostic, mask undisturbed vsetvli t0, a0, e32, m4, tu, mu # Tail undisturbed, mask undisturbed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Vector-Type-Illegal-vill"><a href="#Vector-Type-Illegal-vill" class="headerlink" title="Vector Type Illegal vill"></a><font style="color:rgb(0,0,0);">Vector Type Illegal vill</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">标志之前的一次vsetvli指令下发了一次不支持的值</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">当尝试执行一条vill位=1的指令时, 将会抛出非法指令异常</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vill=1时, vtype的其他部分需要被置为0</font></li></ul><h3 id="Vector-Length-Register-vl"><a href="#Vector-Length-Register-vl" class="headerlink" title="Vector Length Register, vl"></a><font style="color:rgb(29, 33, 41);">Vector Length Register, vl</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">只能通过vset{i}vl{i}指令赋值</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">定义了需一条向量指令更新的向量元素个数</font></li></ul><h3 id="Vector-Byte-Length-vlenb"><a href="#Vector-Byte-Length-vlenb" class="headerlink" title="Vector Byte Length, vlenb"></a><font style="color:rgb(29, 33, 41);">Vector Byte Length, vlenb</font></h3><ul><li><font style="color:rgb(29, 33, 41);">vlenb = VLEN/8</font></li><li><font style="color:rgb(29, 33, 41);">该寄存器是给一些需要将VLEN以byte计数的场景，否则还需要手动计算byte数</font></li></ul><h3 id="Vector-Start-Index-CSR-vstart"><a href="#Vector-Start-Index-CSR-vstart" class="headerlink" title="Vector Start Index CSR, vstart"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Start Index CSR, vstart</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">定义了一条向量指令执行时的第一个元素在向量中的索引号</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">一条向量指令结束时会将vstart归零</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vstart之前的向量值将保持undisturbed</font></strong></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果一条向量指令引发了非法异常，则不会修改vstart</font></strong></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vstart可以被非特权等级的代码修改， 但是非0的vstart可能使得向量指令运行变慢，所以不应该被应用程序修改</font></strong></li></ul><h3 id="Vector-Fixed-Point-Rounding-Mode-Register-vxrm"><a href="#Vector-Fixed-Point-Rounding-Mode-Register-vxrm" class="headerlink" title="Vector Fixed-Point Rounding Mode Register , vxrm"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Fixed-Point Rounding Mode Register , vxrm</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vxrm[1:0]为可读可写寄存器，该寄存器不仅有独立的寄存器地址，并且在vcsr寄存器中也有对应的域。该寄存器控制</font><strong><font style="color:#D22D8D;background-color:rgb(247, 248, 250);">定点舍入</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">模式，一共四种模式，分别是round-to-nearest-up（rnu）、round-to-nearest-even(rne)、round-down(rdn)、round-to-odd(rod)。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vxrm[1:0]寄存器通过单条csrwi指令写入值。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">假如源操作数是v，有低d bit数据要被截掉，那么做完rounding-mode之后的最终结果应该是(v&gt;&gt;d)+r，r就是根据不同的rounding mode得到的增量值。<br></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">rnu：向距离近的方向进行舍入，当距离与两边都相等时，向上舍入。<br></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">rne：向距离近的方向进行舍入，当距离与两边都相等时，向偶数方向舍入。<br></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">rdn：向下舍入，直接取移位后的值。<br></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">rod：舍入到奇数值方向。<br></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">其中，v[d-1]表示权重位。当v[d-1]=0，表示距离舍的方向更近；当v[d-1]=1且v[d-2:0]=0时，距离舍入两个方向距离均相等；当v[d-1]=1，且v[d-2:0] != 0时，表示距离入的方向更近</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727244248320-62d070d1-a473-467a-88c3-1e8c8a0aa83a.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font></p><h3 id="Vector-Fixed-Point-Saturation-Flag-vxsat"><a href="#Vector-Fixed-Point-Saturation-Flag-vxsat" class="headerlink" title="Vector Fixed-Point Saturation Flag vxsat"></a><font style="color:rgb(0,0,0);">Vector Fixed-Point Saturation Flag vxsat</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vxsat为可读可写寄存器，该寄存器不仅有独立的寄存器地址，并且在vcsr寄存器中也有对应的域。该寄存器有效表示输出结果做了饱和截位以适应目的寄存器格式。比如当运算发生正溢出时，保留结果为能取到的最大正值；当运算发生负溢出时，保留结果为负数最小值。</font></li></ul><h3 id="Vector-Control-and-Status-Register-vcsr"><a href="#Vector-Control-and-Status-Register-vcsr" class="headerlink" title="Vector Control and Status Register, vcsr"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Control and Status Register, vcsr</font></h3><p>包含以上两个寄存器：</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727244363455-f68182a2-cbc8-483b-940e-72ae0a551394.png"></p><h3 id="State-of-Vector-Extension-at-Reset"><a href="#State-of-Vector-Extension-at-Reset" class="headerlink" title="State of Vector Extension at Reset"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">State of Vector Extension at Reset</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">推荐的做法是在reset时， vtype.vill=1， 其余位为0， 且vl=0</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">大部分向量单元需要一个初始的vset{i}vl{i}, 来复位vstart. vxrm和vxsat也需要在使用前复位</font></li></ul><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">  </font><h2 id="Mapping-of-Vector-Elements-to-Vector-Register-State"><a href="#Mapping-of-Vector-Elements-to-Vector-Register-State" class="headerlink" title="Mapping of Vector Elements to Vector Register State"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Mapping of Vector Elements to Vector Register State</font></h2><p>这块前半部分在前面介绍过了，现在详细举例子</p><h3 id="Mapping-for-LMUL-x3D-1"><a href="#Mapping-for-LMUL-x3D-1" class="headerlink" title="Mapping for LMUL = 1"></a><font style="color:rgb(0,0,0);">Mapping for LMUL = 1</font></h3><p>lmul=1, 一个group只有一个寄存器</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727244813641-ff98548f-7bf0-467d-841d-9c1123f4a53d.png"></p><h3 id="Mapping-for-LMUL-lt-1"><a href="#Mapping-for-LMUL-lt-1" class="headerlink" title="Mapping for LMUL < 1"></a><font style="color:rgb(0,0,0);">Mapping for LMUL &lt; 1</font></h3><p>只有LMUL*VLEN部分有效，其他部分是tail,需要vta设置</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727245187639-3d54ca2f-f04e-4804-b6d4-6a2afbb2c44c.png"></p><h3 id="Mapping-for-LMUL-gt-1"><a href="#Mapping-for-LMUL-gt-1" class="headerlink" title="Mapping for LMUL > 1"></a><font style="color:rgb(0,0,0);">Mapping for LMUL &gt; 1</font></h3><p>多个寄存器grouped</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727245238137-bd8c0d3e-3f55-4169-b347-c71e6112d8c6.png"></p><h3 id="Mapping-across-Mixed-Width-Operations"><a href="#Mapping-across-Mixed-Width-Operations" class="headerlink" title="Mapping across Mixed-Width Operations"></a><font style="color:rgb(0,0,0);">Mapping across Mixed-Width Operations</font></h3><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量指令集可以支持元素混合位宽的操作</font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">通过动态修改vtype，应用程序可以操作多个精度不同的向量并且保持SEW/LMUL（元素总数）不变：</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">增加lmul的同时也得增加vtype，保证一个向量中元素个数不变</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727245482989-189af398-8239-4f71-b293-88b36609f505.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果要保持元素个数不变，只需要选定表格的一列，让LMUL随着SEW的变大成倍变大即可。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727245551518-29d4ed2c-2f59-441f-8f72-931f9d7228b6.png"></p><h3 id="Mask-Register-Layout"><a href="#Mask-Register-Layout" class="headerlink" title="Mask Register Layout"></a><font style="color:rgb(0,0,0);">Mask Register Layout</font></h3><p><font style="color:rgb(42, 43, 46);">无论SEW和LMUL如何，一个矢量掩码只占用一个矢量寄存器。</font></p><p><font style="color:rgb(42, 43, 46);">每个</font><strong><font style="color:#DF2A3F;">元素</font></strong><font style="color:rgb(42, 43, 46);">在一个掩码向量寄存器中分配一个掩码位。</font><strong><font style="color:#DF2A3F;">元素i的掩码位位于掩码寄存器的第i位，独立于SEW或LMUL。</font></strong></p><h2 id="Vector-Instruction-Formats"><a href="#Vector-Instruction-Formats" class="headerlink" title="Vector Instruction Formats"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Instruction Formats</font></h2><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量指令格式会单独扩展一个格式：OP-V</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量的load和store指令沿用LOAD-FP和STORE-FP:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727245899442-3aebf4a8-fb85-437f-bbf6-954f0ca9b01f.png"></p><p>运算指令格式</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727245968390-63320747-1e2b-43ff-8bc0-775327ac026a.png"></p><p>vd/rd意思是某些指令用rd</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729147653776-5dd85204-bf36-4e24-937d-207b3810b559.png"></p><p>opfvv代表浮点指令op.vv</p><p>向量配置指令</p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727246002069-9c085278-829c-4872-99c7-92c5e9423a1d.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1727246012020-6a7df375-9762-4452-a2d3-3f976891cd09.png"></p><ul><li><strong><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">向量指令可以接收标量或者向量操作数，生成标量或者向量操作数</font></strong></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">大多数向量指令可以通过mask实现条件或者非条件执行</font></li></ul><h3 id="Scalar-Operands"><a href="#Scalar-Operands" class="headerlink" title="Scalar Operands"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Scalar Operands</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">标量操作数可以是立即数，整数寄存器（x），浮点寄存器(f)或者一个vector寄存器的第0个元素。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">标量结果可以写入整数寄存器（x），浮点寄存器(f)或者一个vector寄存器的第0个元素。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">rv建议不要复用浮点寄存器和向量寄存器，降低了向量寄存器的压力，简化标量浮点设计</font></li></ul><h3 id="Vector-Operands"><a href="#Vector-Operands" class="headerlink" title="Vector Operands"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Operands</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">每个向量操作数都有一个effective element width (EEW), 一般情况下EEW=SEW.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">每个向量操作数都有一个effectiveLMUL (EMUL), 一般情况下EMUL=LMUL.</font></li><li><strong><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">某些向量指令的源和目的向量具有相同的元素个数，但是元素位宽不同。此时EEW和EMUL就不等于SEW和LMUL, 但是EEW/EMUL = SEW/LMUL，这样才能保证元素个数相同。</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">例如：大部分拓宽的向量算数指令的源操作向量组EEW=SEW, EMUL=LMUL, 但是目的操作向量组的EEW=2<em>SEW, EMUL=2</em>LMUL</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量操作数或者结果操作数可能占用一个或多个向量寄存器（取决于EMUL), 如果占用多个，默认占用编号值较低的向量寄存器。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">以下情况可以将目的向量寄存器组直接用源向量寄存器组覆盖：</font><ol><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">目的EEW=源EEW</font></li><li><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">目的EEW&lt;源EEW, </font><strong><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">并且发生覆盖的源向量是源向量寄存器组中的最低编号的向量寄存器</font></strong><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">。例如：LMUL=1, vnsrl.wi v0, v0, 3 is legal, but a destination of v1 is not</font></li></ol></li></ul><p>注：这个指令是将v0右移3位，存入v0</p><pre><code>3. &lt;font style="color:#DF2A3F;background-color:rgb(247, 248, 250);"&gt;目的EEW&gt;源EEW, 源EMUL至少是1， &lt;/font&gt;**&lt;font style="color:#DF2A3F;background-color:rgb(247, 248, 250);"&gt;并且发生覆盖的是目的向量寄存器组中的最高编号的向量寄存器&lt;/font&gt;**&lt;font style="color:#DF2A3F;background-color:rgb(247, 248, 250);"&gt;。例如：LMUL=8, vzext.vf4 v0, v6 is legal, but a source of v0, v2, or v4 is not&lt;/font&gt;</code></pre><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量指令最多可以用8个向量寄存器，也就是是说EMUL&lt;=8. 如果一条向量指令需要超过8个向量寄存器，则会引发非法指令异常（实际上这种情况的指令编码空间是被保留的，目前不支持，可以被扩展）。 </font><strong><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">例如，当 LMUL = 8 时，尝试进行加宽操作产生加宽的向量寄存器组将引发非法指令异常，因为这意味着 EMUL = 16。（2的幂次）</font></strong></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">拓宽（Widened)标量值时，放在向量寄存器的第一个元素，EMUL=1.</font></li></ul><h3 id="Vector-Masking"><a href="#Vector-Masking" class="headerlink" title=" Vector Masking"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> Vector Masking</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">许多向量指令都支持掩码。 </font><strong><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">被掩码（非活跃）的元素操作不产生异常</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">。 根据 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vtype&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 中的 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vma&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 位的设置，用_掩码不受干扰或掩码不可知_（mask-undisturbed or mask-agnostic）这两种策略来处理与掩码元素相对应的目标向量寄存器元素。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">在掩码向量指令中，由向量寄存器 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;v0&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 保存用于控制掩码向量指令执行的掩码值。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">以后的向量扩展可能会提供更长的指令编码，并为完整的掩码寄存器说明符提供空间。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">只有当目标向量寄存器写入掩码值（如，comparisons）或归约的标量结果时，用于掩码向量指令的目标向量寄存器组才可以与源掩码寄存器（ v0 ）重叠。 否则，将引发非法指令异常。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">其他向量寄存器可用于保存有效的掩码值，并且提供掩码向量逻辑运算以执行谓词计算。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">当使用比较结果写入掩码时，当前向量长度结束后的目标掩码位将根据 vtype中的 vta 位设置的尾部策略（ undisturbed or agnostic ）处理 </font></li></ul><h3 id="Mask-Encoding"><a href="#Mask-Encoding" class="headerlink" title="Mask Encoding"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font><font style="color:rgb(0,0,0);">Mask Encoding</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></h3><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">掩码编码在指令( inst[25] )中的 vm 字段中，占一位。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728457110883-7b672720-79a8-4a83-bb36-02ea55e8683a.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量掩码在汇编代码中表示为另一个向量操作数，用 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;.t&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 表示当 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;v0.mask[i]&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 为 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;1&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 时是否发生操作。如果未指定掩码操作数，则假定为未掩码的向量执行（ </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vm = 1&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> ）。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728457197569-04a9561c-259c-4166-900d-9810be708598.png"></p><h3 id="Prestart-Active-Inactive-Body-and-Tail-Element-Denitions"><a href="#Prestart-Active-Inactive-Body-and-Tail-Element-Denitions" class="headerlink" title="Prestart, Active, Inactive, Body, and Tail Element Denitions"></a><font style="color:rgb(0,0,0);">Prestart, Active, Inactive, Body, and Tail Element Denitions</font></h3><h4 id="元素分类"><a href="#元素分类" class="headerlink" title="元素分类"></a>元素分类</h4><ol><li><strong>预启动元素（Prestart Elements）</strong>：<ul><li>索引小于 <code>vstart</code> 的元素。</li><li>不会引发异常，也不会更新目标向量寄存器。</li></ul></li><li><strong>主体元素（Body Elements）</strong>：<ul><li>索引在 <code>vstart</code> 和当前向量长度 <code>vl</code> 之间。</li><li>分为两部分：<ul><li><strong>活跃元素（Active Elements）</strong>：<ul><li>在主体内且掩码启用的元素。</li><li>可以引发异常，并更新目标向量寄存器。</li></ul></li><li><strong>非活跃元素（Inactive Elements）</strong>：<ul><li>在主体内但掩码禁用的元素。</li><li>不引发异常，除非指定了掩码无关（<code>vtype.vma=1</code>），此时可能被覆盖为 1。</li></ul></li></ul></li></ul></li><li><strong>尾部元素（Tail Elements）</strong>：</li></ol><ul><li>索引超出当前向量长度 <code>vl</code> 的元素。</li><li>不引发异常，且默认情况下不会更新目标向量寄存器，除非指定了尾部无关（`vtype.vta=1），此时可能被覆盖为 1 或指令的结果（除了掩码加载指令）。</li><li>当 <code>LMUL &lt; 1</code> 时，尾部包括超过 <code>VLMAX</code> 的元素。</li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728457666990-b1477460-0b8b-4cfd-9166-1f45280c524e.png"></li></ul><h4 id="特别说明"><a href="#特别说明" class="headerlink" title="特别说明"></a>特别说明</h4><ul><li>当 <code>vstart ≥ vl</code> 时，没有主体元素，也不会更新任何目标向量寄存器，包括尾部元素。</li><li>当 <code>vl=0</code> 时，无元素会更新目标寄存器，无论 <code>vstart</code> 的值。</li><li>写入 <code>x</code> 寄存器或 <code>f</code> 寄存器的指令即使在 <code>vstart ≥ vl</code> 或 <code>vl=0</code> 时仍然执行。</li><li>某些指令如 <code>vslidedown</code> 和 <code>vrgather</code> 可能会读取超出 <code>vl</code> 或 <code>VLMAX</code> 的索引。在源向量寄存器中，索引超过 <code>VLMAX</code> 时通常返回值 0。</li></ul><h2 id="Configuration-Setting-Instructions-vsetvli-x2F-vsetivli-x2F-vsetvl"><a href="#Configuration-Setting-Instructions-vsetvli-x2F-vsetivli-x2F-vsetvl" class="headerlink" title="Configuration-Setting Instructions (vsetvli/vsetivli/vsetvl)"></a><font style="color:rgb(0,0,0);">Configuration-Setting Instructions (vsetvli/vsetivli/vsetvl)</font></h2><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Application vector length (AVL)</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">处理大量元素的一种常见方法是“stripmining”，在这种方法中，每次循环迭代都会处理一定数量的元素，迭代会一直持续到所有元素都被处理完毕。RISC-V向量规范为这种方法提供了直接、可移植的支持。应用程序将待处理的元素总数（应用程序向量长度或AVL）指定为vl的候选值，硬件则通过一个通用寄存器响应，根据微架构实现和vtype设置，提供每次迭代中硬件将处理的（通常更小的）元素数量（存储在vl中）。一个简单的循环结构，如stripmining示例和SEW的更改所示，描绘了代码如何轻松地跟踪剩余的元素数量和硬件每次迭代处理的数量。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">应用程序可能会处理一个包含大量元素的vector, 硬件需要将其分为多个loop才能做完. 这里应用程序给出的真实的vector 元素个数就是AVL, 硬件每次处理的实际元素个数就是vl寄存器.</font></li><li><strong><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">这条指令是</font>****<font style="color:#DF2A3F;">根据应用程序需要快速配置vl和vtype中的值。vset{i}vl{i}指令根据其参数设置vtype和vl CSR，并将vl的新值写入rd。</font></strong></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vsetvli 指令根据其参数设置 vtype 和 vl CSRs，并将 vl 的新值写入 rd。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728464412862-a3859437-530b-4d69-94b3-a7dfcbd687ba.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728464418622-92c4c665-6381-455f-af2a-b9706b0bf685.png"></p><h3 id="vtype-encoding"><a href="#vtype-encoding" class="headerlink" title="vtype encoding"></a><font style="color:rgb(0,0,0);">vtype encoding</font></h3><p> <img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728464444808-266ebdc0-c598-42d8-8a41-4f89fa4f8cea.png"><br><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728464834491-d489af20-f0e3-408c-a514-457219c9b28c.png"></p><p><font style="color:rgb(77, 77, 77);">新的vtype设置被编码在vsetvli和vsetivli的立即字段中，以及vsetvl的rs2寄存器中。</font></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728464921149-619c5f5c-d170-4524-bc76-83f84a490307.png"></p><p>每条指令设置sew和lmul</p><ul><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vsetvl</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">指令与</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vsetvli</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">稍有不同, vsetvl从rs2寄存器拿到vtype值,</font><strong><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">而不是直接给出</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">. 这可以用来进行上下文恢复.</font></li></ul><h3 id="AVL-encoding"><a href="#AVL-encoding" class="headerlink" title="AVL encoding"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">AVL encoding</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">根据setivli指令的rd和rs寄存器的情况, 有以下三种模式:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728465150247-3e58bab3-ee23-470e-85b4-79836c7f5aea.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font></p><ul><li>当rs1不是x0时，AVL是存储在由rs1指定的x寄存器中的无符号整数，新的vl值也将写入由rd指定的x寄存器。</li><li>当rs1=x0但rd!=x0时，使用最大的无符号整数值(~0)作为AVL，并将结果VLMAX写入vl以及由rd指定的x寄存器。</li><li>当rs1=x0且rd=x0时，指令的操作就像是将vl中的当前向量长度用作AVL，并将结果值写入vl，但不写入目标寄存器。这种形式只能在VLMAX（因此vl）实际上没有因新的SEW/LMUL比率而改变时使用。如果使用新的SEW/LMUL比率会导致VLMAX发生变化，则保留该指令的使用。在这种情况下，实现可能会设置vill。</li><li>这种指令的最后一种形式允许在保持当前vl的同时更改vtype寄存器，前提是VLMAX没有减少。这种设计是为了确保vl始终为当前的vtype设置持有合法值。当前的vl值可以从vl CSR中读取。如果新的SEW/LMUL比率导致VLMAX缩小，则此指令可能会减少vl值，因此这种情况已被保留，因为这并不清楚这是一个普遍有用的操作，而且实现可以假设此指令不会更改vl以优化其微架构。</li><li>对于vsetiv li指令，AVL在rs1字段中编码为5位零扩展立即数（0-31）。</li></ul><p><font style="color:#DF2A3F;">请注意，vsetiv li的AVL编码与常规CSR立即数值的编码相同。当向量寄存器内部向量的维度较小且已知时，vsetiv li指令可以提供更紧凑的代码，在这种情况下，没有stripmining开销。</font></p><h3 id="Constraints-on-Setting-vl"><a href="#Constraints-on-Setting-vl" class="headerlink" title="Constraints on Setting vl"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Constraints on Setting vl</font></h3><p><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vset{i}vl{i}&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">指令首先根据 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vtype&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 参数，设定 VLMAX ，然后设置</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">服从以下约束：</font></p><ol><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;AVL ≤ VLMAX&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> ，则 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl = AVL&lt;/font&gt;</code></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;AVL &lt; (2 * VLMAX)&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">，则</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;ceil(AVL / 2) ≤ vl ≤ VLMAX&lt;/font&gt;</code></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;AVL ≥ (2 * VLMAX)&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">，则 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl = VLMAX&lt;/font&gt;</code></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果输入相同的 AVL 和 VLMAX 值，则任何实现中，</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;v1&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 都是确定的</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">满足之前提及的规则：</font><ol><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;AVL = 0&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">，则 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl = 0&lt;/font&gt;</code></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;AVL &gt; 0&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">，</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl &gt; 0&lt;/font&gt;</code></li><li><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl ≤ VLMAX&lt;/font&gt;</code></li><li><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl ≤ AVL&lt;/font&gt;</code></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">从 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 中读取的值（用作 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vsetvl{i}&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 的 AVL 参数时）会在 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 中产生相同的值，前提是所得的 VLMAX 等于读取</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">时的 VLMAX 值。</font></li></ol></li></ol><ul><li><p><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">的设置规则足够严格，可以在寄存器溢出和 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;AVL ≤ VLMAX&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">时上下文交换的情况下保护 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 的行为，但又足够灵活，确保能够提高 AVL&gt; VLMAX 时的向量通道利用率。</font></p></li><li><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">当AVL介于VLMAX和VLMAX*2时， 可以保证vl=AVL的一半（向上取整），通过两次loop实现AVL.</font></p></li></ul><h3 id="Example-of-stripmining-and-changes-to-SEW"><a href="#Example-of-stripmining-and-changes-to-SEW" class="headerlink" title="Example of stripmining and changes to SEW"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Example of stripmining and changes to SEW</font></h3><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">为了在混合宽度操作上提供高吞吐量，可以动态更改 SEW 和 LMUL 的设置。</font><br><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728527966443-fe4bfae8-73fc-445d-aa1b-706bcabd2d81.png"></p><h2 id="Vector-Loads-and-Stores"><a href="#Vector-Loads-and-Stores" class="headerlink" title="Vector Loads and Stores"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Loads and Stores</font></h2><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">带mask的load不会更新非活跃的元素,除非被标记为不可知的(agnostic, vtype.vma=1)</font></li></ul><h3 id="Vector-Load-x2F-Store-Instruction-Encoding"><a href="#Vector-Load-x2F-Store-Instruction-Encoding" class="headerlink" title="Vector Load/Store Instruction Encoding"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Load/Store Instruction Encoding</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量load/store复用标量浮点数的load/store(LOAD-FP/STORE-FP)</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量的加载和存储编码重新利用了标量浮点加载/存储12位立即数字段的一部分，以提供进一步的向量指令编码，其中位25保留了标准向量掩码位:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728529559128-b0dded2b-a678-495a-bceb-376d8beb0625.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量内存操作直接对指令中要静态传输的数据的 EEW 进行编码，从而减少混合宽度操作时，访问内存时 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vtype&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 的改变次数。 索引操作在指令中使用显式 EEW 编码来设置所使用索引的大小，并且用 SEW / LMUL 的值指定数据宽度。</font></li></ul><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><h3 id="Vector-Load-x2F-Store-Addressing-Modes"><a href="#Vector-Load-x2F-Store-Addressing-Modes" class="headerlink" title="Vector Load/Store Addressing Modes"></a><font style="color:rgb(0,0,0);">Vector Load/Store Addressing Modes</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></h3><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">基本向量扩展支持单位跨步（unit-stride），跨步（strided）和索引（indexed）寻址模式。向量加载/存储的基址寄存器和步幅取自GPR </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;x&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 寄存器。</font><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">unit-stride就是向量元素在内存中的排布就是挨个的, 可以直接一个一个拿出来</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">stride是为了按照一个固定间隔取向量元素的方式. 比如在进行两个矩阵相乘A*B, A的一行会跟B的一列做向量乘. A和B在内存中都是按行存储的. A做向量乘时,可以挨个拿出来放到向量寄存器, 而B, 需要按列取出, 所以需要每隔一行元素个数取一个元素, 放到向量寄存器, 才能取出B的一列. 此时就需要用到stride模式了.</font><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">stride模式下, 每次取元素的步长是以byte为最小单位计数的. 步长值存储在rs2表示的寄存器中</font></li></ul></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">indexed模式是最精细的, 可以精确控制向量寄存器中的某个元素从哪里来. 在取每个元素时, 用vs2向量寄存器的值在mem中索引要取出的元素.</font><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">indexed模式下, 存放元素的向量寄存器组的EEW= SEW, EMUL=LMUL.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">存放index(offset)的向量寄存器组vs2对应的EEW在指令中进行了编码. 而EMUL则可以计算出来: EMUL=(EEW/SEW)*LMUL. 其实就是用数据向量的元素个数与index向量的EEW来计算组数.</font></li></ul></li></ul></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量偏移量操作数被视为字节地址偏移量的向量。如果向量偏移量小于 XLEN，则在将它们添加到基本有效地址之前，先将它们加零扩展到XLEN。如果向量偏移量大于 XLEN，则在地址计算中使用最低有效的 XLEN 位。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量寻址模式使用2位</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;mop[1:0]&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 字段进行编码:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728530059913-b5206ad8-caba-4c20-ab59-c1cfadbd0927.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量的索引操作具有两种形式，有序的和无序的。无序的索引(mop!=11)存储操作不保存元素顺序。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对于需要强访存顺序依赖的区域,例如IO, 需要使用ordered indexed 方式才能保证顺序</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">其他的 unit-stride 向量寻址模式在 unit-stride 加载和存储指令编码中分别使用5位</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;lumop&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">和</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;sumop&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">字段编码。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728530151920-5d56331e-fb7b-4854-8c41-120278d789fe.png"></p><ul><li><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;nf[2:0]&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">字段编码每个段（segment）中的字段数。对于常规向量的加载和存储，</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;nf&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">= 0，表示在每个元素位置的向量寄存器组和内存之间移动单个值。</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;nf&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">字段中较大的值用于访问段中的多个连续字段（关于段的描述参见7.8节）。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;nf&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">字段替换了地址偏移量字段中的相同位。偏移量可以用单个标量整数计算代替，而段加载/存储添加了更强大的原语，可以将项目移入和移出内存。</font></li><li><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;nf[2:0]&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">字段还对整个向量寄存器的数量进行编码，以针对整个向量寄存器的加载/存储指令进行传输。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">后面会介绍nf的具体内容。</font></li></ul><h4 id="Vector-Load-x2F-Store-Width-Encoding"><a href="#Vector-Load-x2F-Store-Width-Encoding" class="headerlink" title="Vector Load/Store Width Encoding"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Load/Store Width Encoding</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量的加载和存储直接将 EEW 编码在指令中。EMUL 的计算公式为：EMUL =（EEW / SEW）* LMUL 。如果 EMUL 超出范围（ EMUL&gt; 8 或 EMUL &lt;1/8 ），则会触发非法指令异常。向量寄存器组必须存在能指明所选 EMUL 是否合法的寄存器，否则会触发非法指令异常。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728530892015-31fce98a-24d8-4ab3-96e1-06390715a3e3.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Mem bits（内存位）是内存中访问的每个元素的大小。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Reg bits（寄存器位）是寄存器中访问的每个元素的大小。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">index bits (索引位) 是索引向量中每个元素的大小。</font></li><li><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;mew&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">位（</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;inst[28]&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">）扩展了128位及超过128位的内存大小。</font></li></ul><h4 id="Vector-Unit-Stride-Instructions"><a href="#Vector-Unit-Stride-Instructions" class="headerlink" title="Vector Unit-Stride Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Unit-Stride Instructions</font></h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728530927582-6d45976e-274f-4493-a7bd-14e7bc08ac92.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">此外， 额外的unit-stride mask 访存指令需要被用来将mask值导入或导出。这个操作与unmasked byte load/store类似（EEW=8). 不同之处是等效向量长度evl=ceil(vl/8) ， 也就是说没个bit管一个被masked元素. 目的向量寄存器中的剩余部分是tail-agnostic的</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">下面是mask load/store指令:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728530951420-e8d56c16-c92c-40de-9a35-fe1584726b23.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">实际上vlm.v与width=0的vle8.v指令相同， 区别是lumop和sumop不同。</font></li></ul><h4 id="Vector-Strided-Instructions"><a href="#Vector-Strided-Instructions" class="headerlink" title="Vector Strided Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Strided Instructions</font></h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728530981618-e9858143-4fe5-4c7a-a098-bcca6b39c5d5.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持负数stride和0-stride</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">stride指令中元素的访问彼此之间无序</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">当rs2=x0时，允许但不要求实现执行比活动元素数量更少的内存操作，并且可以在同一静态指令的不同动态执行中执行不同数量的内存操作。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果rs2!=x0, 但是rs2的值=0, 则每个active的元素都必须进行一次访问, 不过顺序可以不固定.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果确定每个元素都执行内存访问，编译器必须注意当立即步长为0时，不要对rs2使用x0形式。</font></li></ul><h4 id="Vector-Indexed-Instructions"><a href="#Vector-Indexed-Instructions" class="headerlink" title="Vector Indexed Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Indexed Instructions</font></h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728531358876-a0bb2f88-4aae-42d5-8590-2e8baa49ecf7.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">上述汇编中ei8,ei16等表示8,16都是表示index的位宽,而不是data的. data的位宽由SEW指定.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">带u的就是unordered, 带o的是ordered.</font></li></ul><h4 id="Unit-stride-Fault-Only-First-Loads"><a href="#Unit-stride-Fault-Only-First-Loads" class="headerlink" title="Unit-stride Fault-Only-First Loads"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Unit-stride Fault-Only-First Loads</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Unit-stride Fault-Only-First Loads是用来对那些退出条件依赖数据的循环进行向量化(例如while循环)</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">一般情况下这些指令跟普通的unit访存指令相当, 但是会在向量的第一个元素触发了异常之后执行陷入操作</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果其他元素（非第一个元素）触发了异常，那么对应的陷入将不发生， 向量长度vl减少为这个元素的index大小。且不会更新向量寄存器中发生异常的元素及其之后的元素。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728531405872-33b85010-5d94-4d0f-b04f-29ab3f218e59.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728531412583-b8965c8a-6ec9-4c8a-8a47-d0e3b7f13ff4.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">即使未引发异常，操作中也可以处理少于</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">个元素并相应地减少</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">，但是如果</font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vstart&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">= 0和 </font><code>&lt;font style="color:rgb(21, 167, 167);background-color:rgb(247, 248, 250);"&gt;vl&lt;/font&gt;</code><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">&gt; 0，则必须处理至少一个元素。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">当仅故障优先指令由于中断而发生陷阱时，实现不应减少 vl 而应设置 vstart 值。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">当仅故障第一指令将在第一个之后触发元素上的调试数据观察点陷阱时，实现不应减少 vl 而是应触发调试陷阱，否则事件可能会丢失</font></li></ul><h4 id="Vector-Load-x2F-Store-Segment-Instructions"><a href="#Vector-Load-x2F-Store-Segment-Instructions" class="headerlink" title="Vector Load/Store Segment Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Load/Store Segment Instructions</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">segment指令将多个连续内存区域与若干连续的向量寄存器进行数据搬运</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">“段”反映了移动的项目是具有同质元素的子数组。这些操作可用于在内存和寄存器之间转置数组，并且可以通过将结构中的每个字段解包到单独的向量寄存器中来支持对“结构数组”数据类型的操作。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">nf是3bit的整数, 表示段中的Nfields-1.</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728538596112-6f34d2e7-e3dc-4139-8f5f-7ac42d5bad58.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">EMUL 设置必须使 EMUL * NFIELDS ≤ 8。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意乘积 EMUL * NFIELDS 表示将被分段加载或存储指令触及的底层向量寄存器的数量。这个约束使得这个总数不大于架构寄存器文件的 1/4，并且与 EMUL=8 的常规操作相同。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">每个字段将保存在连续编号的向量寄存器组中。当 EMUL&gt;1 时，每个字段将占用多个连续编号的向量寄存器中保存的向量寄存器组，并且每个字段的向量寄存器组必须遵循通常的向量寄存器对齐约束（例如，当 EMUL=2 和 NFIELDS=4 时，每个域的向量寄存器组必须从偶数向量寄存器开始，但不必从 8 个向量寄存器号的倍数开始）。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果段加载或存储访问的向量寄存器编号将增加超过 31，则保留指令编码。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意此约束是为了帮助实现与未来可能更长的指令编码的前向兼容性，该指令编码具有更多可寻址向量寄存器。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vl 寄存器给出要移动的段数，它等于传送到每个向量寄存器组的元素数。mask也应用于整个段的级别。 对于段加载和存储，用于访问每个段内的字段的各个内存访问相对于彼此是无序的，即使对于有序索引段加载和存储也是如此。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vstart 值以整个段为单位。如果在访问段期间发生陷阱，则在采取陷阱之前是否执行故障段的访问子集是由实现定义的。</font></li></ul><h4 id="Vector-Unit-Stride-Segment-Loads-and-Stores"><a href="#Vector-Unit-Stride-Segment-Loads-and-Stores" class="headerlink" title="Vector Unit-Stride Segment Loads and Stores"></a><font style="color:rgb(0,0,0);">Vector Unit-Stride Segment Loads and Stores</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Unit-Stride Segment Loads and Stores将打包的连续段移动到多个目标向量寄存器组中。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">可以用于一些结构体: RGB, complex数据等的向量存取</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">在段包含具有不同大小字段的结构的情况下，软件稍后可以在段加载将数据带入向量寄存器后使用附加指令解压缩单个结构字段。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vlseg/vsseg 分别用于单位跨度段的加载和存储。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728538689591-8d66b6f1-3ff1-455e-8394-20352b588e04.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对于加载（ loads），vd 寄存器将保存从段加载的第一个字段。对于存储，读取 vs3 寄存器以提供要存储到每个段的第一个字段。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728538709051-d12d286b-97e4-4236-89aa-83b30acf543c.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">上图中, 第一个是加载RGB三个像素点组成的segment到向量寄存器的例子. 其中nfields=3, eew=8.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">也有单元步长指令的仅故障优先版本:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728538729471-22f7080e-8f5d-4c09-baa7-d3b429a527de.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对于仅故障的第一个段加载，如果在访问段的过程中检测到异常，则无论元素索引是否为零，是否加载段的子集都是实现定义的。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">这些指令可能会在报告陷阱的点或修剪向量长度的点之后覆盖目标向量寄存器组元素。</font></li></ul><h4 id="Vector-Strided-Segment-Loads-and-Stores"><a href="#Vector-Strided-Segment-Loads-and-Stores" class="headerlink" title="Vector Strided Segment Loads and Stores"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Strided Segment Loads and Stores</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">每个segment之间间隔byte-stride时用这种指令</font></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728539353305-ba5532c0-d342-428b-8f3c-7089fc13b19e.png"></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">例如上面第一个例子, x5是基地址, x6就是stride. 因为有3个seg, 所以会占用3个vector group. 这里需要注意的是, 3个segment实际上在内存中应该是一个结构体, 所以每个segment在内存上是连续的, 所以这里三个seg的address是连续的, 但是会放在三个不同的vector reg group</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对一个segment中的fields的访问顺序是随意的.</font></li></ul><h4 id="Vector-Indexed-Segment-Loads-and-Stores"><a href="#Vector-Indexed-Segment-Loads-and-Stores" class="headerlink" title=" Vector Indexed Segment Loads and Stores"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> Vector Indexed Segment Loads and Stores</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">indexed访存指令的segment版本.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">同样包含ordered和unordered. 但是即使是ordered, 对一个segment中的不同field的访问也是无序的</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">同样的, indexed访存指令中, 显式给出的是index的EEW, 例如ei32, 表示index是32bit. data向量的EEW=SEW, EMUL = LMUL</font></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728539354033-eefde5b1-1d4b-4d37-b719-767418704510.png"></li></ul><h4 id="Vector-Load-x2F-Store-Whole-Register-Instructions"><a href="#Vector-Load-x2F-Store-Whole-Register-Instructions" class="headerlink" title="Vector Load/Store Whole Register Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Load/Store Whole Register Instructions</font></h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728539353592-17887765-c810-45d9-b852-877eaffea5ac.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">这类load/store指令会操作全部的向量寄存器组</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">这类指令可以在向量寄存器当前内容的长度未知时使用， 或者某些修改vl和vtype代价较高的场景。例如：</font><ol><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">compiler register spills（当寄存器使用超出物理寄存器个数，会将一部分寄存器搬到主存中，为新变量腾出寄存器空间）</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">用向量寄存器传值的向量函数</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">中断处理</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">操作系统的上下文切换</font></li></ol></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">load执行包含mew字段，表示EEW, width字段的含义与[[#7.3. Vector Load/Store Width Encoding]] 中所述相同。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 因为寄存器中字节布局与内存中字节布局相同，所以无论EEW如何，相同的数据都会写入目标寄存器组。因此，仅提供 EEW=8 变体就足够了。提供了完整的 EEW 变体集，以便编码的 EEW 可用作指示目标寄存器组接下来将使用此 EEW 访问的提示，这有助于在内部重新排列数据的实现。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量整个寄存器存储指令的编码类似于 EEW=8 的元素的未屏蔽单元步长存储。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">nf 字段使用 NFIELDS 编码对要加载和存储的向量寄存器数量进行编码（图 NFIELDS 编码）。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">寄存器的编码数量必须是 2 的幂，并且向量寄存器数量必须与向量寄存器组对齐，否则保留指令编码。</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">NFIELDS 表示要传输的向量寄存器的数量</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">，在基数之后依次编号。仅支持 NFIELDS 值 1、2、4、8，保留其他值。当传输多个寄存器时，编号最小的向量寄存器保存在编号最小的内存地址中，并且连续的向量寄存器编号连续放置在内存中。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">无论 vtype 和 vl 中的当前设置如何，指令都以有效向量长度 evl=NFIELDS*VLEN/EEW 运行。如果 vstart ≥ vl , 则还是可能会写入元素（之前的指令中如果vstart≥ vl ，不会写入任何元素）。相反，如果 vstart ≥ evl 则不写入任何元素。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">这些指令的操作类似于未屏蔽的单位步长加载和存储指令，基地址在由 rs1 指定的标量 x 寄存器中传递。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果基地址未自然对齐到以字节为单位的编码 EEW 的大小 (EEW/8) 或以字节为单位的实现的最小支持 SEW 大小(SEWmin/8)中的较大者，则允许实现在整个寄存器加载和存储时引发</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">未对齐的地址异常</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 允许基于与编码的 EEW 不对齐而引发未对齐异常可简化这些指令的实现。一些子集实现可能不支持较小的 SEW 宽度，因此即使大于编码的 EEW，也允许报告支持的最小 SEW 的未对齐异常。例如，一个极端的非标准实现可能有 SEWmin&gt;XLEN。软件环境可以强制要求最低对齐要求来支持 ABI。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">下面是实际的伪代码示例：</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728539354005-89039203-8d2e-4700-bf08-776238e56fc8.png"></p><ul><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 对于不支持的 EEW 值，实现应该在 vl<nf>r指令上引发非法指令异常。</nf></font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">我们已经考虑添加一个完整的寄存器掩码加载指令（</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vl1rm.v</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">），但决定从初始扩展中省略。主要目的是通知微架构数据将用作掩码。使用以下代码序列可以达到相同的效果，其成本最多为四条指令。其中，第一个可能会被删除，因为 vl 通常已经在一个标量寄存器中，如果后面的向量指令需要一个新的 SEW/LMUL，最后一个可能已经存在。因此，在最好的情况下，只需要两条指令（其中只有一条执行向量运算）来合成专用指令的效果：</font><ul><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728539353978-a73ad7d8-fe01-4abb-bb4c-808df2f38e2e.png"></li></ul></li></ul><h2 id="Vector-Memory-Alignment-Constraints"><a href="#Vector-Memory-Alignment-Constraints" class="headerlink" title="Vector Memory Alignment Constraints"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Memory Alignment Constraints</font></h2><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果向量内存指令访问的元素与元素的大小不自然对齐，则该元素被成功传输或在该元素上引发地址未对齐异常。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对未对齐的向量内存访问的支持与对未对齐的标量内存访问的支持在一个具体实现中是独立开来的。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 一个实现可能没有、有一个或两个标量和向量内存访问支持硬件中的部分或全部未对齐访问。应定义一个单独的 PMA 以确定相关地址范围内是否支持向量未对齐访问。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">矢量未对齐内存访问遵循与标量未对齐内存访问相同的原子性规则。</font></li></ul><h2 id="Vector-Memory-Consistency-Model"><a href="#Vector-Memory-Consistency-Model" class="headerlink" title="Vector Memory Consistency Model"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Memory Consistency Model</font></h2><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量内存指令在本地 hart 上按程序顺序执行。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量存储器指令在指令级遵循 RVWMO。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">除了vector indexed-ordered loads and stores,，指令中的元素操作是无序的。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector indexed-ordered 分别按元素顺序从/向内存加载和存储读取和写入元素。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">受向量长度寄存器 vl 影响的指令对 vl 具有控制依赖性，而不是数据依赖性。类似地，mask向量指令对源mask寄存器具有控制依赖性，而不是数据依赖性。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 将向量长度和掩码视为控制而不是数据通常与相应标量代码的语义相匹配，其中通常会使用</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">分支指令</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">。将掩码视为控制允许掩码向量加载指令在知道掩码值之前访问内存，而无需错误推测恢复机制。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">目前未定义提议的 RVTSO 内存模型（Ztso 扩展）下的向量内存指令的行为。</font></li></ul><h2 id="Vector-Arithmetic-Instruction-Formats"><a href="#Vector-Arithmetic-Instruction-Formats" class="headerlink" title="Vector Arithmetic Instruction Formats"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Arithmetic Instruction Formats</font></h2><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">矢量算术指令使用与 OP-FP 相邻的新主操作码 (OP-V = 10101112)。三位 funct3 字段用于定义向量指令的子类别。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">OP-V 主要操作码下向量算术指令的格式:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728540608196-6b0233a6-3802-42f3-892e-058a62681de0.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font></p><h3 id="Vector-Arithmetic-Instruction-encoding"><a href="#Vector-Arithmetic-Instruction-encoding" class="headerlink" title="Vector Arithmetic Instruction encoding"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Arithmetic Instruction encoding</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">funct3编码了操作类型和源地址<br></font><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728540696282-3806f261-9fab-4d8e-8543-31619b08f34f.png"></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">根据操作码，使用无符号或二进制补码有符号整数算术执行整数运算。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">在本讨论中，定点运算被认为是整数运算。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">所有标准向量浮点算术运算都遵循 IEEE-754/2008 标准。</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">所有向量浮点运算都使用 frm 寄存器中的动态舍入模式</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">。当任何向量浮点指令使用 包含无效的舍入模式的frm 字段时，即使它是不依赖于舍入模式的指令，或者其vl=0 时，又或者此时vstart ≥ vl 时，都是非法的。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 所有向量浮点代码都依赖于 frm 中的有效值。</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">当舍入模式无效时，具体实现可以使所有向量 FP 指令报告异常，以简化控制逻辑。</font></strong></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vector-vector运算从分别由 vs2 和 vs1 指定的向量寄存器组中获取两个操作数向量。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vector-scalar 运算可以有三种可能的形式。在所有三种形式中，向量寄存器组操作数由 vs2 指定。第二个标量源操作数来自三个备选源之一：</font><ol><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对于整数运算，标量可以是 5 位立即数 imm[4:0]，编码在 rs1 字段中。除非另有说明，否则该值符号扩展到 SEW 位。</font></strong></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对于整数运算，可以从 rs1 指定的标量 x 寄存器中获取标量。如果 XLEN&gt;SEW，除非另有说明，否则使用 x 寄存器的</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">最低 SEW 位</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">。</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果 XLEN &lt; SEW, 则要将x寄存器的值有符号扩展到SEW。</font></strong></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对于浮点运算，可以从标量 f 寄存器中获取标量。如果 FLEN &gt; SEW，则检查 f 寄存器中的值是否为有效的 NaN-boxed（[[NaN-Boxing]]）值，在这种情况下</font><strong><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">，使用 f 寄存器的最低有效 SEW 位，否则使用规范的 NaN 值。</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">保留任何浮点向量操作数的 EEW 不是受支持的浮点类型宽度（包括 FLEN &lt; SEW 时）的向量指令。</font></li></ol></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 一些指令对 5 位立即数进行零扩展，并通过在汇编语法中命名立即数 uimm 来表示这一点。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">当向 Zfinx/Zdinx/Zhinx 扩展添加向量扩展时，浮点标量参数取自 x 寄存器。这些扩展不支持 NaN-boxed，因此向量浮点标量值使用与整数标量操作数相同的规则生成（即，当 XLEN &gt; SEW 使用最低 SEW 位时，当 XLEN &lt; SEW 使用符号扩展值）。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">矢量算术指令在 vm 字段的控制下进行mask操作：</font></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728541176028-dc73beb6-de58-45fa-ad76-2b4017e941b1.png"></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font><strong><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">在编码中，vs2 是第一个操作数，而 rs1/imm 是第二个操作数。这与标准标量排序相反。这种安排保留了现有的编码约定，即只读取一个标量寄存器的指令，从 rs1 读取它，并且 5 位立即数来自 rs1 字段</font></strong></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量三元算术指令的汇编语法模式（乘加）：</font></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728541225079-66865174-b17f-4790-96f2-a7007f1c8e81.png"></li><li><strong><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);"> 对于三元乘加运算，汇编语法总是将目标向量寄存器放在最前面，然后是 rs1 或 vs1，然后是 vs2。这种排序为这些三元运算提供了更自然的汇编程序读取，因为乘法操作数总是彼此相邻</font></li></ul><p><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);"></font></p><h3 id="Widening-Vector-Arithmetic-Instructions"><a href="#Widening-Vector-Arithmetic-Instructions" class="headerlink" title="Widening Vector Arithmetic Instructions "></a><font style="color:rgb(0,0,0);">Widening Vector Arithmetic Instructions</font><font style="color:#DF2A3F;background-color:rgb(247, 248, 250);"> </font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">一些向量算术指令被定义为widening（加宽）操作，其中目标向量寄存器组具有 EEW=2<em>SEW 和 EMUL=2</em>LMUL。这些通常在操作码上被赋予 </font><em><em><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vw</font></em><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 前缀</font></em><em><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">，或者为向量浮点指令赋予 </font>**<font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vfw</font></em>**<font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">第一个向量寄存器组操作数可以是单宽或双宽:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728541398448-ca9a164b-ffd1-4a30-9beb-956c0c5bd234.png"></p><ul><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 最初，w 后缀用于操作码，但这可能与使用 w 后缀表示双字整数中的字长操作混淆，因此 w 被移至前缀。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 浮点加宽操作已从 vwf* 更改为 vfw<em>，以便与将写入 fw</em> 的任何标量扩展浮点操作更加一致。</font></li></ul><h3 id="Narrowing-Vector-Arithmetic-Instructions"><a href="#Narrowing-Vector-Arithmetic-Instructions" class="headerlink" title="Narrowing Vector Arithmetic Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Narrowing Vector Arithmetic Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">提供了一些指令来将双宽度源向量转换为单宽度目标向量。这些指令将 EEW/EMUL=2<em>SEW/2</em>LMUL 由 vs2 指定的向量寄存器组转换为具有当前 SEW/LMUL 设置的向量寄存器组。如果有第二个源向量寄存器组（由 vs1 指定），则它与结果的宽度相同（更窄），即vs1的 EEW=SEW。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 另一种设计决策是将 SEW/LMUL 视为定义源向量寄存器组的大小。</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">这里的选择是基于这样一种信念，即所选择的方法将需要更少的 vtype 更改。</font></strong></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意设置掩码寄存器的比较操作也隐含地属于归约操作。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">操作码上的 vn* 前缀用于区分汇编程序中的这些指令，或 vfn* 前缀用于归约的浮点操作码。双宽度源向量寄存器组由源操作数后缀中的 w 表示（例如，vnsra.wv）</font></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728541698982-1069e08b-d558-47b9-b1d8-256fc34b05e8.png"></li></ul><h2 id="Vector-Integer-Arithmetic-Instructions"><a href="#Vector-Integer-Arithmetic-Instructions" class="headerlink" title="Vector Integer Arithmetic Instructions"></a><font style="color:rgb(0,0,0);">Vector Integer Arithmetic Instructions</font></h2><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">提供了一组向量整数算术指令。除非另有说明，否则整数运算会在溢出时wrap（ 相当于不对溢出做特殊处理）。</font></li></ul><h3 id="Vector-Single-Width-Integer-Add-and-Subtract"><a href="#Vector-Single-Width-Integer-Add-and-Subtract" class="headerlink" title="Vector Single-Width Integer Add and Subtract"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Single-Width Integer Add and Subtract</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">提供向量整数加减法。还为向量标量形式提供了反向减法指令。<br></font><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728542358324-23ec6964-2d3a-4712-b078-4ec253f5c70b.png"></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">可以使用带有 x0 标量操作数的反向减法指令对整数值向量求反。提供了汇编伪指令 vneg.v vd,vs = vrsub.vx vd,vs,x0。</font></li></ul><h3 id="Vector-Widening-Integer-Add-x2F-Subtract"><a href="#Vector-Widening-Integer-Add-x2F-Subtract" class="headerlink" title="Vector Widening Integer Add/Subtract "></a><font style="color:rgb(0,0,0);">Vector Widening Integer Add/Subtract</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">加宽 加/减 指令在有符号和无符号变体中都提供，两者的区别在于较窄的源操作数在形成双宽度的和之前是进行符号扩展还是零扩展。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728542651256-4b2ea53e-dca8-4860-ac7d-a7cd6d59496c.png"></p><ul><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 使用标量操作数为 x0 的加宽加法指令可以将整数值的宽度加倍。提供汇编伪指令 </font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vwcvt</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">.x.x.v vd,vs,vm = </font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vwadd</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">.vx vd,vs,x0,vm 和 </font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vwcvtu</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">.x.x.v vd,vs,vm = </font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vwaddu</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">.vx vd,vs,x0,vm。</font></li></ul><h3 id="Vector-Integer-Extension"><a href="#Vector-Integer-Extension" class="headerlink" title="Vector Integer Extension"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Integer Extension</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">这类指令将零或符号扩展 EEW 小于 SEW 的源向量整数操作数，以填充目标中 SEW 大小的元素。源的 EEW 是 SEW 的 1/2、1/4 或 1/8，而源的 EMUL 是 (EEW/SEW)*LMUL。目的元素的 EEW 等于 SEW，EMUL 等于 LMUL。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728545828188-9b2391d9-e4ee-4d45-af8b-d9a24b71733a.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果源 EEW 不是支持的宽度，或者源 EMUL 低于最小合法 LMUL，则保留指令编码。</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">注意</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> 标准向量加载指令访问与目标寄存器元素大小相同的内存值。一些应用程序代码需要对更宽元素中的一系列操作数宽度进行操作，例如，从内存中加载一个字节并添加到一个八字节元素。为了避免必须提供向量加载指令的数量与数据类型（字节、字、半字以及有符号/无符号变体）的数量的叉积，我们改为添加显式扩展指令，如果合适，可以使用加宽算术指令不可用。</font></li></ul><h3 id="Vector-Integer-Add-with-Carry-x2F-Subtract-with-Borrow-Instructions"><a href="#Vector-Integer-Add-with-Carry-x2F-Subtract-with-Borrow-Instructions" class="headerlink" title="Vector Integer Add-with-Carry / Subtract-with-Borrow Instructions "></a><font style="color:rgb(0,0,0);">Vector Integer Add-with-Carry / Subtract-with-Borrow Instructions</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">为了支持多字整数运算，提供了对进位操作的指令。对于每个操作（加法或减法），提供两条指令：</font><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">一条是提供结果（SEW宽度）</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">另一条是产生进位输出（编码为一个mask布尔值）。</font></li></ul></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">进位输入和输出使用掩码寄存器来表示，由于编码限制，进位输入必须来自隐式的</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">v0</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">寄存器，但是进位输出可以写到任何遵循源/目的重叠限制的向量寄存器。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vadc和vsbc对源操作数和进位或借位进行加减，并将结果写入向量寄存器vd。这些指令被编码为带mask的指令（vm=0），但是它们对所有的主体元素进行操作并写回。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vmadc和vmsbc对源操作数进行加减运算，如果是包含mask的指令形式(vm=0)，则还会加上进位或减去借位，并将进位结果写回vd的mask寄存器。如果没有包含mask形式（vm=1），则没有进位或借入。这些指令对所有的主体元素进行操作和回写，即使是被masked的。因为这些指令产生了一个mask值，所以它们总是以tail-agnostic，即尾部不可知的策略进行操作。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728546733726-209a35ee-d81f-47f9-b362-93a69cd111e6.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">一条带进位传播的加减法需要两条使用相同输入的指令：</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728546917178-e4a5ee63-0e5a-4b6d-8086-65b071f36a62.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">下面是带借位的向量减法，向量减法没有减立即数的指令：</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728546944255-61324caa-94b7-4c6e-ac1e-3875ff08ceb9.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对于vmsbc，如果截断前的差值为负数，则借位被定义为1。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对于vadc和vsbc，如果目的向量寄存器是v0，指令编码被保留。</font></li></ul><h3 id="Vector-Bitwise-Logical-Instructions"><a href="#Vector-Bitwise-Logical-Instructions" class="headerlink" title="Vector Bitwise Logical Instructions"></a><font style="color:rgb(0,0,0);">Vector Bitwise Logical Instructions</font></h3><p> <img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728547092186-a9f9a085-0d13-46dd-b3ab-13a025f0f0c8.png"></p><h3 id="Vector-Single-Width-Shift-Instructions"><a href="#Vector-Single-Width-Shift-Instructions" class="headerlink" title="Vector Single-Width Shift Instructions"></a><font style="color:rgb(0,0,0);">Vector Single-Width Shift Instructions</font></h3><p> <img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728547167173-6c3ae9f5-c621-47db-bb0a-94366e67e2ca.png"></p><h3 id="Vector-Narrowing-Integer-Right-Shift-Instructions"><a href="#Vector-Narrowing-Integer-Right-Shift-Instructions" class="headerlink" title="Vector Narrowing Integer Right Shift Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Narrowing Integer Right Shift Instructions</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728547277949-e4797bf2-743b-44c2-b1ee-69af47084204.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">使用标量操作数为x0的缩小整数移位指令，一个整数值的宽度可以减半。提供了一个汇编伪指令 </font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vncvt</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">.x.x.w vd,vs,vm = </font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vnsrl</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">.wx vd,vs,x0,vm。</font></li></ul><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><h3 id="Vector-Integer-Compare-Instructions"><a href="#Vector-Integer-Compare-Instructions" class="headerlink" title="Vector Integer Compare Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Integer Compare Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">以下的整数比较指令，如果比较结果为真，则将1写入目的掩码寄存器元素。目的屏蔽向量总是保存在一个单一的向量寄存器中，目标屏蔽向量寄存器可以与源向量屏蔽寄存器(v0)相同。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728547605247-9783b4d4-b673-4af4-8e11-efc05c633127.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">不提供vmslt{u}.vi的即时形式，因为即时值可以减少1，并使用vmsle{u}.vi的变体来代替。vmsle.vi的范围是-16到15，导致vmslt.vi的有效范围是-15到16。vmsleu.vi的范围是0到15，导致有效的vmsltu.vi范围是1到16（注意，vmsltu.vi的即时0没有用，因为它总是假的）。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">因为5位向量的即时值总是带符号的，当simm5即时值的高位被设置时，vmsleu.vi也支持2</font><sup><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">SEW-16到2</font></sup><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">SEW-1范围内的无符号即时值，允许相应的vmsltu.vi对2</font><sup><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">SEW-15到2</font></sup><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">SEW范围内的无符号即时值进行比较。注意，带有2SEW即时值的vmsltu.vi是没有用的，因为它始终是真的。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728547749883-efbc51f6-1374-4202-9f71-1194048cac53.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">同样，没有提供vmsge{u}.vi，比较是用vmsgt{u}.vi实现的，即时值减一。由此产生的有效vmsge.vi范围是-15到16，由此产生的有效vmsgeu.vi范围是1到16（注意，立即为0的vmsgeu.vi没有用，因为它总是真的）。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">寄存器标量和即时值的vmsgt形式的提供是为了让一条比较指令提供正确的mask值的极性，而不需要使用额外的屏蔽逻辑指令。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">为了减少编码空间，没有直接提供vmsge{u}.vx形式，因此va≥x的情况需要特殊处理。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vmsge{u}.vx操作可以通过将x的值减少1并使用vmsgt{u}.vx指令来合成，前提是这样做不会使x中的表示值溢出：</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728548000701-453e6aaf-01b4-4615-944b-a42ce7f677c3.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">上述序列通常是最有效的实现，但在x的范围未知的情况下，可以提供汇编伪指令（&gt;=可以通过小于的结果取反得到）：</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728548029911-feac6acf-d078-4d1a-8d8d-0cd469403b34.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">可以利用v0来快速地实现比较表达式的相与操作：</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728548050379-a805d9b0-c9ee-420f-9278-feeada7b037d.png"></p><h3 id="Vector-Integer-Min-x2F-Max-Instructions"><a href="#Vector-Integer-Min-x2F-Max-Instructions" class="headerlink" title="Vector Integer Min/Max Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Integer Min/Max Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持有符号和无符号整数的最小和最大指令。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728612974292-37e2368f-a623-4c38-bab5-65c5e819c6cd.png"></p><h3 id="Vector-Single-Width-Integer-Multiply-Instructions"><a href="#Vector-Single-Width-Integer-Multiply-Instructions" class="headerlink" title="Vector Single-Width Integer Multiply Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Single-Width Integer Multiply Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">单宽乘法指令执行SEW位<em>SEW位的乘法，产生2</em>SEW位的乘积，然后在SEW位宽的目的寄存器中返回乘积的一半。mul版本将乘积的低字写到目标寄存器，而mulh版本将乘积的高字写到目标寄存器。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728613048174-429fdd99-e687-4542-af6e-404d0c46df59.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font></p><h3 id="Vector-Integer-Divide-Instructions"><a href="#Vector-Integer-Divide-Instructions" class="headerlink" title="Vector Integer Divide Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Integer Divide Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">除法和余数指令等同于RISC-V标准标量整数乘法<br></font><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728613547366-7ecba156-31f1-4efa-b250-8eb8a4cb5b8a.png"></li></ul><h3 id="Vector-Widening-Integer-Multiply-Instructions"><a href="#Vector-Widening-Integer-Multiply-Instructions" class="headerlink" title="Vector Widening Integer Multiply Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Widening Integer Multiply Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">加宽的整数乘法指令从SEW位<em>SEW位的乘法中返回完整的2</em>SEW位乘积。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728613591715-2774cbbc-829e-4b92-a148-c128fca032f4.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font></p><h3 id="Vector-Single-Width-Integer-Multiply-Add-Instructions"><a href="#Vector-Single-Width-Integer-Multiply-Add-Instructions" class="headerlink" title="Vector Single-Width Integer Multiply-Add Instructions"></a><font style="color:rgb(0,0,0);">Vector Single-Width Integer Multiply-Add Instructions</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></h3><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">整数乘加指令是具有破坏性的（会修改源操作寄存器的值），有两种形式，一种是覆盖加数或减数（vmacc, vnmsac），一种是覆盖第一个乘数（vmadd, vnmsub）</font><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728613677684-4dec0e50-d2ce-421a-aaaf-11276ee8a04e.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">乘积的低半部分与第三个操作数相加或相减。</font></li></ul><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><h3 id="Vector-Widening-Integer-Multiply-Add-Instructions"><a href="#Vector-Widening-Integer-Multiply-Add-Instructions" class="headerlink" title="Vector Widening Integer Multiply-Add Instructions "></a><font style="color:rgb(0,0,0);">Vector Widening Integer Multiply-Add Instructions</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">加宽的整数乘加指令将SEW-位<em>SEW-位乘法的全部2</em>SEW-位乘积加到2<em>SEW-位值，并产生2</em>SEW-位结果。支持有符号和无符号乘法操作数的所有组合。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728613960612-95ff12e1-c13b-4a75-8374-e75ab6e39fba.png"></p><h3 id="Vector-Integer-Merge-Instructions"><a href="#Vector-Integer-Merge-Instructions" class="headerlink" title="Vector Integer Merge Instructions"></a><font style="color:rgb(0,0,0);">Vector Integer Merge Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">矢量整数合并指令根据一个mask合并两个源操作数。与普通的算术指令不同，合并指令对所有的主体元素（即从vstart到vl中的当前矢量长度的元素集）进行操作。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vmerge指令被编码为带mask的指令（vm=0）。该指令将两个来源结合起来，具体如下：在mask值为0时，第一个操作数被复制到目的元素上，否则第二个操作数被复制到目的元素上。第一个操作数总是一个由vs2指定的向量寄存器组。第二个操作数是由vs1指定的向量寄存器组或由rs1指定的标量x寄存器或一个5位符号扩展的立即数：</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728614020473-ddea89c2-7dab-4ccd-a0ec-e7eaf806767e.png"></p><h3 id="Vector-Integer-Move-Instructions"><a href="#Vector-Integer-Move-Instructions" class="headerlink" title="Vector Integer Move Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Integer Move Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">矢量整数移动指令复制一个源操作数到一个矢量寄存器组。vmv.v.v变体复制了一个向量寄存器组，而vmv.v.x和vmv.v.i变体将一个标量寄存器或立即数复制到目标向量寄存器组的所有有效元素。这些指令被编码为无mask指令（vm=1）。第一个操作数（vs2）必须包含v0，vs2中的任何其他矢量寄存器编号都是保留的。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">mask可以用一个序列vmv.v.i vd, 0; vmerge.vim vd, vd, 1, v0来拓宽成SEW宽度的元素。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">矢量整数移动指令</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">与矢量合并指令共享编码</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">，但移动指令的vm=1，vs2=v0。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vmv.v.v vd, vd的形式，使主体元素保持不变，可以用来表示寄存器的下一次使用将是EEW等于SEW。</font><br><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728614052022-2e739406-b20f-43c3-abed-2cd4504585d1.png"></li></ul><h2 id="Vector-Fixed-Point-Arithmetic-Instructions"><a href="#Vector-Fixed-Point-Arithmetic-Instructions" class="headerlink" title="Vector Fixed-Point Arithmetic Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Fixed-Point Arithmetic Instructions</font></h2><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">将整数运算指令扩展即可支持定点运算指令</font></li></ul><h3 id="Vector-Single-Width-Saturating-Add-and-Subtract"><a href="#Vector-Single-Width-Saturating-Add-and-Subtract" class="headerlink" title="Vector Single-Width Saturating Add and Subtract"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Single-Width Saturating Add and Subtract</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728614166979-cff55f97-1086-49a6-b22b-e5efc81c77e2.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">与整数加减的区别是多了s 标记,表示saturate</font></li></ul><h3 id="Vector-Single-Width-Averaging-Add-and-Subtract"><a href="#Vector-Single-Width-Averaging-Add-and-Subtract" class="headerlink" title="Vector Single-Width Averaging Add and Subtract"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Single-Width Averaging Add and Subtract</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">均值加法和均值减法会将加法或者减法的结果右移一位并根据vxrm的设置进行舍入</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728614200562-a0991fe8-a34b-4faf-a710-92eb976c7a1b.png"></p><h3 id="Vector-Single-Width-Fractional-Multiply-with-Rounding-and-Saturation"><a href="#Vector-Single-Width-Fractional-Multiply-with-Rounding-and-Saturation" class="headerlink" title="Vector Single-Width Fractional Multiply with Rounding and Saturation"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Single-Width Fractional Multiply with Rounding and Saturation</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">有符号分数乘法指令计算两个SEW位的输入, 输出2*SEW位宽的输出,然后将结果右移SEW-1位,这些右移的位据vxrm舍入,之后进行饱和截位到SEW位。如果结果导致饱和,则需要设置vxsat位。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728614657763-d8440422-4f91-460f-86e9-a372262c2daf.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><h3 id="Vector-Single-Width-Scaling-Shift-Instructions"><a href="#Vector-Single-Width-Scaling-Shift-Instructions" class="headerlink" title="Vector Single-Width Scaling Shift Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Single-Width Scaling Shift Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">这些指令将右移输入,根据vxrm将右移的位进行舍入。右移填充的位可以无符号扩展(vssrl)也可以有符号扩展sign-extending (vssra)。vs2是需要移位的寄存器组, vs1是移位量寄存器组,标量整数寄存器rs1或zero-extended的5bit立即数也可以用来作为移位量。对于移位量, 只有低log2(SEW) bit是有效的。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728614724825-a02ddd03-7b2e-4680-8a9c-b8ddee7a5fb9.png"></p><h3 id="Vector-Narrowing-Fixed-Point-Clip-Instructions"><a href="#Vector-Narrowing-Fixed-Point-Clip-Instructions" class="headerlink" title="Vector Narrowing Fixed-Point Clip Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Narrowing Fixed-Point Clip Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vnclip指令用于将一个定点数归约到一个目的向量中. 该指令支持rounding, scaling和饱和.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vs2指定了源数据, vs1指定了scale的shift amount</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728614768858-64c2fdd3-3a84-475c-89f6-256a37771657.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">具体的round模式由vxrm CSR寄存器指定. round在目的寄存器的低位进行, 先于饱和操作</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果目的元素存在饱和的情况, 则vxsat的对应bit会拉高.</font></li></ul><h2 id="Vector-Floating-Point-Instructions"><a href="#Vector-Floating-Point-Instructions" class="headerlink" title="Vector Floating-Point Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Floating-Point Instructions</font></h2><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">目前支持32和64bit的满足IEEE-754/2008标准的floating-point</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果浮点单元状态位mstatus.FS被关闭了, 则任意执行向量浮点指令的尝试都会抛出指令异常. 同理, 任意改变了浮点状态寄存器的向量浮点指令都需要将mstatus.FS设置为dirty</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果实现了hypervisor扩展且V=1, 则vsstatus.FS位也需要考虑进来, 即mstatus.FS或vsstatus.FS位被关闭, 则任意执行向量浮点指令的尝试都会抛出指令异常. 同理, 任意改变了浮点状态寄存器的向量浮点指令都需要将mstatus.FS和vsstatus.FS设置为dirty</font></li></ul><h3 id="Vector-Floating-Point-Exception-Flags"><a href="#Vector-Floating-Point-Exception-Flags" class="headerlink" title="Vector Floating-Point Exception Flags"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Floating-Point Exception Flags</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">向量中活跃的浮点元素会设置标准FP扩展标记位: fflags.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">非活跃的元素不会修改fflags对应位</font></li></ul><h3 id="Vector-Single-Width-Floating-Point-Add-x2F-Subtract-Instructions"><a href="#Vector-Single-Width-Floating-Point-Add-x2F-Subtract-Instructions" class="headerlink" title="Vector Single-Width Floating-Point Add/Subtract Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Single-Width Floating-Point Add/Subtract Instructions</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728614917527-3483c2f0-74e3-4656-bd6f-5a5134a73edd.png"></p><h3 id="Vector-Widening-Floating-Point-Add-x2F-Subtract-Instructions"><a href="#Vector-Widening-Floating-Point-Add-x2F-Subtract-Instructions" class="headerlink" title="Vector Widening Floating-Point Add/Subtract Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Widening Floating-Point Add/Subtract Instructions</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728614987711-467c76aa-fe2b-4cd7-88c8-3ca496653ecd.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font></p><h3 id="Vector-Single-Width-Floating-Point-Multiply-x2F-Divide-Instructions"><a href="#Vector-Single-Width-Floating-Point-Multiply-x2F-Divide-Instructions" class="headerlink" title="Vector Single-Width Floating-Point Multiply/Divide Instructions"></a><font style="color:rgb(0,0,0);">Vector Single-Width Floating-Point Multiply/Divide Instructions</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></h3><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728615220183-76ef061d-a5a9-49e2-98d8-826b0e23a1ce.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font></p><h3 id="Vector-Widening-Floating-Point-Multiply"><a href="#Vector-Widening-Floating-Point-Multiply" class="headerlink" title="Vector Widening Floating-Point Multiply"></a><font style="color:rgb(0,0,0);">Vector Widening Floating-Point Multiply</font></h3><p> <img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728615245093-5974e7f8-0d97-4b68-8fce-527c9d4aca8c.png"></p><h3 id="Vector-Single-Width-Floating-Point-Fused-Multiply-Add-Instructions"><a href="#Vector-Single-Width-Floating-Point-Fused-Multiply-Add-Instructions" class="headerlink" title="Vector Single-Width Floating-Point Fused Multiply-Add Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Single-Width Floating-Point Fused Multiply-Add Instructions</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728615606432-2b5b08bd-9ff0-4f83-8a45-4e69f1ae5e18.png"></p><h3 id="Vector-Widening-Floating-Point-Fused-Multiply-Add-Instructions"><a href="#Vector-Widening-Floating-Point-Fused-Multiply-Add-Instructions" class="headerlink" title="Vector Widening Floating-Point Fused Multiply-Add Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Widening Floating-Point Fused Multiply-Add Instructions</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728626357975-3aa56d53-9428-4d07-a32a-87a6e86c9f6d.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font></p><h3 id="Vector-Floating-Point-Square-Root-Instruction"><a href="#Vector-Floating-Point-Square-Root-Instruction" class="headerlink" title="Vector Floating-Point Square-Root Instruction"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Floating-Point Square-Root Instruction</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728625182031-e9d2baad-dfee-4c5c-b068-951e04524efb.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font></p><h3 id="Vector-Floating-Point-Reciprocal-Square-Root-Estimate-Instruction"><a href="#Vector-Floating-Point-Reciprocal-Square-Root-Estimate-Instruction" class="headerlink" title="Vector Floating-Point Reciprocal Square-Root Estimate Instruction"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Floating-Point Reciprocal Square-Root Estimate Instruction</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728625642495-c976eadd-22ab-4a65-9b50-ec4c67e39a20.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">该指令返回1/sqrt(x)结果的7bit估计值</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">下表给出了该指令的输出情况:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728625668864-de2018b0-1da1-49c9-b45c-3814c9cf90e9.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">sqrt是采用查找表实现的.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">规格化后的浮点数的exp的0bit和significand的高6bit(不包括最高位的1)将组合起来寻址下面的查找表. 查找表的输出为结果的significand的高7位(不包括最高位的1)</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728626373792-c5c9f44b-fd41-4b98-8a43-38a8a4e7c37d.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728626515352-a8bfccfc-4797-4a0a-b6b0-c2da4b33cd99.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728626526215-526b34e0-ff0a-4359-babf-7873c7fdd0ce.png"></p><h3 id="Vector-Floating-Point-Reciprocal-Estimate-Instruction"><a href="#Vector-Floating-Point-Reciprocal-Estimate-Instruction" class="headerlink" title="Vector Floating-Point Reciprocal Estimate Instruction"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Floating-Point Reciprocal Estimate Instruction</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">返回1/x的7bit估计值:<br></font><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728626652000-d36a3020-0bf0-4c1d-a639-8dab25e72952.png"></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">下表是所有可能的输出值:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728626667556-307e3545-0000-4cea-b792-8d2bc18f21b0.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">significand的高7bit(不包括最开始的1)索引查找表, 获得7bit的输出值:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728627353690-e515d9f5-5797-4a76-9818-5887dfa5ab26.png"><br> <img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728627367898-a01f5ec5-6ec6-4706-a378-c6c1bba8d0c0.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728627378156-e07086ee-fe75-466c-834e-1af1faaa30df.png"></p><h3 id="Vector-Floating-Point-MIN-x2F-MAX-Instructions"><a href="#Vector-Floating-Point-MIN-x2F-MAX-Instructions" class="headerlink" title="Vector Floating-Point MIN/MAX Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Floating-Point MIN/MAX Instructions</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728627408038-2b7b728e-cb24-407d-84b1-3bf8454a0192.png"></p><h3 id="Vector-Floating-Point-Sign-Injection-Instructions"><a href="#Vector-Floating-Point-Sign-Injection-Instructions" class="headerlink" title="Vector Floating-Point Sign-Injection Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Floating-Point Sign-Injection Instructions</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728627425178-fa51a221-770b-46da-9ac3-1b7a3d7724cf.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">该指令可以将vs1的符号与vs2的非符号部分进行组合</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">可以实现取相反数:vfneg.v vd,vs = vfsgnjn.vv vd,vs,vs.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">可以实现取绝对值: vfabs.v vd,vs = vfsgnjx.vv vd,vs,vs.</font></li></ul><h3 id="Vector-Floating-Point-Compare-Instructions"><a href="#Vector-Floating-Point-Compare-Instructions" class="headerlink" title="Vector Floating-Point Compare Instructions "></a><font style="color:rgb(0,0,0);">Vector Floating-Point Compare Instructions</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728627465322-ca2f0803-e566-4076-bb0a-48ddbcd5edff.png"></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728627661327-b6a8b1c0-fde6-4ffe-89cf-aace616a7809.png"></p><h3 id="Vector-Floating-Point-Classify-Instruction"><a href="#Vector-Floating-Point-Classify-Instruction" class="headerlink" title="Vector Floating-Point Classify Instruction"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Floating-Point Classify Instruction</font></h3><p> <img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728628299955-29ef95f7-aa24-49fd-a35f-81cc91d4c86b.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">该指令与标量classify操作相同</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">产生的10bit mask只占用结果元素的低位, 高SEW-10位为0</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">该指令只对SEW=16b以上的位宽有效</font></li></ul><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">  </font><h3 id="Vector-Floating-Point-Merge-Instruction"><a href="#Vector-Floating-Point-Merge-Instruction" class="headerlink" title="Vector Floating-Point Merge Instruction"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Floating-Point Merge Instruction</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728628358790-1bf04282-69c8-49bf-964b-d2f2a3a99015.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">是一条masked指令, 根据mask选择数据</font></li></ul><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><h3 id="Vector-Floating-Point-Move-Instruction"><a href="#Vector-Floating-Point-Move-Instruction" class="headerlink" title="Vector Floating-Point Move Instruction"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Floating-Point Move Instruction</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728628496933-b9ffc216-011c-4c61-a89b-fffb992c7f96.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">将rs1对应的浮点数拷贝到vd</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">该指令等同于: vfmerge.vfm, but with vm=1 and vs2=v0.</font></li></ul><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><h3 id="Single-Width-Floating-Point-x2F-Integer-Type-Convert-Instructions"><a href="#Single-Width-Floating-Point-x2F-Integer-Type-Convert-Instructions" class="headerlink" title="Single-Width Floating-Point/Integer Type-Convert Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Single-Width Floating-Point/Integer Type-Convert Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">将SEW宽度的浮点数转换成同宽度的整数(或者反过来)</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728628612014-a7127a54-2682-4635-be8a-59dbd3f9c4c5.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">转换时根据frm寄存器动态rounding</font></li></ul><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><h3 id="Widening-Floating-Point-x2F-Integer-Type-Convert-Instructions"><a href="#Widening-Floating-Point-x2F-Integer-Type-Convert-Instructions" class="headerlink" title="Widening Floating-Point/Integer Type-Convert Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Widening Floating-Point/Integer Type-Convert Instructions</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728628667923-e817563f-a738-4f6c-a6df-109db9777c36.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">双宽度向单宽度的浮点-整数转换</font></li></ul><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><h3 id="Narrowing-Floating-Point-x2F-Integer-Type-Convert-Instructions"><a href="#Narrowing-Floating-Point-x2F-Integer-Type-Convert-Instructions" class="headerlink" title="Narrowing Floating-Point/Integer Type-Convert Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Narrowing Floating-Point/Integer Type-Convert Instructions</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728629182576-4316f691-a2f0-4056-98e4-82d834a113f7.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">双宽度向单宽度的浮点-整数转换</font></li></ul><h2 id="Vector-Reduction-Operations"><a href="#Vector-Reduction-Operations" class="headerlink" title="Vector Reduction Operations"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Reduction Operations</font></h2><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">归约指令接收一个向量寄存器组的元素,和一个放在向量寄存器元素0位置的标量, 通过某种归约操作得到一个标量值, 该标量值也放在一个向量寄存器的元素0位置.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">归约操作中的标量都是放在一个向量寄存器中, 而不是寄存器组.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">之所以不把结果放在标量寄存器, 是为了与标量core 去耦</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">源向量寄存器组中的非活跃元素将不参与归约操作.</font></li><li><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">目的向量寄存器中, 除了元素0的部分都是tail</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">, 遵循当前的尾部不可知或不变(tail agnostic/undisturbed)的原则.</font></li></ul><h3 id="Vector-Single-Width-Integer-Reduction-Instructions"><a href="#Vector-Single-Width-Integer-Reduction-Instructions" class="headerlink" title="Vector Single-Width Integer Reduction Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Single-Width Integer Reduction Instructions</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728630313047-fe28d47d-56d0-4e60-a6ca-8e3432857888.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">溢出时, wrap around</font></li></ul><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></p><h3 id="Vector-Widening-Integer-Reduction-Instructions"><a href="#Vector-Widening-Integer-Reduction-Instructions" class="headerlink" title="Vector Widening Integer Reduction Instructions"></a><font style="color:rgb(0,0,0);">Vector Widening Integer Reduction Instructions</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font></h3><p><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">在归约操作之前对向量元素位宽进行扩展, 从SEW-2*SEW</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">溢出时, wrap around</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728630417874-cd1593bf-0b74-4439-9de9-9265ece98f33.png"></p><h3 id="Vector-Single-Width-Floating-Point-Reduction-Instructions"><a href="#Vector-Single-Width-Floating-Point-Reduction-Instructions" class="headerlink" title="Vector Single-Width Floating-Point Reduction Instructions"></a><font style="color:rgb(0,0,0);">Vector Single-Width Floating-Point Reduction Instructions</font></h3><p> <img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728633874066-d6855215-733f-4474-b5c7-f3f59a54b2c1.png"></p><h4 id="Vector-Ordered-Single-Width-Floating-Point-Sum-Reduction"><a href="#Vector-Ordered-Single-Width-Floating-Point-Sum-Reduction" class="headerlink" title="Vector Ordered Single-Width Floating-Point Sum Reduction"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Ordered Single-Width Floating-Point Sum Reduction</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">ordered的指令必须按顺序对元素进行归约:<br></font><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728634010613-8832c2c8-114f-4a1b-8af3-3c22485770f4.png"></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">非活跃的元素不参与</font></li></ul><h4 id="Vector-Unordered-Single-Width-Floating-Point-Sum-Reduction"><a href="#Vector-Unordered-Single-Width-Floating-Point-Sum-Reduction" class="headerlink" title="Vector Unordered Single-Width Floating-Point Sum Reduction"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Unordered Single-Width Floating-Point Sum Reduction</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">指令汇编:</font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vfredusum</font></strong></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">无序指令需要实现与归约树等价的计算过程</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">每个节点接受两个操作数生成一个结果, 在计算时, 每个节点都是精确的(浮点的指数和小数部分都有无限精度), 得到精确的浮点结果后再规格化为SEW位的标准浮点数</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">每个节点的浮点数范围和精度可能都不同</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">实现时可以给最后的结果加上一个加法标志</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">当向下舍入（接近-∞）时，加法标识为0.0，或者对于所有其他舍入模式，加法标识为-0.0。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">对于vtype和vl中的给定值，归约树结构必须是确定的。</font></li></ul><h4 id="Vector-Single-Width-Floating-Point-Max-and-Min-Reductions"><a href="#Vector-Single-Width-Floating-Point-Max-and-Min-Reductions" class="headerlink" title="Vector Single-Width Floating-Point Max and Min Reductions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Single-Width Floating-Point Max and Min Reductions</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">浮点最大最小归约指令无论操作的顺序如何, 都应该返回相同的结果和相同的异常</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果没有活跃元素, 则vs1[0]会被复制到目的寄存器, 不会规格化NaN值, 也不会设置异常标志</font></li></ul><h3 id="Vector-Widening-Floating-Point-Reduction-Instructions"><a href="#Vector-Widening-Floating-Point-Reduction-Instructions" class="headerlink" title="Vector Widening Floating-Point Reduction Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Widening Floating-Point Reduction Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">加宽的归约指令, vs2在进入归约操作时会加宽到2*SEW 位<br></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"> </font><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728636151374-e3015653-fd9e-4b79-95c8-96f5b0a896d1.png"></li></ul><h2 id="Vector-Mask-Instructions"><a href="#Vector-Mask-Instructions" class="headerlink" title="Vector Mask Instructions"></a><font style="color:rgb(0,0,0);">Vector Mask Instructions</font></h2><h3 id="Vector-Mask-Register-Logical-Instructions"><a href="#Vector-Mask-Register-Logical-Instructions" class="headerlink" title="Vector Mask-Register Logical Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Mask-Register Logical Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">这类指令是针对单个向量寄存器的(不是组), 因此会忽略vlmul的值</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">索引小于vstart的元素将保持不变. 执行指令后vstart会复位为0</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">mask logical指令都是unmasked的, 所以不存在非活跃元素, 并且总是遵循尾部不可知原则</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728637566784-cc3b7457-32d3-4e69-aab8-ba08ab49f3d8.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">一些伪指令:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728637672417-93f1947b-554d-467a-bacf-d438c2eca96d.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">上述8种逻辑操作可以产生16种任意的逻辑操作:</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728637691058-0d5b47ce-6e53-4993-9355-45fdb6a19aeb.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728637699456-4522bd0e-1840-4554-948e-54b30e99370e.png"></p><h3 id="Vector-count-population-in-mask-vcpop-m"><a href="#Vector-count-population-in-mask-vcpop-m" class="headerlink" title="Vector count population in mask vcpop.m"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector count population in mask vcpop.m</font></h3><p> <img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1728638091941-abe4cbc8-1171-4aec-988d-1a4928c2f2f5.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">该指令的源操作数vs2是一个包含mask值的响亮寄存器</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">popcount, 该指令对vs2中活跃元素进行计数</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">可以在一个mask的指导下进行:</font></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071022624-f22a6f2f-7a0b-42ae-b318-c93f30a78f13.png"></li></ul><h3 id="vfirst-find-first-set-mask-bit"><a href="#vfirst-find-first-set-mask-bit" class="headerlink" title="vfirst find-first-set mask bit"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vfirst find-first-set mask bit</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071039369-b0821406-cb11-4913-b775-34c53046fcff.png">  </p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">找到作为source mask的vs2中活跃元素的首个1， 并将其索引写入通用寄存器GPR。 如果vs2没有活跃元素， 写入-1到GPR</font></li></ul><h3 id="vmsbf-m-set-before-first-mask-bit"><a href="#vmsbf-m-set-before-first-mask-bit" class="headerlink" title="vmsbf.m set-before-first mask bit"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vmsbf.m set-before-first mask bit</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071057168-7a0e6f0e-f35c-41a6-8478-933f289931d1.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vmsbf.m指令接收一个mask向量寄存器作为输入， 将结果写入另一个向量寄存器</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">规则是： 首先将目的向量的所有元素写为1； 之后看源向量， 源向量的第一个为1的活跃元素的位置及其之后将目的向量元素都写成0</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">类似于leading one det</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">目的寄存器不能与源寄存器重合， 如果使用mask（vm=0）, 目的寄存器也不能与v0重合。</font></li></ul><h3 id="vmsif-m-set-including-first-mask-bit"><a href="#vmsif-m-set-including-first-mask-bit" class="headerlink" title="vmsif.m set-including-first mask bit"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vmsif.m set-including-first mask bit</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">与set-before-first 类似， 区别是第一个1的位置也要置1.</font></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071085915-9d247823-abde-42c7-b3d1-9a2c16580bd6.png"></li></ul><h3 id="vmsof-m-set-only-first-mask-bit"><a href="#vmsof-m-set-only-first-mask-bit" class="headerlink" title="vmsof.m set-only-first mask bit"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vmsof.m set-only-first mask bit</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">与set-before-first 类似， 区别是只有第一个1的位置要置1.</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071107050-1a0a0816-b6f4-4461-adb7-e3ece9877d98.png"></p><h3 id="Example-using-vector-mask-instructions"><a href="#Example-using-vector-mask-instructions" class="headerlink" title="Example using vector mask instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Example using vector mask instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">下面是一个data-dependent exit loop向量化的例子：</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071123808-8438c523-0fb5-4f9f-9f5d-4d39be55a047.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071128997-c32c561e-f1ed-4014-b030-b128dcba6a5c.png"></p><h3 id="Vector-Iota-Instruction"><a href="#Vector-Iota-Instruction" class="headerlink" title="Vector Iota Instruction"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"></font><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Iota Instruction</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">viota.m 指令读取源向量mask寄存器， 并向目的寄存器中依次写入元素。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">写入的规则是： 索引值小于该元素的所有元素之和</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071149339-8b9be780-2951-4362-a7f1-743e008308cf.png"><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);"><br></font></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">viota.m指令可以与memory scatter指令组合以实现向量压缩方法：</font></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071161190-2f5e8227-9717-467e-8e1b-eadf957bd703.png"></li></ul><h3 id="Vector-Element-Index-Instruction"><a href="#Vector-Element-Index-Instruction" class="headerlink" title="Vector Element Index Instruction"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Element Index Instruction</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">将每个元素的index写到目的寄存器组</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071186554-d8ce90a6-1a6c-40ba-ba08-75b6a32f10af.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vid.v可以用viota.m实现</font></li></ul><h2 id="Vector-Permutation-Instructions"><a href="#Vector-Permutation-Instructions" class="headerlink" title="Vector Permutation Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Vector Permutation Instructions</font></h2><h3 id="16-1-Integer-Scalar-Move-Instructions"><a href="#16-1-Integer-Scalar-Move-Instructions" class="headerlink" title="16.1. Integer Scalar Move Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">16.1. Integer Scalar Move Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">该指令向vs2寄存器的第0个元素传入一个标量值</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071207786-69f38877-6456-4674-ac72-d2042663a0fa.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">如果SEW&gt;XLEN, 则只传输XLEN bit， SEW-XLEN个高位将被忽略；如果SEW&lt; XLEN，则将有符号扩展到XLEN位</font></li></ul><h3 id="16-2-Floating-Point-Scalar-Move-Instructions"><a href="#16-2-Floating-Point-Scalar-Move-Instructions" class="headerlink" title="16.2. Floating-Point Scalar Move Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">16.2. Floating-Point Scalar Move Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">与上一条指令类似， 只是换成了浮点寄存器：</font></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071207803-78cca748-2636-4bd5-b9a1-8e275b297811.png"></li></ul><h3 id="16-3-Vector-Slide-Instructions"><a href="#16-3-Vector-Slide-Instructions" class="headerlink" title="16.3. Vector Slide Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">16.3. Vector Slide Instructions</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">slide操作比寄存器聚集指令更高效（gather)</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">2的幂次的slide会比较快</font></li></ul><h4 id="16-3-1-Vector-Slideup-Instructions"><a href="#16-3-1-Vector-Slideup-Instructions" class="headerlink" title="16.3.1. Vector Slideup Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">16.3.1. Vector Slideup Instructions</font></h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071208007-2ed91094-1b71-4770-8741-1b53244f9952.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">offset可以由rs1指定， 也可以由立即数产生</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">从offset到vl的元素会被覆盖：</font></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071208033-2aed0e34-8fc9-4d85-a71e-daf11580a00b.png"></li></ul><h4 id="16-3-2-Vector-Slidedown-Instructions"><a href="#16-3-2-Vector-Slidedown-Instructions" class="headerlink" title="16.3.2. Vector Slidedown Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">16.3.2. Vector Slidedown Instructions</font></h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071208029-1a2e8992-a162-4cdd-a758-941a581d5a6e.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071208299-beed2dd1-f06c-4f8d-b8d7-107643b6076b.png"></p><h4 id="16-3-3-Vector-Slide1up"><a href="#16-3-3-Vector-Slide1up" class="headerlink" title="16.3.3. Vector Slide1up"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">16.3.3. Vector Slide1up</font></h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071208396-f6a31dad-b227-408c-877c-0050dbbc33fe.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071208662-9fe5377a-4220-401b-a677-99a5252f2560.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">该指令要求目的向量寄存器组不能和源向量寄存器组有交叠</font></li></ul><h4 id="16-3-4-Vector-Slide1down-Instruction"><a href="#16-3-4-Vector-Slide1down-Instruction" class="headerlink" title="16.3.4. Vector Slide1down Instruction"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">16.3.4. Vector Slide1down Instruction</font></h4><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071208677-33458820-449e-4461-a0ba-c6c41968c89a.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071208944-280a1a73-8028-4c92-9889-bb2325bc18e5.png"></p><h3 id="16-4-Vector-Register-Gather-Instructions"><a href="#16-4-Vector-Register-Gather-Instructions" class="headerlink" title="16.4. Vector Register Gather Instructions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">16.4. Vector Register Gather Instructions</font></h3><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071209204-db660753-35e6-418e-9fa0-bef9fe27958a.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vrgatherei16.vv form uses SEW/LMUL for the data in vs2 but EEW=16 and EMUL = (16/SEW)*LMUL for the indices in vs1.</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">当SEW=8时，每个vs1的元素只能索引256个数据。可能是不够的。所以增加了vrgatherei16指令，使用EEW=16, 可以索引64K的元素。另外，当SEW&gt;16时，可能也是浪费的（没有那么多向量元素来给你索引），此时使用EEW=16也节省了向量寄存器空间</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持标量和立即数形式的gather指令：</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071209222-5490fdfc-e592-4845-8775-14320219feaf.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">此时只会从源寄存器读出一个元素</font></li></ul><h3 id="16-5-Vector-Compress-Instruction"><a href="#16-5-Vector-Compress-Instruction" class="headerlink" title="16.5. Vector Compress Instruction"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">16.5. Vector Compress Instruction</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vs1是一个mask寄存器，可以使用vs1中=1的部分选择vs2的元素连续地放入vd</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vd中余下的元素遵循尾部不可知原则。</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071209550-d434b30c-3223-433c-9653-6c2a8eb0c876.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071209474-98d40d99-77c0-470e-b204-7180184178ce.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vstart=0时， 该指令会上报陷入。vstart不为0时， 该指令会出发非法指令异常</font></li></ul><h4 id="16-5-1-Synthesizing-vdecompress"><a href="#16-5-1-Synthesizing-vdecompress" class="headerlink" title="16.5.1. Synthesizing vdecompress"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">16.5.1. Synthesizing vdecompress</font></h4><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">该指令将一个压缩的向量按照mask还原</font></li></ul><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071209740-10bc93bc-f68f-460c-ab35-65aef9b61fa6.png"></p><h3 id="16-6-Whole-Vector-Register-Move"><a href="#16-6-Whole-Vector-Register-Move" class="headerlink" title="16.6. Whole Vector Register Move"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">16.6. Whole Vector Register Move</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vmv<nr>r.v 指令可以拷贝整个向量寄存器或向量寄存器组到目的寄存器。</nr></font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">nr值表示向量寄存器的个数</font></li><li><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071210086-bbbccb3d-6a1b-41fe-a760-78c07da236bf.png"></li></ul><h2 id="17-Exception-Handling"><a href="#17-Exception-Handling" class="headerlink" title="17. Exception Handling"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">17. Exception Handling</font></h2><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">在一条向量指令执行时发生了陷入（可以是异常或者中断触发的），则*epc CSR寄存器会被指向陷入发生的那条向量寄存器的指针所覆盖。此时vstart CSR的内容就是陷入发生时的那个元素的索引</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">vstart CSR是用来允许恢复部分执行的向量指令，以减少中断延迟的。这类似于IBM 3090向量工具中的方案。如果没有vstart CSR，则实现必须保证整个向量指令总是可以在原子上完成，而不产生陷阱。所以vstart实际上允许向量指令在执行期间发生陷入，陷入处理结束后再从新的vstart处继续执行。这是因为很难保证在有stride load/store，scatter/gather操作以及按需分页的虚拟存储器的前提下保证向量指令的原子性。</font></li></ul><h3 id="17-1-Precise-vector-traps"><a href="#17-1-Precise-vector-traps" class="headerlink" title="17.1. Precise vector traps"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">17.1. Precise vector traps</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">精确的向量陷阱需要：</font></li></ul><ol><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">在陷入发生前的向量指令都需要已经提交了结果</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">比陷入向量指令更加新的指令不能改变架构状态</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">陷入向量指令中影响vstart之前的结果元素的任何操作都提交了它们的结果</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">陷入向量指令中影响vstart处或之后元素的任何操作都不会改变架构状态，除非重新启动和完成受影响的向量指令，否则这些指令不能正确更新架构状态</font></li></ol><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">此处我们稍微放宽一些最后一条原则，修改为允许vstart之后的元素在陷入发生后被修改，因为实际上当陷入处理结束，重新从vstart处执行该向量指令时，这些元素就会被覆盖，所以问题不大</font></li></ul><h3 id="17-2-Imprecise-vector-traps"><a href="#17-2-Imprecise-vector-traps" class="headerlink" title="17.2. Imprecise vector traps"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">17.2. Imprecise vector traps</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">非精确的异常</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">新于<em>epc的指令可以提交结果，旧于</em>epc的指令可以未完成执行</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">不精确陷阱主要用于报告错误和终止执行是适当响应的情况。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">专家可能会指定中断是精确的，而其他陷阱是不精确的。我们假设许多嵌入式实现只会为在致命（fatal）错误上的向量指令生成不精确的陷阱，因为它们不需要可恢复的陷阱。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">在当前的标准扩展中，</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">不支持</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">使用不精确的陷阱。</font></li></ul><h3 id="17-3-Selectable-precise-x2F-imprecise-traps"><a href="#17-3-Selectable-precise-x2F-imprecise-traps" class="headerlink" title="17.3. Selectable precise/imprecise traps"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">17.3. Selectable precise/imprecise traps</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">一些专家可能会选择提供一个特权模式位来在精确和不精确的向量陷阱之间进行选择。不精确模式会在高性能下运行，但可能会使其无法识别错误的原因，而精确模式会运行得更慢，但支持错误的调试，尽管有可能不会经历与不精确模式相同的错误。</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">在当前的标准扩展中，</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">不支持</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">这种模式。</font></li></ul><h3 id="17-4-Swappable-traps"><a href="#17-4-Swappable-traps" class="headerlink" title="17.4. Swappable traps"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">17.4. Swappable traps</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">另一种陷阱模式可以支持矢量单元中的可交换状态，在陷阱上，特殊指令可以保存和恢复矢量单元的微体系结构状态，以允许在不精确的陷阱周围继续正确执行。</font><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">在当前的标准扩展中，</font><strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">不支持</font></strong><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">这种模式。</font></li></ul></li></ul><h2 id="18-Standard-Vector-Extensions"><a href="#18-Standard-Vector-Extensions" class="headerlink" title="18. Standard Vector Extensions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">18. Standard Vector Extensions</font></h2><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">一组用于嵌入式使用的较小扩展用“Zve”命名。而为应用程序处理器设计的一个更大的向量扩展被命名为单字母V扩展。还提供了一个向量长度扩展，名为“Zvl”</font></li></ul><h3 id="18-1-Zvl-Minimum-Vector-Length-Standard-Extensions"><a href="#18-1-Zvl-Minimum-Vector-Length-Standard-Extensions" class="headerlink" title="18.1. Zvl*: Minimum Vector Length Standard Extensions"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">18.1. Zvl*: Minimum Vector Length Standard Extensions</font></h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202411102054935.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">具有更长VLEN的扩展都向下兼容更小VLEN的扩展</font></li></ul><h3 id="18-2-Zve-Vector-Extensions-for-Embedded-Processors"><a href="#18-2-Zve-Vector-Extensions-for-Embedded-Processors" class="headerlink" title="18.2. Zve*: Vector Extensions for Embedded Processors"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">18.2. Zve*: Vector Extensions for Embedded Processors</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">针对嵌入式领域：</font></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202411102054587.png"></p><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">具有精确的陷阱</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持所有的向量load/store指令</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持所以向量整数运算</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持所有向量定点运算</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持所以向量整数单宽度和加宽/归约指令</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持所有mask指令</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持所有序列指令</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Zve32f和64f需要标量core支持F扩展或Zfinx扩展</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">Zve64d需要标量core支持D扩展或Zdinx扩展</font></li></ul><h3 id="18-3-V-Vector-Extension-for-Application-Processors"><a href="#18-3-V-Vector-Extension-for-Application-Processors" class="headerlink" title="18.3. V: Vector Extension for Application Processors"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">18.3. V: Vector Extension for Application Processors</font></h3><ul><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">单字一个V是应用级处理器的向量扩展</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">misa.v 会被支持misa和vector的实现置位</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">具有精确的陷阱</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">需要Zvl128b</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持EEW=8,16,32,64</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持vset{i}vl{i}指令</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持所有的向量load/store指令</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持所以向量整数运算</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持所有向量定点运算</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持所以向量整数单宽度和加宽/归约指令</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持所有mask指令</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">支持所有序列指令</font></li><li><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">需要标量core支持F扩展和D扩展。并实现EEW=32/64的所有浮点向量指令及浮点归约和加宽指令。</font></li></ul><h2 id="19-Vector-Instruction-Listing"><a href="#19-Vector-Instruction-Listing" class="headerlink" title="19. Vector Instruction Listing"></a><font style="color:rgb(29, 33, 41);background-color:rgb(247, 248, 250);">19. Vector Instruction Listing</font></h2><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071210230-cee04cbe-00b4-4561-98ce-637e79bb9706.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071210295-0afa1efb-8bec-4fbe-9523-da47660c1204.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071210736-36d85d41-6e21-4d56-8319-dc937f16f023.png"></p><p><img src="https://cdn.nlark.com/yuque/0/2024/png/42827743/1729071210740-4c1a695a-5f57-41e0-96b8-7f1a6c3792a6.png">  </p>]]></content>
      
      
      <categories>
          
          <category> riscv </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023最后一天的留言</title>
      <link href="//post/2023%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9%E7%9A%84%E7%95%99%E8%A8%80.html"/>
      <url>//post/2023%E6%9C%80%E5%90%8E%E4%B8%80%E5%A4%A9%E7%9A%84%E7%95%99%E8%A8%80.html</url>
      
        <content type="html"><![CDATA[<p>这一年突然变得很少发朋友圈，越来越不习惯在社交平台更新自己的生活。所以不断的问自己是不是被琐事掩埋了生活的光点，直到年末的今天。<br>静下心来回忆过去，还是有不少值得留念的瞬间。</p><p>家人大病痊愈，身体健康。</p><p>和女朋友在一起的第三年，终于摆脱异地，一起在北京读研。</p><p>认识无数新朋友和前辈，找到一点未来的方向。去全国各地和老朋友相见，延续过去的羁绊。<br>……</p><p>（就用女朋友生日那天一起去看了林俊杰演唱会的紫光海来结束这一年）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202312312326312.jpg" alt="1df906dbc94349e011dcd4108aeb1d9"></p><p>希望2024年，戒骄戒躁，继续向前，热爱生活，珍惜当下，把更多的时间交给自己和身边的人，多多自省，多多陪伴。</p><p><strong>2023，再见</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202312312340229.png" alt="image-20231231234037078"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ysyx预学习记录--pa1</title>
      <link href="//post/ysyx%E9%A2%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-pa1.html"/>
      <url>//post/ysyx%E9%A2%84%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95-pa1.html</url>
      
        <content type="html"><![CDATA[<p>写下此篇以记录pa1的完成过程：缺乏一些知识和对数据结构、c语言基础不扎实的情况下，不断的debug和理解框架代码查阅资料中完成”简答”的pa1。充分认识自己本科知识的不扎实 <span class="github-emoji" style="display:inline;vertical-align:middle"><span>😑</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f611.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>,前半部分是讲义的知识点以及我的小更改，后半部分是代码和思路实现，<strong>由于本博客只是我自己学习记录从未发布，所以不存在分享代码的情况</strong> </p><p>试运行游戏</p><p>make ARCH=native run mainargs=mario</p><h2 id="编译有点慢"><a href="#编译有点慢" class="headerlink" title="编译有点慢?"></a>编译有点慢?</h2><p><code>make</code>程序默认使用单线程来顺序地编译所有文件</p><p>需要通过<code>lscpu</code>命令来查询你的系统中有多少个CPU. 然后在运行<code>make</code>的时候添加一个<code>-j?</code>的参数, 其中<code>?</code>为你查询到的CPU数量</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202308101527087.png" alt="image-20230730194404353"></p><p>为了查看编译加速的效果, 你可以在编译的命令前面添加<code>time</code>命令, 它将会对紧跟在其后的命令的执行时间进行统计, 你只需要关注<code>total</code>一栏的时间即可. 你可以通过<code>make clean</code>清除所有的编译结果, 然后重新编译并统计时间, 对比单线程编译和多线程编译的编译时间; 你也可以尝试不同的线程数量进行编译, 并对比加速比.</p><h3 id="ccache"><a href="#ccache" class="headerlink" title="ccache"></a>ccache</h3><p>如果你通过<code>man</code>阅读<code>ccache</code>的手册, 你会发现<code>ccache</code>是一个<code>compiler cache</code>. <code>cache</code>是计算机领域中的一个术语, 你将会在后续的ICS课程中学习相关的内容.</p><p>为了使用<code>ccache</code>, 你还需要进行一些配置的工作. 首先运行如下命令来查看一个命令的所在路径:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> gcc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它默认会输出<code>/usr/bin/gcc</code>, 表示当你执行<code>gcc</code>命令时, 实际执行的是<code>/usr/bin/gcc</code>. 作为一个RTFM的练习, 接下来你需要阅读<code>man ccache</code>中的内容, 并根据手册的说明, 在<code>.bashrc</code>文件中对某个环境变量进行正确的设置. 如果你的设置正确且生效, 重新运行<code>which gcc</code>, 你将会看到输出变成了<code>/usr/lib/ccache/gcc</code>.</p><ol><li>在<code>.bashrc</code>文件中添加环境变量的设置。假设您希望将<code>gcc</code>命令指向<code>/usr/lib/ccache/gcc</code>，您可以添加以下行：</li></ol><pre class="line-numbers language-none"><code class="language-none">export PATH="/usr/lib/ccache:$PATH"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>让修改生效。运行以下命令以使更改生效：</li></ol><pre class="line-numbers language-none"><code class="language-none">source ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>source ~/.bashrc</code>是一个Bash shell命令，用于在当前的Bash会话中加载（或重新加载）<code>.bashrc</code>文件的内容。这个命令会读取并执行<code>.bashrc</code>文件中的所有命令，从而使文件中定义的别名、环境变量、函数和其他配置生效。</p><p>现在就可以来体验<code>ccache</code>的效果了. 首先先清除编译结果, 然后重新编译并统计时间. 你会发现这次编译时间反而比之前要更长一些, 这是因为除了需要开展正常的编译工作之外, <code>ccache</code>还需要花时间把目标文件存起来. 接下来再次清除编辑结果, 重新编译并统计时间, 你会发现第二次编译的速度有了非常明显的提升! 这说明<code>ccache</code>确实跳过了完全重复的编译过程, 发挥了加速的作用. 如果和多线程编译共同使用, 编译速度还能进一步加快!</p><h3 id="为NEMU编译时添加GDB调试信息"><a href="#为NEMU编译时添加GDB调试信息" class="headerlink" title="为NEMU编译时添加GDB调试信息"></a>为NEMU编译时添加GDB调试信息</h3><p>menuconfig已经为大家准备好相应选项了, 你只需要打开它:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">Build Options  [*] Enable debug information<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后清除编译结果并重新编译即可. 尝试阅读相关代码, 理解开启上述menuconfig选项后会导致编译NEMU时的选项产生什么变化.</p><p>make menuconfig</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202308101527142.png" alt="image-20230731123221931"></p><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><pre class="line-numbers language-text" data-language="text"><code class="language-text">make run<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="框架代码"><a href="#框架代码" class="headerlink" title="框架代码"></a>框架代码</h2><p>NEMU主要由4个模块构成: monitor, CPU, memory, 设备. 我们已经在上一小节简单介绍了CPU和memory的功能, 设备会在PA2中介绍, 目前不必关心.</p><p>Monitor(监视器)模块是为了方便地监控客户计算机的运行状态而引入的. 它除了负责与GNU/Linux进行交互(例如读入客户程序)之外, 还带有调试器的功能, 为NEMU的调试提供了方便的途径. 从概念上来说, monitor并不属于一个计算机的必要组成部分, 但对NEMU来说, 它是必要的基础设施. 如果缺少monitor模块, 对NEMU的调试将会变得十分困难.</p><h4 id="配置系统kconfig"><a href="#配置系统kconfig" class="headerlink" title="配置系统kconfig"></a>配置系统kconfig</h4><p>在一个有一定规模的项目中, 可配置选项的数量可能会非常多, 而且配置选项之间可能会存在关联, 比如打开配置选项A之后, 配置选项B就必须是某个值. 直接让开发者去管理这些配置选项是很容易出错的, 比如修改选项A之后, 可能会忘记修改和选项A有关联的选项B. 配置系统的出现则是为了解决这个问题.</p><p>NEMU中的配置系统位于<code>nemu/tools/kconfig</code>, 它来源于GNU/Linux项目中的kconfig, 我们进行了少量简化. kconfig定义了一套简单的语言, 开发者可以使用这套语言来编写”配置描述文件”. 在”配置描述文件”中, 开发者可以描述:</p><ul><li>配置选项的属性, 包括类型, 默认值等</li><li>不同配置选项之间的关系</li><li>配置选项的层次关系</li></ul><p>在NEMU项目中, “配置描述文件”的文件名都为<code>Kconfig</code>, 如<code>nemu/Kconfig</code>. 当你键入<code>make menuconfig</code>的时候, 背后其实发生了如下事件:</p><ul><li><p>检查<code>nemu/tools/kconfig/build/mconf</code>程序是否存在, 若不存在, 则编译并生成<code>mconf</code></p></li><li><p>检查<code>nemu/tools/kconfig/build/conf</code>程序是否存在, 若不存在, 则编译并生成<code>conf</code></p></li><li><p>运行命令<code>mconf nemu/Kconfig</code>, 此时<code>mconf</code>将会解析<code>nemu/Kconfig</code>中的描述, 以菜单树的形式展示各种配置选项, 供开发者进行选择</p></li><li><p>退出菜单时, <code>mconf</code>会把开发者选择的结果记录到<code>nemu/.config</code>文件中</p></li><li><p>运行命令</p><pre class="line-numbers language-none"><code class="language-none">conf --syncconfig nemu/Kconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>, 此时</p><pre class="line-numbers language-none"><code class="language-none">conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将会解析</p><pre class="line-numbers language-none"><code class="language-none">nemu/Kconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>中的描述, 并读取选择结果</p><pre class="line-numbers language-none"><code class="language-none">nemu/.config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>, 结合两者来生成如下文件:</p><ul><li>可以被包含到C代码中的宏定义(<code>nemu/include/generated/autoconf.h</code>), 这些宏的名称都是形如<code>CONFIG_xxx</code>的形式</li><li>可以被包含到Makefile中的变量定义(<code>nemu/include/config/auto.conf</code>)</li><li>可以被包含到Makefile中的, 和”配置描述文件”相关的依赖规则(<code>nemu/include/config/auto.conf.cmd</code>), 为了阅读代码, 我们可以不必关心它</li><li>通过时间戳来维护配置选项变化的目录树<code>nemu/include/config/</code>, 它会配合另一个工具<code>nemu/tools/fixdep</code>来使用, 用于在更新配置选项后节省不必要的文件编译, 为了阅读代码, 我们可以不必关心它</li></ul></li></ul><p><strong>所以, 目前我们只需要关心配置系统生成的如下文件:</strong></p><ul><li><strong><code>nemu/include/generated/autoconf.h</code>, 阅读C代码时使用</strong></li><li><strong><code>nemu/include/config/auto.conf</code>, 阅读Makefile时使用</strong></li></ul><h4 id="项目构建和Makefile"><a href="#项目构建和Makefile" class="headerlink" title="项目构建和Makefile"></a>项目构建和Makefile</h4><p>NEMU的Makefile会稍微复杂一些, 它具备如下功能:</p><h5 id="与配置系统进行关联"><a href="#与配置系统进行关联" class="headerlink" title="#与配置系统进行关联"></a><a href="https://ysyx.oscc.cc/docs/ics-pa/1.3.html#%E4%B8%8E%E9%85%8D%E7%BD%AE%E7%B3%BB%E7%BB%9F%E8%BF%9B%E8%A1%8C%E5%85%B3%E8%81%94">#</a>与配置系统进行关联</h5><p>通过包含<code>nemu/include/config/auto.conf</code>, 与kconfig生成的变量进行关联. 因此在通过menuconfig更新配置选项后, Makefile的行为可能也会有所变化.</p><h5 id="文件列表-filelist"><a href="#文件列表-filelist" class="headerlink" title="#文件列表(filelist)"></a><a href="https://ysyx.oscc.cc/docs/ics-pa/1.3.html#%E6%96%87%E4%BB%B6%E5%88%97%E8%A1%A8-filelist">#</a>文件列表(filelist)</h5><p>通过文件列表(filelist)决定最终参与编译的源文件. 在<code>nemu/src</code>及其子目录下存在一些名为<code>filelist.mk</code>的文件, 它们会根据menuconfig的配置对如下4个变量进行维护:</p><ul><li><code>SRCS-y</code> - 参与编译的源文件的候选集合</li><li><code>SRCS-BLACKLIST-y</code> - 不参与编译的源文件的黑名单集合</li><li><code>DIRS-y</code> - 参与编译的目录集合, 该目录下的所有文件都会被加入到<code>SRCS-y</code>中</li><li><code>DIRS-BLACKLIST-y</code> - 不参与编译的目录集合, 该目录下的所有文件都会被加入到<code>SRCS-BLACKLIST-y</code>中</li></ul><p>Makefile会包含项目中的所有<code>filelist.mk</code>文件, 对上述4个变量的追加定义进行汇总, 最终会过滤出在<code>SRCS-y</code>中但不在<code>SRCS-BLACKLIST-y</code>中的源文件, 来作为最终参与编译的源文件的集合.</p><p>Makefile的编译规则在<code>nemu/scripts/build.mk</code>中定义:</p><pre class="line-numbers language-makefile" data-language="makefile"><code class="language-makefile"><span class="token target symbol"><span class="token variable">$</span>(OBJ_DIR)/%.o</span><span class="token punctuation">:</span> %.c  <span class="token operator">@</span>echo + CC <span class="token variable">$&lt;</span>  <span class="token operator">@</span>mkdir -p <span class="token variable">$</span><span class="token punctuation">(</span><span class="token function">dir</span> <span class="token variable">$@</span><span class="token punctuation">)</span>  <span class="token operator">@</span><span class="token variable">$</span><span class="token punctuation">(</span>CC<span class="token punctuation">)</span> <span class="token variable">$</span><span class="token punctuation">(</span>CFLAGS<span class="token punctuation">)</span> -c -o <span class="token variable">$@</span> <span class="token variable">$&lt;</span><span class="token target symbol">  <span class="token variable">$</span>(call call_fixdep, <span class="token variable">$</span>(@</span><span class="token punctuation">:</span>.o<span class="token operator">=</span>.d<span class="token punctuation">)</span>, <span class="token variable">$@</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中关于<code>$@</code>和<code>$&lt;</code>等符号的含义, 可以RTFM进行了解. <code>call_fixdep</code>的调用用于生成更合理的依赖关系, 目前我们主要关注编译的命令, 因此可以先忽略<code>call_fixdep</code>.</p><p>我们已经在上文提到过, kconfig会根据配置选项的结果在 <code>nemu/include/generated/autoconf.h</code>中定义一些形如<code>CONFIG_xxx</code>的宏, 我们可以在C代码中通过条件编译的功能对这些宏进行测试, 来判断是否编译某些代码. 例如, 当<code>CONFIG_DEVICE</code>这个宏没有定义时, 设备相关的代码就无需进行编译.</p><p>为了编写更紧凑的代码, 我们在<code>nemu/include/macro.h</code>中定义了一些专门用来对宏进行测试的宏. 例如<code>IFDEF(CONFIG_DEVICE, init_device());</code>表示, 如果定义了<code>CONFIG_DEVICE</code>, 才会调用<code>init_device()</code>函数; 而<code>MUXDEF(CONFIG_TRACE, "ON", "OFF")</code>则表示, 如果定义了<code>CONFIG_TRACE</code>, 则预处理结果为<code>"ON"</code>(<code>"OFF"</code>在预处理后会消失), 否则预处理结果为<code>"OFF"</code>.</p><p>第一项工作就是将一个内置的客户程序读入到内存中. 为了理解这项工作, 我们还需要理清三个问题:</p><ol><li>客户程序是什么? 我们知道, 程序是由指令构成的, 而不同ISA的指令也各不相同(想象一下用不同的语言来表达”你好”的意思), 因而程序本身肯定是ISA相关的. 因此, 我们把内置客户程序放在<code>nemu/src/isa/$ISA/init.c</code>中. 内置客户程序的行为非常简单, 它只包含少数几条指令, 甚至算不上在做一些有意义的事情.</li><li>内存是什么? 我们可以把内存看作一段连续的存储空间, 而内存又是字节编址的(即一个内存位置存放一个字节的数据), 在C语言中我们就很自然地使用一个<code>uint8_t</code>类型的数组来对内存进行模拟. NEMU默认为客户计算机提供128MB的物理内存(见<code>nemu/src/memory/paddr.c</code>中定义的<code>pmem</code>),</li><li>需要将客户程序读入到内存的什么位置? 为了让客户计算机的CPU可以执行客户程序, 因此我们需要一种方式让客户计算机的CPU知道客户程序的位置. 我们采取一种最简单的方式: 约定. 具体地, 我们让monitor直接把客户程序读入到一个固定的内存位置<code>RESET_VECTOR</code>. <code>RESET_VECTOR</code>的值在<code>nemu/include/memory/paddr.h</code>中定义.</li></ol><blockquote><p>优美地退出</p><p>为了测试大家是否已经理解框架代码, 我们给大家设置一个练习: 如果在运行NEMU之后直接键入<code>q</code>退出, 你会发现终端输出了一些错误信息. 请分析这个错误信息是什么原因造成的, 然后尝试在NEMU中修复它.</p></blockquote><p>更改sdb.c中</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_q</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  nemu_state<span class="token punctuation">.</span>state <span class="token operator">=</span> NEMU_QUIT<span class="token punctuation">;</span>   <span class="token comment">//不确定这么改好不好</span>  <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="makefile真牛B"><a href="#makefile真牛B" class="headerlink" title="makefile真牛B"></a>makefile真牛B</h3><h1 id="Simple-Debugger-sdb"><a href="#Simple-Debugger-sdb" class="headerlink" title="Simple Debugger, sdb"></a>Simple Debugger, sdb</h1><p>总体要求：</p><table><thead><tr><th>命令</th><th>格式</th><th>使用举例</th><th>说明</th></tr></thead><tbody><tr><td>帮助(1)</td><td><code>help</code></td><td><code>help</code></td><td>打印命令的帮助信息</td></tr><tr><td>继续运行(1)</td><td><code>c</code></td><td><code>c</code></td><td>继续运行被暂停的程序</td></tr><tr><td>退出(1)</td><td><code>q</code></td><td><code>q</code></td><td>退出NEMU</td></tr><tr><td>单步执行</td><td><code>si [N]</code></td><td><code>si 10</code></td><td>让程序单步执行<code>N</code>条指令后暂停执行, 当<code>N</code>没有给出时, 缺省为<code>1</code></td></tr><tr><td>打印程序状态</td><td><code>info SUBCMD</code></td><td><code>info r</code> <code>info w</code></td><td>打印寄存器状态 打印监视点信息</td></tr><tr><td>扫描内存(2)</td><td><code>x N EXPR</code></td><td><code>x 10 $esp</code></td><td>求出表达式<code>EXPR</code>的值, 将结果作为起始内存 地址, 以十六进制形式输出连续的<code>N</code>个4字节</td></tr><tr><td>表达式求值</td><td><code>p EXPR</code></td><td><code>p $eax + 1</code></td><td>求出表达式<code>EXPR</code>的值, <code>EXPR</code>支持的 运算请见<a href="https://ysyx.oscc.cc/docs/ics-pa/1.6.html">调试中的表达式求值</a>小节</td></tr><tr><td>设置监视点</td><td><code>w EXPR</code></td><td><code>w *0x2000</code></td><td>当表达式<code>EXPR</code>的值发生变化时, 暂停程序执行</td></tr><tr><td>删除监视点</td><td><code>d N</code></td><td><code>d 2</code></td><td>删除序号为<code>N</code>的监视点</td></tr></tbody></table><h2 id="单步执行-si-N"><a href="#单步执行-si-N" class="headerlink" title="单步执行 si [N]"></a>单步执行 si [N]</h2><p>主要理解ysyx框架的代码，理解cpu excute的机制：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_si</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// printf("%s\n", args);</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>args <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">sscanf</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"move %dword(s)\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">cpu_exec</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>观察代码理解 cpu_exec(n)的意思，然后从命令行输入中提取出n的值，即可完成</p><h2 id="info-SUBCMD"><a href="#info-SUBCMD" class="headerlink" title="info SUBCMD"></a>info SUBCMD</h2><h3 id="info-r"><a href="#info-r" class="headerlink" title="info r"></a>info r</h3><p>打印pc和所有其他寄存器：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202308101527123.png" alt="image-20230810141610998"></p><h4 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h4><p>ysyx在reg.c中预留好了接口,稍作修改即可：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">isa_reg_display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[0m\033[1;33m %3s:\033[0m \033[0m\033[1;36m 0x%08x\033[0m\n"</span><span class="token punctuation">,</span> <span class="token string">"pc"</span><span class="token punctuation">,</span> cpu<span class="token punctuation">.</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[0m\033[1;33m %3s:\033[0m \033[0m\033[1;36m 0x%08x\033[0m\n"</span><span class="token punctuation">,</span> regs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">gpr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="info-w"><a href="#info-w" class="headerlink" title="info w"></a>info w</h3><p>打印监视点状态，做完监视点后会预留一个 监视点信息打印的接口inf</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202308101527098.png" alt="image-20230810142851612"></p><h4 id="实现思路-1"><a href="#实现思路-1" class="headerlink" title="实现思路"></a>实现思路</h4><p>见后面监视点</p><h2 id="扫描内存-x-N-EXPR"><a href="#扫描内存-x-N-EXPR" class="headerlink" title="扫描内存 x N EXPR"></a>扫描内存 <code>x N EXPR</code></h2><p>扫描内存的实现也不难, 对命令进行解析之后, 先求出表达式的值.</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">x 10 0x80000000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 解析出待扫描内存的起始地址之后, 就可以使用循环将指定长度的内存数据通过十六进制打印出来. 如果你不知道要怎么输出, 同样的, 你可以参考GDB中的输出. 问题是, 我们要如何访问客户计算机的内存数据呢? </p><h4 id="RTFSC中："><a href="#RTFSC中：" class="headerlink" title="RTFSC中："></a><strong>RTFSC</strong>中：</h4><ul><li><p>内存通过在<code>nemu/src/memory/paddr.c</code>中定义的大数组<code>pmem</code>来模拟. 在客户程序运行的过程中, 总是使用<code>vaddr_read()</code>和<code>vaddr_write()</code> (在<code>nemu/src/memory/vaddr.c</code>中定义)来访问模拟的内存. vaddr, paddr分别代表虚拟地址和物理地址. 这些概念在将来才会用到, 目前不必深究, 但从现在开始保持接口的一致性可以在将来避免一些不必要的麻烦.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">cmd_x</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//扫描内存</span>  <span class="token keyword">int</span> N<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">char</span><span class="token operator">*</span> EXPR <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">65535</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  bool success <span class="token operator">=</span> true<span class="token punctuation">;</span>  <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token function">sscanf</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> <span class="token string">"%d %s"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>N<span class="token punctuation">,</span> EXPR<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token class-name">word_t</span> addr <span class="token operator">=</span> <span class="token function">expr</span><span class="token punctuation">(</span>EXPR<span class="token punctuation">,</span> <span class="token operator">&amp;</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>result <span class="token operator">!=</span> <span class="token number">2</span><span class="token operator">||</span>N<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Invalid input format. Expected 'x N EXPR'.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span>    <span class="token punctuation">{</span>    <span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\033[32m 0x%08x : \033[0m "</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>       j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x%08x "</span><span class="token punctuation">,</span> <span class="token function">paddr_read</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>     j<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     addr <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>sscanf <strong>返回值是成功匹配并提取的参数个数</strong></p><p><strong>完成这个的前提是表达式求值</strong></p></li></ul><h4 id="实现思路-2"><a href="#实现思路-2" class="headerlink" title="实现思路"></a>实现思路</h4><p>关键要理解内存的模型，理清楚word byte 等等关系后再计算偏移量</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202308101527153.png" alt="image-20230810143459511"></p><p>这期间遇到一些小问题</p><p>在我输入0x80000001后，发现内存并不是直接向后移动一个字节，查阅riscV 后发现是大小端的问题，但是具体原因还没完全理解，等再补充一些内存的知识后再来解释。</p><h2 id="表达式求值-p-EXPR"><a href="#表达式求值-p-EXPR" class="headerlink" title="表达式求值 p EXPR"></a>表达式求值 <code>p EXPR</code></h2><blockquote><p>这个是pa1里的重难点。</p></blockquote><h3 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h3><p>第一步首先学习正则表达式，把需要的子串提取出来</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token punctuation">{</span><span class="token string">"\\$[0-9a-z]+"</span><span class="token punctuation">,</span> TK_REG<span class="token punctuation">}</span><span class="token punctuation">,</span>         <span class="token comment">// reg</span>  <span class="token punctuation">{</span><span class="token string">"0[xX][0-9a-fA-F]+"</span><span class="token punctuation">,</span> TK_HEXNUM<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// 16进制</span>  <span class="token punctuation">{</span><span class="token string">" +"</span><span class="token punctuation">,</span> TK_NOTYPE<span class="token punctuation">}</span><span class="token punctuation">,</span>                      <span class="token comment">// spaces 匹配多个空格</span>  <span class="token punctuation">{</span><span class="token string">"\\*"</span><span class="token punctuation">,</span> <span class="token char">'*'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                     <span class="token comment">// multiply</span>  <span class="token punctuation">{</span><span class="token string">"\\/"</span><span class="token punctuation">,</span> <span class="token char">'/'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                     <span class="token comment">// divide</span>  <span class="token punctuation">{</span><span class="token string">"\\("</span><span class="token punctuation">,</span> <span class="token char">'('</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                     <span class="token comment">// left bracket</span>  <span class="token punctuation">{</span><span class="token string">"\\)"</span><span class="token punctuation">,</span> <span class="token char">')'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                     <span class="token comment">// right bracket</span>  <span class="token punctuation">{</span><span class="token string">"[0-9]+"</span><span class="token punctuation">,</span> TK_NUM<span class="token punctuation">}</span><span class="token punctuation">,</span>               <span class="token comment">// decimal</span>  <span class="token punctuation">{</span><span class="token string">"\\-"</span><span class="token punctuation">,</span> <span class="token char">'-'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                     <span class="token comment">// minus</span>  <span class="token punctuation">{</span><span class="token string">"\\+"</span><span class="token punctuation">,</span> <span class="token char">'+'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                     <span class="token comment">// plus</span>  <span class="token punctuation">{</span><span class="token string">"=="</span><span class="token punctuation">,</span> TK_EQ<span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token comment">// doubleequal</span>  <span class="token punctuation">{</span><span class="token string">"!="</span><span class="token punctuation">,</span> TK_NOTEQ<span class="token punctuation">}</span><span class="token punctuation">,</span>                 <span class="token comment">// not equal</span>  <span class="token punctuation">{</span><span class="token string">"&lt;="</span><span class="token punctuation">,</span> TK_LESSEQ<span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// less equal</span>  <span class="token punctuation">{</span><span class="token string">"&gt;="</span><span class="token punctuation">,</span> TK_GREATEQ<span class="token punctuation">}</span><span class="token punctuation">,</span>               <span class="token comment">// greater equal</span>  <span class="token punctuation">{</span><span class="token string">"&lt;"</span><span class="token punctuation">,</span> <span class="token char">'&lt;'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                       <span class="token comment">// less</span>  <span class="token punctuation">{</span><span class="token string">"&gt;"</span><span class="token punctuation">,</span> <span class="token char">'&gt;'</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                       <span class="token comment">// greater</span>  <span class="token punctuation">{</span><span class="token string">"&amp;&amp;"</span><span class="token punctuation">,</span> TK_AND<span class="token punctuation">}</span><span class="token punctuation">,</span>                   <span class="token comment">// and</span>  <span class="token punctuation">{</span><span class="token string">"\\|\\|"</span><span class="token punctuation">,</span> TK_OR<span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token comment">// or</span>  <span class="token punctuation">{</span><span class="token string">"!"</span><span class="token punctuation">,</span> <span class="token char">'!'</span><span class="token punctuation">}</span>                        <span class="token comment">// not</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的是reg类型我并没有在一开始做判断输入是否合法（是否RISC V的reg名称）而是在reg求值的函数中判断。</p><p>另外指针类型并未出现在这个表中，是因为在后续区分*是乘还是指针时再进行判断。</p><p>token结构体如下</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">token</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> type<span class="token punctuation">;</span>  <span class="token keyword">char</span> str<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> Token<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其中<code>type</code>成员用于记录token的类型. 大部分token只要记录类型就可以了, 例如<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, 但这对于有些token类型是不够的: 如果我们只记录了一个十进制整数token的类型, 在进行求值的时候我们还是不知道这个十进制整数是多少. 这时我们应该将token相应的子串也记录下来, <code>str</code>成员就是用来做这件事情的</p><h4 id="实现思路-3"><a href="#实现思路-3" class="headerlink" title="实现思路"></a>实现思路</h4><p>具体解析过程是在make_token函数中进行</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> bool <span class="token function">make_token</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> position <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 当前处理到的位置</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token class-name">regmatch_t</span> pmatch<span class="token punctuation">;</span>  nr_token <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>e<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token char">'\0'</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment">/* Try all rules one by one. */</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> NR_REGEX<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">regexec</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>re<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> e <span class="token operator">+</span> position<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>pmatch<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> pmatch<span class="token punctuation">.</span>rm_so <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">char</span> <span class="token operator">*</span>substr_start <span class="token operator">=</span> e <span class="token operator">+</span> position<span class="token punctuation">;</span>        <span class="token keyword">int</span> substr_len <span class="token operator">=</span> pmatch<span class="token punctuation">.</span>rm_eo<span class="token punctuation">;</span>        <span class="token function">Log</span><span class="token punctuation">(</span><span class="token string">"match rules[%d] = \"%s\" at position %d with len %d: %.*s"</span><span class="token punctuation">,</span>            i<span class="token punctuation">,</span> rules<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>regex<span class="token punctuation">,</span> position<span class="token punctuation">,</span> substr_len<span class="token punctuation">,</span> substr_len<span class="token punctuation">,</span> substr_start<span class="token punctuation">)</span><span class="token punctuation">;</span>        position <span class="token operator">+=</span> substr_len<span class="token punctuation">;</span>        <span class="token comment">/* TODO: Now a new token is recognized with rules[i]. Add codes         * to record the token in the array `tokens'. For certain types         * of tokens, some extra actions should be performed.         */</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>rules<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>token_type<span class="token punctuation">)</span>        <span class="token punctuation">{</span>        <span class="token keyword">case</span> TK_NOTYPE<span class="token operator">:</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> TK_NUM<span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TK_NUM<span class="token punctuation">;</span>          <span class="token function">strncpy</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">,</span> substr_start<span class="token punctuation">,</span> substr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">[</span>substr_len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token char">'+'</span><span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token char">'+'</span><span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token char">'-'</span><span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token char">'-'</span><span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token char">'*'</span><span class="token operator">:</span>        <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>nr_token <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>nr_token <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> TK_NUM <span class="token operator">&amp;&amp;</span> tokens<span class="token punctuation">[</span>nr_token <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> <span class="token char">')'</span><span class="token operator">&amp;&amp;</span> tokens<span class="token punctuation">[</span>nr_token <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> TK_HEXNUM<span class="token operator">&amp;&amp;</span> tokens<span class="token punctuation">[</span>nr_token <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> TK_REG<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token punctuation">{</span>            tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TK_DEREF<span class="token punctuation">;</span> <span class="token comment">// 判断是不是指针：GDB里 1**1也能识别为指针</span>          <span class="token punctuation">}</span>          <span class="token keyword">else</span>          <span class="token punctuation">{</span>            tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token char">'*'</span><span class="token punctuation">;</span>                     <span class="token punctuation">}</span>           nr_token<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token char">'/'</span><span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token char">'/'</span><span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token char">'('</span><span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token char">'('</span><span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token char">')'</span><span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token char">')'</span><span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> TK_EQ<span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TK_EQ<span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> TK_NOTEQ<span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TK_NOTEQ<span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> TK_AND<span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TK_AND<span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> TK_OR<span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TK_OR<span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> TK_REG<span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TK_REG<span class="token punctuation">;</span>          <span class="token function">strncpy</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">,</span> substr_start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> substr_len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">[</span>substr_len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> TK_HEXNUM<span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TK_HEXNUM<span class="token punctuation">;</span>          <span class="token function">strncpy</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">,</span> substr_start<span class="token punctuation">,</span> substr_len<span class="token punctuation">)</span><span class="token punctuation">;</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">[</span>substr_len<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> TK_GREATEQ<span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TK_GREATEQ<span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> TK_LESSEQ<span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> TK_LESSEQ<span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token char">'&gt;'</span><span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token char">'&gt;'</span><span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token char">'&lt;'</span><span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token char">'&lt;'</span><span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">case</span> <span class="token char">'!'</span><span class="token operator">:</span>        <span class="token punctuation">{</span>          tokens<span class="token punctuation">[</span>nr_token<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">=</span> <span class="token char">'!'</span><span class="token punctuation">;</span>          nr_token<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">default</span><span class="token operator">:</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//退出for循环</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nr_token <span class="token operator">==</span> <span class="token number">65536</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"Too many tokens!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> false<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> NR_REGEX<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"no match at position %d\n%s\n%*.s^\n"</span><span class="token punctuation">,</span> position<span class="token punctuation">,</span> e<span class="token punctuation">,</span> position<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> TK_NUM <span class="token operator">&amp;&amp;</span> tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> TK_REG <span class="token operator">&amp;&amp;</span> tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> <span class="token char">'('</span> <span class="token operator">&amp;&amp;</span> tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> TK_HEXNUM <span class="token operator">&amp;&amp;</span> tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> TK_DEREF <span class="token operator">&amp;&amp;</span> tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> <span class="token char">'!'</span><span class="token punctuation">)</span> <span class="token operator">||</span>      <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>nr_token <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> TK_NUM <span class="token operator">&amp;&amp;</span> tokens<span class="token punctuation">[</span>nr_token <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> TK_REG <span class="token operator">&amp;&amp;</span> tokens<span class="token punctuation">[</span>nr_token <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> TK_HEXNUM <span class="token operator">&amp;&amp;</span> tokens<span class="token punctuation">[</span>nr_token <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> <span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Invalid expression!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> false<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整体思路是在框架代码遍历字符串的过程中，对每一个字符进行正则匹配，匹配到后，根据type字段写一个switch来判断具体的类型，并对str字段进行赋值。</p><p>需要注意的是如下几种情况</p><h5 id="TK-NUM：数字类型"><a href="#TK-NUM：数字类型" class="headerlink" title="TK_NUM：数字类型"></a>TK_NUM：数字类型</h5><p>记录整个字符串（因为未知长度）</p><h5 id="：判断是指针类型还是乘法"><a href="#：判断是指针类型还是乘法" class="headerlink" title="*：判断是指针类型还是乘法"></a>*：判断是指针类型还是乘法</h5><p>思路是判断前一个tokens是否为数字、寄存器或者’)’</p><h5 id="最后需要判断，tokens是否溢出，以及是否有不匹配的情况"><a href="#最后需要判断，tokens是否溢出，以及是否有不匹配的情况" class="headerlink" title="最后需要判断，tokens是否溢出，以及是否有不匹配的情况"></a>最后需要判断，tokens是否溢出，以及是否有不匹配的情况</h5><h5 id="另外需要判断是否存在字符串不是表达式的情况"><a href="#另外需要判断是否存在字符串不是表达式的情况" class="headerlink" title="另外需要判断是否存在字符串不是表达式的情况"></a>另外需要判断是否存在字符串不是表达式的情况</h5><blockquote><p>值得注意的是框架在debug.h中定义的调试函数</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202308101527135.png" alt="image-20230810145239753"></p><p>在讲义的前面也有记录，可以用作错误处理</p></blockquote><h3 id="递归求值"><a href="#递归求值" class="headerlink" title="递归求值"></a>递归求值</h3><p>把待求值表达式中的token都成功识别出来之后, 接下来我们就可以进行求值了. 需要注意的是, 我们现在是在对tokens数组进行处理, 为了方便叙述, 我们称它为”token表达式”. 例如待求值表达式</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">"4 +3*(2- 1)"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>的token表达式为</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">+-----+-----+-----+-----+-----+-----+-----+-----+-----+| NUM | '+' | NUM | '*' | '(' | NUM | '-' | NUM | ')' || "4" |     | "3" |     |     | "2" |     | "1" |     |+-----+-----+-----+-----+-----+-----+-----+-----+-----+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>根据表达式的归纳定义特性, 我们可以很方便地使用递归来进行求值. 首先我们给出算术表达式的归纳定义:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">&lt;expr&gt; ::= &lt;number&gt;    # 一个数是表达式  | "(" &lt;expr&gt; ")"     # 在表达式两边加个括号也是表达式  | &lt;expr&gt; "+" &lt;expr&gt;  # 两个表达式相加也是表达式  | &lt;expr&gt; "-" &lt;expr&gt;  # 接下来你全懂了  | &lt;expr&gt; "*" &lt;expr&gt;  | &lt;expr&gt; "/" &lt;expr&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>归纳定义（Inductive Definition）是一种在数学和计算机科学中常用的定义方式。它通过对基本情况进行定义，并通过一系列规则来扩展或推导出其他情况。归纳定义允许我们用简洁的方式描述一类对象或结构，并展示它们的特定性质和行为。</p><p>BNF 使用一组产生式（Production）来描述形式语言的语法规则。每个产生式包含一个非终结符和一个或多个符号序列，表示该非终结符可以通过替换其中的符号序列来生成一个字符串。在 BNF 中，非终结符用尖括号括起来，而终结符则是实际的语言元素。</p><p>BNF 中的产生式遵循以下语法形式：</p><pre class="line-numbers language-none"><code class="language-none">phpCopy code&lt;非终结符&gt; ::= &lt;符号序列&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>其中，<code>&lt;非终结符&gt;</code> 表示一个非终结符，<code>::=</code> 表示定义，而 <code>&lt;符号序列&gt;</code> 则是由终结符和非终结符组成的序列。</p><p> 既然长表达式是由短表达式构成的, 我们就先对短表达式求值, 然后再对长表达式求值. 这种十分自然的解决方案就是<a href="http://en.wikipedia.org/wiki/Divide_and_conquer_algorithms">分治法open in new window</a>的应用, 就算你没听过这个高大上的名词, 也不难理解这种思路. 而要实现这种解决方案, 递归是你的不二选择.</p><h4 id="递归求值思路"><a href="#递归求值思路" class="headerlink" title="递归求值思路"></a>递归求值思路</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">word_t</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&gt;</span> q<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment">// printf("p&gt;q\n");</span>    <span class="token comment">//  printf("check_op = %d\n",deter_main_op(0, nr_token - 1));</span>    <span class="token comment">// printf("%d\n",nr_token);</span>    <span class="token comment">// printf("%d %d\n",p,q);</span>    <span class="token function">Assert</span><span class="token punctuation">(</span>p <span class="token operator">&lt;=</span> q<span class="token punctuation">,</span> <span class="token string">"The expression is not valid!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> q<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment">//  printf("p==q\n");</span>    <span class="token comment">//  printf("str = %s\n",tokens[p].str);</span>    bool success <span class="token operator">=</span> true<span class="token punctuation">;</span>    <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TK_NUM<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      result <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10进制数字</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TK_REG<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token function">isa_reg_str2val</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">,</span> <span class="token operator">&amp;</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 寄存器</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span>      result <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token keyword">else</span>      <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"regisiter not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 寄存器不存在</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TK_HEXNUM<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">sscanf</span><span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>str<span class="token punctuation">,</span> <span class="token string">"%x"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 16进制数字</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check_parentheses</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment">// printf("有括弧\n");</span>    <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token function">check_parentheses</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token operator">!=</span> invalid<span class="token punctuation">,</span> <span class="token string">"The expression is not surrounded by matched pairs of parentheses."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 括弧不匹配直接退出</span>    <span class="token comment">/* The expression is surrounded by a matched pair of parentheses.     * If that is the case, just throw away the parentheses.     */</span>    <span class="token keyword">return</span> <span class="token function">eval</span><span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token comment">// printf("p&lt;q\n");</span>    <span class="token keyword">int</span> op <span class="token operator">=</span> <span class="token function">deter_main_op</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// the position of 主运算符 in the token expression;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>op<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TK_DEREF<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token class-name">word_t</span> addr <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>op <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span><span class="token function">vaddr_read</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>op<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token char">'!'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token function">eval</span><span class="token punctuation">(</span>op <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token class-name">word_t</span> val1 <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> op <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//   printf("val1 = %u\n",val1);</span>      <span class="token class-name">word_t</span> val2 <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span>op <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//   printf("val2 = %u\n",val2);</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>op<span class="token punctuation">]</span><span class="token punctuation">.</span>type<span class="token punctuation">)</span>      <span class="token punctuation">{</span>      <span class="token keyword">case</span> TK_EQ<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span>val1 <span class="token operator">==</span> val2<span class="token punctuation">;</span>      <span class="token keyword">case</span> TK_GREATEQ<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span>val1 <span class="token operator">&gt;=</span> val2<span class="token punctuation">;</span>      <span class="token keyword">case</span> TK_LESSEQ<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span>val1 <span class="token operator">&lt;=</span> val2<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'&gt;'</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span>val1 <span class="token operator">&gt;</span> val2<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'&lt;'</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span>val1 <span class="token operator">&lt;</span> val2<span class="token punctuation">;</span>      <span class="token keyword">case</span> TK_NOTEQ<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span>val1 <span class="token operator">!=</span> val2<span class="token punctuation">;</span>      <span class="token keyword">case</span> TK_AND<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span>val1 <span class="token operator">&amp;&amp;</span> val2<span class="token punctuation">;</span>      <span class="token keyword">case</span> TK_OR<span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span>val1 <span class="token operator">||</span> val2<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'+'</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span>val1 <span class="token operator">+</span> val2<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'-'</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span>val1 <span class="token operator">-</span> val2<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'*'</span><span class="token operator">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span>val1 <span class="token operator">*</span> val2<span class="token punctuation">;</span>      <span class="token keyword">case</span> <span class="token char">'/'</span><span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>val2 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Divide 0!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token function">Assert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"Divide 0!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>          <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">word_t</span><span class="token punctuation">)</span>val1 <span class="token operator">/</span> val2<span class="token punctuation">;</span>      <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这边根据框架代码的递归思路可以很好的理解表达式求值，具体流程如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">"4 + 3 * ( 2 - 1 )"/*********************/case 1:    "+"   /   \"4"     "3 * ( 2 - 1 )"case 2:        "*"       /   \"4 + 3"     "( 2 - 1 )"case 3:              "-"             /   \"4 + 3 * ( 2"     "1 )"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>需要注意的有两点：</p><ol><li>判断括号匹配时候，不光要判断是否匹配还要找出：匹配但是不满足现在这种情况的形式。这里check_parentheses(p, q)是检查”(4 + 3 * (2 - 1))” 这种形式的括弧匹配，如果存在诸如”(4 + 3 * (2 - 1))” 形式，虽然也是匹配但是不满足情况。</li><li>找主运算符</li></ol><h4 id="括弧匹配的解决思路"><a href="#括弧匹配的解决思路" class="headerlink" title="括弧匹配的解决思路"></a>括弧匹配的解决思路</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">check_parentheses</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span>  bool valid_but_imposs_flag <span class="token operator">=</span> false<span class="token punctuation">;</span> <span class="token comment">// 标记是否为有效但不可能的情况</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> <span class="token char">'('</span> <span class="token operator">||</span> tokens<span class="token punctuation">[</span>q<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">!=</span> <span class="token char">')'</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token comment">// 如果第一个字符不是左括号，或者最后一个字符不是右括号1+(2+3)</span>    valid_but_imposs_flag <span class="token operator">=</span> true<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token comment">// 定义一个栈来保存左括号的位置</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MAX_LEN</span> <span class="token expression">q <span class="token operator">-</span> p <span class="token operator">+</span> <span class="token number">1</span></span></span>  <span class="token keyword">int</span> stack<span class="token punctuation">[</span>MAX_LEN<span class="token punctuation">]</span> <span class="token keyword">__attribute__</span><span class="token punctuation">(</span><span class="token punctuation">(</span>unused<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> top <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 栈顶指针</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment">// 如果遇到左括号，将其位置压入栈中</span>      stack<span class="token punctuation">[</span>top<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>      <span class="token comment">// if (pop_flag==true) {</span>      <span class="token comment">//     valid_but_imposs_flag=1;</span>      <span class="token comment">// }</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token comment">// 如果遇到右括号，检查栈是否为空</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token comment">// 栈为空，表示右括号没有匹配的左括号，括号不匹配</span>        <span class="token comment">// pop_flag=true;</span>        <span class="token keyword">return</span> invalid<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span>      <span class="token punctuation">{</span>        <span class="token comment">// 弹出栈顶元素，与当前右括号匹配</span>        top<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">!=</span> q<span class="token punctuation">)</span>        <span class="token punctuation">{</span>          valid_but_imposs_flag <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment">// pop_flag=true;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment">// 其他字符直接跳过</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>valid_but_imposs_flag <span class="token operator">==</span> true<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">return</span> VALID_IMPOSS<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment">// 遍历结束后，检查栈是否为空</span>  <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>top <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在传统用栈进行括弧匹配的操作上判断类型</p><p>发现（）+（）该种情况会存在一瞬间的栈空的情况，所以每次遇到“）”时候判断一下栈是否为空（除非是最后一个括弧），为空的就是此种情况。</p><h4 id="确定主运算符思路"><a href="#确定主运算符思路" class="headerlink" title="确定主运算符思路"></a>确定主运算符思路</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">deter_main_op</span><span class="token punctuation">(</span><span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> q<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> op <span class="token operator">=</span> p<span class="token punctuation">;</span>  <span class="token keyword">int</span> op_type <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">// 1: + - 2: * /(主运算符一定在更低优先级位置)</span>  <span class="token comment">// op_type 为主运算符的优先级</span>  <span class="token keyword">int</span> parentheses <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> p<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> q<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TK_NUM<span class="token punctuation">)</span>      <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment">// 跳过数字</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token char">'('</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      parentheses<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token char">')'</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>      parentheses<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>parentheses <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span> <span class="token comment">//=0时，说明在括弧外层</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TK_OR <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TK_AND<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op_type <span class="token operator">&gt;=</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          op <span class="token operator">=</span> i<span class="token punctuation">;</span>          op_type <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token char">'&gt;'</span> <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token char">'&lt;'</span> <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TK_EQ <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TK_NOTEQ <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TK_LESSEQ <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TK_GREATEQ<span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op_type <span class="token operator">&gt;=</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          op <span class="token operator">=</span> i<span class="token punctuation">;</span>          op_type <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token char">'+'</span> <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token char">'-'</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op_type <span class="token operator">&gt;=</span> <span class="token number">3</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          op <span class="token operator">=</span> i<span class="token punctuation">;</span>          op_type <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token char">'*'</span> <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token char">'/'</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op_type <span class="token operator">&gt;=</span> <span class="token number">4</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          op <span class="token operator">=</span> i<span class="token punctuation">;</span>          op_type <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> TK_DEREF <span class="token operator">||</span> tokens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>type <span class="token operator">==</span> <span class="token char">'!'</span><span class="token punctuation">)</span>      <span class="token punctuation">{</span> <span class="token comment">// 指针运算优先级最高</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>op_type <span class="token operator">&gt;=</span> <span class="token number">5</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          op <span class="token operator">=</span> i<span class="token punctuation">;</span>          op_type <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> op<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里主要考虑了运算符的优先级：优先级越低的运算符则一定是主运算符，相同优先级的运算符一定右边的为主运算符，在这个逻辑下实现分段函数判断，返回运算符位置即可。</p><h4 id="对表达式求值进行测试"><a href="#对表达式求值进行测试" class="headerlink" title="对表达式求值进行测试"></a>对表达式求值进行测试</h4><p>根据框架代码产生长串表达式，并计算结果，输入到程序中。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;time.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;assert.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span></span><span class="token comment">// this should be enough</span><span class="token keyword">static</span> <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">65536</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">char</span> code_buf<span class="token punctuation">[</span><span class="token number">65536</span> <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// a little larger than `buf`</span><span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token operator">*</span>code_format <span class="token operator">=</span><span class="token string">"#include &lt;stdio.h&gt;\n"</span><span class="token string">"int main() { "</span><span class="token string">"unsigned result = %s; "</span><span class="token string">"  printf(\"%%u\", result); "</span><span class="token string">"  return 0; "</span><span class="token string">"}"</span><span class="token punctuation">;</span><span class="token class-name">uint32_t</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">gen_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">gen_rand_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">gen_rand_expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">65530</span><span class="token punctuation">)</span>       <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"overSize\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token function">gen_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token char">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">gen_rand_expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token char">')'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token function">gen_rand_expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">gen_rand_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">gen_rand_expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token class-name">uint32_t</span> <span class="token function">choose</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">gen_num</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> buf_len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> buf_len<span class="token punctuation">;</span> i <span class="token operator">&lt;</span>buf_len<span class="token operator">+</span>len<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span>buf_len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'/'</span> <span class="token operator">||</span> i<span class="token operator">==</span>buf_len<span class="token punctuation">)</span>    <span class="token comment">//首位不能为0,且除号后面不能为0</span>    buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>    buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token char">'0'</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>     buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'u'</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  buf<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> len<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>len<span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">' '</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">gen_rand_op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token function">choose</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token char">'+'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token char">'-'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token char">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token char">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span> <span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> seed <span class="token operator">=</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">srand</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> loop <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">sscanf</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>loop<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> loop<span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    <span class="token function">gen_rand_expr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">sprintf</span><span class="token punctuation">(</span>code_buf<span class="token punctuation">,</span> code_format<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>       FILE <span class="token operator">*</span>fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/tmp/.code.c"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>fp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fputs</span><span class="token punctuation">(</span>code_buf<span class="token punctuation">,</span> fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"gcc /tmp/.code.c -o /tmp/.expr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    fp <span class="token operator">=</span> <span class="token function">popen</span><span class="token punctuation">(</span><span class="token string">"/tmp/.expr"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span>fp <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result<span class="token punctuation">;</span>    ret <span class="token operator">=</span> <span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">int</span> flag<span class="token operator">=</span> <span class="token function">pclose</span><span class="token punctuation">(</span>fp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>flag <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token comment">//输出绿色字体</span>        <span class="token comment">// printf("\033[32m");</span>        <span class="token comment">// printf("Execution of /tmp/.expr succeeded.\n");</span>        <span class="token comment">// printf("\033[0m");</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment">//输出红色字体</span>        <span class="token comment">// printf("\033[31m");</span>        <span class="token comment">// printf("Execution of /tmp/.expr failed. Exit status: %d\n", result);</span>        <span class="token comment">// printf("\033[0m");</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token comment">//把buf中的所有u剔除掉</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">==</span><span class="token char">'u'</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>          buf<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">=</span><span class="token char">' '</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%u %s\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里遇到一个非常头大的问题：除法中除数为0的情况，如果我们要判断“/”后式子结果是否为0，就相当于又写了一次表达式求值，显然很矛盾，讲义上让我们忽略这个问题，所以我采用最笨的办法，把有错误的表达式直接掠过，只产生正确的表达式到文本中</p><p>随后在主函数中比对结果：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> bool success <span class="token operator">=</span> true<span class="token punctuation">;</span> FILE <span class="token operator">*</span>fp<span class="token punctuation">;</span><span class="token keyword">int</span> result<span class="token punctuation">;</span>    <span class="token keyword">char</span> expression<span class="token punctuation">[</span><span class="token number">65536</span><span class="token punctuation">]</span><span class="token punctuation">;</span> fp <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">"/home/chilh/ysyx-workbench/nemu/tools/gen-expr/build/input.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Failed to open input file.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">fscanf</span><span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token string">"%d %[^\n]"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>result<span class="token punctuation">,</span> expression<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 在这里执行相应的计算，并输出结果</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Expression: %s\n"</span><span class="token punctuation">,</span> expression<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Result: %u\n"</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">expr</span><span class="token punctuation">(</span>expression<span class="token punctuation">,</span> <span class="token operator">&amp;</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试中发现大量问题，一一解决后才进行下一任务</p><h2 id="监视点"><a href="#监视点" class="headerlink" title="监视点"></a>监视点</h2><p>之前没用过，所以在gdb中简单使用一下，了解目的和输出格式</p><p>这边主要是对队列结构的运用，我主要使用了头插法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">WP <span class="token operator">*</span><span class="token function">new_wp</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>  bool success <span class="token operator">=</span> true<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>free_ <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No free watchpoint!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  WP <span class="token operator">*</span>new <span class="token operator">=</span> free_<span class="token punctuation">;</span>  free_ <span class="token operator">=</span> free_<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  new<span class="token operator">-&gt;</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token function">strcpy</span><span class="token punctuation">(</span>new<span class="token operator">-&gt;</span>expr<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>  new<span class="token operator">-&gt;</span>expr<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span> <span class="token comment">// 字符串结尾</span>  new<span class="token operator">-&gt;</span>value <span class="token operator">=</span> <span class="token function">expr</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token operator">&amp;</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>  head <span class="token operator">=</span> new<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>success<span class="token punctuation">)</span>    <span class="token keyword">return</span> new<span class="token punctuation">;</span>  <span class="token keyword">else</span>  <span class="token punctuation">{</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">free_wp</span><span class="token punctuation">(</span>WP <span class="token operator">*</span>wp<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>wp <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No such watchpoint!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  WP <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> wp<span class="token punctuation">)</span>  <span class="token punctuation">{</span>    head <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>    wp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> free_<span class="token punctuation">;</span>    free_ <span class="token operator">=</span> wp<span class="token punctuation">;</span>    free_<span class="token operator">-&gt;</span>expr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>    free_<span class="token operator">-&gt;</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>next <span class="token operator">==</span> wp<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      p<span class="token operator">-&gt;</span>next <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>      wp<span class="token operator">-&gt;</span>next <span class="token operator">=</span> free_<span class="token punctuation">;</span>      free_ <span class="token operator">=</span> wp<span class="token punctuation">;</span>      free_<span class="token operator">-&gt;</span>expr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>      free_<span class="token operator">-&gt;</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No such watchpoint!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">assert</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在建立监视点时候对监视点进行表达式求值</p><p>检查监视点的值是否改变：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">bool <span class="token function">check_wp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">// fales表示有监视点被触发</span>  bool success <span class="token operator">=</span> true<span class="token punctuation">;</span>  WP <span class="token operator">*</span>p <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span> <span class="token comment">// 遍历链表</span>    <span class="token class-name">word_t</span> new_value <span class="token operator">=</span> <span class="token function">expr</span><span class="token punctuation">(</span>p<span class="token operator">-&gt;</span>expr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>success<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>new_value <span class="token operator">!=</span> p<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Watchpoint %d: %s is triggered!\n"</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>NO<span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Old value = 0x%08x\n"</span><span class="token punctuation">,</span> p<span class="token operator">-&gt;</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"New value = 0x%08x\n"</span><span class="token punctuation">,</span> new_value<span class="token punctuation">)</span><span class="token punctuation">;</span>      p<span class="token operator">-&gt;</span>value <span class="token operator">=</span> new_value<span class="token punctuation">;</span>      <span class="token keyword">return</span> false<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>      <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No watchpoint is triggered!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    p <span class="token operator">=</span> p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> true<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要理解excute的代码:</p><p>把这个函数加入trace_and_difftest中并新建一个宏包裹它，实现可以在<code>nemu/Kconfig</code>中为监视点添加一个开关选项, 最后通过menuconfig打开这个选项, 从而激活监视点的功能. 当你不需要使用监视点时, 可以在menuconfig中关闭这个开关选项来提高NEMU的性能.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202308101527729.png" alt="image-20230810140537560"></p><h4 id="Kconfig的配置"><a href="#Kconfig的配置" class="headerlink" title="Kconfig的配置"></a>Kconfig的配置</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202308101527768.png" alt="image-20230810135445157"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202308101527805.png" alt="image-20230810140447101"></p><h4 id="断点实现"><a href="#断点实现" class="headerlink" title="断点实现"></a>断点实现</h4><p>断点的功能是让程序暂停下来, 从而方便查看程序某一时刻的状态. 事实上, 我们可以很容易地用监视点来模拟断点的功能:</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">w $pc == ADDR<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中<code>ADDR</code>为设置断点的地址. 这样程序执行到<code>ADDR</code>的位置时就会暂停下来.</p><h2 id="其余错误记录"><a href="#其余错误记录" class="headerlink" title="其余错误记录"></a>其余错误记录</h2><p>错误1：由于第一位数字可能为0系统误认为是8进制数</p><pre class="line-numbers language-none"><code class="language-none">if(i==buf_len)      //首位不能为0  buf[i] = rand() % 9+1+ '0';  else  buf[i] = rand() % 10 + '0';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>错误2：strncpy不添加’/0‘</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202308101527872.png" alt="image-20230802204215033"></p>]]></content>
      
      
      <categories>
          
          <category> ysyx学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>DFT-S-OFDM</title>
      <link href="//post/DFT-S-OFDM.html"/>
      <url>//post/DFT-S-OFDM.html</url>
      
        <content type="html"><![CDATA[<h1 id="DFT-S-OFDM"><a href="#DFT-S-OFDM" class="headerlink" title="DFT-S-OFDM"></a>DFT-S-OFDM</h1><p>记录一个小项目学习过程</p><p>传统OFDM功率均峰比较大，采用DFT-S-OFDM降低均峰比</p><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><h3 id="多址和复用（FDM）"><a href="#多址和复用（FDM）" class="headerlink" title="多址和复用（FDM）"></a>多址和复用（FDM）</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651786.png" alt="image-20230721143417632"></p><h3 id="直接扩频"><a href="#直接扩频" class="headerlink" title="直接扩频"></a><strong>直接扩频</strong></h3><p>使用扩频码和原始信号相乘以此得到更高频率的信号</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651725.png" alt="image-20230713191953158"></p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>DFT-S-OFDM是在OFDM内增加DFT扩频操作，以此减小PARR</p><h3 id="OFDM的调制框图"><a href="#OFDM的调制框图" class="headerlink" title="OFDM的调制框图"></a>OFDM的调制框图</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651797.png" alt="image-20230713192055056"></p><p>在串并转换后添加DFT扩频以此实现DFT-S-OFDM</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651754.png" alt="image-20230713184359625"></p><p><strong>有意思的是如果DFT扩频序列的长度与IFFT相同，二者作用可以抵消，此时等价于使用SC-FDE.</strong></p><p> DFT-S-OFDM之所以被称为单载波OFDM是与它前面对数据块做DFT变换的点数M和进行OFDM调制的IFFT点数N有关，一般N＞M;当N=M时，信号直接调制到子载波上，FFT和IFFT作用互相抵消，信号就直接在时域上进行传输;当N＞M时，经过DFT变换，在IFFT处理之前，每个子载波上的数据己不再是独立的源数据，而是各个源数据的叠加，相当于每个源数据扩展到了多个子载波上构成单载波，信号映射到子载波上进行OFDM调制，其中N个子载波上有输入数据。</p><p>在时域看来，输入数据的符号持续时间T在经过SC-FDMA调制后变为:T=(N/M)*T</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651713.png" alt="image-20230713204051007"></p><h3 id="DFT扩频"><a href="#DFT扩频" class="headerlink" title="DFT扩频"></a>DFT扩频</h3><blockquote><p>参数：M是DFT输出个数，N是IFFT输入个数，S=N/M是带宽扩频因子</p></blockquote><p>分布式FDMA和集中式FDMA</p><p>分布式FDMA是指：均匀把DFT结果分派到子载波上，并且其余N-M位为0</p><p>集中式FDMA是指：只在中间相邻位置将DFT插入。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651734.png" alt="image-20230713193811767"></p><p>本项目采用另一种FDMA方式：</p><h4 id="扩频数学表示"><a href="#扩频数学表示" class="headerlink" title="扩频数学表示"></a>扩频数学表示</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651410.png" alt="image-20230713195016314"></p><p>$\widetilde{X}[k]$ 是IFFT的输入，将其做n点的IFFT</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307131956195.png" alt="image-20230713195645147" style="zoom:67%;"><p>有<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307131957338.png" alt="image-20230713195709311" style="zoom:67%;">的相位偏移</p><h2 id="设计流程"><a href="#设计流程" class="headerlink" title="设计流程"></a>设计流程</h2><h3 id="处理流程"><a href="#处理流程" class="headerlink" title="处理流程"></a>处理流程</h3><p>整个接收端大体上可以分为3个部分，分别是定时同步与帧同步、频偏估计与补偿、信道估计和均衡与解调。</p><p>对每一帧信号，接收机都先从空闲状态开始捕获帧头，即在2倍过采样上对长度为16的完美序列进行并行相关，寻找相关峰值。在捕获到帧头后，在8倍过采样上挑选最佳样值供后级模块使用，然后进入帧同步状态，检测前导序列中的序列翻转位置，结合最佳样值和序列翻转位置即可获得准确的同步位置。</p><p>此后，接收机开始进行频率估计，获得频偏估计结果并对后续的接收信号进行补偿。在每个子帧导频的CP段（循环前缀），都再当前最佳采样附近重新进行最佳样值选择，并在选择结果的控制下将做完频偏补偿之后的数据经过FIFO缓存送入去CP、FFT变换模块，再将导频部分、数据部分分别送入信道估计和频域均衡与解调模块。</p><p>信道估计模块接收256个符号长度的导频部分的FFT变换结果，在频域上对梳状导频点上进行信道估计，并使用线性插值方法得到频域各个点上的信道估计值，利用导频点以外的其他点的频域值进行噪声方差的计算，将512个符号长度的信道系数估计值和噪声方差估计值送入频域均衡与解调模块。</p><p>频域均衡模块对子帧中的6个数据块进行均衡。每个数据块首先做FFT转换到频域，利用对应点上的信道估计结果在频域进行信道补偿，然后再做IFFT转换到时域，并分别取I、Q路的符号位完成解调。</p><h3 id="帧结构"><a href="#帧结构" class="headerlink" title="帧结构"></a>帧结构</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651320.png" alt="未命名文件 (1)"></p><p>采用基于块的传输方式，每个数据块前面需要加上循环前缀，循环前缀的时间长度需要大于多径时延</p><p>为了实现相干解调，数据帧中需要插入导频，为了获得良好的信道估计性能，我们采用256长度的导频，由于一个帧内分为50个子帧</p><p>因此，每个子帧包含1个长度为247符号的跳频切换块，由1个长度为（25+256）导频块以及6个长度为（512+25）的数据块组成</p><p>前导序列占用4096个符号</p><h3 id="位同步方案"><a href="#位同步方案" class="headerlink" title="*位同步方案*"></a><em><strong>*位同步方案*</strong></em></h3><p>在无线通信系统的实际工作过程中，接收端在开机后并不知道接收到的信号从何时起为有用信号，也不知道接收数据的位置，因此要进行接收机后续模块正常的信号处理流程，就需要通过位/帧同步来确定每帧数据的起始位置，从而提取对应位置的数据块。</p><p>相关检测是一种定时同步方法，它是根据序列良好的自相关特性来进行同步，相关检测算法是将本地存储的序列与接收信号做相关运算，寻找相关峰出现的位置，获得粗略的位同步。</p><p>并行相关是相关检测算法的一种，并行相关是用多个相关器并行进行相关运算，同时对训练序列的不同相位进行相关积分运算。并行相关将所有可能的序列相位同时相关运算，从时间上来讲性能非常高，适合于突发帧传输系统。但是，当训练序列周期如果很长，并行相关实现复杂度就会很高。</p><p>本系统选择长度为16的完美序列重复发送构成前导序列用来完成接收端的同步，相关检测算法选择并行相关，并行相关器个数为16，同时对2倍采样的信号进行相关操作。该完美序列为s1= [1+j, 1+j, 1+j, 1+j, 1+j, -1+j, -1-j, 1-j, 1+j, -1-j, 1+j, -1-j, 1+j, 1-j, -1-j, -1+j]。该完美序列的周期自相关</p><p>该完美序列的周期自相关特性如下所示，除了相位完全对正的情况出现明显之外，其他位置的相关值均为0。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651839.png" alt="img"> </p><p>图 26完美序列的周期自相关特性</p><p>系统接收端收到的是八倍过采样数据，位同步模块先任意选择其中间隔为4的两路数据(比如0，4路)分别送入两个匹配滤波器，每输入一个样值都可以得到一个滤波输出，对滤波输出的I路和Q路的绝对值相加，称为相关值，记忆连续15个相关值并求和，当一个新的相关值与前14个相关值的比值大于门限值时，则认为捕获到信号，也就确定了完美序列的相位。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651770.png" alt="img"></p><p>接着，进入最佳样值选择和同步验证阶段。同步验证的目的是为了避免冲激噪声使前一步骤同步捕获过门限，发生虚警。验证方法是对连续的4个周期继续进行匹配滤波，在前一阶段过门限的位置求出当前相关值和之前14个相关值之和的比值，如果4次所求得的比值都能超过门限，则认为同步成果，否则，则重新进入捕获状态。</p><p>最佳样值选择是在前一步过门限的样值位置基础上，对连续8个样值位置上的相关值进行比较，从中找出大值出现的位置，即为8倍过采样中的最佳样值。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651723.png" alt="img"></p><p>图 28确定最佳样值流程</p><h3 id="帧同步方案"><a href="#帧同步方案" class="headerlink" title="帧同步方案"></a><em><strong>帧同步方案</strong></em></h3><p>位同步只是在符号和样点上同步上了，但帧的起始位置还存在模糊问题，为了接收端后续模块的工作，需要进行帧同步。</p><p>前16个完美序列周期和后240个完美序列周期相位相反，我们利用前导序列的这一特点来实现帧同步。</p><p>帧同步的原理是假设信道变化较慢，相邻的两个完美序列周期所经历的信道不变，那么我们可以对相邻两个完美序列周期的相关值进行共轭相乘，如果相乘的结果为负数，则可以认为这两个周期的序列之间相位发生了突变， </p><p>前一个完美序列周期的相关结果：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651632.jpeg" alt="img"> </p><p>如果无跳变，后一个完美序列周期的相关结果为：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651823.jpeg" alt="img"> </p><p>如果有跳变，后一个完美序列周期的相关结果为：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651938.jpeg" alt="img"> </p><p>对<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651075.jpeg" alt="img">和<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651445.jpeg" alt="img">做共轭乘，可以得到：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651490.jpeg" alt="img"> </p><p>N表示包含噪声的各项之和。</p><p>这样，我们通过确定出当前的完美序列在前导序列中的位置，也由此确定了各个数据样点在帧结构中的位置，完成帧同步。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651532.png" alt="img"></p><p>图 29帧同步原理示意图</p><h4 id="频偏估计方案"><a href="#频偏估计方案" class="headerlink" title="频偏估计方案"></a>频偏估计方案</h4><p>由于通信信号受到多普勒效应、接收端和发送端晶振频率不匹配等因素的影响，接收信号的载波频率偏离了接收端的本地振荡频率，导致接收信号在本地振荡频率完成下变频后，通常还存在残留的频率偏差。如果不能消除偏差，接收机的解调性能将受到该偏差的严重影响，最终导致系统的可靠性降低。因此完成频偏估计和补偿是必要的。</p><p>本项目中前导序列中的频偏估计方案如下：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651710.png" alt="img"></p><p>图 210用于频偏估计的长度为3840个符号的前导序列</p><p>对于本项目来说，帧同步过后剩余3840个符号，其中符号由完美序列组成，完美序列每16个符号为一组，所以共有<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651562.png" alt="img">段，每一段都可以计算一个相关值，然后将240个相关值补零后做4096点FFT，其频率分辨率为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651714.png" alt="img">。</p><p>具体的求频偏估计值算法如下：</p><p>位同步和帧同步均已经完成，这里采用基于FFT进行最大似然频偏估计。对于接收到的前导序列，与本地存储的序列进行相关计算，得到240个相关值，在这些相关值后面补3856个零，然后做4096点FFT，对FFT得到的4096个数据取模值，并搜索其最大值位置，则可根据最大值出现的位置计算频偏的粗估计值，然后再基于二次函数拟合的方法进一步估计更精细的频偏。采用的算法如下：</p><p>将频率偏移值表示为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651953.png" alt="img">，其中<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651152.png" alt="img">表示FFT幅值最大处对应的频率索引值，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651061.png" alt="img">表示真实信号频率与FFT幅值最大点对应索引的偏差，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651138.png" alt="img">，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651242.png" alt="img">是FFT离散频率间隔（即频率分辨率<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651432.png" alt="img">）。</p><p>基于FFT插值的频移估计方法主要分为粗估计和细估计两个步骤。粗估计就是搜索FFT结果幅值最大点，得到其索引值<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651605.png" alt="img">。细估计就是利用插值的方法得到真实频率偏移值与<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651667.png" alt="img">对应频率之间的偏差，即估计<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651658.png" alt="img">。插值的方法有很多，其中采用最多的就是二次插值方法。二次插值方法描述如下：</p><p>近似认为信号频域幅度值是一个二次函数，目的是找出这个函数的最大值，而三个点可以确定一个二次函数。先找到相关值FFT结果幅度最大点，再加上其左右各一个点，就可以进行二次插值了。公式推导如下：</p><p>假设FFT幅度最大点的坐标为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651830.png" alt="img">，左右两点分别为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651770.png" alt="img">，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651951.png" alt="img">，其中横坐标表示对应频率值，纵坐标表示FFT结果的幅值。那么根据三点构造二次函数表达式为：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651277.png" alt="img">     </p><p>求得：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651401.png" alt="img">                         </p><p>峰值频点横坐标为：  <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651262.png" alt="img"></p><p>其中<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651404.png" alt="img">，最终<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651439.png" alt="img">就是估计出来的频率偏移值。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651547.png" alt="img"></p><p>图 211频偏估计框图</p><p>对于跳频抗干扰算法方案中，由于是同源晶振控制生成的，所以不同频率下的频偏是成比例的。设跳频的频率从<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651962.png" alt="img">，在<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651038.png" alt="img">频点下的频偏为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651138.png" alt="img">，则在<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651061.png" alt="img">频点下的频偏为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651149.png" alt="img">，则不同频点下的频偏的一般公式为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651079.png" alt="img"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651573.png" alt="img">。</p><h4 id="频偏补偿方案"><a href="#频偏补偿方案" class="headerlink" title="频偏补偿方案"></a>频偏补偿方案</h4><p>由上述分析我们可知，计算出频偏估计值后需要对各个子帧的数据进行频偏补偿，这就需要控制直接数字式频率合成器（DDS）在频偏估计后实现频偏补偿。想要补偿频偏，需要在信号上乘<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651562.png" alt="img">，而<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651739.png" alt="img">，正余弦相应的频率可以由DDS产生。</p><p>在FPGA中DDS核的系统时钟为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651632.png" alt="img">，输出频率为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651712.png" alt="img">，则输出频率为</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651799.png" alt="img"></p><p>其中，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651443.png" alt="img">为相位累加器位数，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651384.png" alt="img">为频率控制字</p><p>频率分辨率，即频率变化的间隔</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651452.png" alt="img">                 </p><p>频率控制字即相位增量，其公式为</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651505.png" alt="img"></p><p>其中，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651425.png" alt="img">为相位增量，即频率控制字，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651533.png" alt="img">为想要输出的频率，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616639.png" alt="img">为输入IP的时钟，也是信号的采样时钟，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616661.png" alt="img">为频率精度的位数，其计算公式如下，取位都为进位。以产生时钟<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616751.png" alt="img">为100MHz，频率精度<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616782.png" alt="img">为1Hz计算</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616872.png" alt="img"></p><p>由DDS产生相应相位的sin和cos，与原始数据进行复数乘法即可完成频偏补偿。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616944.png" alt="img"></p><p>图 212频偏补偿示意图</p><p>对不同的跳频频率点，按上节所述方法计算得到的相应的频偏值。</p><h4 id="估计与噪声方差估计方案"><a href="#估计与噪声方差估计方案" class="headerlink" title="估计与噪声方差估计方案"></a>估计与噪声方差估计方案</h4><p>信道估计整体流程如图所示。前一阶段的模块将接收信号中的导频部分提取出来并送入去CP、FFT变换模块，信道估计模块接收256个符号长度的导频部分的FFT变换结果，将导频处的点依次送入导频处信道估计计算模块，将其他点的值送入噪声方差计算模块。前者与存储在RAM里的原始导频序列的频域变换值进行运算，得到导频点处的信道估计值，再利用线性插值算法得到每个数据符号的信道估计值，送入频域均衡与解调模块；后者进行噪声方差的计算，将噪声方差估计值传入后级模块。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616996.png" alt="img"></p><p>导频由64位Zadoff-Chu序列重复4次得到。Zadoff-Chu序列的数学描述如下式所示：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211620231.jpg" alt="img"> </p><p>公式中，N表示的是序列的长度，q可以为任意整数，u表示原始序列组数，是与N互质的正整数。q和u取值不同，将得到不同的ZC序列。</p><p>Zadoff-Chu序列本身具有良好的自相关性、互相关性、对称性和横幅特性。其中，良好的自相关性意味着对于任意ZC序列与其循环移位m（m≠0）位后的序列互不相关；对称性可以降低生成序列的复杂度；恒幅特性有利于接收端实现信道估计。任意Zadoff-Chu序列经过FFT/IFFT变换后的序列仍为Zadoff-Chu序列，具有Zadoff-Chu序列的所有性质。</p><p>选取u=9，q=1，N=64的Zadoff-Chu序列，将其重复4次即得256个符号的导频序列，对该序列进行FFT变换，并对变换结果进行映射。将1映射到1023，将序列进行定点量化为I、Q各11比特数，得到的coe文件。</p><p>针对该导频结构，导频点上的信道估计结果很容易得到。将接收的导频点处的FFT变换结果Y与上述文件中的原始ZC序列的频域映射值X相除，即这些点上的频域信道估计值为：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211620234.jpg" alt="img"> </p><p>为了提高信道估计系数的精度，利用线性插值算法得到频域上512个点的信道估计值。线性插值是根据信号中两个相邻导频点处的信道相响应之间的线性关系来估计这段数据点上的信道系数的插值方法。线性插值只使用两个相邻的导频点对这段数据进行信道估计，具有易于实现、计算快速的优点。线性插值实现过程如下：</p><p>两个相邻导频估计值记作<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211620233.jpg" alt="img">、<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211620235.jpg" alt="img">，设数据点<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211620235.jpg" alt="img">位于区间<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211620241.jpg" alt="img">，则该点的信道估计可表示为：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211620544.jpg" alt="img"> </p><p>由于除了64个点以外的其他频率点都没有发送信号，接收信号转换到频域在这些点所得到的都是噪声，可以利用这些点的值估算出噪声方差。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211620570.jpg" alt="img"> </p><h4 id="频域均衡方案"><a href="#频域均衡方案" class="headerlink" title="频域均衡方案"></a>频域均衡方案</h4><p>均衡模块根据信道估计的结果执行相应的算法对信号进行补偿。FFT之后我们得到了各个符号的频域样点，信道估计模块我们得到了每个频域点上对应的信道系数，利用这些数据进行频域均衡，最后将均衡后的信号转为时域信号，硬判决直接对符号的正负进行判决得到最后的结果，处理流程图如图：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616025.png" alt="img"></p><p>图 214频域均衡流程</p><p>最小均方误差算法中构造损失函数：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616098.png" alt="img"></p><p>假设，x和z是服从均值为0，方差分别为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616117.png" alt="img">，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211651532.png" alt="img">的高斯分布，则MMSE估计为：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616364.png" alt="img"></p><p>时域上接收信号为发送信号与系统响应的线性卷积，为：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616431.png" alt="img"></p><p>在单载波频域均衡中，由N位符号组成一个数据块，并添加循环前缀，循环前缀的长度大于信道的最大多径时延，以此保证相邻数据块之间没有干扰。在通常情况下，信道在时间上是慢变的，假设连续的两个数据块的传输过程中，信道冲激响应保持不变。由于循环前缀的存在，信道冲激响应矩阵是循环平移矩阵，即：<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616447.png" alt="img">，其中<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616611.png" alt="img">为循环平移矩阵。</p><p>对接收到的时域信号做FFT变换，得到频域信号。根据信道冲激响应矩阵的循环平移特性，信道频域响应矩阵是对角矩阵。</p><p>两边同时做FFT：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616690.png" alt="img"></p><p>其中，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616758.png" alt="img">，<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616781.png" alt="img">是对角矩阵，其中<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616924.png" alt="img">的对角线元素为：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616975.png" alt="img"></p><p>MMSE均衡矢量形式为：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616997.png" alt="img"></p><p>分量形式为：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616042.png" alt="img"></p><p>频域MMSE均衡之后的结果再通过IFFT转换到时域，得到时域符号。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307211616081.png" alt="img"></p><p>将经过均衡后的时域结果，送到硬判决模块，直接对符号I、Q路数据的正负进行判决，得到解调结果。</p><h2 id="matlab代码"><a href="#matlab代码" class="headerlink" title="matlab代码"></a>matlab代码</h2><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clearclcCP<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">;</span><span class="token comment">%CP长度</span>num_block <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token comment">%每个子帧中的FDE块数</span>num_sf <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">;</span> <span class="token comment">%一帧中的子帧数</span>rate <span class="token operator">=</span> <span class="token number">7.5e6</span><span class="token punctuation">;</span><span class="token comment">%符号速率</span>S <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>   <span class="token comment">% 扩频因子</span>block<span class="token operator">=</span><span class="token number">384</span><span class="token punctuation">;</span><span class="token comment">%FDE块大小</span>block_dft<span class="token operator">=</span><span class="token number">512</span><span class="token punctuation">;</span>bpc<span class="token operator">=</span><span class="token number">537</span><span class="token punctuation">;</span> <span class="token comment">%块+CP</span>tr_sym <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token operator">+</span>bpc<span class="token operator">*</span><span class="token punctuation">(</span>num_block<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>S<span class="token operator">*</span>num_sf<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%一帧中的所有符号，不含GP</span>err_rate1<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>s1<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">-</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">1j</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1j</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">16</span>     s<span class="token operator">=</span><span class="token punctuation">[</span>s s1<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">end</span><span class="token comment">%前16个完美序列，正相位</span> <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">240</span>     s<span class="token operator">=</span><span class="token punctuation">[</span>s <span class="token operator">-</span>s1<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">%S1重复16次</span>      <span class="token keyword">end</span> <span class="token comment">%后240个完美序列，反相位</span> <span class="token function">tr_sym</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token operator">=</span>s<span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%前导，功率归一化</span>   <span class="token comment">%以上为生成前导</span>  s2<span class="token operator">=</span><span class="token function">gen_seq</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>block_dft<span class="token operator">/</span><span class="token number">64</span>    <span class="token function">p</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">64</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">=</span> s2<span class="token punctuation">;</span><span class="token keyword">end</span>xx <span class="token operator">=</span> <span class="token function">fft</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>xx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">xx</span><span class="token punctuation">(</span><span class="token number">509</span><span class="token operator">:</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">xx</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">508</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%错开本振</span>p<span class="token operator">=</span><span class="token function">ifft</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%导频生成</span>b <span class="token operator">=</span> <span class="token function">rcosdesign</span><span class="token punctuation">(</span><span class="token number">0.22</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'sqrt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%RRC（根升余弦）冲激响应为b</span>f_pilot <span class="token operator">=</span> <span class="token function">fft</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%导频转换到频域</span><span class="token comment">%rayleighchan = comm.RayleighChannel;</span><span class="token comment">%rayleighchan.SampleRate = 7.5e6;</span><span class="token comment">%rayleighchan.PathGainsOutputPort=1;</span><span class="token comment">%rayleighchan.PathDelays = [0,30e-9,150e-9,310e-9,370e-9,710e-9,1090e-9,1370e-9,2510e-9];</span><span class="token comment">%rayleighchan.PathDelays = [0];%1/7.5e6];%,2/7.5e6,3/7.5e6,4/7.5e6];%,5/7.5e6,6/7.5e6,7/7.5e6,8/7.5e6];</span><span class="token comment">%rayleighchan.AveragePathGains=[0,-1.5,-1.4,-3.6,-0.6,-9.1,-7.0,-12.0,-16.9];</span><span class="token comment">%rayleighchan.MaximumDopplerShift = 50;</span>snr <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">12</span><span class="token punctuation">;</span><span class="token comment">% [4, 5, 6, 7, 8, 9, 10, 11, 12]</span>err_rate<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>snr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nframes <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">%传输1000帧</span><span class="token keyword">for</span> nsnr <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>snr<span class="token punctuation">)</span><span class="token comment">%SNR循环,nsnr是索引</span>    sigma <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">10</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token function">snr</span><span class="token punctuation">(</span>nsnr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%*sqrt(8);标准差`</span>    total_err<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> nfr <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>nframes <span class="token comment">%帧循环</span>        bit_fr <span class="token operator">=</span> <span class="token function">randsrc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>num_block<span class="token operator">*</span>block<span class="token operator">*</span>num_sf<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%生成一个子帧的所有比特（1、0） 因为qpsk所以×2</span>        rbits <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>num_block<span class="token operator">*</span>block<span class="token operator">*</span>num_sf<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> nsf <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>num_sf <span class="token comment">%子帧循环</span>            bit <span class="token operator">=</span> <span class="token function">bit_fr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nsf<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span>num_block<span class="token operator">*</span>block<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">*</span>nsf<span class="token operator">*</span>num_block<span class="token operator">*</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%每个子帧存储成行向量bit</span>            bit0 <span class="token operator">=</span> <span class="token function">bit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%I路:取1 3 5 7bit</span>            bit1 <span class="token operator">=</span> <span class="token function">bit</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%Q路: 偶数bit</span>            data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2.</span><span class="token operator">*</span>bit0<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1j</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">*</span>bit1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%归一化(电平映射从0/1映射到-1/1):QPSK</span>            tx_sframe <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>CP<span class="token operator">+</span>block<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>num_block<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">tx_sframe</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span>CP<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span>block<span class="token operator">-</span>CP<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%构造导频的CP（取p后几个作为cp）</span>            <span class="token function">tx_sframe</span><span class="token punctuation">(</span>CP<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>block_dft<span class="token operator">+</span>CP<span class="token punctuation">)</span> <span class="token operator">=</span> p<span class="token punctuation">;</span><span class="token comment">%构造子帧的导频</span>            <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>num_block<span class="token comment">%FDE块数循环</span>                  <span class="token comment">%对每个数据块扩频</span>                  <span class="token comment">% DFT 扩频</span>                <span class="token function">fft_block</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block_dft<span class="token punctuation">)</span><span class="token operator">=</span> <span class="token function">zero_insertion</span><span class="token punctuation">(</span><span class="token function">fft</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token function">ifft_block</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block_dft<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ifft</span><span class="token punctuation">(</span><span class="token function">fft_block</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">,</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">;</span>                                 <span class="token function">tx_sframe</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">*</span><span class="token punctuation">(</span>CP<span class="token operator">+</span>block_dft<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span><span class="token punctuation">(</span>CP<span class="token operator">+</span>block_dft<span class="token punctuation">)</span><span class="token operator">+</span>CP<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ifft_block</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">+</span><span class="token punctuation">(</span>block_dft<span class="token operator">-</span>CP<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%CP是后25个数据</span>                <span class="token function">tx_sframe</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">*</span><span class="token punctuation">(</span>CP<span class="token operator">+</span>block_dft<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>CP<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span><span class="token punctuation">(</span>CP<span class="token operator">+</span>block_dft<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>CP<span class="token operator">+</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token function">ifft_block</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">end</span><span class="token comment">%一个子帧的数据</span>            <span class="token function">tr_sym</span><span class="token punctuation">(</span><span class="token number">4097</span><span class="token operator">+</span><span class="token punctuation">(</span>nsf<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>bpc<span class="token operator">*</span><span class="token punctuation">(</span>num_block<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token number">4096</span><span class="token operator">+</span>nsf<span class="token operator">*</span>bpc<span class="token operator">*</span><span class="token punctuation">(</span>num_block<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> tx_sframe<span class="token punctuation">;</span>        <span class="token keyword">end</span>                                                            <span class="token comment">% 脉冲成型(A-&gt;D)</span>        tr_sample <span class="token operator">=</span> <span class="token function">upfirdn</span><span class="token punctuation">(</span>tr_sym<span class="token punctuation">,</span> b<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%8倍过采样后过根升余弦滚降</span>        tr_head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span>tr_sample<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">%前面加上GP</span>                <span class="token comment">%[rx_frame,pathgains] = rayleighchan(tx_frame.');</span>        <span class="token comment">%h=[0.8, 0, 0, 0.4, 0.4472];</span>        h<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">%load tx_frame.mat</span>        rx_frame <span class="token operator">=</span> <span class="token function">conv</span><span class="token punctuation">(</span>tr_head<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">%理想信道卷积</span>        <span class="token comment">%rx_frame = rx_frame.'+randn(size(rx_frame.'))*sigma+1j*randn(size(rx_frame.'))*sigma;</span>        rx_frame <span class="token operator">=</span> rx_frame<span class="token punctuation">.</span><span class="token string">'+randn(size(rx_frame.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>sigma<span class="token operator">+</span><span class="token number">1j</span><span class="token operator">*</span><span class="token function">randn</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>rx_frame<span class="token operator">.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span>sigma<span class="token punctuation">;</span>            <span class="token comment">%AWGN加噪声</span>                                <span class="token comment">%%%%%%%%%%%%%%%%%Receiver%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>        rx_rrc <span class="token operator">=</span> <span class="token function">conv</span><span class="token punctuation">(</span>rx_frame<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%根升余弦滚降</span>        <span class="token comment">%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>                <span class="token comment">%%%%%%%%%Synchronization%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>        rx_frame0 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.'</span><span class="token punctuation">;</span>        rx_frame4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.'</span><span class="token punctuation">;</span>        window0<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window4<span class="token operator">=</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> ii <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token number">14</span> <span class="token comment">%求十四次相关值</span>            corr0 <span class="token operator">=</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_frame0</span><span class="token punctuation">(</span>ii<span class="token operator">:</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.'</span><span class="token punctuation">;</span>            <span class="token function">window0</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>corr0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>corr0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            corr4 <span class="token operator">=</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_frame4</span><span class="token punctuation">(</span>ii<span class="token operator">:</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.'</span><span class="token punctuation">;</span>            <span class="token function">window4</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>corr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>corr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        bit_syn_ok <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        flag0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        flag4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        ii <span class="token operator">=</span> ii<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">%求第十五次相关系数的I路和Q路的绝对值和（相关值）</span>       <span class="token comment">%%%%%%%%%位同步%%%并行相关%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">~</span>bit_syn_ok<span class="token punctuation">)</span><span class="token comment">%%对连续的4个周期继续进行匹配滤波??</span>             corr0 <span class="token operator">=</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_frame0</span><span class="token punctuation">(</span>ii<span class="token operator">:</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.'</span><span class="token punctuation">;</span>             abscorr0 <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>corr0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>corr0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             sumw0 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>window0<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">if</span><span class="token punctuation">(</span>abscorr0<span class="token operator">&gt;=</span><span class="token number">0.75</span><span class="token operator">*</span>sumw0<span class="token punctuation">)</span><span class="token comment">%门限值是0.75</span>                 bit_syn_ok <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                 syn_pos <span class="token operator">=</span> ii<span class="token punctuation">;</span>                 flag0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token keyword">else</span>                 window0<span class="token operator">=</span><span class="token punctuation">[</span><span class="token function">window0</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>abscorr0<span class="token punctuation">]</span><span class="token punctuation">;</span>                 <span class="token comment">%ii = ii+1;</span>             <span class="token keyword">end</span>             corr4 <span class="token operator">=</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_frame4</span><span class="token punctuation">(</span>ii<span class="token operator">:</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.'</span><span class="token punctuation">;</span>             abscorr4 <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>corr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>corr4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             sumw4 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span>window4<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token keyword">if</span><span class="token punctuation">(</span>abscorr4<span class="token operator">&gt;=</span><span class="token number">0.75</span><span class="token operator">*</span>sumw4<span class="token punctuation">)</span>                 bit_syn_ok <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                 syn_pos <span class="token operator">=</span> ii<span class="token punctuation">;</span>                 flag4 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                 <span class="token keyword">break</span><span class="token punctuation">;</span>             <span class="token keyword">else</span>                 window4<span class="token operator">=</span><span class="token punctuation">[</span><span class="token function">window4</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">,</span>abscorr4<span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token keyword">end</span>             ii <span class="token operator">=</span> ii<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>        <span class="token comment">%%%%%%%%% 最佳样值选择</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>flag0<span class="token punctuation">)</span>            cor1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">7</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">77</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%ii=15</span>            cor2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">77</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">6</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            abscor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">...</span>            <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">...</span>            <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">[</span>maxabs<span class="token punctuation">,</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>abscor<span class="token punctuation">)</span><span class="token punctuation">;</span>            position <span class="token operator">=</span> <span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">79</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>pos<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            cor1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">4</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">5</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">6</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor5 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">7</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor6 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">8</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor7 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">79</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cor8 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">79</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            abscor <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">...</span>                <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">...</span>                <span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>cor8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token function">imag</span><span class="token punctuation">(</span>cor8<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">[</span>maxabs<span class="token punctuation">,</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>abscor<span class="token punctuation">)</span><span class="token punctuation">;</span>            position <span class="token operator">=</span> <span class="token punctuation">(</span>ii<span class="token operator">+</span><span class="token number">79</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>pos<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>                <span class="token comment">%position</span>        pre_cor <span class="token operator">=</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span>position<span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span>position<span class="token operator">+</span><span class="token number">15</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        frame_syn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        curr <span class="token operator">=</span> position<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>frame_syn<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>            curr <span class="token operator">=</span> curr<span class="token operator">+</span><span class="token number">16</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">;</span>            curr_cor <span class="token operator">=</span> <span class="token function">conj</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">rx_rrc</span><span class="token punctuation">(</span>curr<span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span>curr<span class="token operator">+</span><span class="token number">15</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            xc <span class="token operator">=</span> pre_cor<span class="token operator">*</span><span class="token function">conj</span><span class="token punctuation">(</span>curr_cor<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">real</span><span class="token punctuation">(</span>xc<span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>                frame_syn <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">else</span>                pre_cor <span class="token operator">=</span> curr_cor<span class="token punctuation">;</span>            <span class="token keyword">end</span>        <span class="token keyword">end</span>        data_for_fre_offsetEst <span class="token operator">=</span> <span class="token function">rx_rrc</span><span class="token punctuation">(</span>curr<span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span>curr<span class="token operator">+</span><span class="token number">3839</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%用于频偏估计</span>        data_for_fre_offsetCmp <span class="token operator">=</span> <span class="token function">rx_rrc</span><span class="token punctuation">(</span>curr<span class="token operator">+</span><span class="token number">3840</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">:</span><span class="token number">8</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%用于频偏补偿</span>               <span class="token comment">%%%%%%%%%%%%%%%%%%%%频偏估计%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>       <span class="token comment">% 用于频偏估计的长度为3840个符号的前导序列</span>        corr_res <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">240</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">%与本地存储的序列进行相关计算，得到240个相关值，在这些相关值后面补3856个零</span>        <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">16</span><span class="token operator">:</span><span class="token number">3840</span>            <span class="token function">corr_res</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token operator">-</span>s1<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">data_for_fre_offsetEst</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">end</span>       <span class="token comment">%得到的corr_res做4096点FFT(基于FFT进行最大似然频偏估计)</span>        fft_value <span class="token operator">=</span> <span class="token function">fft</span><span class="token punctuation">(</span>corr_res<span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">%对fft_value求模平方</span>        fft_value<span class="token operator">=</span><span class="token function">real</span><span class="token punctuation">(</span>fft_value<span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">real</span><span class="token punctuation">(</span>fft_value<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">imag</span><span class="token punctuation">(</span>fft_value<span class="token punctuation">)</span><span class="token operator">.*</span><span class="token function">imag</span><span class="token punctuation">(</span>fft_value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">%找最大值，记录最大值所在的位置索引loca_tmp</span>        <span class="token punctuation">[</span>fft_value1<span class="token punctuation">,</span>loca_tmp<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">max</span><span class="token punctuation">(</span>fft_value<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">%进行二次插值</span>         <span class="token comment">%求最大值左边一个位置的值</span>        fft_value0<span class="token operator">=</span><span class="token function">fft_value</span><span class="token punctuation">(</span><span class="token function">mod</span><span class="token punctuation">(</span><span class="token punctuation">(</span>loca_tmp<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">%求最大值右边一个位置的值</span>        fft_value2<span class="token operator">=</span><span class="token function">fft_value</span><span class="token punctuation">(</span><span class="token function">mod</span><span class="token punctuation">(</span>loca_tmp<span class="token punctuation">,</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">%根据公式拟合出二次函数，并找到最大值</span>        <span class="token comment">% 频率偏移值</span>        fre_off_est<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>loca_tmp<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>fft_value0<span class="token operator">-</span>fft_value2<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>fft_value0<span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>fft_value1<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>fft_value2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>rate<span class="token operator">/</span><span class="token number">16</span><span class="token operator">/</span><span class="token number">4096</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">%%%%%%%%%%%%%%%%%%%频偏补偿%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>        t <span class="token operator">=</span> <span class="token number">0</span><span class="token operator">:</span><span class="token number">1</span><span class="token operator">/</span>rate<span class="token operator">:</span><span class="token punctuation">(</span><span class="token function">length</span><span class="token punctuation">(</span>data_for_fre_offsetCmp<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span>rate<span class="token punctuation">;</span>        data_for_EstEqu <span class="token operator">=</span> data_for_fre_offsetCmp<span class="token operator">.'</span><span class="token operator">.*</span><span class="token function">exp</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1j</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span><span class="token keyword">pi</span><span class="token operator">*</span>fre_off_est<span class="token operator">.*</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">%%%%%%%%%%%%%%%%%%提取信息%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%</span>        <span class="token keyword">for</span> nsf <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span>num_sf                       rx_frame <span class="token operator">=</span> <span class="token function">data_for_EstEqu</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nsf<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3759</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>nsf<span class="token operator">*</span><span class="token number">3759</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pilot_r <span class="token operator">=</span> <span class="token function">rx_frame</span><span class="token punctuation">(</span>CP<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>CP<span class="token operator">+</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">;</span>            data_r <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num_block<span class="token operator">*</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">;</span>            f_data_r <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num_block<span class="token operator">*</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>num_block                <span class="token function">data_r</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block_dft<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">rx_frame</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">*</span><span class="token punctuation">(</span>CP<span class="token operator">+</span>block_dft<span class="token punctuation">)</span><span class="token operator">+</span>CP<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span><span class="token punctuation">(</span>CP<span class="token operator">+</span>block_dft<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>CP<span class="token operator">+</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">f_data_r</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block_dft<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">fft</span><span class="token punctuation">(</span><span class="token function">data_r</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token comment">%对子帧的导频做fft,进行信道估计</span>            f_pilot_r <span class="token operator">=</span> <span class="token function">fft</span><span class="token punctuation">(</span>pilot_r<span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">;</span>            r_for_sigma<span class="token operator">=</span><span class="token function">f_pilot_r</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">63</span>                r_for_sigma<span class="token operator">=</span><span class="token punctuation">[</span>r_for_sigma<span class="token punctuation">,</span><span class="token function">f_pilot_r</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">/</span><span class="token number">64</span><span class="token operator">+</span><span class="token number">6</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">/</span><span class="token number">64</span><span class="token operator">+</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            r_for_sigma<span class="token operator">=</span><span class="token punctuation">[</span>r_for_sigma<span class="token punctuation">,</span><span class="token function">f_pilot_r</span><span class="token punctuation">(</span><span class="token number">510</span><span class="token operator">:</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            sigma_est <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">mean</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>r_for_sigma<span class="token punctuation">)</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            pace<span class="token operator">=</span>block_dft<span class="token operator">/</span><span class="token number">64</span><span class="token punctuation">;</span>            h_est <span class="token operator">=</span> <span class="token function">f_pilot_r</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">:</span>pace<span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token operator">./</span><span class="token function">f_pilot</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token operator">:</span>pace<span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            h_est_interp <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">64</span>                delta <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">h_est</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">h_est</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>block_dft<span class="token operator">/</span><span class="token number">64</span>                    <span class="token function">h_est_interp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">8</span><span class="token operator">+</span>k<span class="token operator">+</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">h_est</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>delta<span class="token punctuation">;</span>                <span class="token keyword">end</span>            <span class="token keyword">end</span>            delta <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">h_est</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token function">h_est</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">8</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> k<span class="token operator">=</span><span class="token number">509</span><span class="token operator">:</span><span class="token number">512</span>                <span class="token function">h_est_interp</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">h_est</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token number">509</span><span class="token punctuation">)</span><span class="token operator">*</span>delta<span class="token punctuation">;</span>            <span class="token keyword">end</span>            <span class="token keyword">for</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">4</span>                <span class="token function">h_est_interp</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">h_est</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span>delta<span class="token punctuation">;</span>            <span class="token keyword">end</span>                                         comp <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num_block<span class="token operator">*</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">;</span>            r_cons <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num_block<span class="token operator">*</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>num_block                <span class="token keyword">for</span> k<span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>block_dft                    <span class="token function">comp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">+</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">f_data_r</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token function">h_est_interp</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token function">h_est_interp</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">conj</span><span class="token punctuation">(</span><span class="token function">h_est_interp</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>sigma_est<span class="token operator">*</span>sigma_est<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">end</span>                <span class="token function">f_data_remov</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">zero_removal</span><span class="token punctuation">(</span><span class="token function">comp</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block_dft<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block_dft<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">r_cons</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">ifft</span><span class="token punctuation">(</span><span class="token function">f_data_remov</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>block<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">i</span><span class="token operator">*</span>block<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sqrt</span><span class="token punctuation">(</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">end</span>            rsyms <span class="token operator">=</span> <span class="token function">reshape</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">real</span><span class="token punctuation">(</span>r_cons<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imag</span><span class="token punctuation">(</span>r_cons<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">*</span>num_block<span class="token operator">*</span>block<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rbits</span><span class="token punctuation">(</span><span class="token punctuation">(</span>nsf<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span>num_block<span class="token operator">*</span>block<span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>nsf<span class="token operator">*</span><span class="token number">2</span><span class="token operator">*</span>num_block<span class="token operator">*</span>block<span class="token punctuation">)</span> <span class="token operator">=</span> rsyms<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">%小于0 为1</span>        <span class="token keyword">end</span>          tbits <span class="token operator">=</span> bit_fr<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">[</span>err_count<span class="token punctuation">,</span>err_rate<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">biterr</span><span class="token punctuation">(</span>tbits<span class="token punctuation">,</span>rbits<span class="token punctuation">)</span><span class="token punctuation">;</span>         total_err <span class="token operator">=</span> total_err<span class="token operator">+</span>err_count<span class="token punctuation">;</span>    <span class="token keyword">end</span>    <span class="token function">disp</span><span class="token punctuation">(</span><span class="token string">'准备打印图片'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">err_rate1</span><span class="token punctuation">(</span>nsnr<span class="token punctuation">)</span><span class="token operator">=</span>total_err<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>num_block<span class="token operator">*</span>block<span class="token operator">*</span>num_sf<span class="token operator">*</span>nframes<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span>      figure  <span class="token function">semilogy</span><span class="token punctuation">(</span>snr<span class="token punctuation">,</span>err_rate1<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">%rx_frame = tx_frame;</span><span class="token comment">%     end</span><span class="token comment">% err_rate(nsnr)=total_err/(2*num_block*block*nframes);</span><span class="token comment">% end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 4G </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阻塞赋值和非阻塞赋值的应用场景</title>
      <link href="//post/%E9%98%BB%E5%A1%9E%E8%B5%8B%E5%80%BC%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%E8%B5%8B%E5%80%BC%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.html"/>
      <url>//post/%E9%98%BB%E5%A1%9E%E8%B5%8B%E5%80%BC%E5%92%8C%E9%9D%9E%E9%98%BB%E5%A1%9E%E8%B5%8B%E5%80%BC%E7%9A%84%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF.html</url>
      
        <content type="html"><![CDATA[<h3 id="在Verilog-HDL语言中，信号有两种赋值方式："><a href="#在Verilog-HDL语言中，信号有两种赋值方式：" class="headerlink" title="在Verilog HDL语言中，信号有两种赋值方式："></a>在Verilog HDL语言中，信号有两种赋值方式：</h3><h4 id="非阻塞-Non-Blocking-赋值方式-如-b-lt-x3D-a"><a href="#非阻塞-Non-Blocking-赋值方式-如-b-lt-x3D-a" class="headerlink" title="非阻塞(Non_Blocking)赋值方式( 如 b <= a; )"></a><strong>非阻塞(Non_Blocking)赋值方式( 如 b &lt;= a; )</strong></h4><p>“阻塞”是指在进程语句（initial 和 always）中，当前的赋值语句会阻断其后语句的正常执行，也就是说后面的语句必须等到当前的赋值语句执行完毕才能执行。而且阻塞赋值可以看成是一步完成的，即：计算等号右边的值并同时赋给左边变量。</p><p><strong>块结束后完成赋值（并不是立马改变值）</strong></p><h4 id="阻塞-Blocking-赋值方式-如-b-x3D-a"><a href="#阻塞-Blocking-赋值方式-如-b-x3D-a" class="headerlink" title="阻塞(Blocking)赋值方式( 如 b = a; )"></a><strong>阻塞(Blocking)赋值方式( 如 b = a; )</strong></h4><p>“非阻塞”是指在进程语句（initial 和 always）中，当前的赋值语句不会阻断其后语句的正常执行。</p><p>b的值在赋值语句执行完后立刻就改变</p><blockquote><p><strong>在描述组合逻辑的always 块中用阻塞赋值，则综合成组合逻辑的电路结构。</strong></p><p><strong>在描述时序逻辑的always 块中用非阻塞赋值，则综合成时序逻辑的电路结构。</strong></p></blockquote><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">block</span><span class="token punctuation">(</span>Clk<span class="token punctuation">,</span>Rst_n<span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">input</span> Clk<span class="token punctuation">;</span><span class="token keyword">input</span> Rst_n<span class="token punctuation">;</span><span class="token keyword">input</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">;</span><span class="token keyword">output</span> <span class="token keyword">reg</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> out<span class="token punctuation">;</span><span class="token comment">//用阻塞赋值</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> d<span class="token punctuation">;</span><span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> Clk <span class="token keyword">or</span> <span class="token keyword">negedge</span> Rst_n<span class="token punctuation">)</span> <span class="token keyword">begin</span><span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">!</span>Rst_n<span class="token punctuation">)</span>out<span class="token operator">=</span> <span class="token number">2'b0</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">begin</span>d<span class="token operator">=</span>a<span class="token operator">+</span>b<span class="token punctuation">;</span>out<span class="token operator">=</span>d<span class="token operator">+</span>c<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们想构建一个a+b+c的例子</p><h4 id="第一种方式：使用阻塞但按照运算顺序"><a href="#第一种方式：使用阻塞但按照运算顺序" class="headerlink" title="第一种方式：使用阻塞但按照运算顺序"></a>第一种方式：使用阻塞但按照运算顺序</h4><p>d=a+b;<br>        out=d+c;</p><p>系统综合出的电路如下：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307121453406.png" alt="image-20230707121737812"></p><p>可以看出add0和add1是组合逻辑，也就是a+b+c是一步完成的。</p><h4 id="第二种方式：使用非阻塞赋值"><a href="#第二种方式：使用非阻塞赋值" class="headerlink" title="第二种方式：使用非阻塞赋值"></a>第二种方式：使用非阻塞赋值</h4><p>非阻塞赋值顺序没有影响所以</p><p>d&lt;=a+b;<br>        out&lt;=d+c;</p><p>此时生成的电路为</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202307121503930.png" alt="image-20230707135350815"></p><h4 id="特殊情况，如果将阻塞赋值顺序反过来也会实现上图效果"><a href="#特殊情况，如果将阻塞赋值顺序反过来也会实现上图效果" class="headerlink" title="特殊情况，如果将阻塞赋值顺序反过来也会实现上图效果"></a>特殊情况，如果将阻塞赋值顺序反过来也会实现上图效果</h4><p>不推荐使用</p>]]></content>
      
      
      <categories>
          
          <category> FPGA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> FPGA学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大三over</title>
      <link href="//post/%E5%A4%A7%E4%B8%89over.html"/>
      <url>//post/%E5%A4%A7%E4%B8%89over.html</url>
      
        <content type="html"><![CDATA[<p><strong>写下此文时，已结束大学三年里的所有考试，踏上前往别的城市的火车。</strong><br><strong>总想写点什么记录这命途多舛的学期，甚至纪念这来去匆匆的三年。</strong><br>        活了这么久，从未想过在人生的路上拐弯，不觉有异常难以逾越的山丘，总能平直的走下去。现在看来只是幼稚的自命不凡罢了哈哈哈，或许早些年就应该意识自身的局限，但最终击垮我的还是这次的病。<br>        寒假里检查出重度的腰间盘突出，从未想过这个年纪会有如此严重的伤病，甚至不能久坐。医生说早已达到手术指标，但如此年轻的手术或影响太多。现在仔细回想此病加之最近颈椎开始出现问题，觉得有两个因素，一是长期伏案引起关节退化，二是盲目健身加重量造成了损伤。于是学期初，即刻停下了挚爱许久的运动，试图修养一段时间。也曾思考，无法久坐，无法健身对人生的影响，但也在逐渐和这个病和解。</p><blockquote><p>顺便说，大家一定注意身体多做这个动作😂</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306221655822.png" alt="image-20230622165550714"></p><p>万幸在这个学期里收获很多快乐，足以弥补伤痛。一直觉得大三下会和高三一样煎熬，但现在走来，煎熬只是停留在体肤筋骨。庆幸身边的人带给我这三年的快乐。</p><h4 id="说说这个学期吧，这是大学来最长的一次学期"><a href="#说说这个学期吧，这是大学来最长的一次学期" class="headerlink" title="说说这个学期吧，这是大学来最长的一次学期"></a>说说这个学期吧，这是大学来最长的一次学期</h4><p>开学前和女朋友一起去了天津，拖着老腰开车玩了三天，感受到天津菜的分量<br>开学和孔哥逛了北京花鸟市场</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306221656601.png" alt="image-20230622165642328"></p><p>鼓起勇气尝试一直喜欢的雨林缸，制作起来也并不费事，每天起床看植物一点一点茂密，是真能感悟到生命的力量哈哈哈，这是我的小缸</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306221656006.png" alt="image-20230622165653715"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306221657268.png" alt="image-20230622165726994"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306221659620.png" alt="image-20230622165941898"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306221701874.jpg" alt="cd1b7e54ba17315f4c0b88693203183"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306221700026.jpg" alt="dbd1085cc91b67576f6e83c3d966c1a"></p><p>三月，度过自己21岁生日，收到女朋友的蛋糕和花，和好兄弟们一起吃的感觉足以弥补痛苦</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306221702845.png" alt="image-20230622170240654"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306221702095.png" alt="image-20230622170256986"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306221703310.png" alt="image-20230622170309198"></p><p>三月下把东西从图书馆搬走，打算在宿舍修养身心，缓解病痛。</p><p>这期间不少家人朋友老师来北邮见我，也聊了很久，甚是感激，也感觉到一点疫情结束的校园氛围。<br>    疫情结束，英方老师都来学校上课了，适应不了没有字幕英方课，听不懂叽里咕，只能缺勤🙃（说起来这英语确实该整整了哈哈哈）<br>    三月底，女朋友怕我腰痛坐高铁不舒服，来陪我，一起吃逛了天坛，买了太多好吃的，开心的带她逛了校园，何其有幸的一起在北邮和老唐合了张影哈哈哈哈</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306221704483.png" alt="image-20230622170446131"></p><p>四月被通原，微波救赎的一个月🙈<br>        五一冲去沈阳，一起过了两周年</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306221705010.png" alt="image-20230622170509860"></p><p>所以到现在三年大学时光，才刚刚交换了校园生活。😆😆</p><p>到前几天，挣扎完了期末考试，却没有长出一口气的快感，估计已经被考试磨平棱角哈哈哈<br>不管怎么说，结束了大三，马上开始大四，虽然对前三年的不少事情觉得有更正确的选择，但人最大的痛苦，就在于知道什么是好的，但永远做出错误的选择😂😂😂似乎永远无法做出当下最正确的选择，顺其自然就好。<br>不过，终于有些时间做点自己的事情，这是值得期望的。在学校坚持游泳，在假期准备开始系统锻炼康复。在苦难和希望持平的日子里往前走，活出内在就好。<br>要到站咯，就此收尾咯。</p><p><strong>总之感谢身边所有人的陪伴。</strong><br>    <strong>祝女朋友拿到心怡的offer</strong><br>    <strong>祐狗去qm好好享受生活，给咱拿个IC博士。（tmd不陪哥几个拍毕业照，得骂你一辈子）</strong><br>    <strong>磊哥杰宝必须狠狠上岸。</strong><br>    <strong>祝好 to 所有人</strong><br>    <strong>2023.6.22</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网应用笔记（一）</title>
      <link href="//post/01%20Introduction.html"/>
      <url>//post/01%20Introduction.html</url>
      
        <content type="html"><![CDATA[<h1 id="Internet-Applications"><a href="#Internet-Applications" class="headerlink" title="Internet Applications"></a><strong>Internet Applications</strong></h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="What-is-the-Internet"><a href="#What-is-the-Internet" class="headerlink" title="What is the Internet?"></a>What is the Internet?</h3><h4 id="Internet-vs-internet"><a href="#Internet-vs-internet" class="headerlink" title="Internet vs. internet"></a>Internet vs. internet</h4><p><strong>i</strong>nternet: a set of computer networks that are connected to each other.</p><p>泛指多个计算机网络互连而组成的网络</p><p><strong>I</strong>nternet: a worldwide sets of networks that interoperate using TCP/IP protocols. </p><p>指当前世界上最大的、开放的、由众多网络相互连接而成的特定计算机网络</p><h4 id="Internet-vs-WWW"><a href="#Internet-vs-WWW" class="headerlink" title="Internet vs. WWW"></a>Internet vs. WWW</h4><p><strong>WWW</strong>万维网:An information sharing model on top of the Internet</p><p>一个由许多互相链接的超文本组成的系统，通过互联网访问。</p><p><strong>Internet</strong> :a networking infrastructure and the related communication standards</p><h3 id="How-does-the-Internet-work"><a href="#How-does-the-Internet-work" class="headerlink" title="How does the Internet work?"></a>How does the Internet work?</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302211935906.png" alt="image-20230221193505697"></p><h3 id="Components-of-the-Internet"><a href="#Components-of-the-Internet" class="headerlink" title="Components of the Internet"></a>Components of the Internet</h3><p>沙漏型</p><p>Internet applications</p><p>◼ telnet, ftp, Email, Web browser </p><p>Internet protocols</p><p>◼ TCP/IP, FTP, SMTP,HTTP</p><p>Internet addresses</p><p>◼ IPv4, IPv6, Domain Name System</p><p>Physical infrastructure</p><p>◼ hosts, routers, wiring</p><h4 id="Internet-addressing"><a href="#Internet-addressing" class="headerlink" title="Internet addressing"></a>Internet addressing</h4><p>IP Address：network interface address</p><p>Be assigned by <strong>IANA</strong></p><p>Hostname：Be assigned to a host for the benefit of humans</p><h4 id="Internet-protocols"><a href="#Internet-protocols" class="headerlink" title="Internet protocols"></a>Internet protocols</h4><p>Protocol = A set of rules for communicating</p><ul><li><p>Internet Protocol (IP)</p><p>​◼ Basic data transport: the glue of the Internet</p><p>​◼ Unreliable delivery</p><p>​◼ Versions</p><p>​◼ IPv4 with 32 bit/4 Byte address</p><p>​◼ IPv6 with 128 bit/16 Byte address</p></li><li><p><strong>Transport layer</strong></p><p>Transmission Control Protocol (TCP)</p><pre><code>     ◼ Reliable data transmission</code></pre><p>​◼ Connection-oriented</p><p>User Datagram Protocol (UDP)</p><p>​◼ Unreliable data transmission</p><p>​◼ Connectionless-oriented</p></li></ul><p><strong>All Internet Applications use at least IP, most use TCP/UDP and IP</strong></p><ul><li><p><em>Application protocols</em></p><p>​File Transfer Protocol (FTP)</p><p>​◼ Used by file exchange applications</p><p>​Simple Mail Transfer Protocol (SMTP)</p><p>​◼ Used by email applications</p><p>​HyperText Transfer Protocol (HTTP)</p><p>​◼ Used by WWW applications</p></li><li><p><strong>Internet applications</strong></p><p> ftp, telnet, email, www(www是所有超文本网页文件的集合)</p><p>大多基于CS架构</p><p>application对应的protocol：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302211946519.png" alt="image-20230221194607471" style="zoom:50%;"></li></ul><h4 id="Layered-networking-model"><a href="#Layered-networking-model" class="headerlink" title="Layered networking model"></a>Layered networking model</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302211947443.png" alt="image-20230221194723366" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302211947878.png" alt="image-20230221194737632" style="zoom:67%;"><h4 id="Client-server-paradigm（典范）"><a href="#Client-server-paradigm（典范）" class="headerlink" title="Client-server paradigm（典范）"></a>Client-server paradigm（典范）</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302211955204.png" alt="image-20230221195508168" style="zoom: 50%;"><ul><li><p>Client – the user of the service</p><p>​<strong>Initiates interaction through requests</strong></p></li><li><p>Server – the provider of the service</p><p>​Must be listening</p><p>​Waits and responds to the incoming requests</p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302211954035.png" alt="image-20230221195439988" style="zoom:50%;"><h2 id="quiz"><a href="#quiz" class="headerlink" title="quiz"></a>quiz</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302211956274.png" alt="选A client发起互动"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302211957573.png" alt="A" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302211958857.png" alt="c"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302211959408.png" alt="ABG  D：ICMP网络层协议　Ｅ：www是application不是protocol G：远程连接" style="zoom:67%;"><h2 id="Basic-Network-Definitions"><a href="#Basic-Network-Definitions" class="headerlink" title="Basic Network Definitions"></a>Basic Network Definitions</h2><h3 id="Terms-for-Network-Devices"><a href="#Terms-for-Network-Devices" class="headerlink" title="Terms for Network Devices"></a>Terms for Network Devices</h3><ul><li><p><strong>Node</strong>:a device that is connected as part of a network <strong>with a network address</strong></p><p>E.g. Computer, PDA, Cell Phone, router, switch, bridge etc.</p></li><li><p><strong>Host Node</strong>:the computer attached directly to the Internet</p></li><li><p><strong>Link</strong> :the inter-connection between network devices</p></li><li><p><strong>Network Component</strong>:the equipment that is part of the network infrastructure</p></li><li><p><strong>Bandwidth</strong>:Indicates how much stuff you can send through a connection</p></li><li><p><strong>Delay</strong>:is an expression of how much time it takes for a packet of data to get from one designated point to another</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302212015462.png" alt="image-20230221201522294" style="zoom:50%;"></li><li><p><strong>Jitter 晃动</strong>:The variation in delay</p></li><li><p><strong>Error Rate</strong>:错误传输、丢失或重传输的数据单元的概率</p><p>◼ BER (Bit Error Rate)</p><p>◼ FER (Frame Error Rate)</p><p>◼ PER (Packet Error Rate)</p></li></ul><h3 id="Terms-for-Network-Performance-Parameters"><a href="#Terms-for-Network-Performance-Parameters" class="headerlink" title="Terms for Network Performance Parameters"></a>Terms for Network Performance Parameters</h3><ul><li><p>Throughput : the average rate of successful message delivery over a communication channel </p></li><li><p>QoS (Quality of Service)</p></li><li><p>PLR (Packet Loss Rate)</p></li></ul><h3 id="Ways-to-connect-to-the-Internet"><a href="#Ways-to-connect-to-the-Internet" class="headerlink" title="Ways to connect to the Internet"></a>Ways to connect to the Internet</h3><ul><li><p><strong>Dialup</strong>拨号：Via twisted pair phone lines</p><p>MODEM (MOdulator-DEModulator，调制解调器)</p></li><li><p><strong>ISDN</strong>：Integrated Services Digital Network (64-128Kbps)</p><p>ISDN（综合业务数字网）是传统电话服务的替换产品，提供从终端用户到终端用户的全数字服务，实现了语音、数据、图形、视频等综合业务的一个全数字化传递方式。</p></li><li><p><strong>(A)DSL</strong>：(Asymmetric) Digital Subscriber Line 非对称数字用户环路</p><p>◼ 8 Mbps download, 2Mbps upload – 1M bps download, 256Kbps upload</p></li><li><p><strong>Cable Modem</strong></p><p>CATV: 500 Kbps - 30 Mbps</p><p>FTTH: Fiber to the Home</p></li><li><p><strong>LAN</strong></p><p>Ethernet connections</p></li><li><p><strong>Satellite</strong></p></li><li><p><strong>Cellular</strong>（蜂窝）</p></li><li><p><strong>Broadband wireless access</strong>（宽带无线接入）</p></li></ul><h3 id="Terms-for-network-types"><a href="#Terms-for-network-types" class="headerlink" title="Terms for network types"></a>Terms for network types</h3><h4 id="switching-function-in-the-network"><a href="#switching-function-in-the-network" class="headerlink" title="switching function in the network"></a>switching function in the network</h4><p>Circuit switching network(面向连接)：专用线路</p><p>Message switching network（报文交换）：发送整体报文</p><p>Packet switching network（无连接）：分成package</p><p>Hybrid switching network</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302212033896.png" alt="image-20230221203305812" style="zoom:67%;"><h4 id="Different-channel-access-technologies"><a href="#Different-channel-access-technologies" class="headerlink" title="Different channel access technologies"></a>Different channel access technologies</h4><ul><li><p>Multi-access means <strong>shared medium</strong></p><p>Many end-systems share the same physical communication resources</p><p>There must be some arbitration mechanism</p><p>Example: LANs</p></li><li><p>point-to-point</p><p>Between two points in the network, there must exists a physical channel</p><p> bandwidth waste</p><p>Example: WANs</p></li></ul><h4 id="range-of-the-network"><a href="#range-of-the-network" class="headerlink" title="range of the network"></a>range of the network</h4><ul><li><p>WAN (Wide Area Network，广域网) - network that spans a large geographic area</p><ul><li><p>Range: 10 - 1000 km</p></li><li><p>Point-to-point ring or partial mesh</p></li></ul></li><li><p>MAN (Metropolitan Area Network，城域网) - network that spans a medium area such as a campus to a city</p><ul><li><p>Range: &lt; 10 km</p></li><li><p>multi-access</p><p>Microwave, IEEE802.16/WiMAX</p></li></ul></li><li><p>LAN (Local Area Network，局域网) - network that spans a limited area such as a lab, or a building</p><ul><li><p>multi-access</p></li><li><p>Range: &lt; 1 km</p></li><li><p>high speed</p></li></ul><p>◼ Ethernet: IEEE 802.3, 10 M, 100M, </p><p>◼ Wireless LAN: IEEE802.11b/a/g/n/ac </p></li><li><p>PAN (Personal Area Network，个人区域网) – network that spans a small space such a room, less than 10m</p></li></ul><h4 id="According-to-the-user-of-the-network"><a href="#According-to-the-user-of-the-network" class="headerlink" title="According to the user of the network"></a>According to the user of the network</h4><ul><li><p>Public network</p><p>The large scale network built by the telecommunication companies</p></li><li><p>Private network</p><p>The network built by a certain agency for its special requirements</p></li></ul><h2 id="Layered-Architecture"><a href="#Layered-Architecture" class="headerlink" title="Layered Architecture"></a>Layered Architecture</h2><h4 id="OSI-Layer-Model"><a href="#OSI-Layer-Model" class="headerlink" title="OSI Layer Model"></a>OSI Layer Model</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071357427.png" alt="image-20230221204347427"></p><h4 id="TCP-x2F-IP-Layer-Model"><a href="#TCP-x2F-IP-Layer-Model" class="headerlink" title="TCP/IP Layer Model"></a>TCP/IP Layer Model</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071357140.png" alt="image-20230221204507837"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> 互联网应用 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网应用笔记（二）</title>
      <link href="//post/02%20stocker%20programming.html"/>
      <url>//post/02%20stocker%20programming.html</url>
      
        <content type="html"><![CDATA[<h1 id="Network-Socket-Programming"><a href="#Network-Socket-Programming" class="headerlink" title="Network Socket Programming"></a>Network Socket Programming</h1><h2 id="Introduction-to-NP"><a href="#Introduction-to-NP" class="headerlink" title="Introduction to NP"></a>Introduction to NP</h2><p>Protocol Implementation</p><p>◼ TCP/IP</p><p>◼ IPX/SPX</p><p> Hiding the complexities （隐藏复杂性，用户不用自己操作协议）</p><p>◼ Sockets</p><p>◼ RPC : Remote Procedure Call（基于socket）</p><h2 id="课上environments"><a href="#课上environments" class="headerlink" title="课上environments"></a>课上<em>environments</em></h2><p>◼ TCP/IP nodes on Ethernet</p><p>◼ LINUX as the Operating System</p><p>◼ C language for most sample programs and assignments</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281005176.png" alt="image-20230228100523099"></p><p>网络编程只涉及五层以上，底层kernel support被封装隐藏给用户, 将这些程序发布在以太网中的TCP/IP节点。</p><p><strong>这些app会调用系统内核中的接口等</strong> 接口可以理解为库函数</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281006092.png" alt="image-20230228100637018"></p><p>Driver是与硬件相连</p><p>kernel是性能提升的部分</p><h3 id="C-Compiler-in-Linux"><a href="#C-Compiler-in-Linux" class="headerlink" title="C Compiler in Linux"></a><em>C Compiler in Linux</em></h3><pre class="line-numbers language-none"><code class="language-none">% gcc test1.c -o test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>gcc –o test test.c，将test.c编译并连接成可执行的二进制文件test</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">gcc -g test.c -o test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-g表示可以调试</p><p>test1.c : program to be compiled</p><p>-o : specify the name for running program给可执行文件起名字</p><pre class="line-numbers language-none"><code class="language-none">./test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行test</p><h3 id="debugger-in-Linux"><a href="#debugger-in-Linux" class="headerlink" title="debugger in Linux"></a><em>debugger in Linux</em></h3><pre class="line-numbers language-none"><code class="language-none">gdb [options] [executable-file [core file or process-id]]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>◼ file : load the program for debugging</p><p>◼ kill : stop the program for debugging</p><p>◼ list : list the source code of the program for debugging</p><p>​查看源程序代码，默认显示10行，按回车键继续看余下的</p><p>◼ break : set a break point in the source program 加断点</p><p>◼ run : run the program to be debugged</p><p>​运行程序直到遇到 结束或者遇到断点等待下一个命令</p><p>◼ next : execute <strong>a single line of the program</strong>, but not go into it</p><p>◼ step : execute <strong>a single line of the program</strong>, but go into it</p><p>◼ quit : quit the gdb to shell 退出gdb</p><p>◼ print : display the value of a variable</p><p>◼ make : make a run-able program without quiting gdb</p><p>◼ c : Continue running your program (e.g. at a breakpoint)</p><p>◼ bt (backtrace) : display the program stack</p><h2 id="Basic-Concepts"><a href="#Basic-Concepts" class="headerlink" title="Basic Concepts"></a>Basic Concepts</h2><p><strong>Process</strong> ：进程是操作系统正在执行的程序的实例。</p><p><strong>System</strong> <strong>Call</strong> Linux/Unix内核提供了有限数量的直接入口点(通常在60到200之间)，活动进程可以通过这些入口点从内核获取服务。</p><p><strong>File</strong> <strong>Descriptor</strong> A file descriptor is a small integer used to identify a file that has been opened for I/O operation. Linux 中一切都可以看作文件，包括普通文件、链接文件、Socket 以及设备驱动等，对其进行相关操作时，都可能会创建对应的文件描述符。文件描述符（file descriptor）是内核为了高效管理已被打开的文件所创建的索引，用于指代被打开的文件，对文件所有 I/O 操作相关的系统调用都需要通过文件描述符。</p><p><strong>Signal</strong> A signal is a notification to a process that an event has occurred</p><p>如 CTRL C停止运行</p><h3 id="process"><a href="#process" class="headerlink" title="process"></a><em>process</em></h3><p>One of the most basic abstractions in Unix (the other one is File)</p><p><strong>process ≠ program</strong></p><ul><li><p>Program：a file containing instructions to be executed, static</p></li><li><p>Process:  an instance of a program in execution, live entity</p></li></ul><p>**One program can have multiple processes 、invoke multiple programs **并发</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281032496.png" alt="image-20230228103215402"></p><ul><li><p>Text: program code</p></li><li><p>Data: global variables</p></li><li><p>Heap: dynamic allocated memory, **malloc()**动态分配内存，放在堆中</p></li><li><p>Stack: temporary data (local variable, function parameters, return addresses)</p></li></ul><h4 id="PID-Process-ID"><a href="#PID-Process-ID" class="headerlink" title="PID (Process ID)"></a>PID (Process ID)</h4><p>标识进程：The PID is an integer, typically in the range 0 through 32,767. 每个进程都有一个唯一的PID</p><p>每一个进程有父进程</p><p>PPID (Parent PID): Every process has a parent process ID.父进程ID</p><p><strong>Special process</strong></p><p>◼ PID = 1: init process</p><p>◼ PID = 0: special kernel process (e.g., idle/swapper process)</p><p>◼ PID = 2: special kernel process (e.g., page daemon process)</p><pre class="line-numbers language-none"><code class="language-none">ps –ef<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>see every process on the system</strong>（本身也是一个process）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281043110.png" alt="image-20230228104338070"></p><p>kill PID 杀掉进程/CTRL c</p><h4 id="Related-system-calls"><a href="#Related-system-calls" class="headerlink" title="Related system calls"></a>Related system calls</h4><p>fork(): to create a child process （父进程的拷贝）</p><p>getpid(): to obtain the PID of a process（当前进程的PID）</p><p>getppid(): to obtain the PPID(Parent Process ID) of a process（当前进程的父进程PID）</p><p>exec(): often used after fork() to load another process（改变子进程）</p><p>​<strong>execl(), execv(), execle(), execve(), execlp(), execvp()</strong></p><p>exit(): to terminate a process and release all the resources </p><h4 id="fork"><a href="#fork" class="headerlink" title="fork()"></a>fork()</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token comment">//是Unix/Linux系统的基本系统数据类型的头文件，含有size_t，time_t，pid_t等类型。</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token comment">//是 C 和 C++ 程序设计语言中提供对 POSIX 操作系统 API 的访问功能的头文件的名称。</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">pid_t</span> t<span class="token punctuation">;</span>            <span class="token comment">//typedef int pid_t linux里的int</span>t<span class="token operator">=</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回子进程进程号，子进程里t为0</span>   <span class="token comment">//fork()之后的代码会在父子进程都跑一遍</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"fork returned %d\n"</span><span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建一个进程，所创建的进程复制父进程的<strong>代码段/数据段/BSS段/堆/栈等所有用户空间信息</strong></p><h5 id="fork-特性"><a href="#fork-特性" class="headerlink" title="fork()特性"></a>fork()特性</h5><p>fork调用的一个奇妙之处就是它仅仅被调用一次，却能够返回两次，它可能有三种不同的返回值：</p><ol><li><p>在父进程中，fork返回新创建子进程的进程ID；</p></li><li><p>在子进程中，fork返回0；</p></li><li><p>如果出现错误，fork返回一个负值；</p><p>可以通过fork返回的值来判断当前进程是子进程还是父进程</p></li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ gcc fork1.c –o fork1$ ./fork1fork returned 0 #子进程结果fork returned 22770 #父进程结果<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>fork 调用生成的新进程与其父进程谁先执行不一定，哪个进程先执行要看系统的进程调度策略</strong></p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">pid_t</span> t<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Original program, pid=%d\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        #子进程执行<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In child process, pid=%d, ppid=%d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">getppid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In parent, pid=%d, fork returned=%d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        #父进程自己id<span class="token operator">+</span>子进程ID<span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Original program, pid=987In child process, pid=988, ppid=987In parent, pid=987, fork returned=988 #子进程进程号<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h4><p>用法：<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211928241.png" alt="image-20230321192853166"></p><p>Sample program of exec() – exec1.c</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>arg<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">"/bin/ls"</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//字符串数组（路径）0字符结尾（null结尾） 先在另一个窗口运行ls process</span>    <span class="token comment">//char *arg[] = { "/bin/ls","-l", 0 };带参数的写法</span><span class="token comment">/* fork, and exec within child process */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//子进程</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"In child process:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">execv</span><span class="token punctuation">(</span>arg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从此开始子进程执行ls，第二参数指针：读取参数</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"I will never be called\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在子进程不会执行</span><span class="token punctuation">}</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Execution continues in parent process\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[shiyan@localhost examples-for-ia]$ ./exec1In child process:Execution continues in parent process[shiyan@localhost examples-for-ia]$ exec1 exec1.c #lsfork1 fork1.c fork2 fork2.c<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>exec:</strong> <strong>将新程序代码加载（拷贝）到子进程的内存空间，替换掉原有的与父进程一模一样的代码和数据，让子进程空间运行全新的程序。</strong></p><h3 id="file-descriptor"><a href="#file-descriptor" class="headerlink" title="file descriptor"></a><em>file descriptor</em></h3><p>File descriptors are assigned by the kernel when the following system calls are successful</p><p>文件描述符(整数)在打开或创建文件时返回，并在以后读取或写入文件时用作参数</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281118608.png" alt="image-20230228111820559"></p><p>对文件操作&lt;unistd.h&gt;</p><p>对字符流操作&lt;stdio.h&gt;</p><h4 id="open"><a href="#open" class="headerlink" title="open"></a>open</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">open</span> <span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>pathname<span class="token punctuation">,</span> <span class="token keyword">int</span> oflag<span class="token punctuation">,</span> <span class="token keyword">int</span> mode<span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>pathname：Name of the file</p><p>oflag：打开文件的方式：O_RDONLY O_WRONLY O_RDWR</p><p>mode：when creating a file to indicate the access authority</p><p>return：<strong>File descriptor</strong> or -1</p><h4 id="close"><a href="#close" class="headerlink" title="close"></a>close</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">close</span> <span class="token punctuation">(</span><span class="token keyword">int</span> filedes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>filedes：File descriptor </p><p>return：0 or -1</p><h4 id="read"><a href="#read" class="headerlink" title="read"></a>read</h4><p>Be used to reading the data from an opened file</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">read</span> <span class="token punctuation">(</span><span class="token keyword">int</span> filedes<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buff<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>filedes：为要读取的文件的File descriptor </p><p>buff: 指向存放该函数返回内容的内存的指针</p><p>nbytes: 读的字节数</p><p>return： <strong>0读完了</strong>，-1失败 其他表示写入的字符数</p><h4 id="write"><a href="#write" class="headerlink" title="write"></a>write</h4><p>Be used to writing data into an opened file</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">write</span> <span class="token punctuation">(</span><span class="token keyword">int</span> filedes<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>buff<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> nbytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>fd:是文件描述符（输出到command line，就是1）</p><p>buf:通常是一个字符串，需要写入的字符串</p><h4 id="lseek-改变文件偏移量"><a href="#lseek-改变文件偏移量" class="headerlink" title="lseek 改变文件偏移量"></a>lseek 改变文件偏移量</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">long</span> <span class="token function">lseek</span> <span class="token punctuation">(</span><span class="token keyword">int</span> filedes<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">int</span> whence<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>offset：文件偏移量（offset为负值表示往前偏移，正值则表示往后偏移）</p><p><strong>whence（偏移方式 起始点）</strong>： </p><ol><li>SEEK_SET表示从文件开头位置往后移动offset个字节，且offset只能为正数，如果offset为负数是没有意义的。</li></ol><p>  2. SEEK_CUR表示从当前文件的位置往前或往后移动offset个字节，如果offset为正数则表示往后移动，为负数则表示往前移动。<br>  3. SEEK_END表示从文件末尾的位置往前或往后移动offset个字节，如果offset为正数则表示往后移动为负数则表示往前移动。</p><h4 id="dup"><a href="#dup" class="headerlink" title="dup"></a>dup</h4><p>Be used to duplicate a file descriptor 复制一个和filedesc指向同一个文件的文件描述符</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">dup</span> <span class="token punctuation">(</span><span class="token keyword">int</span> filedes<span class="token punctuation">)</span><span class="token punctuation">;</span> 参数旧文件，返回新文件<span class="token keyword">int</span> <span class="token function">dup2</span> <span class="token punctuation">(</span><span class="token keyword">int</span> filedes<span class="token punctuation">,</span> <span class="token keyword">int</span> filedes2<span class="token punctuation">)</span><span class="token punctuation">;</span> 参数旧文件 新文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="fcntl"><a href="#fcntl" class="headerlink" title="fcntl"></a>fcntl</h4><p>Be used to change the properties of the file that is already open</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">fcntl</span> <span class="token punctuation">(</span><span class="token keyword">int</span> filedes<span class="token punctuation">,</span> <span class="token keyword">int</span> cmd<span class="token punctuation">,</span> <span class="token keyword">int</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281132139.png" alt="image-20230228113256089"></p><h4 id="File-Permissions"><a href="#File-Permissions" class="headerlink" title="File Permissions"></a>File Permissions</h4><ul><li><p>r-read, w-write, x-execute 三个代表三位（每一位都对应一种操作：read, write and execute）Three bits can be used to define the permission for one kind of user</p></li><li><p>binary number 111 means the user has permission to <strong>read, write and execute</strong> the file</p><p> 100 means <strong>the user only can read the file</strong></p></li><li><p>Three kinds of users（需要定义三种用户的权限）: </p><p><strong>u-user, g–group, O-other</strong></p><p>Three numbers for user, group, other</p></li><li><p>For example, 644 (octal) means </p><p>◼ user: 110 (binary), read&amp;write</p><p>◼ group: 100 (binary), read</p><p>◼ other：100 (binary), read</p></li></ul><p>一般前面加个0：0777</p><h5 id="Sample-program-of-lseek-–-lseek1-c"><a href="#Sample-program-of-lseek-–-lseek1-c" class="headerlink" title="Sample program of lseek() – lseek1.c"></a>Sample program of lseek() – lseek1.c</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">char</span> buf1<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"abcdefghij"</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf2<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"ABCDEFGHIJ"</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">FILE_MODE</span> <span class="token expression"><span class="token number">0644</span> </span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> fd<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd<span class="token operator">=</span><span class="token function">creat</span><span class="token punctuation">(</span><span class="token string">"file.hole"</span><span class="token punctuation">,</span>FILE_MODE<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment">//（文件名，权限）</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"creat error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf1<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf1 write error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">/*offset now = 10 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">lseek</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token constant">SEEK_SET</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"lseek error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/*offset now = 40 */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf2<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"buf2 write error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token comment">/*offset now = 50 */</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>od command 看文件的内容</p><p>◼ be used to display the content of the file</p><p>◼ -c: display in character format</p><p>0644对于下红框rw r r</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281559512.png" alt="image-20230228114454019"></p></li></ul><p>\0就是没有写入的内存</p><p>当使用lseek时，文件的偏移量可以大于文件的长度。因此，下一个写入操作将扩展文件，并在文件内部创建一个洞</p><h5 id="Sample-program-of-read-and-write-–-readwrite1-c"><a href="#Sample-program-of-read-and-write-–-readwrite1-c" class="headerlink" title="Sample program of read() and write() – readwrite1.c"></a>Sample program of read() and write() – readwrite1.c</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">char</span> quit<span class="token operator">=</span><span class="token char">'.'</span><span class="token punctuation">;</span><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> fd<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"out.out"</span><span class="token punctuation">,</span>O_RDWR <span class="token operator">|</span> O_CREAT<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token comment">//O_RDWR 文件可读可写</span>        <span class="token comment">//O_CREAT调用create创建</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error in opening\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span>quit<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//'0'代表从键盘读</span><span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>buf<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//‘1’代表输出到命令行</span><span class="token punctuation">}</span><span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>chmod 777 name.txt代表把所有权限打开</p><h3 id="signal"><a href="#signal" class="headerlink" title="signal"></a><em>signal</em></h3><p>Signals are some time called “Software interrupts”</p><p>信号可以从一个进程发送到另一个进程，也可以从内核发送到一个进程</p><p>头文件 &lt;signal.h&gt;</p><p>The names of the signals begin with SIG</p><p>◼ SIGALRM: alarm clock timeout</p><p>◼ SIGINT: Interrupt character (Ctrl-C) is typed</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281610501.png" alt="image-20230228161053431"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281617447.png" alt="image-20230228161708272"></p><h2 id="Client-server-model"><a href="#Client-server-model" class="headerlink" title="Client-server model"></a>Client-server model</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281638308.png" alt="image-20230228163853250"></p><p>Most of network applications are based on the client-server model:</p><p>◼ A <strong>server</strong> process and one or more <strong>client</strong> processes</p><p>◼ Server manages some <strong>resources</strong>.</p><p>◼ Server provides <strong>service</strong> by manipulating resources for clients.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281642143.png" alt="image-20230228164218084"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281643695.png" alt="image-20230228164322633"></p><p>线上是应用程序，线下是操作系统</p><p>Connections are end-to-end, full-duplex (2- way communication), and reliable.</p><p>标识进程：端口号和ip</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281644994.png" alt="image-20230228164458890"></p><h4 id="Servers"><a href="#Servers" class="headerlink" title="Servers"></a>Servers</h4><p>Servers are long-running processes (daemons).</p><p>◼ Typically created at boot-time by the <strong>init process</strong> (pid=1)</p><p>◼ Run continuously until the machine is turned off </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281647688.png" alt="image-20230228164707631"></p><h4 id="Useful-Unix-Commands"><a href="#Useful-Unix-Commands" class="headerlink" title="Useful Unix Commands"></a>Useful Unix Commands</h4><h5 id="netstat"><a href="#netstat" class="headerlink" title="netstat"></a>netstat</h5><p>打印有关Linux网络子系统的信息，例如网络连接、路由表、接口统计信息等</p><p>◼ netstat</p><p>​ Displays a list of open sockets.</p><p>◼ netstat -i</p><p>​Display the information about the network interfaces</p><p>◼ netstat -ni</p><p>​ Display the information about the network interfaces using numeric addresses</p><p>◼ netstat -r</p><p>​ Display the kernel routing tables</p><p>◼ netstat -nr</p><p>​Display the kernel routing tables using numeric addresses</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281654887.png" alt="image-20230228165420828"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281654472.png" alt="image-20230228165434425"></p><p>eth0:以太网接口</p><p> lo：回环地址指向本机</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281655357.png" alt="image-20230228165552274"></p><h5 id="ifconfig"><a href="#ifconfig" class="headerlink" title="- ifconfig"></a>- ifconfig</h5><p>配置网口，通常用于打印网口的配置信息（windows: ipconfig)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281656119.png" alt="image-20230228165637065"></p><h5 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h5><p>Functions: Sends a packet to the host specified by destination and prints out the roundtrip time ( Using ICMP messages)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302281700005.png" alt="image-20230228170031947"></p><h2 id="Structures-about-IP-address-and-DNS"><a href="#Structures-about-IP-address-and-DNS" class="headerlink" title="Structures about  IP address and DNS"></a>Structures about  IP address and DNS</h2><h3 id="IP-Addresses"><a href="#IP-Addresses" class="headerlink" title="IP Addresses"></a>IP Addresses</h3><p>Hosts are mapped to a set of 32-bit <em>IP addresses</em>.</p><ul><li>202.112.96.163 点分十进制</li></ul><p>The set of IP addresses is mapped to a set of identifiers called Internet <em>domain names</em></p><ul><li>202.112.96.163 is mapped to <a href="http://www.bupt.edu.cn/">www.bupt.edu.cn</a></li></ul><blockquote><p>32-bit IP addresses are stored in an <em>IP Address structure</em></p><p>用结构体定义</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Internet address. */</span><span class="token keyword">typedef</span> <span class="token class-name">uint32_t</span> <span class="token class-name">in_addr_t</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span> <span class="token punctuation">{</span><span class="token class-name">in_addr_t</span> s_addr<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>uint32<span class="token operator">:</span><span class="token comment">/*Defined in &lt;stdint.h&gt;*/</span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token class-name">uint32_t</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Two-ways-to-store-multi-byte-integers"><a href="#Two-ways-to-store-multi-byte-integers" class="headerlink" title="Two ways to store multi-byte integers"></a><strong>Two ways to store multi-byte integers</strong></h4><p>大端和小端</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141004543.png" alt="image-20230314100420469"></p><p>little 先存低位（低位低地址，高位存高地址）</p><p>big 先存高位（高位低地址，低位高地址）</p><p>发端和收端存储方式不同：数据颠倒：0102-&gt;0201</p><h4 id="Host-byte-order-vs-network-byte-order"><a href="#Host-byte-order-vs-network-byte-order" class="headerlink" title="Host byte order vs. network byte order"></a>Host byte order vs. network byte order</h4><p><strong>Host byte order（主机字节序）</strong> is machine-dependent （定义big or little）</p><p> in &lt;bits/endian.h&gt; 中定义</p><p><strong>Network byte order（网络字节序）</strong> is machine-independent (<em>big-endian</em>)强制的</p><p>发数据前先把主机字节序转换为网络字节序，防止不一致</p><h5 id="转换的函数"><a href="#转换的函数" class="headerlink" title="转换的函数"></a>转换的函数</h5><p>◼ <strong>htonl</strong>（L对应Long int：四个字节，对应转换ip长度）: host byte order → network byte order for <strong>long int</strong></p><p>◼ <strong>htons</strong>（s对应short int: 2个字节，对应转换端口号）: host byte order → network byte order for <strong>short int</strong></p><p>◼ <strong>ntohl</strong>: network byte order → host byte order for <strong>long int</strong> </p><p>◼ <strong>ntohs</strong>: network byte order → host byte order for <strong>short int</strong></p><p>判断本机是little还是big</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">union</span> <span class="token punctuation">{</span><span class="token keyword">short</span> s<span class="token punctuation">;</span><span class="token keyword">char</span> c<span class="token punctuation">[</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//一个字符是一个字节</span><span class="token punctuation">}</span>un<span class="token punctuation">;</span>    <span class="token comment">//union:所有成员（s和c）共享存储空间 means only one of them can be used at a time</span>un<span class="token punctuation">.</span>s<span class="token operator">=</span><span class="token number">0x0102</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>un<span class="token punctuation">.</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span>un<span class="token punctuation">.</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"big-endian\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>un<span class="token punctuation">.</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">2</span> <span class="token operator">&amp;&amp;</span>un<span class="token punctuation">.</span>c<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"littlt-endian\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Unknow\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sizeof(short)=%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141027930.png" alt="image-20230314102722868"></p><p>short: 2byte</p><p>char: 1byte</p><h3 id="Domain-Name-System"><a href="#Domain-Name-System" class="headerlink" title="Domain Name System"></a>Domain Name System</h3><p><em>DNS</em>:<em>host entry structures</em>(服务器返回的结构体)</p><p>定义在 &lt;netdb.h&gt;</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Description of data base entry for a single host. */</span><span class="token keyword">struct</span> <span class="token class-name">hostent</span><span class="token punctuation">{</span><span class="token keyword">char</span> <span class="token operator">*</span>h_name<span class="token punctuation">;</span> <span class="token comment">//字符串/* Official name of host. */</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>h_aliases<span class="token punctuation">;</span><span class="token comment">//字符串数组  /* Alias（别名） list. */</span><span class="token keyword">int</span> h_addrtype<span class="token punctuation">;</span> <span class="token comment">/* Host address type. V4 or V6 */</span><span class="token keyword">int</span> h_length<span class="token punctuation">;</span> <span class="token comment">/* Length of address. */</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>h_addr_list<span class="token punctuation">;</span><span class="token comment">//地址列表（一个域名对应很多个ip） /* List of addresses from name server.*/</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">h_addr</span> <span class="token expression">h_addr_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> </span><span class="token comment">/* The first address in the address list. */</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141042442.png" alt="image-20230314104248380"></p><p>字符串\0结尾，字符串数组最后一位位null</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141044188.png" alt="image-20230314104459129"></p><h4 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h4><ul><li><p><strong>gethostbyname</strong>: query key is a DNS domain name</p><p>*<em>gethostbyname (const char <em>hostname)</em></em></p></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">hostent</span> <span class="token operator">*</span> <span class="token function">gethostbyname</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>hostname<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>​返回结构体的指针</p><ul><li><strong>gethostbyaddr</strong>： query key is an IP address.</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;netdb.h&gt;</span></span><span class="token keyword">struct</span> <span class="token class-name">hostent</span> <span class="token operator">*</span> <span class="token function">gethostbyaddr</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>addr<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">,</span> <span class="token keyword">int</span> family <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//地址，长度，协议族（AF_INET for IPv4）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Socket-Interface"><a href="#Socket-Interface" class="headerlink" title="Socket Interface"></a>Socket Interface</h2><h3 id="What-is-a-socket"><a href="#What-is-a-socket" class="headerlink" title="What is a socket?"></a>What is a socket?</h3><p>◼ To the kernel, a socket is an endpoint of communication.</p><p>◼ To an application, a socket is a <strong>file descriptor</strong> that lets the application read/write from/to the network.</p><p> <strong>All Unix I/O devices, including networks, are modeled as files</strong></p><p>◼ Clients and servers communicate with each other by reading from and writing to <strong>socket descriptors</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141052805.png" alt="image-20230314105255754"></p><p>0 1 2保留，每个stocket创建给一个描述符</p><h4 id="Internet-specific-socket-address-bits-x2F-socket-h"><a href="#Internet-specific-socket-address-bits-x2F-socket-h" class="headerlink" title="Internet-specific socket address (bits/socket.h)"></a><strong>Internet-specific</strong> <strong>socket address</strong> (bits/socket.h)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> <span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> sin_family<span class="token punctuation">;</span> <span class="token comment">/* 协议族 address family (always AF_INET) */</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> sin_port<span class="token punctuation">;</span> <span class="token comment">/* 端口port num in network byte order（必须为网络字节序） */</span><span class="token keyword">struct</span> <span class="token class-name">in_addr</span> sin_addr<span class="token punctuation">;</span> <span class="token comment">/* IP地址iP addr in network byte order */</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> sin_zero<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* pad to sizeof(struct sockaddr) */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一共占16字节</p><p><strong>Address family</strong>: 域是指通信进程存在的区域。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141056865.png" alt="image-20230314105658816"></p><h4 id="Generic-socket-address-lt-sys-x2F-socket-h-gt"><a href="#Generic-socket-address-lt-sys-x2F-socket-h-gt" class="headerlink" title="Generic socket address (<sys/socket.h>)"></a><strong>Generic</strong> <strong>socket address</strong> (&lt;sys/socket.h&gt;)</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token punctuation">{</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> sa_family<span class="token punctuation">;</span> <span class="token comment">/* protocol family */</span><span class="token keyword">char</span> sa_data<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* protocol-specific address, up to 14 bytes. */</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>16字节</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141058886.png" alt="image-20230314105858837"></p><p>PF开头</p><p>多个stock通信的一些函数（**connect(), bind() and accept()**）Gneric socket</p><p>Must cast Internet-specific socket address (sockaddr_in *) to generic socket address (sockaddr *) for connect, bind, and accept</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> serv<span class="token punctuation">;</span><span class="token comment">/* fill in serv{}*/</span><span class="token function">bind</span> <span class="token punctuation">(</span>sockfd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>serv <span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>serv<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//struct sockaddr *是指针类型，所以也要用&amp;获取serv的指针</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141106043.png" alt="image-20230314110612950"></p><h3 id="Sockets-Interface"><a href="#Sockets-Interface" class="headerlink" title="Sockets Interface"></a>Sockets Interface</h3><h4 id="Stream-Socket"><a href="#Stream-Socket" class="headerlink" title="Stream Socket"></a>Stream Socket</h4><p>Service: reliable (i.e. sequenced, non-duplicated, non-corrupted) bidirectional delivery of byte-stream data</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">socket</span> <span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>s是stocket描述符</p><h4 id="Datagram-Socket"><a href="#Datagram-Socket" class="headerlink" title="Datagram Socket"></a>Datagram Socket</h4><p>Service: unreliable, unsequenced datagram</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">socket</span> <span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Raw-Sockets-Service"><a href="#Raw-Sockets-Service" class="headerlink" title="Raw Sockets Service"></a>Raw Sockets Service</h4><p>原始stocket</p><p>设计底层时，通过这个可以改底层服务</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">socket</span> <span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_RAW<span class="token punctuation">,</span> protocol<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Reliably-delivered-Message-Socket"><a href="#Reliably-delivered-Message-Socket" class="headerlink" title="Reliably-delivered Message Socket"></a>Reliably-delivered Message Socket</h4><p>Similar to datagram socket but ensure the arrival of the datagrams（UDP加一点可靠性）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">socket</span> <span class="token punctuation">(</span>PF_NS<span class="token punctuation">,</span> SOCK_RDM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="Sequenced-Packet-Stream-Socket"><a href="#Sequenced-Packet-Stream-Socket" class="headerlink" title="Sequenced Packet Stream Socket"></a>Sequenced Packet Stream Socket</h4><p>Similar to stream socket but using <strong>fixed-size datagrams</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> s <span class="token operator">=</span> <span class="token function">socket</span> <span class="token punctuation">(</span>PF_NS<span class="token punctuation">,</span> SOCK_SEQPACKET<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Major-System-Calls"><a href="#Major-System-Calls" class="headerlink" title="Major System Calls"></a>Major System Calls</h2><p>A network application works as follows:</p><p>◼ An endpoint (telephone) for communication is created on both ends.</p><p>◼ An address (phone no) is assigned to both ends to distinguish them from the rest of the network.</p><p>◼ One of the endpoint (receiver) waits for the communication to start.</p><p>◼ The other endpoint (caller) <strong>initiates a connection</strong>.</p><p>◼ Once the call has been accepted, a connection is made and data is exchanged (talk).</p><p>◼ Once data has been exchanged the endpoints are closed (hang up).</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141117243.png" alt="image-20230314111743184"></p><h3 id="Socket-Operation"><a href="#Socket-Operation" class="headerlink" title="Socket Operation"></a>Socket Operation</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141119958.png" alt="image-20230314111917906"></p><p>connect() listen() accept()只有tcp有</p><p>close() and shutdown()：</p><ul><li><p>close（）：四次挥手，双向关闭</p></li><li><p>shutdown()：只关发送不关接收</p></li></ul><h3 id="Byte-Order-Conversion"><a href="#Byte-Order-Conversion" class="headerlink" title="Byte Order Conversion"></a>Byte Order Conversion</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141122769.png" alt="image-20230314112222711"></p><h3 id="Address-Formats-Conversion"><a href="#Address-Formats-Conversion" class="headerlink" title="Address Formats Conversion"></a>Address Formats Conversion</h3><ul><li><p><strong>inet_aton()</strong></p><p>IP address in numbers-and-dots notation (ASCII string) → IP address structure in network byte order 把字符串地址转为结构体</p></li><li><p><strong>inet_addr()</strong></p></li></ul><p>  same function with inet_aton()</p><ul><li><p><strong>inet_ntoa()</strong></p><p> IP address structure in network byte order → IP address in numbers-and-dots notation (ASCII string)</p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141131559.png" alt="image-20230314113157508" style="zoom:67%;"><p>不要求</p><h3 id="Socket-Option"><a href="#Socket-Option" class="headerlink" title="Socket Option"></a>Socket Option</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141132664.png" alt="image-20230314113232615"></p><h3 id="Name-and-Address-OperationA"><a href="#Name-and-Address-OperationA" class="headerlink" title="Name and Address OperationA"></a>Name and Address OperationA</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141133540.png" alt="image-20230314113317487"></p><h3 id="Process-of-Socket-Operation-TCP-Operations"><a href="#Process-of-Socket-Operation-TCP-Operations" class="headerlink" title="Process of Socket Operation:TCP Operations"></a>Process of Socket Operation:TCP Operations</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141134790.png" alt="image-20230314113415735"></p><p>紫色对应三次握手</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141136758.png" alt="image-20230314113609695"></p><h4 id="socket"><a href="#socket" class="headerlink" title="socket()"></a>socket()</h4><p> create a new socket </p><p>that can be used for network communication</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141143933.png" alt="image-20230314114320877"></p><h4 id="bind"><a href="#bind" class="headerlink" title="bind()"></a>bind()</h4><p>An application calls bind() to specify the local endpoint address (a <strong>local</strong> <strong>IP address and protocol port number</strong>) for a socket（服务器的地址和端口）</p><p>对于TCP/IP，端点地址使用sockaddr_in结构体。</p><p>但是必须结构转换才能用这个函数：<strong>Must cast Internet-specific socket address</strong> (struct sockaddr_in *) to generic socket address (struct sockaddr *) for bind</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141145598.png" alt="image-20230314114500548"></p><h4 id="listen"><a href="#listen" class="headerlink" title="listen()"></a>listen()</h4><p>TCP server使用：place a socket in <em>passive mode</em> and make it ready to accept incoming connections</p><blockquote><p>It only applies to socket used with <strong>TCP</strong></p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141146788.png" alt="image-20230314114620736"></p><h4 id="accept"><a href="#accept" class="headerlink" title="accept()"></a>accept()</h4><p>服务器调用accept()来提取下一个传入请求</p><p>Accept()为每个新的连接请求创建一个<strong>新的套接字</strong>，并将新套接字的描述符返回给它的调用者</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141152590.jpg" alt="6b6e6f516f1a636cb062e0bd4f47923" style="zoom:50%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141151250.png" alt="image-20230314115114195"></p><p>返回一个通信的stocket 的fd</p><h4 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h4><p>a <strong>client</strong> calls <em>connect()</em> to establish an active connection to a remote server</p><p>Must cast Internet-specific socket address (struct sockaddr_in *) to generic socket address (struct sockaddr *) for connect</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141153625.png" alt="image-20230314115347571"></p><h4 id="send"><a href="#send" class="headerlink" title="send()"></a>send()</h4><p>应用程序传递数据应该发送到的套接字的描述符、要发送的数据的地址和数据的长度</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141154573.png" alt="image-20230314115431518"></p><h4 id="recv"><a href="#recv" class="headerlink" title="recv()"></a>recv()</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141156840.png" alt="image-20230314115606787"></p><h4 id="UDP只有两个：sendto-amp-recvfrom"><a href="#UDP只有两个：sendto-amp-recvfrom" class="headerlink" title="UDP只有两个：sendto() &amp; recvfrom()"></a>UDP只有两个：sendto() &amp; recvfrom()</h4><p>前面send() recv()因为已经建立好连接了，所以参数中不用有目标的地址</p><p>UDP无连接：</p><p>​sendto() requires the caller to specify a destination</p><p>​recvfrom() uses an argument to specify where to record the sender’s address</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141157577.png" alt="image-20230314115736518"></p><h4 id="close-1"><a href="#close-1" class="headerlink" title="close()"></a>close()</h4><p>一旦客户端或服务器完成对套接字的使用，就会调用close来释放它<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141159018.png" alt="image-20230314115904963"></p><h4 id="inet-aton-amp-inet-addr"><a href="#inet-aton-amp-inet-addr" class="headerlink" title="inet_aton() &amp; inet_addr()"></a>inet_aton() &amp; inet_addr()</h4><p>第二个地址用来存转换后的</p><p>将一个字符串表示的点分十进制IP地址IP转换为网络字节序（这俩一个功能）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141159814.png" alt="image-20230314115942758"></p><p>直接返回</p><h4 id="inet-ntoa"><a href="#inet-ntoa" class="headerlink" title="inet_ntoa()"></a>inet_ntoa()</h4><p>将32位整数(网络字节顺序的IP地址)映射为点分十进制格式的ASCII字符串</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141201022.png" alt="image-20230314120153969"></p><h2 id="Sample-Programs"><a href="#Sample-Programs" class="headerlink" title="Sample Programs"></a>Sample Programs</h2><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141204017.png" alt="image-20230314120403961"></p><p>TCP的close只能 close掉通信的stocket</p><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141204294.png" alt="image-20230314120445239"></p><h4 id="UDP-based-echo-service"><a href="#UDP-based-echo-service" class="headerlink" title="UDP-based echo service"></a>UDP-based echo service</h4><ul><li><p>echo服务只是简单地将它接收到的任何数据发送回原始源</p></li><li><p>一个非常有用的调试和测量工具</p></li><li><p>基于UDP的Echo Service:定义为基于UDP的数据报应用。服务器监听UDP数据报UDP端口7。当接收到一个数据报时，其中的数据将以应答数据报的形式发回。</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141209677.png" alt="image-20230314120921628"></p><h4 id="EchoClient"><a href="#EchoClient" class="headerlink" title="EchoClient"></a>EchoClient</h4><h5 id="头文件："><a href="#头文件：" class="headerlink" title="头文件："></a>头文件：</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h&gt;</span> <span class="token comment">/* for printf() and fprintf() */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h&gt;</span> <span class="token comment">/* for socket(), sendto() and recvfrom() */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h&gt;</span> <span class="token comment">/* for sockaddr_in and inet_addr() */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h&gt;</span> <span class="token comment">/* for atoi() and exit() */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h&gt;</span> <span class="token comment">/* for memset() */</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h&gt;</span> <span class="token comment">/* for close() */</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Initial-part-of-UDP-EchoClient"><a href="#Initial-part-of-UDP-EchoClient" class="headerlink" title="Initial part of UDP EchoClient"></a>Initial part of UDP EchoClient</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ECHOMAX</span> <span class="token expression"><span class="token number">255</span> </span><span class="token comment">/* Longest string to echo */</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//argc参数个数，argv[]具体内容</span><span class="token punctuation">{</span><span class="token keyword">int</span> sock<span class="token punctuation">;</span> <span class="token comment">/* Socket descriptor */</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> echoServAddr<span class="token punctuation">;</span> <span class="token comment">/* Echo server address */</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> fromAddr<span class="token punctuation">;</span> <span class="token comment">/* Source address of echo */</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> echoServPort<span class="token punctuation">;</span> <span class="token comment">/* Echo server port */</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> fromSize<span class="token punctuation">;</span> <span class="token comment">/* In-out of address size for recvfrom() */</span><span class="token keyword">char</span> <span class="token operator">*</span>servIP<span class="token punctuation">;</span> <span class="token comment">/* IP address of server */</span><span class="token keyword">char</span> <span class="token operator">*</span>echoString<span class="token punctuation">;</span> <span class="token comment">/* String to send to echo server */</span><span class="token keyword">char</span> echoBuffer<span class="token punctuation">[</span>ECHOMAX<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* Buffer for receiving echoed string（最后一个是/0） */</span><span class="token keyword">int</span> echoStringLen<span class="token punctuation">;</span> <span class="token comment">/* Length of string to echo （发送的）*/</span><span class="token keyword">int</span> respStringLen<span class="token punctuation">;</span> <span class="token comment">/* Length of received response */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>argc: 整数，传给main()的命令行参数个数</strong></p><p> <strong>argv: 字符串数组。argv是一个指针数组，元素个数是argc，存放的是指向每一个参数的指针</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211002393.png" alt="image-20230321100217339" style="zoom:67%;"><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>argc <span class="token operator">&gt;</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">/* Test for correct number ofarguments 参数数为3、4才执行*/</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: %s &lt;Server IP&gt; &lt;Echo Word&gt; [&lt;Echo Port&gt;]\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>servIP <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* First arg: server IP address (dotted quad) */</span>echoString <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* Second arg: string to echo */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>echoStringLen <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>echoString<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> ECHOMAX<span class="token punctuation">)</span> <span class="token comment">/* Check input length */</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Echo word too long.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>echoServPort <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* ASCII to integer Use given port, if any */</span><span class="token keyword">else</span><span class="token comment">//如果没自定义端口，就给7；</span>echoServPort <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span> <span class="token comment">/* 7 is the well-known port for echo service */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="I-x2F-O-part-of-UDP-EchoClient"><a href="#I-x2F-O-part-of-UDP-EchoClient" class="headerlink" title="I/O part of UDP EchoClient"></a>I/O part of UDP EchoClient</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/* Create a datagram/UDP socket */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> IPPROTO_UDP<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">//成功返回描述符，失败小于0</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket() failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Construct the server address structure */</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>echoServAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>echoServAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Zero out structure*/</span>初始化echoServAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span> <span class="token comment">/* Internet addr family */</span>echoServAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>servIP<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Server IP address*/</span>echoServAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>echoServPort<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Server port */</span><span class="token comment">/* Send the string to the server */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">sendto</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> echoString<span class="token punctuation">,</span> echoStringLen<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>echoServAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>echoServAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> echoStringLen<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"sendto() sent a different number of bytes than expected.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Recv a response */</span>fromSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>fromAddr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>respStringLen <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> echoBuffer<span class="token punctuation">,</span> ECHOMAX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>fromAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>fromSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> echoStringLen<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recvfrom() failed\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>echoServAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">!=</span> fromAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//判断是不是从echoserver来的</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Error: received a packet from unknown source.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* null-terminate the received data */</span>echoBuffer<span class="token punctuation">[</span>respStringLen<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Received: %s\n"</span><span class="token punctuation">,</span> echoBuffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/*Print the echoed message*/</span><span class="token function">close</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="EchoServer"><a href="#EchoServer" class="headerlink" title="EchoServer"></a>EchoServer</h4><h5 id="Initial-part-of-UDP-EchoServer"><a href="#Initial-part-of-UDP-EchoServer" class="headerlink" title="Initial part of UDP EchoServer"></a>Initial part of UDP EchoServer</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">ECHOMAX</span> <span class="token expression"><span class="token number">255</span> </span><span class="token comment">/* Longest string to echo */</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> sock<span class="token punctuation">;</span> <span class="token comment">/* Socket */</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> echoServAddr<span class="token punctuation">;</span> <span class="token comment">/* Local address */</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> echoClntAddr<span class="token punctuation">;</span> <span class="token comment">/* Client address */</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> cliAddrLen<span class="token punctuation">;</span> <span class="token comment">/* Length of client address */</span><span class="token keyword">char</span> echoBuffer<span class="token punctuation">[</span>ECHOMAX<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">/* Buffer for echo string */</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span> echoServPort<span class="token punctuation">;</span> <span class="token comment">/* Server port */</span><span class="token keyword">int</span> recvMsgSize<span class="token punctuation">;</span> <span class="token comment">/* Size of received message */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Argument-check-part-of-UDP-EchoServer"><a href="#Argument-check-part-of-UDP-EchoServer" class="headerlink" title="Argument check part of UDP EchoServer"></a>Argument check part of UDP EchoServer</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Usage: %s &lt;UDP SERVER PORT&gt;\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Socket-part-of-UDP-EchoServer"><a href="#Socket-part-of-UDP-EchoServer" class="headerlink" title="Socket part of UDP EchoServer"></a>Socket part of UDP EchoServer</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">echoServPort <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* First arg: local port */</span><span class="token comment">/* Create socket for sending/receiving datagrams */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sock <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>PF_INET<span class="token punctuation">,</span> SOCK_DGRAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"socket() failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Construct local address structure */</span><span class="token function">memset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>echoServAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>echoServAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>echoServAddr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>echoServAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">htonl</span><span class="token punctuation">(</span>INADDR_ANY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0.0.0.0</span>echoServAddr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span><span class="token function">htons</span><span class="token punctuation">(</span>echoServPort<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Bind to the local address */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">bind</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>echoServAddr<span class="token punctuation">,</span> <span class="token comment">//强制转换</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>echoServAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"bind() failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Main-loop-of-UDP-EchoServer"><a href="#Main-loop-of-UDP-EchoServer" class="headerlink" title="Main loop of UDP EchoServer"></a>Main loop of UDP EchoServer</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token comment">/* Run forever */</span><span class="token punctuation">{</span><span class="token comment">/* Set the size of the in-out parameter */</span>cliAddrLen <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>echoClntAddr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Block until receive message from a client */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>recvMsgSize <span class="token operator">=</span> <span class="token function">recvfrom</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> echoBuffer<span class="token punctuation">,</span> ECHOMAX<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>echoClntAddr<span class="token punctuation">,</span> <span class="token operator">&amp;</span>cliAddrLen<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"recvfrom() failed.\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Handling client %s\n"</span><span class="token punctuation">,</span><span class="token function">inet_ntoa</span><span class="token punctuation">(</span>echoClntAddr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* Send received datagram back to the client */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">sendto</span><span class="token punctuation">(</span>sock<span class="token punctuation">,</span> echoBuffer<span class="token punctuation">,</span> recvMsgSize<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span> <span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>echoClntAddr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>echoClntAddr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> recvMsgSize<span class="token punctuation">)</span><span class="token function">printf</span><span class="token punctuation">(</span>"<span class="token function">sendto</span><span class="token punctuation">(</span><span class="token punctuation">)</span> sent a different number of bytes than expected<span class="token punctuation">.</span>\n"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211032402.png" alt="image-20230321103225333"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211032291.png" alt="image-20230321103237237"></p><p>$是普通用户权限</p><p>#是root权限</p><h5 id="使用默认端口"><a href="#使用默认端口" class="headerlink" title="使用默认端口"></a>使用默认端口</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211033993.png" alt="image-20230321103346931"></p><h5 id="使用自定义端口"><a href="#使用自定义端口" class="headerlink" title="使用自定义端口"></a>使用自定义端口<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211034263.png" alt="image-20230321103439203"></h5>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> 互联网应用 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网应用笔记（四）</title>
      <link href="//post/04%20DHCP.html"/>
      <url>//post/04%20DHCP.html</url>
      
        <content type="html"><![CDATA[<h1 id="DHCP-Basics"><a href="#DHCP-Basics" class="headerlink" title="DHCP Basics"></a>DHCP Basics</h1><h2 id="Useful-Information"><a href="#Useful-Information" class="headerlink" title="Useful Information"></a>Useful Information</h2><h3 id="MSC"><a href="#MSC" class="headerlink" title="MSC"></a>MSC</h3><p>Message Sequence Chart消息序列图</p><p>network entity, message, action</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041002146.png" alt="image-20230404100249078"></p><h3 id="STD"><a href="#STD" class="headerlink" title="STD"></a>STD</h3><p>State Transition Diagram状态迁移图</p><p>定义协议中的状态转换关系</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041001293.png" alt="image-20230404100106178"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041004984.png" alt="image-20230404100432920"></p><h3 id="TLV"><a href="#TLV" class="headerlink" title="TLV"></a>TLV</h3><p>Type-Length-Value</p><p>定义消息中具有可变长度的字段的典型编码样式</p><p>包含三个字段<em>type</em> field, a <em>length</em> field, and followed by a <em>value</em> of the specified length</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041008193.png" alt="image-20230404100851139"></p><h2 id="Introduction-to-DHCP"><a href="#Introduction-to-DHCP" class="headerlink" title="Introduction to DHCP"></a>Introduction to DHCP</h2><h3 id="IP-Address-Allocation"><a href="#IP-Address-Allocation" class="headerlink" title="IP Address Allocation"></a>IP Address Allocation</h3><p>IP address management</p><ul><li><p>Plan / recording / assignment / retrieval（回收） /renumbering（重编码）</p><p>​Static allocation 手动配置</p><p>​Dynamic allocation 动态配置</p><p> <strong>BOOTP (BOOTstrap Protocol)</strong> DHCP前身</p><p> <strong>DHCP (Dynamic Host Configuration Protocol)</strong></p></li></ul><h4 id="Bootstrap-Protocol"><a href="#Bootstrap-Protocol" class="headerlink" title="Bootstrap Protocol"></a>Bootstrap Protocol</h4><p>diskless workstation（无盘工作站）存不了IP，启动时候要获取IP下载启动文件</p><p><strong>obtain boot information such as boot file name (TFTP is used to transfer boot file)</strong></p><h4 id="DHCP"><a href="#DHCP" class="headerlink" title="DHCP"></a>DHCP</h4><p>Dynamic Host Configuration Protocol</p><p><strong>An extension to BOOTP</strong></p><p>Provides automatic configuration of remote hosts</p><p><strong>Using UDP as its transport protocol</strong></p><p>Using port <strong>67 (for server)</strong> and <strong>68 (for client)</strong></p><h5 id="DHCP-client"><a href="#DHCP-client" class="headerlink" title="DHCP client"></a>DHCP client</h5><p> A DHCP client is an Internet host using DHCP to obtain configuration parameters </p><p>such as a network address</p><h5 id="DHCP-server"><a href="#DHCP-server" class="headerlink" title="DHCP server"></a>DHCP server</h5><p> A DHCP server is an Internet host that returns configuration parameters to DHCP clients</p><h5 id="DHCP-Lease（租约）"><a href="#DHCP-Lease（租约）" class="headerlink" title="DHCP Lease（租约）"></a>DHCP Lease（租约）</h5><p>A DHCP lease is the amount of time that the DHCP server grants to the DHCP client permission to use a particular IP address</p><p>DHCP服务器上使用DHCP服务的时间（ip地址租约，由server定义）</p><p>A typical server allows its administrator to set the lease time</p><h5 id="DHCP-Features"><a href="#DHCP-Features" class="headerlink" title="DHCP Features"></a>DHCP Features</h5><ul><li><p><em>Simple administration</em></p><p>不需要在每台客户端机器上手动输入IP地址、子网掩码和默认网关</p></li><li><p><em>Moving machines</em></p><p>当将机器移动到不同的子网时，只需移动机器，它就会从该子网上的DHCP服务器获得一个新的IP和子网掩码。</p></li><li><p><em>Eliminating erroneous IP information</em></p><p>将人为因素排除在外可以减少IP地址重复等问题</p></li><li><p><em>Eliminating additional configuration information</em></p><p>DNS服务器、默认网关和WINS服务器是DHCP可能广泛使用的一些配置选项设置。</p></li><li><p><em>Efficient use of IP addresses</em></p><p>DHCP可以帮助充分利用有限的IP地址（回收再利用）。所有可用的IP地址被放入一个池中，供活动客户端使用。处于非活动状态的机器不使用IP地址。</p></li></ul><h5 id="DHCP-vs-BOOTP"><a href="#DHCP-vs-BOOTP" class="headerlink" title="DHCP vs. BOOTP"></a>DHCP vs. BOOTP</h5><ul><li><strong>Similarities</strong></li></ul><p>The format structure each uses to exchange messages 数据格式相同</p><p>The format structure each uses to exchange messages 端口一样</p><p>IP address distribution as an integral part of configuration service</p><ul><li>Differences</li></ul><p>产生时间不同</p><p>目的不同</p><p>BOOTP：Configure diskless workstations</p><p>DHCP:Configure frequently relocated networked computers with local hard drives and full boot capabilities</p><p>BOOTP没有租期，没法续约</p><h5 id="Phases-of-IP-Assignment-with-DHCP"><a href="#Phases-of-IP-Assignment-with-DHCP" class="headerlink" title="Phases of IP Assignment with DHCP"></a>Phases of IP Assignment with DHCP</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041057496.png" alt="image-20230404105709427"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041032369.png" alt="image-20230404103231293"></p><p>1 3 只能广播</p><p>1要广播：不知道服务器在哪</p><p>有很多DHCP服务器提供IP地址（单播：MAC，广播都行）</p><p>Client选一个IP然后广播：告诉所有服务器是否选你了</p><h3 id="DHCP-Protocol-细节"><a href="#DHCP-Protocol-细节" class="headerlink" title="DHCP Protocol 细节"></a>DHCP Protocol 细节</h3><ul><li>DHCP Specifications</li></ul><p>  ​<strong>RFC 2131</strong>, Dynamic Host Configuration Protocol </p><p>  DHCP服务的8种报文的格式是相同的，不同类型的报文只是报文中的某些字段取值不同。DHCP报文格式基于BOOTP的报文格式。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041046247.png" alt="image-20230404104623167"></p><ul><li><p>OP ：<strong>报文的操作类型</strong>。分为请求报文和响应报文 request（1） reply（2）</p><ul><li><p>请求报文： DHCP Discover、DHCP Request、DHCP Release、DHCP Inform和DHCP Decline。</p></li><li><p>应答报文： DHCP Offer、DHCP ACK和DHCP NAK。</p></li></ul></li><li><p>Htype： <strong>DHCP客户端的MAC地址类型</strong>。 MAC地址类型其实是指明网络类型 ，Htype值为1时表示为最常见的以太网MAC地址类型。</p></li><li><p>Hlen： <strong>DHCP客户端的MAC地址长度</strong>。以太网MAC地址长度为6个字节，即以太网时Hlen值为6。</p></li><li><p>Hops：<strong>DHCP报文经过的DHCP中继的数目</strong>，默认为0。DHCP请求报文每经过一个DHCP中继，该字段就会增加1。没有经过DHCP中继时值为0。( 若数据包需经过router传送，每站加1，若在同一网内，为0。 )</p></li><li><p>TRANSACTION ID ：客户端通过DHCP Discover报文发起一次IP地址请求时选择的随机数，相当于<strong>请求标识</strong>。用来标识一次IP地址请求过程。在一次请求中所有报文的TRANSACTION ID都是一样的。</p></li><li><p>SECONDS <strong>DHCP客户端从获取到IP地址或者续约过程开始到现在所消耗的时间</strong>，以秒为单位。在没有获得IP地址前该字段始终为0。</p></li><li><p>FLAGS：<strong>标志位</strong>，只使用第0比特位，是广播应答标识位，用来标识DHCP服务器应答报文是采用单播还是广播发送，0表示采用单播发送方式，1表示采用广播发送方式。其余位 尚未使用 。(即 从0-15bits，最左1bit为1时表示server将以广播方式传送封包给client。</p><ul><li><p>B是client设置以选择单播还是广播</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041051997.png" alt="image-20230404105113888"></p></li></ul></li><li><p>CLIENT IP ADDRESS （Ciaddr）</p><p><strong>DHCP客户端的IP地址</strong>。<u>仅在DHCP服务器发送的ACK报文中显示</u>，在其他报文中均显示0，因为在得到DHCP服务器确认前，DHCP客户端是还没有分配到IP地址的。只有客户端是Bound、Renew、Rebinding状态，并且能响应ARP请求时，才能被填充。</p></li><li><p>YOUR IP ADDRESS（Yiaddr）</p><p><strong>DHCP服务器分配给客户端的IP地址</strong>。<u>仅在DHCP服务器发送的Offer和ACK报文中显示</u>，其他报文中显示为0。</p></li><li><p>SERVER IP ADDRESS</p><p><strong>下一个为DHCP客户端分配IP地址等信息的DHCP服务器IP地址</strong>。<u>仅在DHCP Offer、DHCP ACK报文中显示</u>，其他报文中显示为0。( 用于bootstrap过程中的IP地址)</p></li><li><p>ROUTER IP ADDRESS</p><p>relay agent的路由器地址</p></li><li><p><em>OPTIONS</em>: TLV encoding style 可选项字段，长度可变，TLV encoding，格式为”类型+长度+值”。</p><p>列出部分可选的选项</p><p>其中一种：<strong>Message type option</strong></p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041058740.png" alt="image-20230404105843671"></p><p>标识这是什么包</p><h4 id="DHCP-Messages"><a href="#DHCP-Messages" class="headerlink" title="DHCP Messages"></a>DHCP Messages</h4><p><strong>DHCPDISCOVER</strong> - Client broadcast to locate available servers.</p><p><strong>DHCPOFFER</strong> - Server to client in response to DHCPDISCOVER with offer of configuration parameters. </p><p><strong>DHCPREQUEST</strong> - Client message to servers either </p><p> (a) requesting offered parameters from one server and implicitly declining offers from all others. 从一个服务器请求提供的参数，并隐式地拒绝所有其他服务器提供的参数（在地址获取过程中使用）</p><p> (b) confirming correctness of previously allocated address after, e.g., system reboot</p><p>电脑重启，确认之前服务器能否使用</p><p> (c) extending the lease on a particular network address. 续约时使用</p><p><strong>DHCPACK</strong> - Server to client with configuration parameters, including committed network address.</p><p><strong>DHCPNAK</strong> - Server to client indicating client’s notion of network address is incorrect (e.g., client has moved to new subnet) or client’s lease as expired. </p><p><strong>DHCPDECLINE</strong> - Client to server indicating network address is already in use.</p><p>DHCP 客户端收到 DHCP 服务器 ACK 应答报文后，通过地址 冲突检测发现服务器分配的地址冲突或者由于其他原因导致 不能使用，则会向 DHCP 服务器发送 Decline 请求报文</p><p><strong>DHCPRELEASE</strong> - Client to server relinquishing network address and cancelling remaining lease.  提前解约</p><p><strong>DHCPINFORM</strong> - Client to server, asking only for local configuration parameters; client already has externally configured network address. For example, it can be used to obtain tunnel endpoint address. DHCP 客户端如果<strong>需要从 DHCP 服务器端获取更为详细的配置信息</strong></p><p>客户端到服务器，只要求本地配置参数;客户端已经有外部配置的网络地址。例如，可用于获取隧道端点地址。（要特殊类型的数据）</p><table><thead><tr><th>种类</th><th>说明</th></tr></thead><tbody><tr><td>DHCP Discover</td><td>DHCP 客户端在请求 IP 地址时并不知道 DHCP 服务器的位置，因此 DHCP 客户端会在本地网络内以 <strong>广播方式</strong>发送 Discover 请求报文，以发现网络中的 DHCP 服务器。所有收到 Discover 报文的 DHCP 服务 器都会发送应答报文， DHCP 客户端据此可以知道网络 中存在的 DHCP 服务器的位置。</td></tr><tr><td>DHCP Offer</td><td>DHCP 服务器收到 Discover 报文后，就会在所配置的 地址池中<strong>查找一个合适的 IP 地址</strong>，<strong>加上相应的租约期限</strong>和<strong>其他配置信息（如网关、 DNS 服务器等）</strong>，构造一 个 Offer 报文，发送给 DHCP 客户端，告知用户本服务 器可以为其提供 IP 地址。但这个报文只是告诉 DHCP 客户端可以提供 IP 地址，最终还需要客户端通过 ARP 来 检测该 IP 地址是否重复。</td></tr><tr><td>DHCP Request</td><td>DHCP 客户端可能会<strong>收到很多 Offer 请求报文</strong>，所以必须在这些应答中选择一个。通常是选择第一个 Offer 应答报文的服务器作为自己的目标服务器，并<strong>向该服务器发送一个广播的 Request 请求报文，通告选择的服务器， 希望获得所分配的 IP 地址。</strong>另外， DHCP 客户端在成功获取 IP 地址后，在<strong>地址使用租期达到50%时，会向 DHCP服务器发送==单播== Request 请求报文请求续延租约</strong>， <strong>如果没有收到 ACK 报文，在租期达到87.5% 时，会再次发送==广播==的 Request 请求报文以请求续延租约。</strong></td></tr><tr><td>DHCP ACK</td><td>DHCP 服务器收到 Request 请求报文后，根据 Request 报文中携带的用户 MAC 来查找有没有相应的租约记录，如果有 则发送 ACK 应答报文，<strong>通知用户可以使用分配的 IP 地址。</strong></td></tr><tr><td>DHCP NAK</td><td>如果 DHCP 服务器收到 Request 请求报文后，没有发现有相 应的租约记录或者由于某些原因无法正常分配 IP 地址，则向 DHCP 客户端发送 NAK 应答报文，<strong>通知用户无法分配合适的 IP 地址。</strong></td></tr><tr><td>DHCP Release</td><td>当 DHCP 客户端不再需要使用分配 IP 地址时，就会主动向 DHCP 服务器发送 RELEASE 请求报文，<strong>告知服务器用户不再需要分配 IP 地址，请求 DHCP 服务器释放对应的 IP 地址。</strong></td></tr><tr><td>DHCP Decline</td><td>DHCP 客户端收到 DHCP 服务器 ACK 应答报文后，通过地址 冲突检测发现服务器分配的地址冲突或者由于其他原因导致 不能使用，则会向 DHCP 服务器发送 Decline 请求报文，<strong>通知服务器所分配的 IP 地址不可用，以期获得新的 IP 地址。</strong></td></tr><tr><td>DHCP Inform</td><td>DHCP 客户端如果<strong>需要从 DHCP 服务器端获取更为详细的配置信息</strong>，则向 DHCP 服务器发送 Inform 请求报文； DHCP 服 务器在收到该报文后，将根据租约进行查找到相应的配置信 息后，向 DHCP 客户端发送 ACK 应答报文。目前基本上不用了。</td></tr></tbody></table><h3 id="Major-Operations-in-DHCP"><a href="#Major-Operations-in-DHCP" class="headerlink" title="Major Operations in DHCP"></a>Major Operations in DHCP</h3><ul><li><p>Address acquisition</p><p> Getting an IP address</p></li><li><p>Early lease termination</p><p> Returning IP address before lease expires</p></li><li><p>Lease renewal</p><p>Updating a lease</p></li></ul><h4 id="Address-Acquisition-phases"><a href="#Address-Acquisition-phases" class="headerlink" title="Address Acquisition: phases"></a>Address Acquisition: phases</h4><p>地址获取</p><ul><li><strong>IP lease request</strong></li></ul><p>在启动过程中，客户端发送DHCPDISCOVER广播报文，请求DHCP服务器的位置和IP地址信息</p><p>The DHCPDISCOVER packet is encapsulated in a UDP/IP packet and is sent to the local subnet broadcast address of 255.255.255.255</p><ul><li><strong>IP lease offer</strong></li></ul><p>​ After requesting a lease, the <strong>DHCP client waits for a response and is said to be in a SELECT state</strong></p><p>​ Any available DHCP servers with IP addresses to offer respond to the client request with a DHCPOFFER message</p><ul><li><strong>IP lease selection</strong></li></ul><p>​ The client chooses one DHCPOFFER from all the offers it receives, regardless of which subnet the DHCP server is located in</p><p>​The client then sends a broadcast DHCPREQUEST message, requesting a lease</p><ul><li><strong>IP lease acknowledgment</strong></li></ul><p>​The DHCP server that made the offer responds to the client with a DHCPACKmessage while any other DHCP servers that made an offer withdraw</p><p>​The IP address is assigned to the client</p><p>必须会画</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041109810.png" alt="image-20230404110922732"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041112148.png" alt="image-20230404111205078"></p><p>DHCPOFFER会收到很多，所以设一个timer，过一定时间收齐了就下一个状态</p><p>BOUND稳定有地址状态</p><h4 id="Early-Lease-Termination-提前解约"><a href="#Early-Lease-Termination-提前解约" class="headerlink" title="Early Lease Termination　提前解约"></a>Early Lease Termination　提前解约</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041114551.png" alt="image-20230404111424431"></p><p>不返回，直接释放了</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041115160.png" alt="image-20230404111518090"></p><h4 id="Lease-Renewal-续约"><a href="#Lease-Renewal-续约" class="headerlink" title="Lease Renewal 续约"></a>Lease Renewal 续约</h4><p>续约后IP地址不变</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041117773.png" alt="image-20230404111703694"></p><p>T1：<em>0.5 * duration_of_lease</em>租约的一半</p><p>T2: <em>0.875 * duration_of_lease</em></p><p>T1时先找原来的DHCP服务器续约（DHCPACK成功续约重置T1 T2，如果NAK立马释放地址 虽然租期才到T1 租期只能用一半）</p><p>如果无响应等到T2找其他服务器</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041118027.png" alt="image-20230404111802962"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041124966.png" alt="image-20230404112440897"></p><p>找原始server的DHCPREQUEST是单播</p><p>拒绝后全网广播DHCPREQUEST（如果ACK重置T1 T2,如果NAK直接释放IP 虽然租期才到T2）</p><p>如果还是无响应：没服务器响应，租约继续到T2结束</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041124558.png" alt="image-20230404112452488"></p><h3 id="Multicast-address-allocation"><a href="#Multicast-address-allocation" class="headerlink" title="Multicast address allocation"></a>Multicast address allocation</h3><p>组播地址分配</p><h3 id="DHCP-client-alternate-configuration"><a href="#DHCP-client-alternate-configuration" class="headerlink" title="DHCP client alternate configuration"></a>DHCP client alternate configuration</h3><p>有时候使用静态IP有时候使用动态Ip</p><h3 id="DHCP-Relay（DHCP中继路由器）"><a href="#DHCP-Relay（DHCP中继路由器）" class="headerlink" title="DHCP Relay（DHCP中继路由器）"></a>DHCP Relay（DHCP中继路由器）</h3><p><strong>用于连接不同物理网段(称为子网)上的硬件和软件，在每个子网之间转发IP报文</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304042226379.png" alt="image-20230404222646269"></p><p>先在子网中广播IP地址</p><p>代理路由器收到后检查对应gateway ip 如果为0把自己的IP填进去然后将其转发到子网1中去</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304042240776.png" alt="image-20220619172108531"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304042240830.png" alt="image-20220619172118967"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304042240781.png" alt="image-20220619172125797"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304042240826.png" alt="image-20220619172134230"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304042240760.png" alt="image-20220619172143734"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> 互联网应用 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网应用笔记（五）</title>
      <link href="//post/05%20Telnet.html"/>
      <url>//post/05%20Telnet.html</url>
      
        <content type="html"><![CDATA[<h1 id="TELNET"><a href="#TELNET" class="headerlink" title="TELNET"></a>TELNET</h1><p>A protocol used to establish a <strong>dumb terminal</strong>（哑终端，只输入输出） session to another computer on the Internet</p><p>所有指令不在本机执行</p><p>An important Internet <strong>application</strong> for remote access</p><p>The purpose of the TELNET Protocol is to provide a <strong>general, bi-directional, byte oriented communications</strong> facility. </p><p>允许使用一种标准方法将终端设备和面向终端的进程相互连接起来。</p><p>预计该协议还可以用于终端与终端之间的通信(“链接”)和进程与进程之间的通信(分布式计算)。</p><h3 id="TELNET-vs-telnet"><a href="#TELNET-vs-telnet" class="headerlink" title="TELNET vs. telnet"></a>TELNET vs. telnet</h3><p>大写的TELNET表示的是<strong>协议</strong>；小写的telnet表示的是<strong>程序/应用</strong></p><ul><li><p>TELNET is a protocol that provides “<strong>a general, bi-directional, eight-bit byte oriented communications facility</strong>”  TELNET是一种提供“<strong>通用的、双向的、面向8位字节的通信工具</strong>”的协议。</p></li><li><p>建立在<strong>TCP协议</strong>之上</p></li><li><p>Many application protocols are built upon the TELNET protocol. 许多应用协议建立在TELNET协议之上（映证TELNET提供general通信能力）</p></li></ul><p><strong>The idea of option negotiation was a very good design feature</strong></p><p>采用选项协商，在建立连接前确定可选项。不改变最初的定义但是增加了功能</p><p>Enables telnet to evolve to meet new demands without endless new versions of basic protocol</p><h2 id="Concept-Of-Remote-x2F-Virtual-Terminal"><a href="#Concept-Of-Remote-x2F-Virtual-Terminal" class="headerlink" title="Concept Of Remote / Virtual Terminal"></a>Concept Of Remote / Virtual Terminal</h2><h3 id="1）远程终端访问"><a href="#1）远程终端访问" class="headerlink" title="1）远程终端访问"></a>1）远程终端访问</h3><ul><li>Early motivation for networks was remote access to interactive systems 网络的早期激励是互动系统的远程访问</li><li>Dumb terminals 哑终端<ul><li>Keyboard and screen with primitive communication hardware 键盘和屏幕与原始通信硬件</li><li>Local host computer establish connection to remote host 本地主机建立连接到远程主机</li></ul></li><li>The challenge is that terminals and host systems were not standardized 终端和主机系统的挑战是没有标准化<ul><li>local terminal was not speaking the same language as the remote host 本地终端并不是说同一种语言作为远程主机</li></ul></li></ul><p>产生一些问题，不同os间的字符编码方式可能不同，字符集无法公用</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111555472.png" alt="image-20230411155503370"></p><h3 id="Network-Virtual-Terminal"><a href="#Network-Virtual-Terminal" class="headerlink" title="Network Virtual Terminal"></a>Network Virtual Terminal</h3><p>所以使用NVT转换为同一字符集</p><p>Transform local characteristics into standardized form</p><p>◼ <strong>Network virtual terminal (NVT)</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111556499.png" alt="image-20230411155629459"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111600209.png" alt="image-20230411160016168"></p><p>TELNET客户端和服务器在native format和NVT format之间做转换</p><h2 id="TELNET-operations-操作"><a href="#TELNET-operations-操作" class="headerlink" title="TELNET operations 操作"></a>TELNET operations 操作</h2><h3 id="Connection-management"><a href="#Connection-management" class="headerlink" title="Connection management"></a>Connection management</h3><p>◼ Connection request, establish and terminate</p><p><strong>◼ Telnet uses TCP (port 23) by default</strong>　23端口</p><h3 id="Option-Negotiation-选项协商（在连接之后，交换数据之前）"><a href="#Option-Negotiation-选项协商（在连接之后，交换数据之前）" class="headerlink" title="Option Negotiation 选项协商（在连接之后，交换数据之前）"></a>Option Negotiation 选项协商（在连接之后，交换数据之前）</h3><p>To determine mutually agreeable set of characteristics and options 确定双方同意的一组特征和选项（找到双方共同支持的能力和特性，在此基础上才能进行交互）</p><h2 id="TELNET-protocol-协议"><a href="#TELNET-protocol-协议" class="headerlink" title="TELNET protocol 协议"></a>TELNET protocol 协议</h2><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>TCP connection: directed toward port 23 of the server being asked to perform a service <strong>TCP连接</strong>:针对端口23的服务器被要求执行一个服务</li><li>Data and control multiplexed over the same connection 数据和控制多路复用在<strong>同一连接</strong>上（在TELNET的client和server之间只会建立一个connection，双方之间交互的data和control都是<strong>混合</strong>在一个连接上的）</li><li>NVT-representation of a generic terminal 通用终端的网络虚拟终端表示</li><li>Negotiated options-Enabling Telnet to evolve to meet new demands without endless new versions of basic protocol 协商选项Telnet进行改进,以满足新的要求,没有没完没了的新版本的基本协议</li><li>A symmetric view of terminals and processes 对称视图和过程</li></ul><h4 id="Transmission-Of-Data"><a href="#Transmission-Of-Data" class="headerlink" title="Transmission Of Data"></a>Transmission Of Data</h4><ul><li>Data path from the user’s keyboard to the remote system 从用户键盘到远程系统的数据路径</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111606013.png" alt="image-20220419174405716"></p><ul><li><strong>Underlying TCP full duplex 底层TCP全双工</strong><ul><li>The underlying network is intrinsically full duplex 底层网络本质上是全双工的</li></ul></li><li><strong>Data sent half duplex  数据发送半双工</strong><ul><li>The communication between terminal and process is one direction at a time.  终端和进程之间的通信每次都是一个方向的。</li><li>这两句话的意思就是说，TCP是全双工的，但是基于TCP的TELNET在应用上数据的传输是半双工的，因为控制权交接的问题，在交接的时候client和server只有一方能发数据</li></ul></li><li><strong>Data</strong> sent as stream of 8-bit bytes  数据都是以8位字节流的形式进行发送的（实际上发的都是字节流）<ul><li>No other formatting  没有其他格式化</li></ul></li><li>Control signals and other non-data information sent as Telnet commands  控制信息和其他非数据信息以Telnet <strong>command</strong> 的形式发送<ul><li>Byte strings embedded in data stream 每一个字符串都是由若干个字节来构成的</li><li>User control signals, commands between Telnet processes as part of protocol and option negotiation and subnegotiation 用户控制信号，作为协议和选项协商和子协商的一部分的Telnet进程之间的命令</li></ul></li></ul><h4 id="Control-Functions"><a href="#Control-Functions" class="headerlink" title="Control Functions"></a>Control Functions</h4><ul><li><p>TELNET includes support for a series of control functions commonly supported by servers TELNET包括对一系列通常由服务器支持的控制功能的支持</p></li><li><p>This provides a uniform mechanism for communication of (the supported) control functions 这为(受支持的)控制功能的通信提供了统一的机制</p></li><li><p>You can imagine them as some extra virtual keys in the NVT keyboard 您可以将它们想象成NVT键盘中的一些额外的虚拟键</p></li><li><p>**Interrupt Process(IP)**：suspend/interrupt/abort/terminate process 终止一个进程</p></li><li><p><strong>Abort Output (AO)<strong>：allow a process, which is generating output, to run to completion but without sending the output to the user’s terminal 允许一个进程产生输出，并且允许它运行直到结束</strong>，但是并不将输出的内容发回给用户的命令行</strong></p></li><li><p>**Are You There (AYT)**：check to see if system is still running 检查系统是否正在运行</p></li><li><p>**Erase Character (EC)**：delete last character sent；typically used to edit keyboard input 删除一个字符</p></li><li><p>**Erase Line (EL)**：delete all input in current line；typically used to edit keyboard input 删除一行</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111620612.png" alt="image-20230411162057569"></p><p><strong>IAC：把跟在后面的下一个字节解释为命令</strong></p><p>蓝色字四个：选项协商（Control Functions），表达支持意愿</p><h5 id="IAC"><a href="#IAC" class="headerlink" title="IAC"></a>IAC</h5><p><strong>TELNET command structure</strong></p><p>◼ at least a two byte sequence: the IAC (Interpret as Command) escape character followed by the code for the command至少要有两个字节作为命令，前一个字节是IAC标识后面那个字节是命令不是数据</p><p>如 255 254：DONT</p><p>​254：254</p><ul><li>The IAC code is <strong>255</strong></li></ul><p>标识数据255，则要写两次ICA</p><p>​255 255：255</p><h5 id="Control-Functions-1"><a href="#Control-Functions-1" class="headerlink" title="Control Functions"></a>Control Functions</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111626259.png" alt="image-20230411162651220"></p><p>will是 sender问receiver：自己是否可以干XXX</p><p>DO是 sender问receiver：你是否可以干ＸＸＸ</p><h4 id="TELNET-Options-Negotiation"><a href="#TELNET-Options-Negotiation" class="headerlink" title="TELNET Options Negotiation"></a>TELNET Options Negotiation</h4><h5 id="为什么需要："><a href="#为什么需要：" class="headerlink" title="为什么需要："></a>为什么需要：</h5><p>All NVTs support a minimal set of capabilities（只支持最小功能集）</p><p>想添加一些其他功能选项： The two endpoints negotiate a set of mutually acceptable options</p><p>The set of options is not part of the TELNET protocol, so that new terminal features can be incorporated without changing the TELNET protocol 组选项不是TELNET协议的一部分,所以新的终端功能可以合并不改变TELNET协议</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111639425.png" alt="image-20230411163902269"></p><ul><li><p>Each option is assigned a <strong>byte value</strong> 每个选项都分配了byte value</p></li><li><p>The <strong>DO, DONT, WILL, and WONT</strong> commands are used to negotiate options</p></li><li><p>Options negotiation is <strong>symmetric</strong> 都可以发起</p></li><li><p>Steps must be taken to avoid option processing loops防止反复协商</p></li><li><p><strong>Subnegotiations</strong>（多次协商时候使用） are used when more information is needed, such as when negotiating terminal type, window size, etc 除了支不支持之外，还有些需要更详细的信息来完成选项协商</p></li><li><p>举例;</p><p>IAC DO ECHO</p><p>IAC WILL ECHO</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111641013.png" alt="image-20230411164115974"></p><h2 id="使用wireshark-来了解发送和接收的情况"><a href="#使用wireshark-来了解发送和接收的情况" class="headerlink" title="使用wireshark 来了解发送和接收的情况"></a>使用wireshark 来了解发送和接收的情况</h2><h4 id="wireshark（xming启动）"><a href="#wireshark（xming启动）" class="headerlink" title="wireshark（xming启动）"></a>wireshark（xming启动）</h4><p>可以在指定的网络接口上抓取接收到的或者发送出去的数据，然后按照各种协议规范解析并进行图形化的展示，可用于故障分析，协议开发等等</p><p>抓到的包的列表（各自的信息，可以了解到通信流程）；按照协议规范解析信息；抓到的原始二进制数据</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111643573.jpg" alt="9e59e94a7b9c803c97fb2489601cd83"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111643062.png" alt="image-20230411164350008"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111643860.png" alt="image-20230411164359809"></p><p>SB SE代表子协商的开始和结束</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111644327.png" alt="image-20230411164457271"></p><p>设为character mode时候，一行发送一个字符</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111646390.png" alt="image-20230411164606337"></p><p>回车也分为两个字符</p><h3 id="5）总结"><a href="#5）总结" class="headerlink" title="5）总结"></a>5）总结</h3><h4 id="①-优点"><a href="#①-优点" class="headerlink" title="① 优点"></a>① 优点</h4><ul><li>Use Internet accounts you may have on remote computers<ul><li>you need an account (login ID) and password on the remote computer to permit access</li></ul></li><li>Use free services accessible with telnet, e.g.<ul><li>library catalogues</li><li>databases</li><li>BBS (Bulletin Board System)</li><li>Router/switch configuration</li></ul></li></ul><h4 id="②-缺点-局限性"><a href="#②-缺点-局限性" class="headerlink" title="② 缺点 局限性"></a>② 缺点 局限性</h4><ul><li>Poor user interface 界面低级<ul><li>Based on dumb terminal</li><li><strong>Text-only</strong> display 只有字符</li><li>Monochrome<ul><li>One color for text, one for background</li></ul></li><li>Have to type command-line commands<ul><li>Often have complex syntax</li></ul></li><li>Not very secure, SSH made enhancement 不安全！！<ul><li>TELNET does not encrypt any data sent over the connection (including passwords)</li></ul></li></ul></li></ul><h2 id="6-Other-remote-access-technologies-其他远程访问技术"><a href="#6-Other-remote-access-technologies-其他远程访问技术" class="headerlink" title="6. Other remote access technologies 其他远程访问技术"></a>6. Other remote access technologies 其他远程访问技术</h2><h3 id="1）其他远程访问技术"><a href="#1）其他远程访问技术" class="headerlink" title="1）其他远程访问技术"></a>1）其他远程访问技术</h3><ul><li>Remote loginin <strong>text-based</strong> system<ul><li>telnet SSH Rlogin</li></ul></li><li>Remote desktopin <strong>windowing</strong> system 远程桌面<ul><li>VNC (Virtual Network Computing)</li><li>RDP (Remote Desktop Protocol)</li></ul></li></ul><h3 id="2）ssh"><a href="#2）ssh" class="headerlink" title="2）ssh"></a>2）ssh</h3><h4 id="①-简介"><a href="#①-简介" class="headerlink" title="① 简介"></a>① 简介</h4><ul><li>Secure Shell</li><li>Command line terminal connection tool</li><li>All traffic encrypted 加密传输</li><li>Both ends authenticate themselves to the other end 双方验证</li><li>Ability to carry and encrypt non-terminal traffic</li><li>Private key kept on client, public key stored on server</li><li>Now, it is an IETF standard<ul><li>RFC4251, The Secure Shell (SSH) Protocol Architecture</li></ul></li></ul><h4 id="②-相较于telnet的两点提升"><a href="#②-相较于telnet的两点提升" class="headerlink" title="② 相较于telnet的两点提升"></a>② 相较于telnet的两点提升</h4><ul><li>Providing secure communications 提供安全通信 </li><li>Providing users with the ability to perform additional, independent data transfer over the same connection that is used for remote login 为用户提供在用于远程登录的相同连接上执行额外的、独立的数据传输的能力</li></ul><h4 id="③-三个主要机制"><a href="#③-三个主要机制" class="headerlink" title="③ 三个主要机制"></a>③ 三个主要机制</h4><ul><li>A transport layer protocolthat provides sever authentication, data confidentiality, and data integrity with perfect forward secrecy 一种传输层协议，提供服务器认证、数据机密性和数据完整性，并提供完全的前向保密性</li><li>A user authentication protocolthat authenticates the user to the server 用户认证协议，用于认证用户到服务器</li><li>A connection protocolthat multiplexes multiple logical communications channels over a single underlying SSH connection 一种连接协议，在一个底层SSH连接上复用多个逻辑通信通道</li></ul><h4 id="④-使用举例"><a href="#④-使用举例" class="headerlink" title="④ 使用举例"></a>④ 使用举例</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111647087.png" alt="image-20220419180946962"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111647116.png" alt="image-20220419181001948"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> 互联网应用 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网应用笔记（六）</title>
      <link href="//post/06%20DNS.html"/>
      <url>//post/06%20DNS.html</url>
      
        <content type="html"><![CDATA[<h1 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h1><h2 id="Basic-Functions-of-DNS"><a href="#Basic-Functions-of-DNS" class="headerlink" title="Basic Functions of DNS"></a>Basic Functions of DNS</h2><p>Nevertheless, the network itself only understands <strong>binary</strong> <strong>addresses</strong></p><p>域名转换为IP地址</p><ul><li>提供域名和IP地址之间映射的<strong>分布式数据库</strong></li><li><strong>应用层协议</strong></li><li>==UDP/TCP==：<strong>Port 53</strong></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111656051.png" alt="image-20230411165658982"></p><h4 id="起初DNS数据存在txt"><a href="#起初DNS数据存在txt" class="headerlink" title="起初DNS数据存在txt:"></a>起初DNS数据存在txt:</h4><p>​<strong>flat structure</strong></p><p>​<strong>Centralized control</strong></p><p>​<strong>Not scalable</strong></p><h4 id="现在"><a href="#现在" class="headerlink" title="现在"></a>现在</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111658209.png" alt="image-20230411165808179"></p><p><strong>It is a query / response protocol running on top of UDP/TCP</strong></p><p>with default port number 53</p><p>使用端口53</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111658000.png" alt="image-20230411165853964"></p><h2 id="Elements-Of-DNS"><a href="#Elements-Of-DNS" class="headerlink" title="Elements Of DNS"></a>Elements Of DNS</h2><p>◼ Domain namespace（命名空间） and resource records</p><p>◼ Name servers</p><p>◼ Name resolvers</p><p>◼ Protocol</p><h3 id="Domain-namespace-and-resource-records"><a href="#Domain-namespace-and-resource-records" class="headerlink" title="Domain namespace and resource records"></a>Domain namespace and resource records</h3><p><strong>Domain namespace and resource records</strong></p><ul><li>域命名空间具有类似倒置==树的层次结构==</li><li>==RR==(Resource Record)是与特定名称相关联的数据</li></ul><p><strong>树形结构示意图</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111703836.png" alt="image-20220524234449167"></p><p>第一层是root</p><p>第二层是TOP</p><p>第三层是2nd</p><h4 id="domains"><a href="#domains" class="headerlink" title="domains"></a>domains</h4><ul><li><p>树形结构的<strong>每个元素都被称为一个域</strong></p></li><li><p>顶部是<strong>root domain</strong>，简称为<code>.</code></p></li><li><p>直接位于root domain之下的子域称为<strong>top-level domains</strong></p></li><li><p>直接位于top-level domains之下的域称为<strong>second-level domains</strong>，依此类推</p></li></ul><h4 id="domain-names"><a href="#domain-names" class="headerlink" title="domain names"></a>domain names</h4><p>eg. <a href="http://www.bupt.edu.cn/">www.bupt.edu.cn</a> 就是一个域名</p><ul><li>节点的域名是由点(<code>.</code>)分隔的<strong>从节点到root</strong>的路径上的标签列表。</li><li>从左到右读，左边层次最低，右边层次最高（离root越近）</li><li><strong>不区分大小写</strong></li><li>每一个component长度不能超过63个字符，完整路径名不能超过255个字符</li></ul><p><strong>The full name of a domain is also called its Fully Qualified Domain Name (FQDN)</strong></p><p>是Domain Name的全称</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111705972.png" alt="image-20230411170537933"></p><h4 id="资源记录-Resource-Record"><a href="#资源记录-Resource-Record" class="headerlink" title="资源记录 Resource Record"></a>资源记录 Resource Record</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111715266.png" alt="image-20220618223542695"></p><p>DNS中的<strong>每个域都有一个或多个资源记录</strong>(rr)，它们是<strong>包含关于该域的信息的字段</strong></p><p>每个RR包含以下信息：</p><ul><li><strong>Owner</strong>：RR所在的域名</li><li><strong>Type</strong>：指定该RR中的资源类型<ul><li><code>A</code> -主机IPv4地址，<code>AAAA</code> -主机IPv6地址</li><li><code>MX</code> -邮件交换器（Mail eXchanger）</li><li><code>NS</code> - 域名服务器（Name Server）</li><li><code>CNAME</code> - 定义域名的别名</li></ul></li><li><strong>Class</strong>：指定要使用的协议族<ul><li><code>IN</code> - the Internet System</li></ul></li><li><strong>TTL</strong>：指定缓存rr的存活时间(以秒为单位)</li><li><strong>RDATA</strong>：资源数据</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111716711.png" alt="image-20230411171637671"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111723323.png" alt="image-20230411172346284"></p><h3 id="Name-Servers"><a href="#Name-Servers" class="headerlink" title="Name Servers"></a>Name Servers</h3><p><strong>Name Server</strong></p><ul><li>域名服务器是组成域数据库的<strong>信息存储库</strong>。</li><li>数据库被划分为称为<strong>zones</strong>（区域）的部分，这些区域分布在域名服务器中。<ul><li>区域可以是一个或多个域，甚至是一个子域</li></ul></li><li>每个域名服务器<strong>处理一个或多个区域</strong>。==域名服务器的基本任务是使用其区域中的数据回答查询==。</li><li>域名服务器可以以简单的方式回答查询。<strong>响应总是可以仅使用本地数据生成</strong>，并且包含问题的答案或对“更接近”所需信息的<strong>其他名称服务器的引用</strong>。</li><li>给定的<strong>区域将对多个名称服务器可用</strong>，以确保其可用性。</li></ul><h4 id="Zones"><a href="#Zones" class="headerlink" title="Zones"></a>Zones</h4><ul><li>==Zone==对应于负责该层次结构部分的管理权限</li><li>Eg. BUPT 控制 x.bupt.edu.cn</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111725107.png" alt="image-20220525000312689"></p><h4 id="域（Domain）和区域（Zone）的区别"><a href="#域（Domain）和区域（Zone）的区别" class="headerlink" title="域（Domain）和区域（Zone）的区别"></a>域（Domain）和区域（Zone）的区别</h4><p>Zone是Domain中的一部分（一个域有多个区域），或者就是Domain（该域只有一个区域）<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111725442.png" alt="image-20230411172551400"></p><h4 id="域名服务器的分类"><a href="#域名服务器的分类" class="headerlink" title="域名服务器的分类"></a>域名服务器的分类</h4><ul><li><strong>主服务器</strong>（Primary Server）/ <strong>授权服务器</strong>（Authoritative Server）<ul><li>在其数据库中保存其管理的主机组的名称到地址映射</li><li>知道标准答案</li></ul></li><li><strong>次级服务器</strong> （Secondary Server）<ul><li>主服务器数据库的镜像，也是official data</li></ul></li><li><strong>Caching server</strong> （Caching Server）<ul><li>向其他服务器请求DNS查询，但同时<strong>维护响应的缓存</strong>和<strong>TTL</strong>值</li><li>关于树的其他部分的<strong>non-authoritative</strong>数据</li></ul></li></ul><h3 id="域名解析器-Resolver"><a href="#域名解析器-Resolver" class="headerlink" title="域名解析器 Resolver"></a>域名解析器 Resolver</h3><p><strong>Name resolvers</strong>：DNS的用户端的叫法</p><ul><li>解析器是<strong>用户程序和域名服务器之间的接口</strong><ul><li>解析器<strong>接收来自用户程序(如邮件程序、TELNET、FTP)的请求。</strong></li><li>代表应用程序<strong>向DNS系统询问问题</strong></li><li>返回数据给应用</li></ul></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111727604.png" alt="image-20230411172758564"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111728343.png" alt="image-20230411172824302"></p><h2 id="DNS-Services"><a href="#DNS-Services" class="headerlink" title="DNS Services"></a>DNS Services</h2><h4 id="三种："><a href="#三种：" class="headerlink" title="三种："></a>三种：</h4><p>◼ Mapping domain name to addresses</p><p>◼ Inverse queries (optional)</p><p>◼ Pointer queries</p><h3 id="域名到地址的映射"><a href="#域名到地址的映射" class="headerlink" title="域名到地址的映射"></a>域名到地址的映射</h3><ul><li>先问本地名称服务器(默认名称服务器)</li><li>如果本地服务器无法解析名称，则必须将查询发送到域系统中的另一个服务器</li></ul><p>It can improve the query efficiency because most queries to name servers refer to local name</p><h4 id="Recursive-Resolution（递归解析-）"><a href="#Recursive-Resolution（递归解析-）" class="headerlink" title="Recursive Resolution（递归解析 ）"></a>Recursive Resolution（递归解析 ）</h4><p><strong>递归解析：</strong>（Recursive Resolution）由DNS代发下一个查询</p><ul><li>如果被查询的服务器没有信息，它找到root，如果root也找不到信息继续向下递归，直到找到答案</li></ul><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220525001641142.png" alt="image-20220525001641142" style="zoom:50%;"><h4 id="Iterative-Resolution（迭代解析）"><a href="#Iterative-Resolution（迭代解析）" class="headerlink" title="Iterative Resolution（迭代解析）"></a>Iterative Resolution（迭代解析）</h4><p>一个服务器没有就回复另一个DNS服务器的地址（回复到resolver）</p><ul><li><p>本地名称服务器(代表解析器)然后查询该服务器(该服务器可能会响应另一个服务器的地址，以此类推)</p></li><li><p>通常用于<strong>Internet</strong>上的域名服务器</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111732942.png" alt="image-20220526004648641"></p><p>现实中两种方法一起使用</p><h4 id="caching-mechanism-to-improve-efficiency"><a href="#caching-mechanism-to-improve-efficiency" class="headerlink" title="caching mechanism to improve efficiency"></a>caching mechanism to improve efficiency</h4><p>◼ Caching at the name servers</p><p>◼ Caching at the hosts</p><p>top-level domain (<strong>TLD</strong>) <strong>server typically cached in local name servers</strong></p><p>因此根名称服务器不常访问</p><h3 id="Inverse-Queries"><a href="#Inverse-Queries" class="headerlink" title="Inverse Queries"></a>Inverse Queries</h3><p>==<strong>IP地址查域名</strong>==</p><p><strong>特定资源映射到具有该资源的一个或多个域名</strong></p><ul><li>正常查询（==Standard Query==）：将域名映射到资源</li><li><strong>反向查询</strong>（==Inverse Query==）：将<strong>资源映射到域名</strong></li><li>可能要遍历整个DNS服务器</li></ul><h3 id="指针查询"><a href="#指针查询" class="headerlink" title="指针查询"></a>指针查询</h3><p>另一种IP查域名的方法</p><p>Using <strong>IN-ADDR.ARPA</strong> domain for address to host mapping</p><p>◼ An IP address in dotted-decimal format is included in the query</p><p>查询的IP地址格式为点分十进制</p><p>◼ The correct domain name for the machine with the specific IP address</p><p>具有特定IP地址的计算机的正确域名</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304111739473.png" alt="image-20220524234449167"></p><p>一个IP 59.64.166.200，查到域名：200.166.64.59.in-addr.arpa再根据此查到对应域名</p><h4 id="Inverse-query-vs-Pointer-query"><a href="#Inverse-query-vs-Pointer-query" class="headerlink" title="Inverse query vs. Pointer query"></a>Inverse query vs. Pointer query</h4><p>相同点</p><ul><li>都是由<strong>IP地址查域名</strong></li></ul><p>不同点：</p><ul><li>逆查询使用与标准查询相同的域，可能需要搜索整个服务器集</li><li>指针查询使用<strong>IN-ADDR.ARPA</strong>域</li></ul><h2 id="DNS-Message-Format"><a href="#DNS-Message-Format" class="headerlink" title="DNS Message Format"></a>DNS Message Format</h2><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220525002750635.png" alt="image-20220525002750635" style="zoom:80%;"><p>==<strong>查询</strong>和<strong>响应</strong>消息，两者<strong>具有相同的消息格式</strong>==</p><ul><li><code>ID</code>：用于关联查询和响应的<strong>16位</strong>字段。</li><li>16位标志字段用于协商具体的通信方式和反馈通信状态。DNS报文头部的16位标志字段的细节如下表格所示：<ul><li><code>QR</code>：查询/应答标志，1-bit。0表示这是一个查询报文，1表示这是一个应答报文。</li><li><code>opcode</code>：定义查询和应答的类型，4-bit。0表示标准查询，1表示反向查询（通过IP地址获得主机域名），2表示请求服务器状态</li><li><code>AA</code>：授权应答标志，1-bit。<strong>仅有应答报文使用</strong>。1表示域名服务器是授权服务器</li><li><code>TC</code>：截断标志，1-bit。仅当DNS报文使用DNS服务时使用。因为UDP数据包有长度的限制，所以过长的DNS报文将被截断。1表示DNS报文超过512个字节，并被截断</li><li><code>RD</code>：递归查询标志，1-bit。1表示执行递归查询，即如果目标DNS服务器无法解析某个主机名，则它将向其他DNS服务器继续查询，如此递归，直到获得结果，并把结果返回给客户端。0表示执行迭代查询，即如果目标DNS服务器无法解析某个主机名，则它将自己知道的其他DNS服务器的IP地址返回给客户端，以供客户端参考。</li><li><code>RA</code>：允许递归标志，1-bit。仅由应答报文使用，1表示DNS服务器支持递归查询 </li><li><code>zero</code>：未使用位，长3-bit。设置位0</li><li><code>rcode</code>：返回码，4-bit，表示应答的状态。常用值有0(无错误)，3(域名不存在)</li></ul></li><li><code>Question count</code>：16位字段，定义问题部分中条目的数量。</li><li><code>Answer count</code>：16位字段，它定义了回答部分中资源记录的数量。</li><li><code>Authority count</code>：16位字段，定义权限部分中名称服务器资源记录的数量。</li><li><code>Additional count</code>：16位字段，定义附加记录部分中资源记录的数量。</li></ul><h4 id="Question-Section"><a href="#Question-Section" class="headerlink" title="Question Section"></a>Question Section</h4><ul><li><code>QUERY TYPE</code>：用于指定<strong>查询类型</strong>的16位字段<ul><li><code>A</code> – Host address</li><li><code>MX</code> – Mail exchanger for the domain</li></ul></li><li><code>QUERY CLASS</code>：用于指定<strong>查询类</strong>的16位字段<ul><li><code>IN</code>  – Internet system</li></ul></li></ul><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220525003558871.png" alt="image-20220525003558871" style="zoom:80%;"><h4 id="Response-Section"><a href="#Response-Section" class="headerlink" title="Response Section:"></a>Response Section:</h4><p>Resource Record Format</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112003301.png" alt="image-20230411200321216"></p><p>type field</p><h4 id="Type-详解"><a href="#Type-详解" class="headerlink" title="Type 详解"></a>Type 详解</h4><ul><li><code>SOA</code>：Start Of Authority——标识域或区域，并设置一些参数</li><li>==<code>NS</code>==：将域名映射到具有该域权威的计算机的域名</li><li>==<code>A</code>==：将系统的域名映射到它的IP地址。如果一个系统(例如，一个路由器)有几个地址，那么每个地址将有一个单独的记录。</li><li>==<code>AAAA</code>==：将系统域名映射到IPv6地址。如果一个系统(例如，一个路由器)有几个地址，那么每个地址将有一个单独的记录。</li><li>==<code>CHAME</code>==：将别名映射到真正的规范名称</li><li>==<code>MX</code>==：邮件交换器。标识将邮件转发到组织中的系统</li><li>==<code>PTR</code>==：将IP地址映射为系统名。用于地址到名称文件。（反向映射）</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112007747.png" alt="image-20230411200756584"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112018268.png" alt="image-20230411201815209"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112018432.png" alt="image-20230411201842373"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112024510.png" alt="image-20230411202439456"></p><h3 id="DNS-Tools"><a href="#DNS-Tools" class="headerlink" title="DNS Tools"></a>DNS Tools</h3><p> <em>nslookup</em></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112028845.png" alt="image-20230411202827797"></p><p><strong>nslookup</strong> <strong>–query</strong> <strong>=</strong> <strong><type> <target-domain></target-domain></type></strong></p><p>dig</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112029447.png" alt="image-20230411202958405"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> 互联网应用 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网应用笔记（八）</title>
      <link href="//post/08%20EMAIL.html"/>
      <url>//post/08%20EMAIL.html</url>
      
        <content type="html"><![CDATA[<h1 id="Email-Basics"><a href="#Email-Basics" class="headerlink" title="Email Basics"></a>Email Basics</h1><p>Electronic Mail (email, e-mail)</p><p>提供一种将电子消息从一个人异步发送到另一个人的方法</p><p>Email service can be provided by</p><ul><li><p>ISPs: @126.com, @163.com, @sina.com, @yahoo.cn, …</p></li><li><p>Corporations and institutes: @baidu.com, @bupt.edu.cn, @ietf.org, …</p></li><li><p>Bundled with other services: @139.com, @qq.com</p></li></ul><p> <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161204442.png" alt="image-20230516120430349"></p><h2 id="Components-Of-Email-System"><a href="#Components-Of-Email-System" class="headerlink" title="Components Of Email System"></a>Components Of Email System</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161210499.png" alt="image-20230516121014450"></p><p>Spooling :按队列存储邮件</p><ul><li><p>UA (User Agent)</p><p> end-user mail program</p><p> Interface between the end users and the email servers</p><p>用户和电子邮件服务器之间的接口</p><p> E.g., outlook, foxmail, </p></li><li><p>Mail Server</p></li></ul><p>​ Responsible for transmitting/receiving emails and reporting status information about mail transferring to the mail sender</p><p> <strong>Both a client and a server</strong></p><ul><li>Email protocols（发送接收不一样）</li></ul><p> SMTP: used for sending an email</p><p> POP3/IMAP: used for <strong>receiving</strong> an email</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161219760.png" alt="image-20230516121954715"></p><p><em>Composition</em>——是指创建消息和答案的过程。</p><p><em>Transfer</em> ——指将信息从发送者传送到接收者。 </p><p><em>Reporting</em>——指通知发送者消息发生了什么情况的过程。</p><p><em>Displaying</em>-显示信息的方式。</p><p><em>Disposition</em>——指信息被接收方阅读后发生的情况</p><p><em>Mailboxes</em> – created by the user to store incoming email.邮箱</p><p><em>Mailing lists</em> – means of sending identical emails to a group</p><p>指向一组邮箱</p><p><em>MTA (Mail Transfer Agent)</em> – SMTP servers and clients provide a mail transport service</p><h3 id="Email-Sending"><a href="#Email-Sending" class="headerlink" title="Email Sending"></a>Email Sending</h3><p>要发送电子邮件消息，用户必须提供消息、目的地地址和可能的其他一些参数(例如，安全性或安全级别)。</p><h4 id="Email-Address"><a href="#Email-Address" class="headerlink" title="Email Address"></a>Email Address</h4><p>Many user agents expect DNS addresses of the form <em>mailboxname@domain</em>. </p><p>Each email address is unique on the Internet because</p><p>​ <em>Domain name</em> is unique on the Internet</p><p>​ <em>Mailboxname</em> is unique in the domain</p><h3 id="Email-Reading"><a href="#Email-Reading" class="headerlink" title="Email Reading"></a>Email Reading</h3><p>通常，当用户代理启动时，在屏幕上显示任何内容之前，它将查看用户的邮箱以查找传入的电子邮件</p><p>然后，它可以宣布邮箱中的消息数量，或者显示每条消息的一行摘要，并等待命令</p><h2 id="Email-Standards"><a href="#Email-Standards" class="headerlink" title="Email Standards"></a>Email Standards</h2><p> Internet Message Format 定义格式</p><p>SMTP (Simple Mail Transfer Protocol)</p><p>POP (Post Office Protocol)</p><p> IMAP (Internet Message Access Protocol)</p><p> MIME (Multipurpose Internet Mail Extension) 扩展功能</p><h3 id="Internet-Message-Format"><a href="#Internet-Message-Format" class="headerlink" title="Internet Message Format"></a>Internet Message Format</h3><h4 id="Message-envelop"><a href="#Message-envelop" class="headerlink" title="Message envelop"></a>Message envelop</h4><p>包含完成传输和交付所需的任何信息</p><h4 id="Message-contents"><a href="#Message-contents" class="headerlink" title="Message contents"></a>Message contents</h4><p>包含要传递给接收者的对象</p><p> Headers: from, to, subject, date, postmarks</p><p> Blank line</p><p>Body: actual message, may have many parts</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161516649.png" alt="image-20230516151648602"></p><p>每个报头字段由一行ASCII文本组成，其中包含字段名、冒号和大多数字段的值</p><p>eg. from:<a href="mailto:abc@gmail.com">abc@gmail.com</a> </p><p><strong>在正常使用中，用户代理构建一条消息并将其传递给MTA</strong></p><p><strong>然后MTA使用一些报头字段来构造实际的信封</strong></p><p>用户提供正文和密钥头，而邮件系统提供其余部分</p><h4 id="字段定义"><a href="#字段定义" class="headerlink" title="字段定义"></a>字段定义</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161532615.png" alt="image-20220523104815196"></p><ul><li><p>originator fields 跟发送者相关的字段</p><ul><li>reply-to回复到哪个地址去</li></ul></li><li><p>Destination adress fields 目的地址字段</p><ul><li>Cc 抄送</li><li>Bcc 秘送，用户收到的时候能看到To和Cc的地址，但是看不到Bcc里面的邮件地址</li></ul></li><li><p>Identification fields 跟身份认证相关的字段</p><ul><li>Message-ID 标识符</li><li>Reference 跟邮件相关的其他的message-id</li></ul></li><li><p>Information fields</p><ul><li>subject 主题</li><li>keywords 关键词</li></ul></li><li><p>Trace fields</p><ul><li>received 记录邮件经历的路径</li><li>return-path 指定回复的路径</li></ul></li></ul><h3 id="SMTP"><a href="#SMTP" class="headerlink" title="SMTP"></a>SMTP</h3><p>The source machine establishes a TCP connection to <strong>Port 25</strong> of the destination machine</p><ul><li>发送端和接收端都用：**==TCP Port 25==**</li><li>SMTP服务器对这个端口进行监听<ul><li>接受传入的连接</li><li>通过连接接收消息</li><li>如果消息无法传递，则向发送方返回一个<strong>错误报告</strong>，<strong>其中包含无法传递的消息的第一部分</strong></li></ul></li><li>SMTP是<strong>ASCII协议</strong></li><li>建立连接后，作为<strong>客户端等待接收端先发消息。</strong>server先发消息</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161538415.png" alt="image-20230516153807367"></p><h4 id="通信的三个阶段"><a href="#通信的三个阶段" class="headerlink" title="通信的三个阶段"></a>通信的三个阶段</h4><ol><li>建立连接</li><li>邮件传送</li><li>释放连接</li></ol><h4 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161540671.png" alt="image-20220526010517115"></p><ul><li>标识domain name</li><li>标识发送者邮箱</li><li>标识接收者邮箱，多个可以发送多次rcpt to</li><li>“\r\n”标识换行，一行的结束；period<code>.</code>标识邮件的结尾</li><li>QUIT 关掉连接</li></ul><h4 id="扩展命令"><a href="#扩展命令" class="headerlink" title="扩展命令"></a>扩展命令</h4><ul><li><code>EHLO</code>（Extended Hello）: 与HELO功能相同。支持地址文字及IPv4地址</li><li>VRFY：确认名称是有效的收件人（确认是否地址是否有效）</li><li>EXPN：邮件列表展开</li><li>NOOP：回复一个肯定的回复码</li><li>RSET：中止当前事务</li><li>HELP：使服务器向客户端发送帮助性的信息</li></ul><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p>服务器用一个<strong>3位数</strong>的代码作为响应的状态码</p><ul><li>2开头——成功</li><li>3开头——成功但需要更多信息</li><li>4开头——错误 但是是临时的</li><li>5开头——错误 永久性的错误，没法进行修正</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161546883.png" alt="image-20230516154615833"></p><p>可以看到是<strong>server先发消息</strong></p><p>HELO发域名</p><p>左发送端mailserver 右边接收端mailserver</p><ul><li><p>建立TCP连接，三次握手</p></li><li><p>Server先发送220</p></li><li><p>client发送HELO 标识发送端域名</p></li><li><p>250 beta.gov表示成功，带上了自己的域名</p></li><li><p>定义关键字段 MAIL FROM 定义发送者邮箱</p></li><li><p>RCPT TO定义接收端邮箱，多个发送多次</p></li><li><p>550 No such user here 永久性的错误，该邮箱用户不存在</p></li><li><p>发送data</p></li><li><p>354 告知邮件以什么表示结尾</p></li><li><p>message 一行一行发，最后以一个“.”结尾，server知道发送结束了</p></li><li><p>QUIT 关掉connection </p></li><li><p>221 告知关闭成功</p></li></ul><h5 id="例子：使用Telnet模拟邮件发送过程-（TELNET登录邮箱）"><a href="#例子：使用Telnet模拟邮件发送过程-（TELNET登录邮箱）" class="headerlink" title="例子：使用Telnet模拟邮件发送过程 （TELNET登录邮箱）"></a>例子：使用Telnet模拟邮件发送过程 （TELNET登录邮箱）</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161552252.png" alt="image-20220523111015487"></p><p>建立连接 telnet smtp.163.com 25</p><p>helo mail.163.com</p><p>用了base64对用户名和密码进行了编码加密，秘文</p><p>message符合要求：空白行、点结束</p><h4 id="SMTP的限制"><a href="#SMTP的限制" class="headerlink" title="SMTP的限制"></a>SMTP的限制</h4><ul><li>只能用ASCII格式</li><li>没有很好的身份证认证的机制</li><li>所有的消息都是明文的，可以被抓包解析</li><li>很容易产生垃圾邮件，或者伪造邮件发送者的地址，难以追踪</li></ul><h2 id="接收协议-POP-x2F-IMAP"><a href="#接收协议-POP-x2F-IMAP" class="headerlink" title="接收协议 POP/IMAP"></a>接收协议 POP/IMAP</h2><h3 id="POP"><a href="#POP" class="headerlink" title="POP"></a>POP</h3><p>两个协议都是：<strong>用于将邮件从==邮件服务器发送到UA==</strong></p><p>端口：110</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161556145.png" alt="image-20220526113456502"></p><h4 id="POP-1"><a href="#POP-1" class="headerlink" title="POP"></a>POP</h4><p><strong>基本功能</strong>：</p><ul><li><strong>==存储和转发==（store and forward）</strong><ul><li>邮件存储在服务器，客户端连接，然后下载到客户端。<em>可以在服务器上留下一个副本。</em><ul><li><u>过去：下载到客户端之后就删掉</u></li><li>现在：支持保存</li></ul></li></ul></li></ul><p><strong>特点</strong>：协议<strong>简单</strong>，应用广泛。</p><ul><li>许多客户端可用，如Eudora, foxmail, outlook</li></ul><p><strong>问题：</strong>对移动端用户或使用多台机器的用户来说非常糟糕</p><p><strong>常用版本</strong>：POP3</p><h4 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h4><ul><li><p>类似于SMTP，<strong>使用命令/回复</strong>lockstep协议</p></li><li><p>用于检索单个用户的邮件</p><ul><li>需要身份验证</li></ul></li><li><p>命令和应答都是<strong>ASCII行</strong></p><ul><li>回复以“+OK”或“-ERR”开头</li><li>回复可以包含多行</li></ul></li></ul><h5 id="POP3-命令"><a href="#POP3-命令" class="headerlink" title="POP3 命令"></a>POP3 命令</h5><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220526114147318.png" alt="image-20220526114147318" style="zoom:80%;"><ul><li><p>获取邮箱状态</p></li><li><p>大小 size 一封一行，终止“.”</p></li><li><p>获取邮件</p></li><li><p>删掉</p></li><li><p>NOOP 发送消息给server</p></li><li><p>RSET 制定删掉的标记</p></li><li><p>QUIT 关闭连接</p></li></ul><h5 id="例子：通过Telnet模拟收取邮件的过程"><a href="#例子：通过Telnet模拟收取邮件的过程" class="headerlink" title="例子：通过Telnet模拟收取邮件的过程"></a>例子：通过Telnet模拟收取邮件的过程</h5><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220526114227729.png" alt="image-20220526114227729" style="zoom:80%;"><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220526114324214.png" alt="image-20220526114324214" style="zoom:80%;"><h3 id="IMAP"><a href="#IMAP" class="headerlink" title="IMAP"></a>IMAP</h3><ul><li><strong>文件夹和消息可以存储在服务器上</strong>，也可以存储在本地计算机上。</li><li>由于文件夹可以保留在服务器上，所以即使更换了设备，也可以访问相同的邮件存储。</li><li>对于移动用户来说比POP更好(因为邮件仍然在服务器上)</li><li>选择性下载需要的文件到本地当中</li></ul><p><em>QQ/163/gmail支持IMAP和POP3</em></p><h3 id="POP与IMAP的对比"><a href="#POP与IMAP的对比" class="headerlink" title="POP与IMAP的对比"></a>POP与IMAP的对比</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161932031.png" alt="image-20230516193225961"></p><ul><li><p>POP3设计考虑本地</p></li><li><p>IMAP更多考虑移动端的场景</p></li><li><p>copy是把邮件直接放到UA</p></li><li><p>Copy模式：IMAP仍然会给在服务器上保存</p></li></ul><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220526115852573.png" alt="image-20220526115852573" style="zoom:80%;"><ul><li><p>RFC不一样</p></li><li><p>**==TCP==**端口不一样 </p><ul><li>POP：**==110==**</li><li>IMAP：**==143==**</li></ul></li><li><p>邮件存储地，实际上都支持存储在服务器和本地PC，这里说的是设计最初考虑的场景，更倾向于哪种</p></li><li><p>邮件在哪里读取：POP3 离线，不用联网就能读取</p></li><li><p>邮件同步：POP3不做邮件同步；IMAP支持邮件同步</p></li><li><p>方向：</p><ul><li>POP3单向，邮件下载本地，本地任何操作都不会反馈到服务器中；</li><li>IMAP本地任何操作都会同步到服务器</li></ul></li><li><p>移动端用户友好性：POP3没有那么支持；IMAP支持</p></li><li><p>部分邮件下载：IMAP支持选择性下载</p></li><li><p>POP3更快，不需要联网，IMAP连接会受网络影响</p></li></ul><h3 id="MIME"><a href="#MIME" class="headerlink" title="MIME"></a>MIME</h3><p><strong>MIME (Multipurpose Internet Mail Extension)：</strong></p><ul><li>多用途互联网邮件扩展【**==支持邮件内容多样化==**】</li></ul><p><strong>解决的问题：</strong></p><ul><li>最初，电子邮件<u>完全是用英语写的、用<strong>ASCII表示的文本</strong>信息</u>(RFC 5322)。</li><li>现在，这种方法已经不合适了，因为:<ul><li>使用有重音语言的消息(例如ö， ç， ğ)</li><li>使用非拉丁字母的消息</li><li>使用没有字母的语言的消息</li><li>消息完全不包含文本——音频/视频</li></ul></li></ul><h4 id="MIME-特点"><a href="#MIME-特点" class="headerlink" title="MIME 特点"></a>MIME 特点</h4><ul><li><p>扩展支持：<strong>多部分</strong>（multipart）和<strong>多媒体</strong>（multimedia）电子邮件</p></li><li><p>增加文件头部定义的内容</p><ul><li><strong>type</strong>：(文本，图像，音频，视频，应用程序)和子类型内(如文本/html，图像/gif)</li><li><strong>encoding</strong>：(ASCII，引用可打印，base64)处理任意二进制数据时，电子邮件系统只能处理普通ASCII字符</li></ul><p>没有改变原来的邮件系统，<strong>传输的仍然是ASCII码字符</strong>，但是现在目的是将原来不是ASCII的内容转换成ASCII字符【将多样化的内容依靠特定编码方式转换喂ASCII码传输】</p></li><li><p>MIME的基本思想是使用ASCII格式(RFC 5322)，但为消息体添加结构并为非ASCII消息定义编码规则</p></li><li><p>通过不偏离RFC 5322，可以使用现有的邮件程序和协议发送MIME消息</p></li></ul><h4 id="MIME-新引入的headers"><a href="#MIME-新引入的headers" class="headerlink" title="MIME 新引入的headers"></a>MIME 新引入的headers</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161951660.png" alt="image-20220526120735433"></p><ul><li><p><em>==MIME-Version==<em>：告诉接收用户代理它<u>正在处理的是MIME消息</u>以及它使<u>用的是MIME的哪个版本</u>——任何不包含</em>MIME-version</em>的消息都被认为是英文纯文本消息</p></li><li><p>*==Content-Description==*：是一个ASCII字符串表明该消息是什么</p></li><li><p>==<em>Content-Id</em>==：header的唯一标识符</p></li><li><p>*==Content-Transfer-Encoding==*：说明Body的编码方式</p></li><li><p>*==Content-Type==*：说明内容的类型和子类型</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161951635.png" alt="image-20220526121104786"></p><ul><li><p>不含格式 plain</p></li><li><p>根据格式分子类</p></li><li><p>mixed 每个部分都是独立的</p></li><li><p>根据客户端发送顺序，将客户端进行展示</p></li></ul><h4 id="MIME-例子"><a href="#MIME-例子" class="headerlink" title="MIME 例子"></a>MIME 例子</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161955833.png" alt="image-20220523114323657"></p><ul><li><p>版本号、包含多部分/多类型混合、空白行隔开header和body</p></li><li><p>多部分，每个部分都要有自己的header</p></li><li><p>邮件包含 文本和附件</p></li></ul><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161955780.png" alt="image-20220523114539691"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305161956106.png" alt="image-20230516195601065"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> 互联网应用 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网应用笔记（七）</title>
      <link href="//post/07%20FTP.html"/>
      <url>//post/07%20FTP.html</url>
      
        <content type="html"><![CDATA[<h1 id="TFTP-and-FTP-Basics"><a href="#TFTP-and-FTP-Basics" class="headerlink" title="TFTP and FTP Basics"></a>TFTP and FTP Basics</h1><h2 id="File-Transfer-And-Access"><a href="#File-Transfer-And-Access" class="headerlink" title="File Transfer And Access"></a>File Transfer And Access</h2><p>◼ Providing computers with the ability to access files on remote machines</p><p>◼ To lower overall cost</p><p>◼ To archive data</p><p>◼ To share data across multiple programs, multiple users, or multiple sites</p><p>◼ <strong>On-line access: NFS</strong> 在线编辑</p><p>◼ <strong>Whole-file copying: FTP, TFTP</strong> 不会同步，下载后修改</p><h2 id="TFTP-Trivial-File-Transfer-Protocol"><a href="#TFTP-Trivial-File-Transfer-Protocol" class="headerlink" title="TFTP (Trivial File Transfer Protocol)"></a>TFTP (Trivial File Transfer Protocol)</h2><p>没有访问控制/没有目录检索</p><p>最低开销(无安全)</p><p>为UDP设计，但可以与其他传输协议一起使用</p><p>Easy to implement</p><h3 id="Packet-Format"><a href="#Packet-Format" class="headerlink" title="Packet Format"></a>Packet Format</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091536855.png" alt="image-20230509153608796"></p><p>下载</p><p>上传</p><p>数据</p><p>服务器ACK</p><p>错误</p><h4 id="Read-request-RRQ"><a href="#Read-request-RRQ" class="headerlink" title="Read request (RRQ)"></a>Read request (RRQ)</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091536975.png" alt="image-20230509153658936"></p><p>01表示RRQ</p><p>filename 文件名加0（null）字符</p><p>mode文件传输模式</p><h4 id="Write-request-WRQ"><a href="#Write-request-WRQ" class="headerlink" title="Write request (WRQ)"></a>Write request (WRQ)</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091541315.png" alt="image-20230509154126273"></p><h4 id="Data-DATA"><a href="#Data-DATA" class="headerlink" title="Data (DATA)"></a>Data (DATA)</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091541305.png" alt="image-20230509154152264"></p><p>block表示数据编号</p><p>Data 定长 如果小于512，标识文件结尾</p><h4 id="Acknowledgment-ACK"><a href="#Acknowledgment-ACK" class="headerlink" title="Acknowledgment (ACK)"></a>Acknowledgment (ACK)</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091543395.png" alt="image-20230509154316360"></p><p>block 对具体某个数据记录</p><h4 id="Error-ERROR"><a href="#Error-ERROR" class="headerlink" title="Error (ERROR)"></a>Error (ERROR)</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091543172.png" alt="image-20230509154346129"></p><h4 id="传输模式"><a href="#传输模式" class="headerlink" title="传输模式"></a>传输模式</h4><p><strong>Netascii</strong> - 用来传输<strong>文本</strong>文件</p><ul><li>每一行都以<code>\r\n</code>结尾</li><li>提供传输文本的标准格式</li><li>传输完后会有响应</li></ul><p><strong>Octet</strong> - 用来传输<strong>二进</strong>制文件</p><ul><li>不会把二进制文本翻译</li></ul><h4 id="重传"><a href="#重传" class="headerlink" title="重传"></a>重传</h4><h5 id="Symmetric"><a href="#Symmetric" class="headerlink" title="Symmetric"></a>Symmetric</h5><p>参与传输的两台机器都被认为是发送者和接收者。</p><p>一方发送数据并接收确认</p><p>另一个接收数据并发送确认</p><p>发送时启动定时器 <strong>每方执行超时和重传</strong></p><p>如果一个数据包在网络中丢失，数据发送者会超时并重新传输最后一个数据包</p><p>如果确认丢失，确认发送方会重传上次的确认</p><h5 id="stop-and-wait-mechanism"><a href="#stop-and-wait-mechanism" class="headerlink" title="stop and wait mechanism"></a>stop and wait mechanism</h5><p>guarantees that all older packets have been received</p><p>一个一个发</p><p>Duplicate data packets must be recognized (ignored) and acknowledgment retransmitted</p><p>重复的数据包被确认但是不接收，并且返回ack</p><h5 id="Sorcerer’s-Apprentice-Syndrome"><a href="#Sorcerer’s-Apprentice-Syndrome" class="headerlink" title="Sorcerer’s Apprentice Syndrome"></a>Sorcerer’s Apprentice Syndrome</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091024760.png" alt="image-20230509102407657"></p><p>当数据包的确认信息被延迟但没有丢失时，会导致过多的重传，从而导致数据包被传输两次。一旦开始，这个循环就会无限地继续下去，每个数据包都会被传输两次。</p><p>带宽浪费</p><h5 id="How-to-fix-SAS"><a href="#How-to-fix-SAS" class="headerlink" title="How to fix SAS"></a>How to fix SAS</h5><p>Sender should not resend a data packet in response to a duplicate ACK</p><p>收到重复ACK不发data</p><p>If sender receives ACK[n] - don’t send DATA[n+1] if the ACK was a duplicate</p><p>（收到重复data,还会返回ACK）</p><h4 id="TFTP-Example"><a href="#TFTP-Example" class="headerlink" title="TFTP Example"></a>TFTP Example</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091030650.png" alt="image-20230509103035582"></p><p>Both sides use timers </p><p>Simple stop and wait mechanism provides reliable delivery and flow control</p><p>A block of less than512 bytes signals the end of the file</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091033567.png" alt="image-20230509103355501"></p><h2 id="FTP"><a href="#FTP" class="headerlink" title="FTP"></a>FTP</h2><h3 id="FTP-特征"><a href="#FTP-特征" class="headerlink" title="FTP 特征"></a>FTP 特征</h3><ul><li>用来在两个host之间传输文件</li><li>用来操作文件<ul><li>打印目录</li><li>删除</li><li>重命名</li></ul></li><li>==使用TCP==</li></ul><h3 id="user-commands"><a href="#user-commands" class="headerlink" title="user commands"></a>user commands</h3><p>将FTP command封装： </p><p>◼ Open connection to remote host</p><p>​◼ <strong>ftp</strong> hostname</p><p>​◼ <strong>open</strong> hostname</p><p>◼ Log into server (provide username and password)</p><p>​◼ <strong>user</strong> [username [password]]</p><p>◼ Set file transfer mode (such as ASCII or image)</p><p>​◼ <strong>type</strong> type-code</p><p>​◼ <strong>stru</strong> and <strong>mode</strong> commands used to alter transfer</p><p>◼ Transfer files (using get or put commands)</p><p>​◼ <strong>get</strong> remote-file [local-file]</p><p>​◼ <strong>put</strong> local-file [remote-file]</p><p>​get用来获取，put用来发送</p><p>​◼ <strong>mget</strong> and <strong>mput</strong> commands used to transfer ** ** (such as * to transfer all of a directory)</p><p>◼ Perform other file operations</p><p>​◼ <strong>delete</strong>, <strong>rename</strong>, <strong>mkdir</strong>, <strong>rmdir</strong>, <strong>ls</strong>, <strong>dir</strong>, …</p><p>◼ Exit client (<strong>quit</strong>) or close connection (<strong>close</strong>)</p><p>先要用用户名和密码进行登录</p><p>登陆成功后：</p><ul><li><p>进入了<code>&gt;</code>之后，表示可以进入使用</p></li><li><p><code>pwd</code>：显示当前目录路径</p></li><li><p><code>ls</code>：显示当前目录下的内容</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091049492.png" alt="image-20230509104952380"></p><h3 id="FTP-Model"><a href="#FTP-Model" class="headerlink" title="FTP Model"></a>FTP Model</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091050047.png" alt="image-20230509105011981"></p><p>PI 协议解析器：把user commend转为FTP commend</p><p>每文件传输一次，data connection 建立一次，使用完就拆除</p><ul><li><p>FTP Client</p><p>◼ Users interact with Client directly</p><p>◼ Active open of control connection</p><p>◼ Control connection uses ASCII plain-text</p><p>◼ Sends commands (over control connection)</p><p>◼ Receives replies (over control connection)</p><p>◼ Data connection used to transfer file data</p></li><li><p>FTP Server</p></li></ul><p>  ◼ System process</p><p>  ◼ “Listens” for connection on well-known port 21</p><p>  ◼ Receives commands</p><p>  ◼ Sends replies</p><p><strong>PI (Protocol Interpreter)</strong>: The user and server sides of the protocol have distinct roles implemented in a user-PI and a server-PI. 协议的用户端和服务器端在user- pi和server- pi中实现了不同的角色。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091633190.png" alt="image-20230509163315120"></p><p><strong>DTP (Data Transfer Process)</strong>: The data transfer process establishes and manages the data connection. The DTP can be <em>passive</em> or <em>active</em>.  【有主动模式和被动模式】只针对data connection</p><p><strong>Control Connection:</strong>  交换命令和应答 follows the Telnet Protocol. </p><p><strong>Data Connection:</strong> 一种全双工连接，在其上以指定的模式和类型传输数据。所传输的数据可以是一个文件的一部分、整个文件或多个文件。路径可以在服务器- dtp和客户机- dtp之间，也可以在两个服务器- dtp之间。</p><h3 id="Overview-of-an-FTP-Transfer"><a href="#Overview-of-an-FTP-Transfer" class="headerlink" title="Overview of an FTP Transfer"></a>Overview of an FTP Transfer</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091636851.png" alt="image-20230509163629792"></p><p>active mode : server主动建立</p><p>a）<strong>由User发起</strong>跟Server通过Control Process【双方之间的与建立连接相同的进程，可以看成两边的PI】建立连接 </p><p>（b）连接建立之后，client发送account name</p><p>（c）用户发送password</p><p>（d）用户指定要下载文件名</p><p>（e）用户和server分别建立data process。在第11步才开始建立数据连接，在active mode中，data connection是由server发起建立的。<strong>主动模式就是由server主动进行连接</strong>。</p><p>（f，g）在data connection之上传输数据</p><p>（h）16，17，18，19。16是server开始关闭data connection，17是用户回ack，18用户关process，19用户关process</p><p>control connection永远是client建立。</p><p>data connection分主被动</p><h4 id="FTP-Control-Connection-amp-Data-Connection"><a href="#FTP-Control-Connection-amp-Data-Connection" class="headerlink" title="FTP Control Connection &amp; Data Connection"></a>FTP Control Connection &amp; Data Connection</h4><ul><li><p>Control Connection的时间是很长的，只要用户还在使用FTP，那么Control Connection就会存在。用来协调client端的端口</p></li><li><p>Data Connection只在数据传输时候建立，每一个数据连接都会在一个文件传输完成后马上关掉。</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091639660.png" alt="image-20230509163947616"></p><h3 id="FTP-Control-Commands"><a href="#FTP-Control-Commands" class="headerlink" title="FTP Control Commands"></a>FTP Control Commands</h3><ul><li>通常四个字符(如RETR)</li><li>由空格分隔的参数</li><li>由CR/LF序列终止</li><li>从client-PI发送到server-PI</li><li>客户端程序将请求转换为必要的命令和响应</li></ul><p>三个命令组</p><ul><li>Access Control</li><li>Transfer Parameter</li><li>Service</li></ul><h4 id="Access-Control"><a href="#Access-Control" class="headerlink" title="Access Control"></a>Access Control</h4><ul><li>表示用户名：<code>USER</code></li><li>表示密码：<code>PASS</code></li><li>标识account：<code>ACCT</code></li><li>更改目录：<code>CWD</code><ul><li>返回上级目录(返回parent directory)：<code>CDUP</code></li></ul></li><li>重启：<code>REIN</code></li><li>结束：<code>QUIT</code></li></ul><h4 id="Transfer-parameter"><a href="#Transfer-parameter" class="headerlink" title="Transfer parameter"></a>Transfer parameter</h4><p><strong>Define data connection port:</strong></p><ul><li><h5 id="PORT-h1-h2-h3-h4-p1-p2"><a href="#PORT-h1-h2-h3-h4-p1-p2" class="headerlink" title="PORT h1,h2,h3,h4,p1,p2"></a><em>PORT</em> h1,h2,h3,h4,p1,p2</h5></li></ul><p>–used in <em>active mode</em>, telling FTP server the port number of client to accept data connection</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091645718.png" alt="image-20230509164552678"></p><p>client发此命令，server进入active状态，把信息发给server，server可以和client建立数据连接（server主动建立连接，所以client主动告知端口和IP）</p><ul><li><h5 id="PASV"><a href="#PASV" class="headerlink" title="PASV"></a><em>PASV</em></h5></li></ul><p>client端建立连接，需要server提供地址和端口</p><p>client发PASV，server回地址+端口</p><ul><li><h5 id="用于确定传输的文本类型：TYPE-type-code"><a href="#用于确定传输的文本类型：TYPE-type-code" class="headerlink" title="用于确定传输的文本类型：TYPE type-code"></a>用于确定传输的文本类型：<code>TYPE type-code</code></h5><p><code>A</code>表示ASCII，用于文本文件【默认】转化为/r/n结尾</p><p><code>I</code>表示Image，用于二进制文件 </p></li><li><h5 id="指明file-structure：STRU-structure-code"><a href="#指明file-structure：STRU-structure-code" class="headerlink" title="指明file structure：STRU structure-code"></a>指明file structure：<code>STRU structure-code</code></h5><ul><li><code>F</code>表示File(以EOF终止的连续字节)整个文件【默认】</li><li><code>R</code>为Record(EOR终止)</li><li><code>P</code>为Page(indexed pages)文件分页</li></ul></li><li><h5 id="指明file-mode：MODE-mode-code"><a href="#指明file-mode：MODE-mode-code" class="headerlink" title="指明file mode：MODE mode-code"></a>指明file mode：<code>MODE mode-code</code></h5><ul><li><code>S</code> 用于stream 按字节流传【默认】</li><li><code>B</code>用于block 文件分块</li><li><code>C</code>用于compressed 压缩</li></ul></li></ul><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><ul><li>检索得到文件：<code>RETR</code></li><li>存文件：<code>STOR</code></li><li>添加文件：<code>APPE</code></li><li>删除文件：<code>DELE</code></li><li>创建文件夹：<code>MKD</code></li><li>删除文件夹：<code>RMD</code></li><li>重命名文件夹：<code>RNFR</code> / <code>RNTO</code></li><li>查看当前目录下的文件：<code>LIST</code> / <code>NLST</code></li><li>其他：<code>HELP</code> / <code>SITE</code> / <code>SYST</code></li></ul><h4 id="FTP-Control-Replies"><a href="#FTP-Control-Replies" class="headerlink" title="FTP Control Replies"></a>FTP Control Replies</h4><p>Every command must generate at least one reply</p><p><strong>三个数字code + 描述文字</strong></p><p>如果文本消息的最后一行，分隔符为空格</p><p>分隔符如果不是短信的最后一行，则是连字符</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091712861.png" alt="image-20230509171244818"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091712749.png" alt="image-20230509171255703"></p><p>第二位代表和什么相关</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091719903.png" alt="image-20230509171931851"></p><h4 id="主动模式"><a href="#主动模式" class="headerlink" title="主动模式"></a>主动模式</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091806168.png" alt="image-20230509180606087"></p><p>21 control</p><p>20 data</p><p>客户端设置为在一个独特的端口上“监听</p><p>客户端使用本地套接字信息向服务器发送PORT命令（应该是六个数）</p><p>服务器以“200”回复确认端口号</p><p>客户端发送RETR、STOR或其他传输命令（发送具体连接命令后才启动数据连接的建立过程）</p><p>服务器建立数据连接</p><p>client回一个ack表示正式建立data connection</p><p>在控制连接中回一个reply</p><p><strong>通过数据连接发送的文件数据</strong></p><p>服务器发送“226”或其他回复</p><p>服务器/客户端关闭数据连接</p><h4 id="被动模式"><a href="#被动模式" class="headerlink" title="被动模式"></a>被动模式</h4><p>==server的端口也是临时分配的== 不是20了</p><p>客户端发送命令PASV</p><p>server返回227并返回他的端口 </p><p>服务器监听一个特定的端口，客户端应该访问该端口</p><p><strong>主动模式传送数据时是“服务器”连接到“客户端”的端口；被动模式传送数据是“客户端”连接到“服务器”的端口</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091814976.png" alt="image-20230509181418926"></p><p>client请求建立data 连接</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091935026.png" alt="image-20230509193505970"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091935776.png" alt="image-20230509193513715"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091935707.png" alt="image-20230509193522645"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091935339.png" alt="image-20230509193534283"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091935510.png" alt="image-20230509193547451"></p><h3 id="Traditional-FTP-vs-Anonymous-FTP"><a href="#Traditional-FTP-vs-Anonymous-FTP" class="headerlink" title="Traditional FTP vs. Anonymous FTP"></a>Traditional FTP vs. Anonymous FTP</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091945746.png" alt="image-20230509194544695"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091946916.png" alt="image-20230509194611867"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091946025.png" alt="image-20230509194635981"></p><p>最后几个看书</p><h2 id="NFS-Network-File-System"><a href="#NFS-Network-File-System" class="headerlink" title="NFS(Network File System)"></a>NFS(Network File System)</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091950097.png" alt="image-20230509195008047"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305091949734.png" alt="image-20230509194940687"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> 互联网应用 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网应用笔记（九）</title>
      <link href="//post/09%20WWW.html"/>
      <url>//post/09%20WWW.html</url>
      
        <content type="html"><![CDATA[<h1 id="WWW-World-Wide-Web-Basics"><a href="#WWW-World-Wide-Web-Basics" class="headerlink" title="WWW (World Wide Web) Basics"></a>WWW (World Wide Web) Basics</h1><h2 id="WWW"><a href="#WWW" class="headerlink" title="WWW"></a>WWW</h2><p>World Wide Web: WWW, the Web, W3</p><p>技术上的定义：</p><ul><li>使用HTTP协议，使用超文本hypertext呈现其内容</li><li>W3C标准化组织给出了更广义的定义：可以通过网络访问的所有信息的集合，是人类知识的汇总（实现了互联网资源的整合，使用超文本，访问资源使用HTTP协议）</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305162006983.png" alt="image-20220522104442395"></p><p>WWW和Internet不可以画等，他和其他协议一样都是属于互联网若干应用之一。</p><p>Internet代表的是底层的基础设置，WWW是上层应用</p><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul><li><strong>global</strong> 在任何地方只要连上互联网，就可以连接到3W进行资源访问</li><li><strong>open</strong> 开放，用户可以很容易的访问到/共享资源</li><li><strong>interactive</strong> 交互性 获取上传资源</li><li><strong>dynamic</strong> 动态的，网页越来越动态，会随着用户的访问情况动态生成内容</li><li><strong>platform-independent</strong> 对平台没有要求</li><li><strong>multimedia</strong> 多媒体越来越多</li></ul><h3 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231212451.png" alt="image-20220524095314468"></p><ul><li>The Web: 一种信息高速公路，实现信息快速共享和访问</li><li>URL：<u>Uniform Resource Locator</u> 用户通过URL访问特定的网页</li><li>HTTP：<u>HyperText Transfer Protocol</u> 使用的传输的协议，用户可以通过HTTP访问WWW相应的资源</li><li>HTML：<u>HyperText Markup Language</u> 网页使用的标记性的语言</li></ul><h2 id="WWW的构成"><a href="#WWW的构成" class="headerlink" title="WWW的构成"></a>WWW的构成</h2><p>包含两大类Components：Structural Components、Semantic Components【语义成分】</p><p><strong>Structural Components：</strong></p><ul><li>client/browser 多种实现方式</li><li>server/web-server 在功能强大的硬件上运行</li><li>cache 有效提高访问效率，减少响应时间</li><li>Internet——通过基础设施</li></ul><p><strong>Semantic Components：</strong></p><ul><li>传输协议HTTP</li><li>网页格式HTML</li><li>XML （eXtensible Markup Language）</li><li>URLs</li></ul><h3 id="The-Web"><a href="#The-Web" class="headerlink" title="The Web"></a>The Web</h3><ul><li><p>信息高速公路</p></li><li><p>使用web将电子文档连成一张大的知识体系，让用户能够快速获得需要的资源</p></li><li><p>将分散在互联网中的数据连成一个information system 给用户提供相应的服务</p></li><li><p>客户端 browser，实现从web server 中得到HTML的文档，对其进行解析、展示</p></li><li><p>获取的文档也可以使用超文本hypertext link连接或者超链接，将的文档和信息资源整合到一起</p></li><li><p>HTTP是client和browser之间使用的传输协议，特性使得其能够支持新的数据格式</p></li><li><p>Web处于不断发展过程中，一方面将互联网中的资源在统一系统中整合在一起，随着技术发展，browser和server不断升级，支持的功能会有所偏差，所以在通信之前，cs之间要进行协商negotiation，使得他们能够用同样的数据格式进行通信。</p><h4 id="Client端口"><a href="#Client端口" class="headerlink" title="Client端口"></a>Client端口</h4><p>客户端就是用户常使用的browser；server端是存放所有数据的地方，通常在80端口browser和server之间使用HTTP进行数据的传输</p></li></ul><h5 id="基本浏览器属性"><a href="#基本浏览器属性" class="headerlink" title="基本浏览器属性"></a>基本浏览器属性</h5><p>使用不同浏览器访问同一个网页效果不太一样，主要是因为各浏览器有不同的功能。(depending on their capabilities)</p><p><code>http://</code> 表示browser要使用HTTP协议与web进行通信</p><p>访问：点击超链接、输入URL</p><p>浏览器功能不仅仅是支持HTTP协议，除此之外还可以用FTP或者TELNET协议；因此除了访问webpage外，我们还可以使用浏览器来访问一些其他的资源，比如，email 或者文件系统，Telnet服务等等。浏览器功能强大</p><h4 id="Server端口"><a href="#Server端口" class="headerlink" title="Server端口"></a>Server端口</h4><p>远程软件，客户端发来请求就查询资源，并返回</p><p>一般在Unix或者Windows上运行</p><p>常见的webserver</p><p>基于==<strong>TCP</strong>==</p><p>一般使用**==80==端口**</p><p>通信过程：建立连接——request——response——释放连接；</p><p>早起HTTP：建立一次连接只做一次交互</p><p>所有的通信都要遵循HTTP协议规定</p><p>Web中所有操作都是stateless，server端不对访问进行记录</p><h3 id="URLs"><a href="#URLs" class="headerlink" title="URLs"></a>URLs</h3><p><strong>Uniform Resource Locators</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231219004.png" alt="image-20220522115436598"></p><p>使用URL指向特定的网页的地址，标识出网页的</p><ul><li><strong>协议</strong></li><li><strong>域名/IP地址</strong></li><li><strong>具体内容item</strong></li></ul><p>一般格式：</p><pre class="line-numbers language-none"><code class="language-none">协议://网站的hostname或者IP地址[:端口]/在webserver文件系统中的文件目录/需要访问的内容<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>现在的网站的资源基本上都是给出了客户端请求后动态生成的，实际上不是一个具体的静态网页，而是一个链接。服务器收到后会动态生成这个网页再返回。</p><h4 id="URL结构"><a href="#URL结构" class="headerlink" title="URL结构"></a>URL结构</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231220584.png" alt="image-20220522120022695"></p><p><strong>协议默认HTTP 端口默认80，没有写item会查找默认页面</strong></p><h4 id="URL中使用其他协议"><a href="#URL中使用其他协议" class="headerlink" title="URL中使用其他协议"></a>URL中使用其他协议</h4><p>除了HTTP其他协议在URL里面的使用</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231220368.png" alt="image-20220522120119592"></p><h2 id="WWW标准"><a href="#WWW标准" class="headerlink" title="WWW标准"></a>WWW标准</h2><h3 id="1-三个主要的标准"><a href="#1-三个主要的标准" class="headerlink" title="1. 三个主要的标准"></a>1. 三个主要的标准</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231220709.png" alt="image-20220522145554974"></p><ul><li>URL前面有 本次少讲</li><li>HTTP：2616协议细节；2617协议认证功能</li></ul><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231221761.png" alt="image-20220522150312143"></p><ul><li>网页开发使用的标记性语言， 最新版本HTML5.0，解决了不同浏览器上不统一的问题</li><li>XHTML结合XML和HTML，对数据格式作了扩展，浏览器支持的能力不一样。同样的HTML技术浏览器支持的版本也可能不一样，所以展示出来的形式功能也可能不一样。</li></ul><h4 id="静态与动态"><a href="#静态与动态" class="headerlink" title="静态与动态"></a>静态与动态</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231221698.png" alt="image-20220522150339140"></p><ul><li>最初，WWW由 静态的文件组成，每个URL对应着的都是硬盘上存储的单个文件，不会因为时间的推移、用户的变化而产生变化；后缀html htm</li><li>现在互联网WWW文档主要是采用动态方式的<ul><li>用户请求过来后，实时生成页面内容，比如，淘宝购物搜索，然后动态查找生成</li><li>URL不是指向单一的文件</li><li>假如通过网站访问计数器，计数器会因为访问的次数而发生变化，采用动态生成技术动态生成网页内容；后缀.asp, .shtm</li></ul></li><li>动态页面对网站的发展有很大作用，统计访问者人数，广告的动态生成，数据库的访问，购物车</li></ul><h4 id="产生静态网页的过程"><a href="#产生静态网页的过程" class="headerlink" title="产生静态网页的过程"></a>产生静态网页的过程</h4><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220524100437166.png" alt="image-20220524100437166" style="zoom:50%;"><p>在webserver上开发人员设计了很多<strong>开发好的静态文档</strong>，webclient通过浏览器输入URL发给webserver<strong>请求特定网页</strong>，webserver收到后根据URL<strong>找到client所需的HTML文档</strong>，将文档<strong>发给client端</strong>，浏览器对文档进行<strong>解析和展示</strong>。因为是静态文档，所以对于不同的client，都是一样的</p><h4 id="基于服务器产生动态网页"><a href="#基于服务器产生动态网页" class="headerlink" title="基于服务器产生动态网页"></a>基于服务器产生动态网页</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231255104.png" alt="image-20220607205909972"></p><p>在webserver上会先设置一些<strong>动态生成网页的指令</strong>，webclient输入URL<strong>发起网页请求</strong>，server根据URL<strong>找到相应的指定指令文件</strong>，对指令进行<strong>解析</strong>（指令动态生成HTML文档，那么不同的客户端访问可能会对应着生成不同的文档流）webserver生成文档后将HTML转发给client端，浏览器解析展示</p><h5 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231255303.png" alt="image-20220522151304830"></p><p>webserver在well-known port（80）上进行监听，client发来建立连接请求，server接收请求并建立连接；基于请求做相关的操作发给client端（获得系统时间，转换成字符串，发送报头，发送时间日期字符串，封装到HTML文档中，发送到client端），关闭连接</p><h4 id="动态生成网页技术-CGI"><a href="#动态生成网页技术-CGI" class="headerlink" title="动态生成网页技术 CGI"></a>动态生成网页技术 CGI</h4><p><strong>Common Gateway Interface</strong>【通用网关接口】webserver和数据库间</p><ul><li><p>通用网关接口(CGI)是将外部应用程序与信息服务器(如HTTP或Web服务器)连接起来的标准</p></li><li><p>Web客户机检索的纯HTML文档是静态的，这意味着它以不变的状态存在:文本文件不会改变。另一方面，CGI程序是实时执行的，因此它可以向服务器输出动态信息。</p></li><li><p>Web服务器执行一个CGI程序向数据库引擎传输信息，接收结果并将它们显示给客户机。这是一个网关的例子。目前的版本是1.1。</p></li><li><p>一个CGI程序基本上相当于让世界在你的系统上运行一个程序。为安全起见，采取安全防范措施。</p></li></ul><p>公共网关接口：实现了webserver和信息系统之间的接口，静态页面webserver存的是静态内容，client端请求的时候会发给client，内容不会发生变化，使用CGI程序之后，实时生成，所以每次产生动态信息，返回给client端</p><p>webserver收到请求——执行CGI程序——利用CGI传递给后台数据库——数据库上执行返回相应的结果——将结果返回给client端</p><p>gateway：实现“转发”的功能，相当于数据引擎，实现webserver和服务器之间的接口作用，当前版本号1.1，有时为了安全性也要采取一定的安全策略</p><p>CGI动态生成页面的过程：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231257052.png" alt="image-20220522162321829"></p><h3 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h3><ul><li>Web应用的核心协议</li><li>特点：<ul><li>应用层协议，基于client-server模型</li><li>基于request/response模式，client端发送request，server端收到后返回相应的response</li><li>stateless：在HTTP这里，server端不会记录任何通信的历史</li><li>双向传输：双向同时发送信息</li><li>capability negotiation：HTTP整体技术发展，导致其有多版本，client端和server端要在通信前进行技术的协商</li><li>http代理过程中，要将获得的页面信息缓存才来，提高信息获取的效率</li><li>支持中间设备，HTTP proxy代理，通过代理的方式实现cs之间的通信，由proxy实现信息的转发</li></ul></li></ul><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231322499.png" alt="image-20230523132215452"></p><h4 id="通信过程"><a href="#通信过程" class="headerlink" title="通信过程"></a>通信过程</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231301476.png" alt="image-20220522163401267"></p><ul><li>建立连接：三次握手建立TCP连接</li></ul><p>webserver启动起来，在80端口进行监听</p><ul><li>client发送request：HTTP消息带有请求（<strong>HTTP method + URL + HTTP version</strong>）动作+URL+version</li><li>server收到后返回response：封装成HTTP消息（<strong>version+status code[对命令的状态码，对命令的结果]+错误原因（如果有的话）</strong>），有可能带上需要访问的数据</li><li>连接断开：一般情况下由server中断connection</li></ul><h4 id="获取远程网页"><a href="#获取远程网页" class="headerlink" title="获取远程网页"></a>获取远程网页</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321197.png" alt="image-20220522163652521"></p><ul><li>浏览器识别URL</li><li>浏览器对URL（三部分）进行解析：针对域名，去DNS那里对其进行解析，然后将IP地址返回给浏览器，浏览器收到后想webserver IP地址发起TCP连接请求（socket方式）</li><li>连接建立完成后，会进入交互过程，browser发送get request（以下载页面为例，这时候只要第三部分信息即可）</li><li>server找到对应的网页，将网页信息发回给client端</li><li>release TCP connection</li><li>一次连接的建立后，只发送一次请求 一次响应，即一次交互，就会关掉连接</li><li>图片：第一次返回的时候不会返回图片信息，就只有HTML文本。浏览器解析的时候，会重新建立连接去下载图片（有多少张图片去重新建立多少次连接，一次连接只能请求下载一张图片）</li></ul><h4 id="HTTP常用方法"><a href="#HTTP常用方法" class="headerlink" title="HTTP常用方法"></a>HTTP常用方法</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321241.png" alt="image-20220522164304896"></p><ul><li>GET：根据URL检索文档</li><li>PUT：根据URL将本地文件上传到服务器上（需要特殊权限）</li><li>HEAD：类似GET，但是不返回message，只返回头部内容</li><li>OPTIONS：获取服务器选项功能</li><li>POST：打开网页填写表单，将填写内容发给服务器，而不是将整个页面发过去。</li><li>DELETE：删除页面（需要权限）</li><li>TRACE：lookback ，跟踪一样的功能</li><li>CONNECT：在特殊情况下使用，在访问过程中加入代理，client端通过connect和proxy建立连接</li></ul><h4 id="3-5-HTTP-Request-amp-Response-例子"><a href="#3-5-HTTP-Request-amp-Response-例子" class="headerlink" title="3.5 HTTP Request&amp;Response 例子"></a>3.5 HTTP Request&amp;Response 例子</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321211.png" alt="image-20220522164634197"></p><ul><li>HTTP REQUEST：request line：跟client端发送的请求相关的命令，HTTP header（蓝色部分），HTTP body（一般在request里面不使用，没有实质的内容），中间要带上blank line（同email message）</li><li>HTTP RESPONSE：response line（version+status code+解释）<ul><li>4开头 错误解释</li><li>3开头 指向新的网页，需要进一步的动作</li><li>2开头 method执行成功，正确，加上blank line和相应的data</li></ul></li></ul><h4 id="3-6-HTTP-一个-x3D-x3D-ASCII-x2F-MIME-x3D-x3D-协议"><a href="#3-6-HTTP-一个-x3D-x3D-ASCII-x2F-MIME-x3D-x3D-协议" class="headerlink" title="3.6 HTTP 一个==ASCII / MIME==协议"></a>3.6 HTTP 一个==ASCII / MIME==协议</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321180.png" alt="image-20220522165122059"></p><ul><li>基于ASCII的协议，最初设计只能支持ASCII编码的文本文件，只能发送英文字符（一样在RFC522中定义）</li><li>后来也为了扩展功能，采用MIME的协议，将非ASCII转换为ASCII，在互联网上进行传输。</li><li>MIME定义的内容类型和子类型</li></ul><blockquote><p>和 Email 很像</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321271.png" alt="image-20220522165358178"></p><h4 id="3-7-HTTP-1-1"><a href="#3-7-HTTP-1-1" class="headerlink" title="3.7 HTTP 1.1"></a>3.7 HTTP 1.1</h4><p>目前HTTP版本使用的主要是1.0和1.1</p><ul><li>HTTP 1.0:停等协议（tfpt）<ul><li>client发送请求后就一直等，直到server端发来response才会去接着发送新的请求</li><li>每个文件都需要<strong>单独建立一个TCP连接</strong>进行发送，产生很多流量消耗，server也要维护很多connection</li></ul></li><li>HTTP 1.1<ul><li>提高1.0的性能<ul><li>持续性的连接/持久连接</li><li>管道通信方式 pipeline</li><li>caching增强</li><li>支持压缩</li></ul></li></ul></li></ul><h5 id="持续性的连接和管道通信方式"><a href="#持续性的连接和管道通信方式" class="headerlink" title="持续性的连接和管道通信方式"></a>持续性的连接和管道通信方式</h5><ul><li><p>持续性的连接persistent connection：解决一个文件传输一个TCP连接的方式，建立连接可以在一个连接里发送多个数据，能够减少TCP协议建立和拆除过程中产生的数据包的数量。</p></li><li><p>管道通信方式pipelining：因为1.0 stop and wait，所以1.1为了改进，一次发送多个请求。这样可以批量发送请求和获得相应response，将多个HTTP request放到一个数据包里面，让server也能够批量处理相应的response回来</p></li></ul><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><blockquote><p>HTTP 1.1 之前，不能在一个连接中传很多信息</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321227.png" alt="image-20220522170116298"></p><p>第一次：</p><p>第二次：再建立TCP连接，1个网页10个图片就要前后11次连接</p><p>对网络资源造成浪费</p><blockquote><p>引入 HTTP 1.1 后</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321048.png" alt="image-20220522170320281"></p><blockquote><p>管道通信方式：一个报头多个消息</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321239.png" alt="image-20220522170429922"></p><h4 id="3-8-Cookies"><a href="#3-8-Cookies" class="headerlink" title="3.8 Cookies"></a>3.8 Cookies</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321346.png" alt="image-20220522183319175"></p><p>无状态：不保留任何客户端访问记录，没法提供个性化推送，不能通过IP地址识别用户</p><p>cookie创建过程：第一次访问某个网站，就会被分配某个ID（cookie），同时会在后台数据库为这个ID创建相应的记录。server在用户访问，发送HTTP请求的时候，会在server端HTTP响应的时候给用户发送一个id，用户会将cookie放在<strong>本地</strong>（浏览器管理）进行再次发送HTTP请求的时候，会带上cookie放在header部分，服务器端会根据cookie到数据库查找到相应的信息。</p><p>举例</p><p><strong>四个组成部分：</strong></p><ul><li>HTTP响应消息的cookie header line</li><li>HTTP请求信息中的Cookie header line</li><li>Cookie文件保存在user’s host上，由用户的浏览器管理</li><li>后端数据库位于网站上</li></ul><h5 id="使用Cookies来记录状态"><a href="#使用Cookies来记录状态" class="headerlink" title="使用Cookies来记录状态"></a>使用Cookies来记录状态</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321277.png" alt="image-20220522184130171"></p><h4 id="3-9-Web-Caches-Proxy-Server"><a href="#3-9-Web-Caches-Proxy-Server" class="headerlink" title="3.9 Web Caches(Proxy Server)"></a>3.9 Web Caches(Proxy Server)</h4><p><strong>代理服务器</strong></p><ul><li>主要目的：满足客户端访问的请求，不去与原来的服务器进行交互</li><li>用户设置浏览器：设置proxy server，由它连接web server，将相应信息转发回来</li><li>浏览器会把所有的HTTP请求发给proxy server<ul><li>如果在cache里面有需要的文件，proxy server就会直接返回文件</li><li>如果没有，就会从原server里面请求，找到之后再返回给client端</li></ul></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321395.png" alt="image-20220522184620025"></p><p>上：没有的情况</p><p>下：有的情况</p><p>怎么让origin server内容和cache里面的内容一致？</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321333.png" alt="image-20220522184651860"></p><p>conditional get 实现cache和origin server内容同步</p><p>server端发现cache内容在<strong>有限期</strong>范围内，就不回去返回内容，如果发现超出有效期，就会发response</p><p>对原来的get命令做一定的修改 在头部加上</p><p><code>If-modified-since：&lt;date&gt;</code></p><p>（有效期时间，缓存时间：如果在时间之后有改动cache内容就不是最新的，如果没有改动，就是最新的）</p><p>上：cache没有过期。request询问，response回复304 +status code（not modified），表明cache最新，可以使用，不用更新</p><p>下：cache过期。询问，返回modified，返回相应更新的内容。</p><h4 id="3-10-HTTPS"><a href="#3-10-HTTPS" class="headerlink" title="3.10 HTTPS"></a>3.10 HTTPS</h4><p><strong>==Hypertext Transfer Protocol Secure== (HTTPS)</strong></p><p>使用<strong>安全套接字</strong>【SSL】或者TLS，在socket layer上面加了一项安全性，会对所有的负载信息（HTTP信息）进行加密，即使通过互联网传输，也无法解密</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231321731.png" alt="image-20220522190144129"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> 互联网应用 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网应用笔记（三）</title>
      <link href="//post/02.5%20linux.html"/>
      <url>//post/02.5%20linux.html</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction-to-Linux"><a href="#Introduction-to-Linux" class="headerlink" title="Introduction to Linux"></a>Introduction to Linux</h1><h2 id="What-is-Linux"><a href="#What-is-Linux" class="headerlink" title="What is Linux?"></a>What is Linux?</h2><p>a Unix-like computer operating system but free and open-source. </p><p>The Linux Operating System (OS) is a large program (mostly coded in C) that turns the computer into a useable machine.</p><h3 id="Account"><a href="#Account" class="headerlink" title="Account"></a>Account</h3><p>Each user has their own space, called their <em>account.</em></p><h4 id="login"><a href="#login" class="headerlink" title="**login: **"></a>**login: **</h4><p><strong>ad</strong>    type your ID and RETURN</p><p><strong>Password:</strong>    type your password and </p><p><strong>RETURN.</strong>    It does not appear.</p><p><strong>$</strong>                 The Linux prompt提示 (or similar).  You can now enter commands.</p><p><strong>Access denied Password:</strong>   Login ID and password not match</p><h4 id="logout"><a href="#logout" class="headerlink" title="**logout **"></a>**logout **</h4><p> <strong>^D</strong> ： 同时按CONTROL和D键</p><p><strong>exit</strong></p><h3 id="The-Shell"><a href="#The-Shell" class="headerlink" title="The Shell"></a>The Shell</h3><p>The Linux user interface is called the <em>shell</em></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071010380.png" alt="image-20230307101021308"></p><p><em>ssh <a href="mailto:student@127.0.0.1">student@127.0.0.1</a> 2000</em>：远程联机</p><p><strong>rz</strong>：上传文件</p><p><strong>sz x</strong>：下载文件</p><h4 id="Typing-Commands"><a href="#Typing-Commands" class="headerlink" title="Typing Commands"></a>Typing Commands</h4><p><strong>date</strong>:Gives time and date</p><p><strong>cal</strong> 3 1997:Calendar</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071022034.png" alt="image-20230307102257001"></p><p><strong>who</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071023468.png" alt="image-20230307102346439"></p><p><strong>pwd</strong> 当前路径</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071025575.png" alt="image-20230307102501547"></p><p><strong>ifconfig</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071024909.png" alt="image-20230307102416877"></p><p>man cal:  Manual pages</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071025776.png" alt="image-20230307102550728"></p><p><strong>uptime</strong> </p><p>Machine’ s  ‘ up ’ time</p><p>显示系统已经运行了多长时间、当前登入用户数量、过去1分钟、5分钟、15分钟内的负载信息。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071029333.png" alt="image-20230307102901305"></p><p><strong>hostname</strong> </p><p>Name of the machine</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071031471.png" alt="image-20230307103139440"></p><p><strong>apropos</strong> topic（要查的命令的topic）</p><p>如果你不知道完成某个特定任务所需要命令的名称，可以使用一个关键字通过Linux apropos实用程序来搜索它。该实用程序可以搜索关键字并且显示所有包含匹配项的man页面的简短描述</p><p>Lists commands related to topic</p><p>和 man -k一个功能</p><p><strong>man</strong> -k topic（要查的命令的topic）</p><p><strong>whatis</strong> cmd： One-line description（描述一个命令）</p><p><strong>which</strong> cmd: 定位一个命令</p><p><strong>locate</strong> cmd ：List files with cmd in their name (or path)</p><p><strong>locate your_file_name</strong> 即可查找指定文件</p><blockquote><p>Output of these commands can be very long. See one screenful at a time with:</p><p>locate game | more</p><p>apropos print | more</p><p>Press enter/spacebar to go on; ^C/q to stop</p></blockquote><h4 id="Control-Characters"><a href="#Control-Characters" class="headerlink" title="Control Characters"></a>Control Characters</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071026891.png" alt="image-20230307102628855"></p><h4 id="Changing-your-Password"><a href="#Changing-your-Password" class="headerlink" title="Changing your Password"></a>Changing your Password</h4><p><strong>passwd</strong>:</p><h4 id="System-Directories-文件操作"><a href="#System-Directories-文件操作" class="headerlink" title="System Directories 文件操作"></a>System Directories 文件操作</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071041979.png" alt="image-20230307104131934"></p><p><em>home directory</em>, which is named after your login ID. </p><p><strong>pwd</strong> showing current directory</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071042859.png" alt="image-20230307104205818"></p><h4 id="root-Account"><a href="#root-Account" class="headerlink" title="root Account"></a>root Account</h4><p>root: super user, who has the full rights to all resources</p><ul><li><p>home directory: <strong>/root</strong></p></li><li><p>changing to root account: <strong>$sudo -i</strong></p></li><li><p>add a new user account: <strong>#adduser account-name</strong></p></li></ul><p>终端切换</p><p>​Windows: ALT+F1, ALT+F2</p><h4 id="Pathnames"><a href="#Pathnames" class="headerlink" title="Pathnames"></a>Pathnames</h4><p>路径名是目录名的序列(以/ 分隔)，用于标识目录的位置</p><h5 id="Absolute-Pathnames"><a href="#Absolute-Pathnames" class="headerlink" title="Absolute Pathnames"></a>Absolute Pathnames</h5><p>树的顶部(根)和感兴趣的目录之间的目录名称序列。</p><p>/bin</p><p>/etc/terminfo</p><p>/home/ad</p><p>/home/student/proj1</p><h5 id="Relative-Pathnames"><a href="#Relative-Pathnames" class="headerlink" title="Relative Pathnames"></a>Relative Pathnames</h5><p>从当前所在目录到感兴趣目录的目录名称的顺序。</p><p><strong>proj1</strong>      if you are in student</p><p><strong>student/proj1</strong>      if you are in home</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071045756.png" alt="image-20230307104546724"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071046773.png" alt="image-20230307104610734"></p><h4 id="Working-with-Directories"><a href="#Working-with-Directories" class="headerlink" title="Working with Directories"></a>Working with Directories</h4><h5 id="Moving-between-Directories"><a href="#Moving-between-Directories" class="headerlink" title="Moving between Directories"></a>Moving between Directories</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071046428.png" alt="image-20230307104656394"></p><h6 id="student到proj1中"><a href="#student到proj1中" class="headerlink" title="student到proj1中"></a>student到proj1中</h6><p><strong>cd</strong> proj1：（<em>current working directory</em>.）</p><p><strong>pwd</strong> ：Print name of current working directory</p><p>Move back to directory student (the parent directory):<em>cd ..</em> (返回上一级目录)</p><h6 id="proj1到proj2"><a href="#proj1到proj2" class="headerlink" title="proj1到proj2"></a>proj1到proj2</h6><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071049913.png" alt="image-20230307104959877"></p><p>..是上一级目录</p><p>../proj2 is a <em>relative</em> pathname</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071051870.png" alt="image-20230307105151826" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071053396.png" alt="image-20230307105320356" style="zoom:67%;"><h5 id="Investigate-the-System"><a href="#Investigate-the-System" class="headerlink" title="Investigate the System"></a>Investigate the System</h5><p><strong>cat</strong> file 命令用于连接文件并打印到标准输出设备上</p><p><strong>List</strong> file</p><p><strong>ls</strong> Directory listing</p><p>​ls List current dir.</p><p>​ls /etc List /etc</p><p>​ls -F -F option shows types</p><h5 id="Making-x2F-Deleting-x2F-Renaming-Directories"><a href="#Making-x2F-Deleting-x2F-Renaming-Directories" class="headerlink" title="Making / Deleting / Renaming Directories"></a>Making / Deleting / Renaming Directories</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071058063.png" alt="image-20230307105859025"></p><h5 id="Creating-a-Text-File"><a href="#Creating-a-Text-File" class="headerlink" title="Creating a Text File"></a>Creating a Text File</h5><p><strong>cat &gt; file</strong></p><p>这将把你在键盘上输入的文本输入到文件中，直到你输入^D (CONTROL和D一起)</p><h5 id="Listing-Files"><a href="#Listing-Files" class="headerlink" title="Listing Files"></a>Listing Files</h5><p><strong>cat</strong> file List the file</p><p><strong>more</strong> fileList the file a screen at a time. Type spacebar to go on; ^C to stop</p><p><strong>less</strong> fileLike more but more powerful</p><p><strong>head</strong> file List the <em>first</em> few lines</p><p><strong>tail</strong> fileList the <em>last</em> few lines</p><h5 id="Other-Basic-Commands"><a href="#Other-Basic-Commands" class="headerlink" title="Other Basic Commands"></a>Other Basic Commands</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071104418.png" alt="image-20230307110434371"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071104992.png" alt="image-20230307110448954"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071105001.png" alt="image-20230307110531959" style="zoom:50%;"><h5 id="I-x2F-O-Redirection"><a href="#I-x2F-O-Redirection" class="headerlink" title="I/O Redirection"></a>I/O Redirection</h5><p>Most commands output to the screen<strong>ls</strong></p><p>Output can be <em>redirected</em> to a file with‘&gt;‘:</p><p>​ls &gt; dir.txt</p><p>​cal 1997 &gt; year1997</p><p>“&gt;”把输出输入到文件中</p><p>“&gt;&gt;”:cal 1998 &gt;&gt; years把输出加到文件后</p><ul><li><p>Concatenate two files:</p><p><strong>cat f1 f2 &gt; fs</strong></p></li><li><p>Input redirection (less common) uses ‘&lt;‘</p><p>wc &lt; years</p></li><li><p>Combine input and output redirection:</p><p>wc &lt; years &gt; year-counts</p></li></ul><h4 id="Editor"><a href="#Editor" class="headerlink" title="Editor"></a>Editor</h4><p><strong>vi</strong> is a text editor. </p><p><strong>vi</strong> shows you part of your file and allows you to enter commands that change something</p><ul><li><p>命令模式:移动光标，移动到文件的不同部分，发出编辑命令，切换到插入模式。</p></li><li><p>插入模式:无论你输入什么都将被放入文件中(不解释为命令)。</p></li></ul><h5 id="光标移动命令in-command-mode"><a href="#光标移动命令in-command-mode" class="headerlink" title="光标移动命令in command mode"></a>光标移动命令in command mode</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071111374.png" alt="image-20230307111104333" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071111766.png" alt="image-20230307111141723" style="zoom:67%;"><p>Scrolling Commands</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071112172.png" alt="image-20230307111204133" style="zoom:67%;"><p>delete stuff</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071112786.png" alt="image-20230307111241745" style="zoom:67%;"><p>Changing Text</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071112470.png" alt="image-20230307111257431" style="zoom:67%;"><h5 id="Insert-Mode"><a href="#Insert-Mode" class="headerlink" title="Insert Mode"></a>Insert Mode</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071113130.png" alt="image-20230307111339091"></p><p>要退出插入模式(回到命令模式)，按下“Esc”(escape键)。</p><p>有一个状态行(屏幕底部)，告诉你你在什么模式/命令</p><h6 id="Copy-amp-Paste"><a href="#Copy-amp-Paste" class="headerlink" title="Copy &amp; Paste"></a>Copy &amp; Paste</h6><p><strong>p</strong> paste text last copied to the right of the cursor</p><p><strong>yy</strong> copy current line</p><p><strong>ye</strong>      copy from the cursor to the end of the word</p><h6 id="Searching-and-Replacing"><a href="#Searching-and-Replacing" class="headerlink" title="Searching and Replacing"></a>Searching and Replacing</h6><p><strong>/text</strong>search forward for text</p><p><strong>?text</strong>search backward for text</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071116054.png" alt="image-20230307111640009" style="zoom:67%;"><h6 id="Saving-and-Exiting"><a href="#Saving-and-Exiting" class="headerlink" title="Saving and Exiting"></a>Saving and Exiting</h6><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071118038.png" alt="image-20230307111810994" style="zoom:67%;"><h4 id="Other-commands"><a href="#Other-commands" class="headerlink" title="Other commands"></a>Other commands</h4><p><strong>chmod</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071118792.png" alt="image-20230307111858754" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071120302.png" alt="image-20230307112008255" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071120293.png" alt="image-20230307112059245" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071121880.png" alt="image-20230307112135833"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071121393.png" alt="image-20230307112144345"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> 互联网应用 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网应用笔记（十）</title>
      <link href="//post/10%20SNMP.html"/>
      <url>//post/10%20SNMP.html</url>
      
        <content type="html"><![CDATA[<h1 id="10-SNMP"><a href="#10-SNMP" class="headerlink" title="10 SNMP"></a>10 SNMP</h1><h2 id="一、网络管理简介"><a href="#一、网络管理简介" class="headerlink" title="一、网络管理简介"></a>一、网络管理简介</h2><h3 id="1-什么是网络管理"><a href="#1-什么是网络管理" class="headerlink" title="1. 什么是网络管理"></a>1. 什么是网络管理</h3><ul><li>对不同人来说是不一样的：<ul><li>使用协议分析器/小的工具去监视网络活动 <ul><li>eg.ping检查；wireshark抓包分析、监控网络；都算在网络管理范围内</li></ul></li><li>基于分布式数据库，放网络管理相关数据，通过网络管理自动对网络中各个网络设备进行轮询autopolling，产生网络拓扑变化和网络交通的实时情况的展示（状态、行为的视图）<ul><li>eg. 监视大的网络情况，搭建专有分布式数据库，建立轮询功能</li></ul></li></ul></li><li>定义<ul><li>网络管理是一种可以使用不同工具、应用和设备来帮助管理人员对网络进行<strong>管理和维护</strong></li></ul></li></ul><h3 id="2-网络管理的目的"><a href="#2-网络管理的目的" class="headerlink" title="2. 网络管理的目的"></a>2. 网络管理的目的</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347194.png" alt="image-20220524110328501"></p><ul><li>目的：辅助网络管理人员对网络状况进行管理，保证数据能够以最大效率、对用户透明地穿过网络。</li><li>主要作用：能够对网络中出现的干扰disturbance进行<strong>监视和控制</strong></li><li>希望：效率高、操作透明（用户无感知）保证网络正常运行</li></ul><h3 id="3-ISO定义网络管理功能-FCAPS"><a href="#3-ISO定义网络管理功能-FCAPS" class="headerlink" title="3. ISO定义网络管理功能 - FCAPS"></a>3. ISO定义网络管理功能 - FCAPS</h3><p>由ISO网络管理论坛定义</p><p><strong>FCAPS</strong>【为以下的缩写】：故障管理、配置管理、计费管理、性能管理、安全管理</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347198.png" alt="image-20220524110514039"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347161.png" alt="image-20220524110722098"></p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220607154214280.png" alt="image-20220607154214280" style="zoom:85%;"><h4 id="3-1-故障管理-Fault-Management"><a href="#3-1-故障管理-Fault-Management" class="headerlink" title="3.1 故障管理 Fault Management"></a>3.1 故障管理 Fault Management</h4><p>用来定位问题</p><p>解决步骤：</p><ul><li>发现问题</li><li>隔离问题</li><li>解决问题</li></ul><h4 id="3-2-配置管理-Configuration-Management"><a href="#3-2-配置管理-Configuration-Management" class="headerlink" title="3.2 配置管理 Configuration Management"></a>3.2 配置管理 Configuration Management</h4><p>某些网络设备的配置控制着数据网络的行为</p><p>配置管理是发现和设置(配置)这些关键设备的过程</p><ul><li>网络设备的配置控制着数据网络的行为</li><li>配置管理是找到核心设备的配置信息以及对其进行配置</li></ul><h4 id="3-3-计费管理-Accounting-management"><a href="#3-3-计费管理-Accounting-management" class="headerlink" title="3.3 计费管理 Accounting management"></a>3.3 计费管理 Accounting management</h4><p>审计和计费，统计分析</p><ul><li>对所有网络用户个体行为【<strong>tracking individual‘s</strong>】、网络资源管理行为进行跟踪，基于跟踪过程进行保证，保证每位用户得到足够的资源</li><li>包括对用户的接纳和认证，根据用户对网络的使用策略保证他们能够接入、使用一定的网络资源</li></ul><h4 id="3-4-性能管理-Performance-management"><a href="#3-4-性能管理-Performance-management" class="headerlink" title="3.4 性能管理 Performance management"></a>3.4 性能管理 Performance management</h4><ul><li>包括对网络硬件、软件和介质性能的测量<ul><li>衡量活动：吞吐率、利用率、错误率、响应时间</li></ul></li></ul><h4 id="3-5-安全管理-Secrity-management"><a href="#3-5-安全管理-Secrity-management" class="headerlink" title="3.5 安全管理 Secrity management"></a>3.5 安全管理 Secrity management</h4><ul><li>控制用户对网络资源的访问，区分可信与否</li><li>提供对用户访问接入行为记录的方法</li><li>基于审计的记录判断有无安全事件发生，有的话对应报警</li></ul><h4 id="3-6-Functional-Areas之间的关系"><a href="#3-6-Functional-Areas之间的关系" class="headerlink" title="3.6 Functional Areas之间的关系"></a>3.6 Functional Areas之间的关系</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347236.png" alt="image-20220524110845241"></p><ul><li>配置管理C是中间的，与其他四个管理都有关系，可以为其他网络功能提供管理细节信息，同时其他四个相关功能也要将相关情况反馈给C，为了将来更好的对网络进行配置</li><li>F——C：实际状态 actual status</li><li>P——C：一些网络性能参数的信息 Performance Indicator Status</li><li>相互之间也有信息的交互，共同完成网络管理的功能</li></ul><h3 id="5-网络管理协议"><a href="#5-网络管理协议" class="headerlink" title="5. 网络管理协议"></a>5. 网络管理协议</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347232.png" alt="image-20220524111915777"></p><ul><li>管理实体和被管理实体之间交互的协议</li><li>两种：SNMP（目前使用更多）和CMIS/CMIP，分别来自于不同的网络标准化组织IETF和ISO<ul><li>一开始想在CMIS和CMIP上扩展，迟迟没有出台</li><li>于是IETF以SG（gateway)MP为基础，扩展定义了SNMP</li></ul></li></ul><h2 id="二、SNMP简介"><a href="#二、SNMP简介" class="headerlink" title="二、SNMP简介"></a>二、SNMP简介</h2><h3 id="1-什么是SNMP"><a href="#1-什么是SNMP" class="headerlink" title="1. 什么是SNMP"></a>1. 什么是SNMP</h3><ul><li><p><strong>Simple Network Management Protocol</strong>：提供一种监视和管理异构计算机网络的方法</p></li><li><p><strong>应用层</strong></p></li><li><p>TCP/IP协议套件的一部分</p></li><li><p>基于<strong>UDP</strong></p></li><li><p>主要使用的端口：</p><ul><li><strong>161</strong>: SNMP <strong>GET/SET</strong> messages</li><li><strong>162</strong>: SNMP <strong>Trap</strong> messages</li></ul></li></ul><h3 id="2-SNMP与网络管理"><a href="#2-SNMP与网络管理" class="headerlink" title="2. SNMP与网络管理"></a>2. SNMP与网络管理</h3><ul><li>SNMP实现了网络管理的<strong>F-C-P</strong>功能【F: Fault】【C: Configuration】【P: Performance】</li><li>SNMP<strong>不能覆盖网络管理的所有功能领域</strong></li><li>网络管理是一项<strong>系统</strong>的工作，<strong>SNMP是其中的一个重要工具和协议</strong></li></ul><h3 id="4-SNMP模型"><a href="#4-SNMP模型" class="headerlink" title="4. SNMP模型"></a>4. SNMP模型</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306191401197.png" alt="image-20230619140105039"></p><p>一个被管理网络的SNMP模型由四个部分组成:</p><ul><li><p>Manage <strong>Nodes</strong> (==Agent==) 被管</p></li><li><p>Management <strong>Stations</strong> (==NMS==) 管理</p></li><li><p>Management <strong>Information</strong> (==MIB==)</p></li><li><p>Management <strong>Protocol</strong> (==SNMP==)</p><p>蓝色线是网络管理协议</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306191402271.png" alt="image-20230619140239182"></p></li></ul><h3 id="5-SNMP架构"><a href="#5-SNMP架构" class="headerlink" title="5. SNMP架构"></a>5. SNMP架构</h3><p>GetRequest</p><p>GetResponse &amp; Trap</p><p>manager向agent发消息</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347973.png" alt="image-20220524113724674"></p><h2 id="三、SNMP网络管理框架"><a href="#三、SNMP网络管理框架" class="headerlink" title="三、SNMP网络管理框架"></a>三、SNMP网络管理框架</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347102.png" alt="image-20220524113036121"></p><ul><li>MIB【管理信息库】 网络管理数据的信息分布式存储</li><li>SMI【管理信息结构】 使用定义语言针对数据库中对象MIB object进行描述</li><li>SNMP协议 manager和被管对象之间通信协议</li></ul><p>SNMPv1主要包括4个RFC，分别对SMIv1、MIB、MIB2和SNMPv1本身进行了定义</p><h3 id="1-SMI-Structure-of-Management-Information"><a href="#1-SMI-Structure-of-Management-Information" class="headerlink" title="1. SMI - Structure of Management Information"></a>1. SMI - Structure of Management Information</h3><ul><li><p>SMI定义了描述管理信息的规则</p></li><li><p>管理数据的语法、语义、定义良好、无歧义</p></li><li><p><strong>使用了特殊定义的语言ASN.1实现对被管信息明确的描述</strong>，不会产生歧义和不连续性的问题</p></li><li><p><strong>只是用了ASN.1的一个子集</strong></p></li></ul><h4 id="1-1-什么是ASN-1"><a href="#1-1-什么是ASN-1" class="headerlink" title="1.1 什么是ASN.1"></a>1.1 什么是ASN.1</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347158.png" alt="image-20220524163810874"></p><ul><li><strong>定义数据结构的标准化语言</strong>，也是国际性标准</li><li>定义了数据在通信系统中如何传输，相应的传输规则</li><li>广泛应用于通信系统中（邮件系统等）</li><li>语法简单例子，age 0到120的整型；user类似于编程语言中结构体，有序集合，包括属性name age address</li></ul><h4 id="1-2-SMI-语法"><a href="#1-2-SMI-语法" class="headerlink" title="1.2 SMI 语法"></a>1.2 SMI 语法</h4><p>一般都是<code>ASN.1</code>数据类型【整型、二进制数据、标识符、空、有序集合等】</p><ul><li>Interger</li><li>Octet String</li><li>Object Identifier</li><li>NULL</li><li>Sequence</li></ul><p>SMI-specific数据类型</p><ul><li>IP Address:描述32位IP地址的数据类型</li><li>counter计数器</li><li>timeticks 定义定时器，涉及定时器使用可以用</li><li>PhysAddress 定义Mac地址</li></ul><p><strong>MIBs【Management Information Base】是使用ASN.1规范语言编写，必须遵守SMI规范中指定的语法</strong></p><h3 id="2-MIB-Management-Information-Base"><a href="#2-MIB-Management-Information-Base" class="headerlink" title="2. MIB - Management Information Base"></a>2. MIB - Management Information Base</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347173.png" alt="image-20220524114431429"></p><p>MIB是按层次结构组织的信息集合</p><ul><li>管理信息库：由多个managed object组成，每个managed object都有唯一的标识符OID</li><li>MIB完成了不同managed object的组织</li><li>被管对象：<ul><li>标量对象（指定单一对象)【Scalar Object】</li><li>组对象（多个相关对象组合在一起，以列表的形式进行展示）【Tabular Objects】</li></ul></li><li>所有的MIB object都是用SMI(语法)来定义的</li></ul><h4 id="2-1-MIB-ISO-Object-Identifier-Tree"><a href="#2-1-MIB-ISO-Object-Identifier-Tree" class="headerlink" title="2.1 MIB-ISO Object Identifier Tree"></a>2.1 MIB-ISO Object Identifier Tree</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347225.png" alt="image-20220524165648896"></p><ul><li>为了更好的管理MIB中的object，使用了树形结构，将MIB中被管理对象组织成树形架构identify tree，以文字化的结构组织起来，形成MIB</li><li>最上方root，其他节点label+十进制的描述位置的标识值。每个节点的object identifier从上到下连起来到本身，将所经历的节点值串起来，每个节点的object identifier都是唯一标识</li><li>Internet节点往下就是所有跟互联网相关的object</li></ul><h4 id="2-2-SIM-MIB示例"><a href="#2-2-SIM-MIB示例" class="headerlink" title="2.2 SIM MIB示例"></a>2.2 SIM MIB示例</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347300.png" alt="image-20220524165702919"></p><ul><li>向下分支产生</li><li><code>udpInDatagrams</code>表示收到udpDatagram个数，既有scalar object（可以用单一数字描述清楚），也有tabular object 比如udpTable(以列表形式存在)</li></ul><h4 id="2-3-MIB-命名"><a href="#2-3-MIB-命名" class="headerlink" title="2.3 MIB 命名"></a>2.3 MIB 命名</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347699.png" alt="image-20220524165722248"></p><ul><li><p>每个object都有<strong>唯一OID</strong>，十进制值表示，也可以加上label串起来一起传递，更容易读出的命名方式</p></li><li><p>OID使用过程：当manager想要得到具体的对象的值的时候，会发送包含该对象OID的getRequest消息。agent收到了request之后会去查找MIB，获得OID对应的值。找到了返回response，将想要的值加上；没找到返回错误信息</p></li></ul><h4 id="2-4-MIB-定义"><a href="#2-4-MIB-定义" class="headerlink" title="2.4 MIB 定义"></a>2.4 MIB 定义</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347765.png" alt="image-20220607202536459"></p><p>RFC1212中对MIB定义分为两部分：一部分是文本描述部分，将object分成很多组，还有MIB module 对应具体模块，包含很多object，使用ASN.1的object-type具体类型，对object进行描述，用SMI定义的</p><h5 id="例子-描述UDP-Module"><a href="#例子-描述UDP-Module" class="headerlink" title="例子 描述UDP Module"></a>例子 描述UDP Module</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347005.png" alt="image-20220607202609494"></p><p>类型；权限；状态；描述（给用户读）；标识符（此处表示在udp节点下，自己的值是1）</p><p>UDP module里面的object列表：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347942.png" alt="image-20220524165757100"></p><h2 id="3-SNMP-协议"><a href="#3-SNMP-协议" class="headerlink" title="3. SNMP 协议"></a>3. SNMP 协议</h2><h4 id="3-1-Traps-x2F-Polling"><a href="#3-1-Traps-x2F-Polling" class="headerlink" title="3.1 Traps/Polling"></a>3.1 Traps/Polling</h4><p><strong>SNMP两种工作模式 traps/polling</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347956.png" alt="image-20220524171126275"></p><p>==SNMP的两种工作模式呈现互补关系==【两个工作模式是共同存在的】</p><ul><li>polling mode：管理站轮询——<strong>NMS不断向被管对象agent发送request</strong>，查询管理信息，收到查询MIB，将数据发送过来</li><li>trap mode：不是基于request和response进行查询，而是<strong>主动上报</strong>，用于某些特定的情况下</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347984.png" alt="image-20220524171845523"></p><ul><li>polling <ul><li>manager是client端，agent是server端，<strong>agent在161端口监听</strong></li><li>NMS周期性轮询网络设备进行查询</li><li>好处是NMS可以获得全网整体性的视图 big picture，好控制</li><li>缺点：造成较大delay，遇到具体时间会进行很多查询工作，轮询会造成大的时延</li></ul></li><li>traps<ul><li>异常事件的提醒：异常事件发生，告诉NMS错误类型、网络设备名字、如果下一步查询的话要查询哪个object</li><li>为了效率，message通常比较短，比较简单</li><li>NMS收到后进一步与agent进行交互以获得更多信息</li><li>NMS作为server端，agent作为client端，NMS会一直监听TRAP信息（<strong>端口162</strong>）</li></ul></li></ul><h4 id="3-2-SNMP-命令"><a href="#3-2-SNMP-命令" class="headerlink" title="3.2 SNMP 命令"></a>3.2 SNMP 命令</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347379.png" alt="image-20220524120245756"></p><ul><li>getRequest 管理实体发给ME以获取相应的数据，指定OID instance 的值，获得instance信息</li><li>getNextRequest，对MIB数据实现遍历。指定OID，反馈列表中的下一个object instance的值</li><li>getBulkRequest 对第一条命令的改进。NMS发给agent 获取一块/批量数据，效率得到提升</li><li>informRequest 定义了两个manager之间的通信，相当于两个manager之间MIB信息的交换，提高了通信能力</li><li>setResponse 设置MIB中的value</li><li>Trap 当agent中有异常发生的时候，主动上报</li></ul><h5 id="getRequest"><a href="#getRequest" class="headerlink" title="getRequest"></a>getRequest</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347514.png" alt="image-20220524172259229"></p><p>getRequest携带OID agent针对回复getresponse 回复</p><h5 id="getNextRequest"><a href="#getNextRequest" class="headerlink" title="getNextRequest"></a>getNextRequest</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347613.png" alt="image-20220524120629108"></p><ul><li>实现了强大的功能：<u>做一个OID子树的遍历</u>（traverse）</li><li>OID树形结构 <strong>指定起点</strong>就可以按照某种顺序进行访问</li><li>按虚线顺序访问</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347563.png" alt="image-20220607203130869"></p><ul><li>字典序lexicographic order、深度优先遍历（√）、广度优先遍历</li><li>每一个分支遍历完再去查找下一个分支</li></ul><h6 id="GetNext使用例子"><a href="#GetNext使用例子" class="headerlink" title="GetNext使用例子"></a>GetNext使用例子</h6><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347742.png" alt="image-20220524121014739"></p><ul><li>树形结构，起点T.E，agent反馈T.E的下一个节点object T.E.1.1 的值，再然后下一个节点是T.E.1.2</li><li>其实是对指定子树的遍历</li><li>直到返回noSuchName表示遍历结束</li></ul><p>工具 snmpwalk：给出具体起点，完成某部分的遍历，会返回所以他下面出现的object。查询直到MIB没有更多剩余变量，就退出来了</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347779.png" alt="image-20220524172316658"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347899.png" alt="image-20220524172325841"></p><h5 id="命令组合使用例子"><a href="#命令组合使用例子" class="headerlink" title="命令组合使用例子"></a>命令组合使用例子</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347159.png" alt="image-20220524172339177"></p><p><strong>抓包查看通信过程 snmp161——polling状态</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347241.png" alt="image-20220524172354500"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347312.png" alt="image-20220524172402690"></p><h4 id="3-3-SNMPv3-安全和管理"><a href="#3-3-SNMPv3-安全和管理" class="headerlink" title="3.3 SNMPv3 安全和管理"></a>3.3 SNMPv3 安全和管理</h4><ul><li>加密</li><li>验证</li><li>反指重放（playback）攻击（模拟真实节点通信）</li><li>访问控制</li></ul><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347404.png" alt="image-20220524174847242"></p><p>思考题</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347425.png" alt="image-20220524174856418"></p><p>缩写</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305231347432.png" alt="image-20220524174904394"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> 互联网应用 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01- introduction</title>
      <link href="//post/01-introduction.html"/>
      <url>//post/01-introduction.html</url>
      
        <content type="html"><![CDATA[<h1 id="Microprocessor-System-Design"><a href="#Microprocessor-System-Design" class="headerlink" title="Microprocessor System Design"></a>Microprocessor System Design</h1><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h3 id="What-is-an-Embedded-System"><a href="#What-is-an-Embedded-System" class="headerlink" title="What is an Embedded System?"></a>What is an Embedded System?</h3><p>Application-specific computer system</p><p>Built into a larger system</p><h3 id="Why-use-an-Embedded-System"><a href="#Why-use-an-Embedded-System" class="headerlink" title="Why use an Embedded System?"></a>Why use an Embedded System?</h3><p>Better performance</p><p>More functions and features</p><p>Lower cost</p><p>More dependability</p><h3 id="Core-Components"><a href="#Core-Components" class="headerlink" title="Core Components"></a>Core Components</h3><p>6个核心components</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303060843420.png" alt="image-20230306084312325"></p><h3 id="Benefits-of-Embedded-Computer-Systems"><a href="#Benefits-of-Embedded-Computer-Systems" class="headerlink" title="Benefits of Embedded Computer Systems"></a>Benefits of Embedded Computer Systems</h3><ul><li>Greater performance and efficiency</li></ul><p>• Software makes it possible to provide sophisticated control</p><ul><li>Lower costs</li></ul><p>• Less expensive components can be used</p><p>e.g. standard LCD display that works with standard MCUs（单片机）</p><p>• Manufacturing costs reduced – mass production</p><p>• Maintenance costs reduced – fewer components</p><ul><li>Better dependability</li></ul><p>• Adaptive system which can compensate for failures</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303061933592.png" alt="image-20230306193325496"></p><p>e.g. when the motor is overheated, slow it down</p><p>• Better diagnostics (e.g. logging) to improve repair time</p><h3 id="Embedded-System-Functions"><a href="#Embedded-System-Functions" class="headerlink" title="Embedded System: Functions"></a>Embedded System: Functions</h3><h4 id="Closed-loop-control-system"><a href="#Closed-loop-control-system" class="headerlink" title="Closed-loop control system"></a>Closed-loop control system</h4><p>• Monitor a process, adjust an output to maintain desired set point (temperature, speed, direction, etc.)</p><p>系统的输入影响输出同时又受输出的直接或间接影响的系统</p><h4 id="Sequencing"><a href="#Sequencing" class="headerlink" title="Sequencing"></a>Sequencing</h4><p>根据环境和系统的不同，逐步经历不同的阶段</p><h4 id="Signal-processing"><a href="#Signal-processing" class="headerlink" title="Signal processing"></a>Signal processing</h4><p>Remove noise, select desired signal features</p><h4 id="Communications-and-networking"><a href="#Communications-and-networking" class="headerlink" title="Communications and networking"></a>Communications and networking</h4><p>Exchange information reliably and quickly</p><h3 id="Embedded-Systems-Attributes"><a href="#Embedded-Systems-Attributes" class="headerlink" title="Embedded Systems: Attributes"></a>Embedded Systems: Attributes</h3><h4 id="Interfacing-with-larger-system-and-environment"><a href="#Interfacing-with-larger-system-and-environment" class="headerlink" title="Interfacing with larger system and environment"></a>Interfacing with larger system and environment</h4><ul><li><p>Analog signals for reading sensors</p><p>Typically use a voltage to represent a physical value</p></li><li><p>Power electronics for driving motors</p></li><li><p>Digital interfaces for communicating with other digital devices</p></li></ul><h4 id="Concurrent（并发性）-reactive-behaviours"><a href="#Concurrent（并发性）-reactive-behaviours" class="headerlink" title="Concurrent（并发性）, reactive behaviours"></a>Concurrent（并发性）, reactive behaviours</h4><p>嵌入式系统可以同时管理多个活动，有精确的时间控制能力</p><p>Typically perform multiple separate activities concurrently</p><p>CPU从一个或多个执行线程执行指令</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303062004117.png" alt="image-20230306200451045" style="zoom:67%;"><h4 id="Fault-handling-amp-Diagnostics（诊断）"><a href="#Fault-handling-amp-Diagnostics（诊断）" class="headerlink" title="Fault handling &amp; Diagnostics（诊断）"></a>Fault handling &amp; Diagnostics（诊断）</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303062025776.png" alt="image-20230306202557690"></p><p>Many systems must operate independently for long periods of time, requiring system to handle likely faults without crashing.</p><p><strong>Often fault-handling code is larger and more complex than the normal-case code</strong></p><p>存储在内存/磁盘上的日志/记录有助于服务人员快速判断问题</p><h4 id="Embedded-Design-Constraints（限制）"><a href="#Embedded-Design-Constraints（限制）" class="headerlink" title="Embedded Design: Constraints（限制）"></a>Embedded Design: Constraints（限制）</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303062028914.png" alt="image-20230306202810841"></p><h5 id="Cost"><a href="#Cost" class="headerlink" title="Cost"></a>Cost</h5><p>竞争市场会惩罚那些性价比不高的产品</p><h5 id="Size-and-weight-limits"><a href="#Size-and-weight-limits" class="headerlink" title="Size and weight limits"></a>Size and weight limits</h5><p>移动(航空、汽车)和便携式(例如手持)系统</p><h5 id="Power-and-energy-limits"><a href="#Power-and-energy-limits" class="headerlink" title="Power and energy limits"></a>Power and energy limits</h5><p>Battery capacity</p><h5 id="Environment"><a href="#Environment" class="headerlink" title="Environment"></a>Environment</h5><p>Temperatures may range from -40°C to 125°C, or even more</p><h3 id="Impact-of-Constraints-限制"><a href="#Impact-of-Constraints-限制" class="headerlink" title="Impact of Constraints 限制"></a>Impact of Constraints 限制</h3><ul><li>Microcontrollers (rather than microprocessors)</li></ul><p>外设包括接口与其他设备，有效响应</p><p>片上RAM、ROM降低了电路板的复杂性和成本</p><ul><li>Programming language</li></ul><p>Programmed in <strong>C</strong> rather than Java (smaller and faster code, so less expensive MCU)</p><p>Some performance-critical code may be in <strong>assembly language</strong></p><ul><li>Operating system (OS)</li></ul><p>Typically no OS, but instead simple scheduler (or even just interrupts + main code (foreground/background system)</p><p>If OS is used, likely to be a Real-Time OS（实时操作系统） with a small code size</p><h2 id="Computer-Design-and-Organisation"><a href="#Computer-Design-and-Organisation" class="headerlink" title="Computer Design and Organisation"></a>Computer Design and Organisation</h2><h3 id="What-is-a-Computer"><a href="#What-is-a-Computer" class="headerlink" title="What is a Computer?"></a>What is a Computer?</h3><p>A computer is a machine that can perform simple calculations </p><p>• performs a sequence of calculations;</p><p>• makes decisions based on the results of calculations; and</p><p>• repeats the sequence if wanted.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303080823366.png" alt="image-20230308082331322"></p><h4 id="Von-Neumann-Architecture"><a href="#Von-Neumann-Architecture" class="headerlink" title="Von Neumann Architecture"></a>Von Neumann Architecture</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303080824566.png" alt="image-20230308082431522"></p><ul><li>Central Processing Unit (CPU)：controls the system and performs calculations</li></ul><p>从内存中取指令、翻译指令、分析指令，然后根据指令的内存向有关部件发送控制命令，控制相关部件执行指令所包含的操作</p><ul><li>Main Memory: stores both programs and data<strong>将程序编码为数据，然后与数据一同存放在存储器中</strong>，这样计算机就可以调用存储器中的程序来处理数据了。（存储程序原理）</li></ul><p>哈佛模型中：数据与与program分别存储</p><p>Peripheral（外部的） Input/Output (I/O)：allows data to be input to system</p><p>allows results to be output from system</p><h4 id="Microprocessor-vs-Microcontroller"><a href="#Microprocessor-vs-Microcontroller" class="headerlink" title="Microprocessor vs Microcontroller"></a>Microprocessor vs Microcontroller</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303080835987.png" alt="image-20230308083550942"></p><ul><li><p>MCP: A microprocessor mainly refers to the CPU with some memories.</p><p>必须包含ROM、RAM、总线接口及这种外设器件，如ARM</p></li><li><p>MCU: A microcontroller unit  is a microprocessor integrated with both memory and I/O. 微控制器是将整个计算机系统集成到一片芯片中，它是一种通用设备，用于获取数据，执行有限的计算和控制环境。<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303081025369.png" alt="image-20230308102503288"></p></li></ul><h3 id="Stored-Program-Concept"><a href="#Stored-Program-Concept" class="headerlink" title="Stored Program Concept"></a>Stored Program Concept</h3><p>The CPU executes instructions stored in memory.</p><p>• So called the “stored program” concept</p><ul><li><strong>two kinds of memory</strong></li></ul><p>  • RAM – Random Access Memory： Can be used for both programs &amp; data</p><p>  • ROM - Read-Only Memory ：Can be used for fixed programs &amp; constant data</p><h4 id="Fetch-Decode-Execute-Cycle"><a href="#Fetch-Decode-Execute-Cycle" class="headerlink" title="Fetch-Decode-Execute Cycle"></a>Fetch-Decode-Execute Cycle</h4><p>The CPU is a finite state machine (FSM) which runs the programs stored in the memory by the user. </p><p>repeatedly performs three operations:</p><p>• Fetch – retrieve an instruction from memory 将一条指令从主存中取到指令寄存器的过程</p><p>• Decode – interpret the instruction 令译码器按照预定的指令格式，对取回的指令进行拆分和解释，识别区分出不同的指令类别以及各种获取操作数的方法。</p><p>• Execute – control appropriate hardware to carry out the instruction 完成指令所规定的各种操作，具体实现指令的功能</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303080841317.png" alt="image-20230308084103273"></p><p>Assembly（汇编） programming is considered the closest and the lowest level of programming to the HW.</p><h4 id="Instructions"><a href="#Instructions" class="headerlink" title="Instructions"></a>Instructions</h4><p>计算机语言中的单词叫做指令，它的词汇叫做指令集</p><p>The functionalities of a computer are specified by its instruction set.</p><ul><li><p><strong>Why is an instruction usually simp</strong></p><p> Simplicity favours regularity. </p></li><li><p><strong>Why is the number of registers small and limited?</strong></p><p>Smaller is faster. A very large number of registers may increase the clock cycle time.</p></li></ul><p><strong>ADD r3, r1, r2</strong>对应C表述是<strong>r3 = r1 + r2</strong>（ r1, r2 and r3 are registers）</p><p><strong>MOV r2, r1</strong> <strong>;r2 = r1</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303080856641.png" alt="image-20230308085645601"></p><p>Translate the follow in style statement into instructions:<strong>w = x – (y + z);</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303080857493.png" alt="image-20230308085723458" style="zoom:50%;"> C-</p><h3 id="Assembly-Language"><a href="#Assembly-Language" class="headerlink" title="Assembly Language"></a>Assembly Language</h3><p>assembly language (<strong>ADD</strong>, <strong>MOV</strong>, etc.)</p><p>汇编程序将把我们的符号转换成机器代码</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303080858336.png" alt="image-20230308085848304" style="zoom:67%;"><p>汇编语言要求程序员为机器执行的每条指令写一行，这迫使程序员像机器一样思考</p><p>写c语言时：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303080900427.png" alt="image-20230308090007381" style="zoom:67%;">]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02-ARM Cortex-M4</title>
      <link href="//post/02-ARM%20Cortex-M4.html"/>
      <url>//post/02-ARM%20Cortex-M4.html</url>
      
        <content type="html"><![CDATA[<h1 id="ARM-Cortex-M4"><a href="#ARM-Cortex-M4" class="headerlink" title="ARM Cortex-M4"></a>ARM Cortex-M4</h1><h2 id="What-is-ARM-Architecture"><a href="#What-is-ARM-Architecture" class="headerlink" title="What is ARM Architecture?"></a>What is ARM Architecture?</h2><p>ARM architecture is a family of RISC（精简指令集）-based processor architectures</p><p>CISC计算机使用</p><p>先进的RISC机器</p><p>以其电源效率而闻名;</p><p>因此被广泛应用于移动设备，如智能手机和平板电脑</p><p>由ARM设计并授权给广泛的生态系统</p><ul><li>ARM Holdings</li></ul><p>•该公司设计基于arm的处理器;</p><p>•不制造，但将设计授权给半导体合作伙伴，后者将自己的知识产权(IP)添加到ARM的IP之上，制造并销售给客户;</p><p>•提供除处理器之外的其他IP，如物理IP、互连IP、图形核心和开发工具。</p><p>在一家公司获得了Cortex-M处理器设计的授权后，ARM则会以Verilog-HDL(硬件描述语言)语言的形式提供设计的源代码。这些公司中的设计工程师随后会将外设和存储器等他们自己的设计模块添加进来，并且使用各种EDA工具将整个设计从Verilog-HDL和其他多种形式转换为晶体管层级的芯片设计。</p><h3 id="Processor-Families"><a href="#Processor-Families" class="headerlink" title="Processor Families"></a>Processor Families</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303091339400.png" alt="image-20230309133953252"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303272336349.png" alt="image-20230327233615301"></p><h3 id="Design-an-ARM-based-SoC（片上系统）"><a href="#Design-an-ARM-based-SoC（片上系统）" class="headerlink" title="Design an ARM-based SoC（片上系统）"></a>Design an ARM-based SoC（片上系统）</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303081334904.png" alt="image-20230308133405720"></p><h3 id="ARM-Cortex-M-Series"><a href="#ARM-Cortex-M-Series" class="headerlink" title="ARM Cortex-M Series"></a>ARM Cortex-M Series</h3><p>Cortex-M series: Cortex-M0, M0+, M1, M3, M4.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303081359255.png" alt="image-20230308135911175"></p><ul><li>Energy-efficiency</li></ul><p>​• Lower energy cost, longer battery life</p><p>​与其他32位微控制器设计相比，Cortex-M处理器相对较小。Cortex-M处理器也进行了低功耗的优化</p><ul><li><p>Smaller code</p><p>更低的硅成本</p></li><li><p>Ease of use（易于使用）</p><p>Faster software development and reuse</p><p>Cortex-M处理器具有简单、线性的存储器映射</p></li><li><p>Embedded applications</p><p>智能计量，人机界面设备，汽车和工业控制系统，白色家电，消费品和医疗仪器</p></li></ul><h3 id="ARM-Processors-vs-ARM-Architectures"><a href="#ARM-Processors-vs-ARM-Architectures" class="headerlink" title="ARM Processors vs. ARM Architectures"></a>ARM Processors vs. ARM Architectures</h3><ul><li><p>ARM architecture </p><p>• Describes the details of instruction set, programmer’s model, exception model, and memory map 描述指令集、程序员模型、异常模型和内存映射的细节 是公司的设计 </p></li><li><p>ARM processor</p><p>• Developed using one of the ARM architectures</p><p>• More implementation details, such as timing information</p></li></ul><h4 id="ARM-Cortex-M4-Processor-Overview"><a href="#ARM-Cortex-M4-Processor-Overview" class="headerlink" title="ARM Cortex-M4 Processor Overview"></a><strong>ARM Cortex-M4 Processor Overview</strong></h4><h5 id="High-Performance-Efficiency"><a href="#High-Performance-Efficiency" class="headerlink" title="High Performance Efficiency"></a>High Performance Efficiency</h5><p>• 1.25 DMIPS/MHz (Dhrystone Million Instructions Per Second / MHz) at the order of µWatts / MHz（Dhrystone是测量处理器运算能力的最常见<a href="https://baike.baidu.com/item/%E5%9F%BA%E5%87%86%E7%A8%8B%E5%BA%8F/1200074">基准程序</a>）</p><ul><li><p>word size:32-bit Reduced Instruction Set Computing (RISC) processor</p><p><strong>每次取指令都是32位的，而多数指令则是16位的，因此一次可以取两条指令，存储器接口上的多余带宽也带来了更高的性能和更佳的能耗效率。</strong></p></li><li><p><strong>Harvard architecture</strong>(data 和 instruction分离，可以同时fetch)</p></li><li><p>Low Power Consumption（低功耗）</p></li><li><p>3-stage（fetch+Decode+excute） + branch speculation pipeline</p><p>三级流水线结构使得包括乘法在内的多数指令，可以在单周期内执行，</p></li><li><p>Supported Interrupts</p><p>• <strong>Non-maskable Interrupt</strong> (NMI) + 1 to 240 physical interrupts</p><p>• 8 to 256 interrupt priority level（中断和多个系统异常具有可编程的优先级）</p><p>支持最多240个中断输入、不可屏蔽中断(NMI)输入和多个系统异常。每个中断(NMI除外)都可以被单独使能或禁止。</p></li><li><p>Supports Sleep Modes</p><p>Up to 240 Wake-up Interrupts</p></li><li><p>Enhanced Instructions</p><p>• Hardware Divide (2-12 Cycles)</p><p>• Single-Cycle 16/32-bit MAC, Single-cycle dual 16-bit MAC</p></li><li><p>Memory Protection Unit (MPU)</p><p>Optional 8 region MPU with sub regions and background region</p></li></ul><h4 id="Cortex-M4-Block-Diagram"><a href="#Cortex-M4-Block-Diagram" class="headerlink" title="Cortex-M4 Block Diagram"></a><strong>Cortex-M4 Block Diagram</strong></h4><p>Processor pipeline stages</p><p>• <strong>Three-stage pipeline: fetch, decode, and execution</strong></p><p>• Some instructions may take multiple cycles to execute, in which case the pipeline will be stalled</p><p>• The pipeline will be flushed if a branch instruction is executed</p><p>• Up to two instructions can be fetched in one transfer (<strong>16-bit instructions</strong>)</p><p>word set是32bit所以一个时间可以fetch两条instruction，但是每次只能执行一次decode</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303090858053.png" alt="image-20230309085807011"></p><p>尽可能的填满cpu:提升使用效率</p><ul><li><p>Bus interconnect</p><p>Allows data transfer to take place on different buses simultaneously</p><p>Provides data transfer management,同时读内存和指令</p></li></ul><h2 id="数据与指令"><a href="#数据与指令" class="headerlink" title="数据与指令"></a>数据与指令</h2><p>寄存器里既可以存数据也可存指令</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303272327399.png" alt="image-20230327232708345"></p><h2 id="Registers"><a href="#Registers" class="headerlink" title="Registers"></a><strong>Registers</strong></h2><p>The internal registers are used to store and process <strong>temporary data</strong> within the processor core.</p><p><strong>All registers are inside the processor core, hence they can be accessed quickly.</strong></p><h3 id="Load-store-architecture"><a href="#Load-store-architecture" class="headerlink" title="Load-store architecture"></a><strong>Load-store architecture</strong></h3><p>对于ARM架构，若处理的是存储器中的数据，就需要将其从存储器加载到寄存器组中的寄存器里。在处理器内处理完后，若有必要，还要写回存储器，这种方式一般被称作“加载一存储架构”</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303272330781.png" alt="image-20230327233058730" style="zoom:67%;"><h3 id="Register-bank（寄存器组）"><a href="#Register-bank（寄存器组）" class="headerlink" title="Register bank（寄存器组）"></a><strong>Register bank</strong>（寄存器组）</h3><p>寄存器组中有16个寄存器，其中13个为32位通用目的寄存器，其他3个则有特殊用途</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303091515432.png" alt="image-20230309151559360"></p><h4 id="R0～R12"><a href="#R0～R12" class="headerlink" title="R0～R12"></a>R0～R12</h4><p><strong>general purpose registers</strong></p><p>Low registers (R0 – R7) can be accessed by any instruction</p><p>High registers (R8 – R12) sometimes cannot be accessed（<strong>用于32位指令和几个16位指令</strong>）</p><h4 id="R13-Stack-Pointer-SP"><a href="#R13-Stack-Pointer-SP" class="headerlink" title="R13: Stack Pointer (SP)"></a>R13: Stack Pointer (SP)</h4><p>栈指针</p><p>• Records the current address of the stack</p><p>两个栈指针：</p><p>主栈指针(<strong>MSP</strong>)为默认的栈指针，<strong>在复位后</strong>或处理器处于处理模式时，其会被处理器选择使用。另外一个栈指针名为进程栈指针(PSP),其只能用于线程模式</p><h4 id="R14-Link-Register-LR"><a href="#R14-Link-Register-LR" class="headerlink" title="R14: Link Register (LR)"></a>R14: Link Register (LR)</h4><p><strong>链接寄存器(LR)</strong></p><p>store the return address of a subroutine or a function call函数或子程序调用时返回地址的保存</p><p>The program counter (PC) will load the value from LR after a function is finished</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303091526029.png" alt="image-20230309152622869"></p><p>调用子程序时，先将pc存到LR中，如何让pc指向要调用的程序，最后将LR中地址覆盖回去当执行了函数或子程序调用后，LR的数值会自动更新</p><h4 id="R15-Program-Counter-PC"><a href="#R15-Program-Counter-PC" class="headerlink" title="R15: Program Counter (PC)"></a>R15: Program Counter (PC)</h4><p>R15为程序计数器(PC)</p><p> <strong>Records the address of the next instruction for execution</strong></p><p>每次操作自动加4(对于32位指令代码)，分支操作除外</p><h4 id="xPSR-combined-Program-Status-Register"><a href="#xPSR-combined-Program-Status-Register" class="headerlink" title="xPSR, combined Program Status Register"></a>xPSR, combined Program Status Register</h4><p>组合程序状态寄存器</p><p>组合程序状态寄存器包括以下三个状态寄存器Provides information about program execution and ALU flags：</p><p>应用 Application PSR(APSR)</p><p>执行 Interrupt PSR(EPSR)</p><p>中断 Execution PSR(IPSR)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303091604906.png" alt="image-20230309160446867"></p><p>这三个寄存器可以通过一个组合寄存器访问</p><h5 id="APSR"><a href="#APSR" class="headerlink" title="APSR"></a>APSR</h5><p>N: negative flag – set to one if the result from ALU is negative</p><p>Z: zero flag – set to one if the result from ALU is zero</p><p> C: carry flag – set to one if an unsigned overflow occurs</p><p>C：进位/借位标志。表示在加法/减法运算中，产生了进位/借位。</p><p>V: <strong>overflow flag</strong> – set to one if a signed overflow occurs</p><p>Q: DSP overflow and saturation flag – set to one if saturation has occurred in saturating arithmetic instructions, or overflow has occurred in certain multiply instructions</p><h5 id="IPSR"><a href="#IPSR" class="headerlink" title="IPSR"></a>IPSR</h5><p>• ISR number – current executing interrupt service routine number</p><p>包含了当前正在执行的中断服务程序编号</p><h5 id="EPSR"><a href="#EPSR" class="headerlink" title="EPSR"></a>EPSR</h5><p>• T: Thumb state – <strong>always one</strong> since Cortex-M4 only supports the Thumb state (more on processor states in the next module)</p><p>• IC/IT: Interrupt-Continuable Instruction (ICI) bit, IF-THEN instruction status bit</p><h4 id="Interrupt-mask-registers"><a href="#Interrupt-mask-registers" class="headerlink" title="Interrupt mask registers"></a>Interrupt mask registers</h4><p>• 1-bit PRIMASK </p><p>Set to one will block all the interrupts apart from non-maskable interrupt (NMI) and the hard fault exception</p><p>• 1-bit FAULTMASK </p><p>Set to one will block all the interrupts apart from NMI</p><p>• 1-bit BASEPRI </p><p>Set to a non zero value will block all interrupts of the same or lower level (only allow for interrupts with higher priorities)</p><h4 id="CONTROL-special-register"><a href="#CONTROL-special-register" class="headerlink" title="CONTROL: special register"></a>CONTROL: special register</h4><p>1-bit stack definition</p><p><strong>Set to one: use the process stack pointer (PSP)</strong></p><p><strong>Clear to zero: use the main stack pointer (MSP)</strong></p><h2 id="Cortex-M4-Memory-Map"><a href="#Cortex-M4-Memory-Map" class="headerlink" title="Cortex-M4 Memory Map"></a><strong>Cortex-M4 Memory Map</strong></h2><p>存储器映射</p><p>Cortex-M4 processor has a 4GB memory space（32Byte=$2^2*2^{30}$）, which is architecturally defined as a number of regions</p><p><strong>1word=4byte（32bits）内存地址以字节为单位</strong></p><p>arm中可以编址的最小单元是字存储单元，则该计算机称为按字寻址的计算机（4byte）每一个寄存器都是占用4个字节即32位</p><p>4GB的存储器空间被划分为多个区域，用于预定义的存储器和外设，以优化处理器设计的性能</p><p>• Each region is given for recommended usage</p><p>• Easy for software programmer to port between different devices</p><p>尽管存在默认内存映射，但用户可以灵活地定义内存映射的实际使用情况</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303100829376.png" alt="image-20230310082909300"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303100836935.png" alt="image-20230310083611870"></p><h5 id="Code-Region"><a href="#Code-Region" class="headerlink" title="Code Region"></a>Code Region</h5><p>​• Primarily used to <strong>store program code</strong> Can also be used as memory for <strong>constant data</strong> On-chip memory, such as on-chip FLASH </p><p><strong>保存代码和常数</strong></p><h5 id="SRAM-Region"><a href="#SRAM-Region" class="headerlink" title="SRAM Region"></a>SRAM Region</h5><p>store data, such as heaps and stacks</p><p>Can also be used for program code</p><p><strong>可读写数据和堆栈</strong></p><p>尽管它的名字是“SRAM”，但实际的设备可能是SRAM、SDRAM或其他类型</p><h5 id="Peripheral-Region外设"><a href="#Peripheral-Region外设" class="headerlink" title="Peripheral Region外设"></a>Peripheral Region外设</h5><p>主要通过高级高性能总线(AHB)或高级外设总线(APB)外设用于片上外设</p><h5 id="External-RAM-Region"><a href="#External-RAM-Region" class="headerlink" title="External RAM Region"></a>External RAM Region</h5><p>可以用来存储大数据块，或者是芯片外存储器中的内存缓存</p><p> slower than on-chip SRAM region</p><h5 id="External-Device-Region"><a href="#External-Device-Region" class="headerlink" title="External Device Region"></a>External Device Region</h5><p> is used to map to off-chip external devices such as SD card‘</p><h5 id="Internal-Private-Peripheral-Bus-PPB"><a href="#Internal-Private-Peripheral-Bus-PPB" class="headerlink" title="Internal Private Peripheral Bus (PPB)"></a>Internal Private Peripheral Bus (PPB)</h5><p>Used inside the processor core for internal control</p><p> Within PPB, a special range of memory is defined as System Control Space (SCS)</p><p>嵌套矢量中断控制器(NVIC)是SCS的一部分</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303100836557.png" alt="image-20230310083639498"></p><h3 id="Bit-band-Operations"><a href="#Bit-band-Operations" class="headerlink" title="Bit-band Operations"></a><strong>Bit-band Operations</strong></h3><p>位段操作</p><p>利用位段操作，一次加载/存储操作可以访问(读/写)一个位</p><p>To change a single bit of one 32-bit data </p><ul><li><p>Normal operation (read-modify-write procedure)</p><p>•读取32位数据的值</p><p>•修改单个位，同时保持其他位不变(掩码)</p><p>•将32位值写回相同的地址</p></li><li><p>Bit-band operation</p><p>直接将单个位(0或1)写入数据的“bit-band alias address”</p></li><li><p><strong>Bit-band alias address</strong></p><p>• Each bit-band alias address is mapped to a real data address</p><p>• When writing to the bit-band alias address, only a single bit of the data will be changed</p></li></ul><p>• For example, in order to set bit[3] in word data in address 0x20000000:</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">;Read-Modify-Write OperationLDR R1, =0x20000000 ;Setup addressLDR R0, [R1] ;ReadORR.W R0, #0x8 ;Modify bit（or：或上一个0...01000(0x8)改变位）//ORR 或STR R0, [R1] ;Write back<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">;Bit-band OperationLDR R1, =0x2200000C ;Setup alias（把要改的bit的地址存好）MOV R0, #1 ;Load data（改后的结果）STR R0, [R1] ;Write back（覆盖掉）把R0存到R1存的地址na'l<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Each bit of the 32-bit data is one-to-one mapped to the bit band alias address</strong></p><p>当使用位段别名地址时，每个位都可以通过对应的字对齐地址的最低位(LSB)单独访问</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303100900757.png" alt="image-20230310090020703"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303100923909.png" alt="在这里插入图片描述"></p><p>相邻32-bite data在地址上相差4byte，每个字段中的每个bit是没有对应地址的（一个字段只能占用四个地址(每个字节占用一个)如上图最后一行）所以想访问每个bit需要位带别名（每个bit被一个长为4byte地址表示(1bit数据地址用32bit表示)，arm<strong>规定相邻bits的位带别名相差4bits</strong>）</p><p>所以在SRAM region和Peripherals region</p><p><strong>都有1MB的数据对应32MB的Bit-band alias，另外有31MB的数据没有Bit-band alias?</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303100935960.png" alt="image-20230310093520915"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303100937244.png" alt="image-20230310093730197"></p><h4 id="Benefits-of-Bit-Band-Operations"><a href="#Benefits-of-Bit-Band-Operations" class="headerlink" title="Benefits of Bit-Band Operations"></a><strong>Benefits of Bit-Band Operations</strong></h4><p>• Faster bit operations</p><p>• Fewer instructions</p><p>• <strong>Atomic operation, avoid hazards</strong></p><p>如果在Read-Modify-Write操作期间触发并服务中断，并且中断服务例程修改相同的数据，则会发生数据冲突</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303101145551.png" alt="image-20230310114556433"></p><h3 id="Cortex-M4-Program-Image"><a href="#Cortex-M4-Program-Image" class="headerlink" title="Cortex-M4 Program Image"></a><strong>Cortex-M4 Program Image</strong></h3><p>code部分： </p><p>• Vector table – includes the starting addresses of <strong>exceptions</strong> (vectors) and the value of the main stack point (MSP);</p><p>• C start-up routine;</p><p>• Program code – application code and data;</p><p>• C library code – program codes for C library functions.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303101421055.png" alt="image-20230310142102986"></p><h4 id="Reset-Behaviour"><a href="#Reset-Behaviour" class="headerlink" title="Reset Behaviour"></a><strong>Reset Behaviour</strong></h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303101428179.png" alt="image-20230310142815128"></p><p>After reset, the processor:</p><ul><li><p>reads the initial MSP（主栈指针，此时为0x00000000） value to set up the stack</p></li><li><p>Then reads the reset vector（跳转到其它程序）</p></li><li><p>分支到程序执行地址的开始(复位处理程序);</p></li><li><p>Subsequently executes program instructions</p></li></ul><h4 id="Cortex-M4-Endianness字节顺序"><a href="#Cortex-M4-Endianness字节顺序" class="headerlink" title="Cortex-M4 Endianness字节顺序"></a><strong>Cortex-M4 Endianness</strong>字节顺序</h4><p>Endian refers to the order of bytes stored in memory</p><p>• Little endian: lowest byte of a word-size data is stored in bit 0 to bit 7 低对低，高对高</p><p>1个字节是8个比特是两个十六进制数</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303272316105.png" alt="image-20230327231629040"></p><p>这个两字节的数存放在0x1002（低位字节的地址）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303272317646.png" alt="image-20230327231722577"></p><p>这个四字节的数存放在0x100（最低字节的地址为这个数的地址）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303272322929.png" alt="image-20230327232200861" style="zoom:50%;"><p>• Big endian: lowest byte of a word-size data is stored in bit 24 to bit 31</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303101524911.png" alt="image-20230310152458858"></p><p><strong>Cortex-M4 supports both little endian (default) and big endian.</strong></p><h2 id="ARM-Cortex-M4-Processor-Instruction-Set"><a href="#ARM-Cortex-M4-Processor-Instruction-Set" class="headerlink" title="ARM Cortex-M4 Processor Instruction Set"></a><strong>ARM Cortex-M4 Processor Instruction Set</strong></h2><h3 id="Mix-of-ARM-and-Thumb-1-Instruction-sets"><a href="#Mix-of-ARM-and-Thumb-1-Instruction-sets" class="headerlink" title="Mix of ARM and Thumb-1 Instruction sets"></a>Mix of ARM and Thumb-1 Instruction sets</h3><p>Benefit from both 32-bit ARM (<strong>high performance</strong>) and 16-bit Thumb-1 (<strong>high code density</strong>) </p><p>A multiplexer is used to switch between two states: ARM state (32-bit) and Thumb state (16-bit)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303101536311.png" alt="image-20230310153623263"></p><p>thumb要先映射给arm</p><h3 id="Thumb-2-instruction-set"><a href="#Thumb-2-instruction-set" class="headerlink" title="Thumb-2 instruction set"></a>Thumb-2 instruction set</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303101538702.png" alt="image-20230310153840654"></p><p>不用选择器</p><h3 id="M4-Instructions"><a href="#M4-Instructions" class="headerlink" title="M4 Instructions"></a><strong>M4 Instructions</strong></h3><p>Cortex-M4 processor Supports 32-bit Thumb-2 instructions</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303101540540.png"></p><p>M4能干M3的事</p><h2 id="The-Assembly-Language-Syntax"><a href="#The-Assembly-Language-Syntax" class="headerlink" title="The Assembly Language Syntax"></a><strong>The Assembly Language Syntax</strong></h2><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">labelmnemonic operand1, operand2, … ; Comments<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>label</strong>:optional,reference to an address location（地址位置）</p><p>label后为mnemonic(助记符),也就是指令的名称，其后跟着的是多个操作数</p><p><strong>operand1</strong>: 目的地</p><p><strong>operand2</strong>：源</p><p>目的在前源在后</p><ul><li><p>对于在ARM汇编器中编写的数据处理指令，第一个操作数为操作的目的。</p></li><li><p>对于存储器读指令(多加载指令除外),第一个操作数为数据被加载进去的寄存器。</p></li><li><p>对于存储器写指令(多存储指令除外),第一个操作数为保存待写人存储器的数据的寄存器。</p></li></ul><p>mnemonic后面有可能有不同类型的operand，This can result in different instruction encodings</p><p>指令中操作数的个数取决于指令的种类，而操作数的语法也可能会各不相同。</p><p>Immediate data前缀**#**、</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303272308523.png" alt="image-20230327230846454"></p><h4 id="Immediate-data（立即数）"><a href="#Immediate-data（立即数）" class="headerlink" title="Immediate data（立即数）"></a>Immediate data（立即数）</h4><p>(prefix with #): a simple way to get data is to make the data part of the instruction</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOVS R0, #0x12 ; Set R0 = 0x12 (hexadecimal)MOVS R1, #'A' ; Set R1 = ASCII char A<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Suffix"><a href="#Suffix" class="headerlink" title="Suffix"></a><strong>Suffix</strong></h4><p>对于ARM处理器的汇编器，有些指令后会跟着后缀（加在mnemonic后面）。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303101552273.png" alt="image-20230310155250222"></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOVS R0, R1 ; move R1 into R0, update APSRMOV R0, R1 ; move R1 into R0, not update APSR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="Moving-data-within-the-processor"><a href="#Moving-data-within-the-processor" class="headerlink" title="Moving data within the processor"></a><strong>Moving data within the processor</strong></h4><p>微处理器中最基本的操作是在处理器内部移动数据</p><p>• Move data from one register to another </p><p>• Move an immediate constant into a register </p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; Copy value from R0 to R4MOV R4, R0 ; Set R3 value to 0x34 and update APSRMOVS R3, #0x34<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303101604460.png" alt="image-20230310160440411"></p><p><strong>Data Size in Memory Access Instructions</strong></p><p>• The default data size for memory access is 32 bits.</p><p>• If you wish to transfer 8 bits (1 byte), add suffix B.</p><p>• If you wish to transfer 16 bits (2 bytes), add suffix <strong>H</strong>.（half word）</p><p>• <strong>If the source data is considered signed and sign extension is needed, suffix by S (for loading)</strong> 只有LDR中的S是sign意思</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">LDRSB R0, [R1, #3];将内存单元R1+3中的有符号字节数据读取到R0中，R0中高24位设置成该字节数据的符号位LDRSB R7, [R6, #-1]!;将内存单元R6-1中的有符号字节数据读取到R7中，R7中高24位设置成该字节数据的符号位，R6 = R6 - 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>LDR指令主要用于储存加载数据到寄存器Rx中，也可以将一个立即数加载到寄存器Rx中，LDR加载<strong>立即数</strong>要使用<strong>“=”</strong>。而不是“#”</p><p>LDR从存储器读取数据，STR是将数据写入存储器中。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; load/store 32 bits to/from R1 from/to memory addr R0LDR R1, [R0] ;读取地址R0中的数据到R1寄存器中STR R1, [R0] ;将R1中的值写入到R0中所保存的地址中; load/store 8 bits, unsigned (padded with 0's)LDRB R1, [R0] STRB R1, [R0]; load/store 16 bits, signed (signed extended)LDRSH R1, [R0]STRH R1, [R0]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>括号的重点是访问内存。可以将其视为C中的*运算符（访问地址的值）</p><h4 id="Arithmetic-Operations"><a href="#Arithmetic-Operations" class="headerlink" title="Arithmetic Operations"></a><strong>Arithmetic Operations</strong></h4><p>微控制器的应用通常涉及对数据进行数学计算，以改变程序流程和修改程序动作。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; R0 = R0 + R1ADD R0, R0, R1; R0 = R0 + 0x12 with APSR (flags) updateADDS R0, R0, #0x12 ; R0 = R1 + R2 + carry ADC R0, R1, R2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在减法中，进位作为借位，从SBC中的差值中减去。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; R1 = R3 - R2SUB R1, R3, R2; R0 = R1 – 0x26 – not(carry)SBC R0, R1, #0x26<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; R0 = R1 * R2MUL R0, R1, R2; R0 = R1 / R2 (unsigned or signed)UDIV R0, R1, R2SDIV R0, R1, R2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>x = 2x – y + 3</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; x in R0; y in R1LDR R0, =0x0A ; test value xLDR R1, =0x05 ; test value yADDS R0, R0, R0 ; 2xSUBS R0, R0, R1 ; 2x - yADDS R0, R0, #3 ; 2x - y + 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03-C as Implemented in Assembly Language</title>
      <link href="//post/03-C%20as%20Implemented%20in%20Assembly%20Language.html"/>
      <url>//post/03-C%20as%20Implemented%20in%20Assembly%20Language.html</url>
      
        <content type="html"><![CDATA[<h1 id="C-as-Implemented-in-Assembly-Language"><a href="#C-as-Implemented-in-Assembly-Language" class="headerlink" title="C as Implemented in Assembly Language"></a>C as Implemented in Assembly Language</h1><p>There are no MCUs which execute C, only machine code.</p><p>微处理器不能直接运行C</p><p>So we compile the C to assembly code, a human- readable representation of machine code</p><p>当我们编译C程序时，编译器和汇编器需要知道目标(微处理器/体系结构)，以便生成适合目标的指令和机器代码。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303270816177.png" alt="image-20230327081634106"></p><p>某一区域的大小：末位-初始位+1(旁边标的是byte)</p><h2 id="Addressing-Modes-in-ARM"><a href="#Addressing-Modes-in-ARM" class="headerlink" title="Addressing Modes in ARM"></a>Addressing Modes in ARM</h2><p>寻址模式</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">LDR R0, [R1]  ；寄存器的间接寻址LDRB R0, [R1, #0x3]//读R1+3的地址位置的值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303281740653.png" alt="image-20230328174026580"></p><h3 id="Immediate-Offset-pre-index"><a href="#Immediate-Offset-pre-index" class="headerlink" title="Immediate Offset (pre-index)"></a>Immediate Offset (pre-index)</h3><p>The memory address of the data transfer is the sum of a register value and an immediate constant value (offset). </p><pre class="line-numbers language-none"><code class="language-none">LDRB R0, [R1, #0x3]//读R1+3的地址位置的值<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Read a byte value from address R1+0x3, and store the read data in R0.</p><ul><li>如果末尾加！说明支持数据写回</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303281803771.png" alt="image-20230328180344733"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303281748892.jpg" alt="6ebf855e896986956777b84b8fa6cad"></p><p>​先更新R1再更新R0</p><p>举例：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303270824396.png" alt="image-20230327082402359"></p><p>R0中为0x000000AB</p><blockquote><p>The offset value can be positive or negative. </p></blockquote><h3 id="Register-Offset-pre-index"><a href="#Register-Offset-pre-index" class="headerlink" title="Register Offset (pre-index)"></a>Register Offset (pre-index)</h3><p>另一种有用的寻址模式为寄存器偏移，用于所处理的数据数组的地址为基地址和从索引值计算出的偏移得到的情况。为了进一步提高地址计算的效率，在加到基地址寄存器前，索引值可以进行0～3位的移位。例</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">LDR R3, [R0, R2, LSL #2] ;将存储器[RO+(R2&lt;&lt;2)]读入R3STR R5,[R0,R7] ;将R5写入存储器[RO+R7]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Read memory [R0 + (R2 &lt;&lt; 2)] into R3.</p><p>0010(2)&gt;&gt;1000(8)　<strong>快速算移位： $2*2^2$</strong></p><ul><li>举例：</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303270834843.png" alt="image-20230327083446810"></p><p>R3中为0xABCD1234</p><p>This address mode can be used with different sizes (B, H) and signs (S)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112141095.png" alt="image-20230411214144008" style="zoom:50%;"><h3 id="Register-Offset-Post-index"><a href="#Register-Offset-Post-index" class="headerlink" title="Register Offset (Post-index)"></a>Register Offset (Post-index)</h3><p>When the offset is provided as post-index (i.e. outside [ ]), then it is not used in memory access, but used to update the address register. 它会在数据传输<strong>结束后</strong>更新地址寄存器。</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">LDR R0, [R1], #4 ;读取存储器[Rl],然后R1被更新为R1+偏移<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Read memory [R1] into R0 then update R1 to R1 + 4.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303270839952.png" alt="image-20230327083919921"></p><p>R0:0xABCD1234 然后 R1存的地址加4</p><h3 id="PC-related-addressing-Literal"><a href="#PC-related-addressing-Literal" class="headerlink" title="PC-related addressing (Literal)"></a>PC-related addressing (Literal)</h3><p>存储器访问可以产生相对于当前PC的地址值和偏移值</p><p>它常用于将立即数加载到寄存器中，也可被称作文本池访问（ literal pool accesses）</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">LDR R0, =0x12345678 ; Set R0 to 0x12345678<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>pseudo-instruction</strong> ： 由于是pseudo-instruction所以不用# 用=</p><p>一个指令最大32bit所以没法包含一个32bit的数据，所以肯定是pseudo-instruction</p><p>实际不是一个指令，转化为下面</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">LDR R0, [PC, #offset] //Register Offset...DCD 0x12345678<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> DCD （ DCDU ） 用于分配一片连续的字存储单元并用指定的数据初始化。</p><p>The LDR instruction reads the memory at [PC + offset] and stores the value into R0. The <strong>assembler will calculate the offset</strong> for you so you don’t have to worry about it. 自动计算的</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303270904430.png" alt="image-20230327090457389"></p><p><strong>这里存在code区域因为PC是在code区域</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303270908294.png" alt="image-20230327090851249"></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">LDR R3, =MY_NUMBER ; Get the mem loc of MY_NUMBER //MY_NUMBER 是地址，point to 0x2000ABCCLDR R4, [R3] ; Read the value 0x2000ABCC into R4LDR R0, =HELLO_TEXT ; Get the starting addr of HELLO_TEXT （H的地址）LDRB R2, [R0] Ｒ２中为H…ALIGN 4 ; align the data at word (4 bytes) boundaryMY_NUMBER DCD 0x2000ABCCHELLO_TEXT DCB “Hello\n”, 0 ; Null terminated string<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>• Insert data inside programs</p><p>​<strong>• DCD: insert a word-size data</strong> </p><p>​<strong>• DCB: insert a byte-size data</strong></p><p>DCD用于插入字大小的数据，而DCB则用于将字节大小的数据插入到程序中</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112150708.png" alt="image-20230411215024621"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112150719.png" alt="image-20230411215037644"></p><p>​• ALIGN（伪指令）: </p><p>​Used before inserting a word-size data</p><p>​Uses a number to determine the alignment size 对齐大小</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112150556.png" alt="image-20230411215051483"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112151292.png" alt="image-20230411215121239"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112151775.png" alt="image-20230411215132720"></p><h2 id="Branching"><a href="#Branching" class="headerlink" title="Branching"></a>Branching</h2><p>ARM Thumb-2 Instruction： <strong>two bytes</strong>(半字)</p><p><strong>Most cases: 2 bytes (half word); otherwise: 4 bytes (a word)</strong></p><p>带常数的一般为4B</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303281911111.png" alt="image-20230328191148533" style="zoom:67%;"><p>The <em>first halfword</em> (hw1) determines the instruction length and functionality. If the processor decodes the instruction as 32-bit long, then the processor fetches the <em>second halfword</em> (hw2).</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303282008689.png" alt="image-20230328200831616"></p><p>First instruction MOV requires 4 bytes to encode the immediate data 10 (0x0A) within</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303282011989.png" alt="image-20230328201103953"></p><h3 id="Program-Counter-and-Fetch"><a href="#Program-Counter-and-Fetch" class="headerlink" title="Program Counter and Fetch"></a>Program Counter and Fetch</h3><p>value of PC is incremented by <strong>2</strong> whenever <strong>a half word has been fetched</strong> during execution.</p><p>每fetch 一个半字，PC就加2</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303282013938.png" alt="image-20230328201353894"></p><h4 id="Offset-and-Branch-Instruction"><a href="#Offset-and-Branch-Instruction" class="headerlink" title="Offset and Branch Instruction"></a>Offset and Branch Instruction</h4><p>通过改变PC的值，我们branch(跳转)到另一条指令</p><p>The difference (in bytes) between the <strong>new address in PC and the current address</strong> is called the <strong>offset</strong>.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303282015785.png" alt="image-20230328201534751" style="zoom:53%;"><h5 id="Branch-Instructions"><a href="#Branch-Instructions" class="headerlink" title="Branch Instructions"></a>Branch Instructions</h5><p>类似goto</p><p>分支指令</p><p>Programmer can choose the appropriate suffix for conditional branches.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303282027255.png" alt="image-20230328202734216"></p><p>B无条件跳转</p><p>B+各种Condition Code：有条件跳转</p><p><a href="https://blog.csdn.net/mmphhh/article/details/100150806">(26条消息) 汇编语言：ARM汇编中的跳转/分支指令【ARM汇编系列–指令篇01】_Lytain2022的博客-CSDN博客</a></p><p>在函数中如果调用子函数需要用BL（更新LR）从子函数返回主函数需要用BX（寄存器中地址）</p><h5 id="Condition-Code-Suffixes"><a href="#Condition-Code-Suffixes" class="headerlink" title="Condition Code Suffixes"></a>Condition Code Suffixes</h5><p>当处理器工作在ARM状态时，几乎所有的指令均根据CPSR中条件码的状态和指令的条件域有条件的执行。当指令的执行条件满足时，指令被执行，否则指令被忽略。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303282031941.png" alt="image-20230328203123902"></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">CMP R0, R1 ; compare R0 and R1, update APSRCMP R2, #100 ; compare R2 and 100, update APSR<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>CMP是在做减法</p><h2 id="Control-Flow"><a href="#Control-Flow" class="headerlink" title="Control Flow"></a>Control Flow</h2><p><a href="https://zhuanlan.zhihu.com/p/109540164">ARM汇编语言入门（四） - 知乎 (zhihu.com)</a></p><h3 id="While-Loop"><a href="#While-Loop" class="headerlink" title="While Loop"></a>While Loop</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304112046400.png" alt="image-20230411204611329" style="zoom:50%;"><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; ARM asm{COND_SETUP …}COND{COND_EVAL …}B&lt;cond&gt; EXIT{INSTS1 …}{INSTS2 …}B CONDEXIT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c">x <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// x@0x20000000, n@0x20000004</span><span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> x <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>x<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">LDR R2, =0x20000004LDR R0, [R2] ; R0 = nSUBS R1, R0, #1 ; R1 = xWHILE_BEGIN UDIV R2, R0, R1 ; R2 = n / xMUL R3, R2, R1 ; R3 = R2 * xCMP R0, R3 ; n == (n / x) * xBEQ WHILE_ENDSUBS R1, R1, #1 ; x--B WHILE_BEGIN ; loop backWHILE_ENDLDR R2, =0x20000000 ; write back to memSTR R1, [R2]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DoWhile-Loop"><a href="#DoWhile-Loop" class="headerlink" title="DoWhile Loop"></a>DoWhile Loop</h3><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">{COND_SETUP …}COND{INSTS1 …}{INSTS2 …}{COND_EVAL …}B&lt;cond&gt; COND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="For"><a href="#For" class="headerlink" title="For"></a>For</h3><pre class="line-numbers language-none"><code class="language-none">for(A;B;C){stat 1;stat 2;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">{COND_SETUP …} ;A{COND_EVAL …}  ;BCONDB&lt;cond&gt; Exit{INSTS1 …}{INSTS2 …}{COND_UPDATE C …}  ;比while多这一行B&lt;cond&gt; CONDExit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="If-else"><a href="#If-else" class="headerlink" title="If-else"></a>If-else</h3><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">IFBEGIN{COND_SETUP …}{COND_EVAL …}IFPARTB&lt;cond&gt; ELSEPART{INSTS1 …}B IFENDELSEPART {INSTS2 …}IFEND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303290908155.png" alt="image-20230329090819053"></p><p>example</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// x, y, z @ 0x20000000, 04, 08 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&gt;=</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>z <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>z <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">LDR R3, =0x20000000LDR R0, [R3], #4 ;R3=0x20000004 R0=XLDR R1, [R3], #4 ;R3=0x20000008 R1=YIFBEGINCMP R0, R1BLT ELSEPARTIFPARTSTR R0, [R3]B IFENDELSEPARTSTR R1, [R3]IFEND<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Case"><a href="#Case" class="headerlink" title="Case"></a>Case</h3><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">; ARM asmSWITCH_BEGIN {COND_SETUP …}{COND_EVAL …}CHOICE1B&lt;cond&gt; CHOICE2{INST1 …}B SWITCH_ENDCHOICE2B&lt;cond&gt; CHOICE3{INST2 …}B SWITCH_END…SWITCH_END …<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303290915007.png" alt="image-20230329091541924"></p><p>Case结构从许多语句中选择一个，这实际上是一个迭代的if-else结构7</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><ul><li>for (i = 0; i &lt; 10; i++){ x += i; }</li></ul><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOV R0,#0   ;xMOV R1,#0;iFOR_BEGINCMP R1,#10BGE EXITadd R0,R0,R1add R1,R1,#1;   update conditionB FOR_BEGINEXIT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>while (x &lt; 10) {x = x + 1;}</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOV R0,#0 ;xWhile_Begincmp R0,#10BGE EXITadd R0,#1B While_BeginEXIT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>do {x += 2;} while (x &lt; 20);</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">MOV R0,#0 ;xDOWhile_Beginadd R0,R0,#2CMP R0,#20BLT DOWhile_Begin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="Stack-and-Functions"><a href="#Stack-and-Functions" class="headerlink" title="Stack and Functions"></a>Stack and Functions</h2><h3 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h3><p>Cortex-M processors use a stack memory model called <strong>full descending （满降）stack</strong>:</p><p>降栈：随着数据的入栈，SP指针从高地址-&gt;低地址移动（（高地址）为栈底）</p><p>满栈：当堆栈指针总是指向最后压入堆栈的数据</p><p>When started, SP is set to the end of stack memory space.</p><p><strong>PUSH operation: SP = SP – 4, then store the value @SP</strong></p><p><strong>POP operation: read the value @SP then SP = SP + 4</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303300817253.png" alt="image-20230330081748166"></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">PUSH {R0, R4-R7} ; Push r0, r4, r5, r6, r7POP {R2-R3, R5} ; Pop to r2, r3, r5;只是把r0, r4, r5, r6, r7的值存入stack，PoP是把之前存的值对应存到{}内的寄存器里<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The list of registers (reglist) is specified with braces ({ }) in UAL.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303300821480.png" alt="image-20230330082106410"></p><p>应该是R3先入栈，R0后入，入栈SP-4</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303300822941.png" alt="image-20230330082259872"></p><p>R0先出，R3后出，出栈SP+4</p><p><strong>The lower numbered the register is, the lower memory address in the stack.</strong></p><p>大寄存器存大地址，小寄存器存小地址</p><p>大寄存器先入，小寄存器后入</p><p>先出到小寄存器，后出到大寄存器</p><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h3><p>saves code memory by reusing the functions. </p><h4 id="LR-Storing-the-Return-Address"><a href="#LR-Storing-the-Return-Address" class="headerlink" title="LR: Storing the Return Address"></a>LR: Storing the Return Address</h4><h5 id="调用时（BL-label-）"><a href="#调用时（BL-label-）" class="headerlink" title="调用时（BL label ）"></a>调用时（<strong>BL label</strong> ）</h5><p><code>BL label</code> instruction: 存执行完function后要跳回(the next instruction will be execute)执行的地址。</p><p>Mechanism:</p><ol><li>将PC中的address复制到LR中，并 <code>set bit[0] = 1</code> （用于表示Thumb模式）</li></ol><p>例子:</p><blockquote><p>执行190后，将PC中的地址194存入LR中，并设置 bit[0] = 1，存入LR中（195）。随后PC设为100，将从func1的头开始执行instruction</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303300849304.png" alt="image-20220320090858803"></p><h5 id="返回时（BX-LR）"><a href="#返回时（BX-LR）" class="headerlink" title="返回时（BX LR）"></a>返回时（<strong>BX LR</strong>）</h5><p><code>BX LR</code> instruction: 用于执行完function后将LR存着的地址(执行完function后要接着执行instruction的address)存回PC中。</p><p>Mechanism：</p><p>将LR中的address复制到PC中，并 <code>set bit[0] = 0</code> </p><p>例子:<strong>BX LR</strong></p><blockquote><p>function执行完后，于12C调用<code>BX LR</code>，跳回caller的下一条位置。在执行12C时，已经Fetch了12E进PC中（12E这条不会执行），而12C执行<code>BX LR</code>的结果为将LR中的195先 <code>bit[0] - 1</code>变为194后，再将其存入PC中。从而实现执行完function后下一条接着caller执行。</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303300852606.png" alt="image-20220320091849213"></p><h4 id="AAPCS-（ARM-Architecture-Procedure-Call-Standard）"><a href="#AAPCS-（ARM-Architecture-Procedure-Call-Standard）" class="headerlink" title="AAPCS （ARM Architecture Procedure Call Standard）"></a>AAPCS （ARM Architecture Procedure Call Standard）</h4><p>Basic rules：M架构过程调用标准</p><p>R0 - R3: <strong>scratch registers</strong> are not expected to be preserved upon returning from a called subroutine r0 - r3</p><p>R0～R3、R12、LR以及PSR被称作“调用者保存寄存器”,若在函数调用后还需要使用这些寄存器的数值，在进行调用前，调用子程序的程序代码需要将这些寄存器的内容保存到内存中(如栈)。函数调用后不需要使用的寄存器数值则不用保存。</p><p>R4 – R8, R10-R11: <strong>Preserved (“variable”) registers</strong> are expected to have their original values upon returning from a called subroutine</p><p>函数需要使用R4～R11,就应该将这些寄存器保存到栈空间中，并且在函数结束前将它们恢复。R4～R11为“被调用者保存寄存器”,被调用的子程序或函数需要确保这些寄存器在函数结束时不会发生变化(与进入函数时的数值一样)。这些寄存器的数值可能会在函数执行过程中变化，不过需要在函数退出前将它们恢复为初始值。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311146512.png" alt="image-20230331114645442"></p><h4 id="Return-Values"><a href="#Return-Values" class="headerlink" title="Return Values"></a>Return Values</h4><p><strong>一般来说，函数调用将R0～R3作为输入参数，RO则用作返回结果。</strong>若返回值为64位，R1也会用于返回结果</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311149474.png" alt="image-20230331114925429"></p><h4 id="Function-Arguments"><a href="#Function-Arguments" class="headerlink" title="Function Arguments"></a>Function Arguments</h4><p>如何调用函数：With branch link (BL) or branch link and exchange instruction (BLX)</p><p>传参数：寄存器（R0-R4）最快，但是有数量限制，用stack</p><p>• Process arguments in order they appear in source code</p><p>后面的参数的寄存器必须比前面的编号大</p><p>• Round size up to be a multiple of 4 bytes 必须是4B的倍数</p><p>• Copy arguments into core registers (r0-r3), aligning doubles to even registers 8B要存两个寄存器</p><p>• Copy remaining arguments onto stack, aligning doubles to even addresses</p><p>example：</p><pre class="line-numbers language-none"><code class="language-none">func(A(4B),B(8B),C(4B),D(4B))<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303300911750.png" alt="image-20230330091113666"></p><p>arg1在r0里，arg2在r1里</p><p>因为要进入func2 , r1要保存4,所以得把arg2从r1取出来保存到r4</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303300917796.png" alt="image-20230330091720727"></p><p>这段代码有两个问题：LR在FUNC2（）时改变在func1()结束时回不去main()</p><p>R4是reserved register所以要在函数结束时恢复原来的值。</p><h5 id="改后的func1"><a href="#改后的func1" class="headerlink" title="改后的func1()"></a>改后的func1()</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311612143.png" alt="image-20230331161229086"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311635270.png" alt="image-20230331163550214"></p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">bubble_asm:    push {lr}                  @ 保存 lr 寄存器    sub sp, sp, #12            @ 为局部变量分配空间    str r0, [sp, #8]           @ 将参数 n 存入内存    str r1, [sp, #4]           @ 将参数 a 存入内存    mov r2, #0                 @ 初始化循环计数器 jouter_loop:    ldr r3, [sp, #8]           @ 加载 n    subs r3, r3, #1            @ i = n - 1    cmp r3, #0    ble end_outer_loop         @ 跳出循环    mov r0, r3                 @ 将 i 存入 r0inner_loop:    mov r1, r2                 @ 将 j 存入 r1    add r4, r2, #1             @ r4 = j + 1    lsl r5, r4, #2             @ r5 = 4 * (j + 1)    ldr r6, [sp, #4]           @ 加载数组 a 的地址    add r6, r6, r1, lsl #2     @ a + 4 * j    ldr r7, [sp, #4]           @ 加载数组 a 的地址    add r7, r7, r5, lsl #2     @ a + 4 * (j + 1)    ldr r8, [r6]               @ 加载 a[j]    ldr r9, [r7]               @ 加载 a[j+1]    cmp r8, r9    ble next_iteration    str r9, [r6]               @ 交换 a[j] 和 a[j+1]    str r8, [r7]next_iteration:    add r1, r1, #1             @ j = j + 1    cmp r1, r0    bne inner_loop             @ 继续内循环    add r2, r2, #1             @ i = i - 1    b outer_loop               @ 继续外循环end_outer_loop:    add sp, sp, #12            @ 释放局部变量空间    pop {pc}                   @ 恢复 lr 寄存器并返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始都要PUSH｛LR｝结束都要POP｛PC｝</p><h2 id="Memory-requirements-and-Accessing-data-in-memories"><a href="#Memory-requirements-and-Accessing-data-in-memories" class="headerlink" title="Memory requirements and Accessing data in memories"></a>Memory requirements and Accessing data in memories</h2><h3 id="What-Memory-Does-a-Program-Need"><a href="#What-Memory-Does-a-Program-Need" class="headerlink" title="What Memory Does a Program Need"></a>What Memory Does a Program Need</h3><p>Five possible types</p><p>• Code</p><p>• Read-only static data</p><p>• Writable static data</p><p>​• Initialized</p><p>​• Zero-initialized</p><p>​• Uninitialized</p><p>• Heap</p><p>• Stack</p><h3 id="分类标准"><a href="#分类标准" class="headerlink" title="分类标准"></a>分类标准</h3><h4 id="Can-the-information-change"><a href="#Can-the-information-change" class="headerlink" title="Can the information change?"></a>Can the information change?</h4><ul><li>No? Put it in read- only, non-volatile memory</li></ul><p>​• Instructions</p><p>​• Constant strings</p><p>​• Constant operands</p><p>​• Initialisation values</p><ul><li>Yes? Put it in read/write memory</li></ul><p>​• Variables</p><p>​• Intermediate computations</p><p>​• Return address</p><h4 id="How-long-does-the-data-need-to-exist"><a href="#How-long-does-the-data-need-to-exist" class="headerlink" title="How long does the data need to exist?"></a>How long does the data need to exist?</h4><ul><li><p>Statically allocated （静态分配）</p><p>• <strong>Exists from program start to end</strong></p><p>• Each variable has its own fixed location</p><p>• Space is not reused</p></li><li><p>Automatically allocated</p><p>• Exists from function start to end</p><p>• Space can be reused</p></li><li><p>Dynamically allocated</p><p>• Exists from explicit allocation to explicit deallocation（从显式分配到显式回收都存在）</p><p>• Space can be reused</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311713676.png" alt="image-20220325215721039"></p><p><strong>const</strong>: 不能被程序重写，放入<strong>ROM</strong></p><p><strong>volatile</strong>: 只能被外部程序重写，如<strong>Interrupt Service Rouine, hardware-controlled registers</strong></p><p><strong>static</strong>: 可以被function间相互调用</p><h3 id="C-Run-Time-Start-Up-Module"><a href="#C-Run-Time-Start-Up-Module" class="headerlink" title="C Run-Time Start-Up Module"></a>C Run-Time Start-Up Module</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311718976.png" alt="image-20230331171857899"></p><p><strong>RAM是运行时分配的，ROM是固化的</strong></p><p><strong>•</strong> Initialize hardware</p><p>​• Peripherals, etc.</p><p>​• Set up stack pointer</p><p><strong>•</strong> Initialize C or C++ run-time environment</p><p>​• Set up heap memory</p><p>​• Initialize variables</p><h3 id="Activation-Record"><a href="#Activation-Record" class="headerlink" title="Activation Record"></a>Activation Record</h3><blockquote><p>用栈来保存各个活动的数据</p></blockquote><p>activation record 包含了：</p><ul><li>return address</li><li>arguments</li><li>automatic variables (local variables)</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311925618.png" alt="image-20220325214539403"></p><p><strong>调用一个function会在栈中创建一条新的 activation record</strong></p><p><strong>function return了会在栈中删除一条activation record</strong></p><h3 id="Automatic-Variables-Stored-on-Stack"><a href="#Automatic-Variables-Stored-on-Stack" class="headerlink" title="Automatic Variables Stored on Stack"></a>Automatic Variables Stored on Stack</h3><p>Variables in C are <strong>implicitly automatic</strong>.</p><p><strong>Automatic variables are stored in a function’s activation record（栈帧形式）</strong> (unless optimised and promoted to register)</p><p><strong>Activation records are located on the stack.</strong></p><ul><li>Calling a function creates an activation record, allocating space on stack.</li><li>Returning from a function deletes the activation record, freeing up space on stack.</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311725895.png" alt="image-20220325221438937"></p><p>Program must <strong>allocate space on stack for variables</strong></p><p>Stack addressing uses an offset from the stack pointer:</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">LRD Rm, [SP, #offset]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Data on the stack are always word aligned（对齐，比如存0x01,必须占满四个字节：内存中其实是01 00 00 00）</p><p>• In the instruction encoding, one byte used for offset, which is multiplied by four</p><p>• Possible offsets: 0, 4, 8, …, 1020 (255 x 4)</p><p>• Maximum range addressable this way is 1024 bytes</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311905183.png" alt="image-20230331190527135"></p><p>如何访问automate vairable:</p><ol><li>当函数被调用时，堆栈指针（SP）通常会调整，以为函数的自动变量分配空间。</li><li>从堆栈指针到变量c的偏移量是根据变量在堆栈帧中的大小和顺序确定的。</li><li>要访问变量c的值，汇编代码可以使用从堆栈指针（SP）计算得出的适当偏移量，并将其加载到寄存器中进行进一步处理。</li><li>对变量c的任何修改或比较可以使用保存其值的寄存器进行。</li></ol><h4 id="Array-Access"><a href="#Array-Access" class="headerlink" title="Array Access"></a>Array Access</h4><p>not be covered in final exam</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311917855.png" alt="image-20230331191728789"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311918102.png" alt="image-20230331191836047"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311918884.png" alt="image-20230331191821831"> </p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04-Intertupt</title>
      <link href="//post/04-Intertupt.html"/>
      <url>//post/04-Intertupt.html</url>
      
        <content type="html"><![CDATA[<h1 id="Exceptions-and-Interrupts"><a href="#Exceptions-and-Interrupts" class="headerlink" title="Exceptions and Interrupts"></a>Exceptions and Interrupts</h1><h2 id="Interrupt-or-Exception-Processing-Sequence"><a href="#Interrupt-or-Exception-Processing-Sequence" class="headerlink" title="Interrupt or Exception Processing Sequence"></a>Interrupt or Exception Processing Sequence</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311940365.png" alt="image-20230331194012310"></p><p>• Other code (background) is running.</p><p>• Interrupt trigger occurs.</p><p>• Processor does some hard-wired processing</p><p>• Processor executes the ISR (foreground), including the </p><p>return-from-interrupt instruction at the end.</p><p>• Processor resumes other code.</p><p><strong>中断服务程序（Interrupt Service Routine）</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303311941605.png" alt="image-20230331194158565"></p><p>• Hardware-triggered（硬件触发） asynchronous software routine</p><p>​• Triggered by hardware signal from peripheral or external device</p><p>​• Asynchronous - can happen <strong>anywhere in the program</strong> (unless interrupt is disabled)</p><p>​• Interrupt service routine runs in response to the interrupt</p><p>微控制器的基本原理</p><p>•提供高效的基于事件的处理，而不是轮询</p><p>•提供对事件的快速响应，无论程序状态，复杂性，位置</p><p>•允许许多多线程嵌入式系统在没有操作系统的情况下进行响应</p><h3 id="Entering-Exception-Handler"><a href="#Entering-Exception-Handler" class="headerlink" title="Entering Exception Handler"></a>Entering Exception Handler</h3><p>进入异常处理</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303312021182.png" alt="image-20230331202137142"></p><p>在异常处理开始前，MSP或PSP的数值会相应地被自动调整。PC也会被更新为异常处理的起始地址，而链接寄存器(LR)则会被更新为名为EXCRETURN的特殊值。该数值为32位，且高27位为1。低5位中有些部分用于保存异常流程的状态信息(如压栈时使用的哪个栈)。该数值用于异常返回。</p><p>一旦产生异常，微处理器</p><p>– 首先现场保护</p><p>• 将当前R0‐R3、R12、LR、PC、xPSR压入当前栈中</p><p>– 接着读取异常向量</p><p>• 根据异常的类型号n，计算出异常处理程序的入口地址（也称为异常向量）的存放偏移地址n*4，将该地址处的一个字读出。</p><p>– 将LR置为EXC_RETURN，将读取的异常向量值加载至PC。</p><h4 id="1-Finish-Current-Instruction"><a href="#1-Finish-Current-Instruction" class="headerlink" title="1. Finish Current Instruction"></a>1. Finish Current Instruction</h4><ul><li><p>Most instructions are short and finish quickly</p></li><li><p>Some instructions may take many cycles to execute</p></li><li><p>Load Multiple (LDM), Store Multiple (STM), Push, Pop, MULS (32 cycles for some CPU core implementations) 延迟中断响应</p></li><li><p>If one of these is executing when the interrupt is requested, the processor:</p><p>​• abandons the instruction</p><p>​• responds to the interrupt</p><p>​• executes the ISR</p><p>​• returns from interrupt</p><p>​• restarts the abandoned instruction</p></li></ul><h4 id="2-Push-Context-onto-Current-Stack"><a href="#2-Push-Context-onto-Current-Stack" class="headerlink" title="2. Push Context onto Current Stack"></a>2. Push Context onto Current Stack</h4><blockquote><p>使用 <code>sp - #offset</code> 的模式来执行，<strong>推入8个Regs</strong></p></blockquote><p><strong>可能使用两种SPs，Main (MSP), process (PSP)</strong></p><ul><li>具体用那种看<code>CONTROL</code> register的<code>bit 1</code>而定</li><li>Which is active depends on operating mode, CONTROL register bit 1（由CONTROL寄存器控制是MSP（0）还是PSP（1））</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303312036924.png" alt="image-20230331203602888"></p><p>大R先存大地址</p><p>进入ISR时SP指向R0</p><h4 id="3-Switch-to-Handler-x2F-Privileged-Mode"><a href="#3-Switch-to-Handler-x2F-Privileged-Mode" class="headerlink" title="3. Switch to Handler/Privileged Mode"></a>3. Switch to Handler/Privileged Mode</h4><p><strong>Handler mode always uses MSP</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303312052823.png" alt="image-20230331205238786"></p><p>Thread 模式主要适用于用户的程序代码，Handler 模式主要适用于异常处理代码以及内核代码。可以通过 IPSR 寄存器查看处理器所处的状态。</p><p>Cortex-M 系列处理器有两种模式</p><ul><li>Thread Mode</li><li>Handler Mode</li></ul><p>Cortex 系列处理器有两种访问级别</p><ul><li><p>Privileged</p></li><li><p>Unprivileged</p><h4 id="CONTROL-register"><a href="#CONTROL-register" class="headerlink" title="CONTROL register"></a><code>CONTROL</code> register</h4><p>是特殊寄存器</p><p>其中第0位定义线程的特权等级： 0-Privileged Mode，1-非特权</p><p>第1位定义指针选择：0-主栈指针，1-进程指针：<strong>在处理模式时，该位始终为0</strong></p></li></ul><p>在系统 Reset之后，处理器默认是 Privileged 级别。访问级别由寄存器 <em>control[0]</em> 控制，当且仅当处理器运行在 Thread 模式下，该位才有效。Handler 模式只能运行在 Privileged 模式。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303312056114.png" alt="image-20220402152009470"></p><h4 id="4-Load-PC-With-Addr-of-Exception-Handler"><a href="#4-Load-PC-With-Addr-of-Exception-Handler" class="headerlink" title="4. Load PC With Addr of Exception Handler"></a>4. Load PC With Addr of Exception Handler</h4><p><strong>是根据出现的 Exception 来选特定的 Memory Address 来存入 ==PC== 中的</strong></p><ul><li>这些Memory Addr分别对应着不同的处理方式，也就是不同的 Value。</li><li>这个对应表存在 Vector table 中</li></ul><p>向量地址的LSB设置为“1”表示该处理程序使用Thumb代码</p><p>IRQ中断编号，每个异常地址为四个字节，记录异常处理程序在内存中的位置</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303312107837.png" alt="image-20230331210748799"></p><p>Exception num =IRQ+16</p><h4 id="5-Load-LR-With-EXC-RETURN-Code"><a href="#5-Load-LR-With-EXC-RETURN-Code" class="headerlink" title="5. Load LR With EXC_RETURN Code"></a>5. Load LR With EXC_RETURN Code</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303312115519.png" alt="image-20230331211538483"></p><p><code>EXC_RETURN</code> 码决定了要使用那种模式以及那种栈指针</p><p><strong>restoreSP： MSP (0) or PSP (1) / return到哪个模式：Handler (0) or Thread (1)</strong></p><ul><li>Handler模式还是Thread模式（Handler模式时候一定是MSP，所以三种状态）</li><li>MSP还是PSP</li></ul><p>EXC_RETURN value generated by CPU to provide information on how to return</p><h4 id="6-Start-Executing-Exception-Handler"><a href="#6-Start-Executing-Exception-Handler" class="headerlink" title="6. Start Executing Exception Handler"></a>6. Start Executing Exception Handler</h4><p>Exception handler starts running, unless preempted（抢占） by a higher-priority exception</p><p>异常处理程序可能会在堆栈上保存额外的寄存器，例如，如果处理程序可能会调用subroutine，LR和R4必须保存</p><h3 id="Exiting-an-Exception-Handler"><a href="#Exiting-an-Exception-Handler" class="headerlink" title="Exiting an Exception Handler"></a>Exiting an Exception Handler</h3><ol><li><p>Execute instruction triggering exception return processing 执行指令触发异常返回处理</p></li><li><p>Select return stack, restore context from that stack 选择返回堆栈，从堆栈中恢复上下文</p></li><li><p>Resume execution of code at restored address 在恢复的地址恢复代码的执行</p></li></ol><h4 id="1-Return-from-Exception"><a href="#1-Return-from-Exception" class="headerlink" title="1. Return from Exception"></a>1. Return from Exception</h4><p>没有“从中断返回”指令</p><p>• <strong>BX LR</strong> - Branch to address in LR by loading PC with LR contents</p><p>• <strong>POP {…, PC}</strong> - Pop address from stack into PC</p><p>使用特殊值EXC_RETURN加载到PC中以触发异常处理处理</p><p><strong>•如果EXC_RETURN仍然在LR中，则使用BX LR</strong></p><p><strong>•如果EXC_RETURN已保存在堆栈中，则使用POP</strong></p><h4 id="2-Select-Stack-Restore-Context"><a href="#2-Select-Stack-Restore-Context" class="headerlink" title="2. Select Stack, Restore Context"></a>2. Select Stack, Restore Context</h4><p>Check <strong>EXC_RETURN (bit 2)</strong> to determine from which <strong>SP</strong> to pop the context</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303312148113.png" alt="image-20230331214856072"></p><p>从堆栈中取出寄存器</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303312152615.png" alt="image-20230331215202582"></p><h4 id="Resume-Executing-Previous-Main-Thread-Code"><a href="#Resume-Executing-Previous-Main-Thread-Code" class="headerlink" title="Resume Executing Previous Main Thread Code"></a>Resume Executing Previous Main Thread Code</h4><p>Exception handling registers have been restored: R0, R1, R2, R3, R12, LR, PC, xPSR</p><p> SP is back to its previous value.</p><p> Back in thread mode</p><h2 id="Timing-Analysis"><a href="#Timing-Analysis" class="headerlink" title="Timing Analysis"></a>Timing Analysis</h2><h3 id="Interrupt-Response-Latency-异常响应延时"><a href="#Interrupt-Response-Latency-异常响应延时" class="headerlink" title="Interrupt Response Latency 异常响应延时"></a>Interrupt Response Latency 异常响应延时</h3><p>Latency = time delay</p><p>切换到中断处理程序有开销，而且浪费时间。这随着中断率的上升而增加。这会延迟我们对外部事件的响应，这对于应用程序来说可能是可接受的，也可能是不可接受的，例如对模拟波形进行采样</p><p>需要多长时间?</p><p>完成当前指令的执行或放弃该指令，将各种寄存器推到堆栈上，获取向量</p><h4 id="Maximum-Interrupt-Rate"><a href="#Maximum-Interrupt-Rate" class="headerlink" title="Maximum Interrupt Rate"></a>Maximum Interrupt Rate</h4><p>我们每秒只能处理有限数量的中断</p><p>We can only handle so many interrupts per second</p><ul><li>$F_{Max_Int}$ : <strong>maximum interrupt frequency</strong></li><li>$F_{CPU}$ : CPU clock frequency</li><li>$C_{ISR}$ : Number of cycles ISR takes to execute</li><li>$C_{Overhead}$: Number of cycles of overhead for saving state, vectoring, restoring state, etc.</li></ul><p>$$<br>F_{Max_Int} = \frac{F_{CPU}}{C_{ISR}+C_{Overhead}}<br>$$</p><p>Note that <strong>model applies only when there is <u>one interrupt</u> in the system</strong></p><h4 id="x3D-x3D-Utilization-x3D-x3D"><a href="#x3D-x3D-Utilization-x3D-x3D" class="headerlink" title="==Utilization=="></a>==Utilization==</h4><p>当处理器响应中断时，它不执行任何其他代码</p><ul><li>$U_{Int}$ : <strong>Utilization</strong> (fraction of processor time) <strong>consumed by interrupt processing</strong></li></ul><p>$$<br>U_{Int} = F_{Int} * \frac{C_{ISR}+C_{Overhead}}{F_{CPU}} * 100%<br>$$</p><p>Fint/MAX Fint</p><p>CPU looks like it’s <strong>running the other code with CPU clock speed of</strong><br>$$<br>(1-U_{Int})*F_{CPU}<br>$$</p><p>以这么多的时钟频率运行其他代码<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303312224557.png" alt="image-20230331222445507"></p><h3 id="Program-Design-with-Interrupts"><a href="#Program-Design-with-Interrupts" class="headerlink" title="Program Design with Interrupts"></a>Program Design with Interrupts</h3><p>如何在ISR和其他线程之间通信?</p><p>•数据缓冲</p><p>•数据完整性和竞态条件</p><p>权衡(Trade-off):ISR代码更快的响应将延迟其他代码的完成</p><p>在有多个短期限ISR的系统中，在ISR中执行关键工作，并缓冲部分结果以供后续处理</p><h4 id="The-Volatile-Directive"><a href="#The-Volatile-Directive" class="headerlink" title="The Volatile Directive"></a>The Volatile Directive</h4><p>Need to tell compiler which variables may change outside of its control</p><p>使用volatile关键字强制编译器每次使用时从内存中重新加载这些变量</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">volatile</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_ints<span class="token punctuation">;</span><span class="token keyword">volatile</span> <span class="token keyword">int</span> <span class="token operator">*</span> var<span class="token punctuation">;</span> <span class="token comment">// or</span><span class="token keyword">int</span> <span class="token keyword">volatile</span> <span class="token operator">*</span> var<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对变量(例如状态寄存器)的每一次C源读取都将导致一条汇编语言LDR指令</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05-GPIO</title>
      <link href="//post/05-GPIO.html"/>
      <url>//post/05-GPIO.html</url>
      
        <content type="html"><![CDATA[<h1 id="General-Purpose-Input-Output"><a href="#General-Purpose-Input-Output" class="headerlink" title="General Purpose Input Output"></a>General Purpose Input Output</h1><h2 id="Input-x2F-Output-Strategy-of-microprocessors"><a href="#Input-x2F-Output-Strategy-of-microprocessors" class="headerlink" title="Input/Output Strategy of microprocessors"></a><strong>Input/Output Strategy of microprocessors</strong></h2><h5 id="Memory-Mapped-I-x2F-O-MMIO"><a href="#Memory-Mapped-I-x2F-O-MMIO" class="headerlink" title="Memory Mapped I/O (MMIO)"></a>Memory Mapped I/O (MMIO)</h5><p>• Main memory and peripheral I/O devices map into one single address space</p><p>主存储器和外设I/O设备映射到一个地址空间</p><h5 id="Port-Mapped-I-x2F-O-PMIO"><a href="#Port-Mapped-I-x2F-O-PMIO" class="headerlink" title="Port Mapped I/O (PMIO)"></a>Port Mapped I/O (PMIO)</h5><p>Peripherals have separate address space from main memory</p><p>外设与主存有独立的地址空间</p><p>对I/O有特殊的CPU指令</p><h4 id="Memory-Mapped-I-x2F-O"><a href="#Memory-Mapped-I-x2F-O" class="headerlink" title="Memory-Mapped I/O"></a>Memory-Mapped I/O</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161450545.png" alt="image-20220425141756575"></p><p><strong>Pros</strong> 优点</p><ul><li>No extra external circuitry required for I/O access - simpler &amp; cheaper.</li><li>Every instruction which can access memory can be used to manipulate an I/O device.</li></ul><p><strong>Cons</strong> 缺点</p><ul><li>Uses up main memory space for peripherals</li></ul><h4 id="Port-Mapped-I-x2F-O"><a href="#Port-Mapped-I-x2F-O" class="headerlink" title="Port-Mapped I/O"></a>Port-Mapped I/O</h4><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220425141926084.png" alt="image-20220425141926084"></p><p><strong>Pros</strong> </p><ul><li><strong>Separate I/O and memory access</strong></li><li>Allows <strong>full memory space</strong> to be used for RAM</li><li><strong>Obvious to see</strong> when I/O occurs in program code because of special I/O functions</li></ul><p><strong>Cons</strong></p><ul><li>Introduces <strong>complexity</strong> to internal circuits 更贵</li><li><strong>Special I/O functions</strong> harder to support for higher level language compilers</li><li><strong>More instructions</strong> are required to accompolish the same task, e.g. test one bit on I/O</li></ul><h3 id="Input-x2F-Output-x3D-x3D-Pins-amp-Ports-x3D-x3D"><a href="#Input-x2F-Output-x3D-x3D-Pins-amp-Ports-x3D-x3D" class="headerlink" title="Input/Output ==Pins &amp; Ports=="></a>Input/Output ==Pins &amp; Ports==</h3><p>Most of embedded microprocessors have <strong>I/O memory-mapped</strong></p><p>One <strong>key feature of a microcontroller</strong> is the versatility built into the input/output (I/O) circuits.</p><ul><li>Microprocessor designs, on the other hand, must add additional chips to interface with external circuitry.</li></ul><blockquote><p>Microcontroller 有 IO</p><p>Microprocessor 没有 IO</p></blockquote><p>The function a pin performs can be <strong>easily programmed</strong>.</p><h2 id="General-Purpose-Input-Output-GPIO"><a href="#General-Purpose-Input-Output-GPIO" class="headerlink" title="General Purpose Input Output (GPIO)"></a><strong>General Purpose Input Output (GPIO)</strong></h2><h3 id="Basic-Concept"><a href="#Basic-Concept" class="headerlink" title="Basic Concept"></a><strong>Basic Concept</strong></h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161505373.png" alt="image-20230416150539336"></p><p>• GPIO = General-purpose input and output (digital)</p><p>​• <strong>Input</strong>: program can determine if input signal is a 1 or a 0</p><p>​• <strong>Output</strong>: program can set output to 1 or 0</p><p>• Can use this to interface with external devices</p><p>​• <strong>Input</strong>: switch</p><p>​• <strong>Output</strong>: LEDs</p><h4 id="example"><a href="#example" class="headerlink" title="example"></a>example</h4><p>STM32家族的微控制器有几个数字端口，称为GPIO1, GPIO2, GPIO3，…</p><p>每个端口有16位，因此有16个电引脚。引脚被称为Px_y，其中x是端口名称(1,2,3，…)，y是位(0,1，…)15)。<strong>the pin P2_3 is the bit 3 of the port 2.</strong></p><p>port是指一组GPIO引脚，通常由多个引脚组成。每个port都有一个名称（例如GPIO1、GPIO2等），并且每个port中的每个引脚都有一个唯一的编号（例如P2_5）。可以将port视为一组相关联的GPIO引脚，它们通常用于执行相似的任务。</p><p> Each PIN can be configured as <strong>Input</strong> or <strong>Output</strong></p><p>Some PINs has also an <strong>alternate function</strong>, related to a peripheral</p><h3 id="GPIO-Alternative-Functions"><a href="#GPIO-Alternative-Functions" class="headerlink" title="GPIO Alternative Functions"></a><strong>GPIO Alternative Functions</strong></h3><p>Pins may have different features</p><p>• To enable an alternate function, set up the appropriate register</p><p>Pins may also <strong>have analogue paths for ADC / DAC</strong> etc.</p><p>某些GPIO引脚可能具有模拟信号路径，可以用于连接模拟到数字转换器（ADC）或数字到模拟转换器（DAC）等外设。这意味着这些引脚可以用于读取或输出模拟信号，而不仅仅是数字信号。在使用这些引脚时，需要将它们配置为相应的模拟输入或输出，并使用适当的ADC或DAC外设进行读取或输出。</p><p>Advantages:</p><ul><li>Saves space on the package</li><li>Improves flexibility</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161512923.png" alt="image-20220425143229424"></p><h3 id="x3D-x3D-GPIO-Input-Mode-x3D-x3D"><a href="#x3D-x3D-GPIO-Input-Mode-x3D-x3D" class="headerlink" title="==GPIO Input Mode=="></a>==GPIO Input Mode==</h3><ul><li><p>Ensure a known value on the input of a pin is left floating</p></li><li><p>For example, to <strong>get the switch SW1 to pull the pin to ground</strong>, we should enable the <code>pull-up</code></p></li><li><p>In <code>pull-up</code> mode, the pin value is</p><ul><li><code>HIGH</code> when SW1 is not pressed</li><li><code>LOW</code> when SW1 is pressed</li></ul></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161519481.png" alt="image-20220425143429589"></p><h5 id="pull-down"><a href="#pull-down" class="headerlink" title="pull down"></a>pull down</h5><p>pressed switch PINMUX =1 </p><p>not pressed switch  PINMUX =0</p><h5 id="pull-up"><a href="#pull-up" class="headerlink" title="pull up"></a>pull up</h5><p>pressed switch PINMUX =0</p><p>not pressed switch  PINMUX =1</p><h3 id="GPIO-Output-Mode"><a href="#GPIO-Output-Mode" class="headerlink" title="GPIO Output Mode"></a><strong>GPIO Output Mode</strong></h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161523368.png" alt="image-20230416152335326"></p><p>一个IOpin 输入电压以后，根据上拉还是下拉判断为0、1存到IDR寄存器</p><p>ODR输出数据时候输出到Output control，改写为对应电压再输出引脚</p><h4 id="input的时候如何判断0-还是-1"><a href="#input的时候如何判断0-还是-1" class="headerlink" title="input的时候如何判断0 还是 1"></a>input的时候如何判断0 还是 1</h4><ul><li>Input signal’s value is determined by voltage</li><li>Input threshold voltages depend on supply voltage $V_{DD}$</li><li>Excceding $V_{DD}$ or $GND$ may damage chip</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161527161.png" alt="image-20220425143850985"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161543925.png" alt="image-20230416154323877"></p><p>避免floating value区间</p><h4 id="output的时候如何判断0-还是-1"><a href="#output的时候如何判断0-还是-1" class="headerlink" title="output的时候如何判断0 还是 1"></a>output的时候如何判断0 还是 1</h4><p>Nominal（标准） output voltages</p><p>• 1: VDD-0.5 V to VDD</p><p>• 0: 0 to 0.5 V</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161529024.png" alt="image-20230416152957991"></p><p>Note: Output voltage depends on current drawn by load on pin</p><ul><li>Need to consider source-to-drain resistance in the transistor</li><li><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161543979.png" alt="image-20230416154354938"></li><li>Above values only specified when current &lt; <u>5 mA</u> (18 mA for high-drive pads) and VDD &gt; 2.7 V</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161533548.png" alt="image-20220425144506787"></p><p>The ports are not capable of driving loads that require large currents.</p><p>i.e. the output current is often limited in range of tens of mA.</p><p>e.g. ARM Cortex-M-based MCUs, the maximum output current per pin is 5 mA.</p><p> If necessary, buffers should be added externally to make sure the current drained from the microcontroller is reasonable</p><h2 id="Controlling-the-GPIO"><a href="#Controlling-the-GPIO" class="headerlink" title="Controlling the GPIO"></a><strong>Controlling the GPIO</strong></h2><h3 id="GPIO-Special-Function-Registers"><a href="#GPIO-Special-Function-Registers" class="headerlink" title="GPIO Special Function Registers"></a><strong>GPIO Special Function Registers</strong></h3><p>配置CPU或外围设备中硬件操作的寄存器</p><p>Each general-purpose I/O port has:</p><p>4 x 32-bit <strong>configuration</strong> registers:</p><ul><li>GPIOx_<strong>MODER</strong>: configures each bit as input or output or other</li><li>GPIOx_OTYPER: output type configuration (push-pull or open-drain)</li><li>GPIOx_OSPEEDR: configures the maximum frequency of an output pin</li><li>GPIOx_<strong>PUPDR</strong>: configures the internal pull-up or pull-down register</li></ul><p>2 x 32-bit <strong>data</strong> registers:</p><ul><li>GPIOx_<strong>IDR</strong>: the input data register</li><li>GPIOx_<strong>ODR</strong>: the output data register</li></ul><p>1 x 32-bit <strong>set/reset</strong> register:</p><ul><li>GPIOx_BSRR: the bit set/reset register</li></ul><p>1 x 32-bit <strong>locking</strong> register:</p><ul><li>GPIOx_LCKR : the bit lock register</li></ul><p>2 x 32-bit <strong>alternate</strong> function selection register:</p><ul><li>GPIOx_AFRH</li><li>GPIOx_AFRL.</li></ul><h4 id="Mode-Register"><a href="#Mode-Register" class="headerlink" title="Mode Register"></a>Mode Register</h4><p>偏移地址0x00</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161551555.png" alt="image-20220425144956994"></p><blockquote><p>两个Bits为一组</p></blockquote><p>MODER allows a programmer to <strong>define the functionality of a GPIO pin</strong></p><p>Each pin has ==2 bits== that permits the following configurations:</p><ul><li><code>00</code>: Input (reset state)</li><li><code>01</code>: General purpose output mode</li><li><code>10</code>: Alternate function mode</li><li><code>11</code>: Analog mode</li></ul><pre class="line-numbers language-none"><code class="language-none">举例要把GPIO9进行设置为通用输出模式 则把19位18位 置为01 GPIOF -&gt;MODER &amp;= ~(3&lt;&lt;18);  //进行清零GPIOF -&gt;MODER |= 1&lt;&lt;18;     //进行配置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Pull-up-x2F-Pull-down-register"><a href="#Pull-up-x2F-Pull-down-register" class="headerlink" title="Pull-up/Pull-down register"></a>Pull-up/Pull-down register</h4><p>偏移地址0x0C</p><blockquote><p>P12 Pull-down</p><p>P0   Pull-up</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161553857.png" alt="image-20220425145158664"></p><p>PUPDR defines the presence of a <strong>pull-up or pull-down resistor</strong> (or none) at the GPIO pin</p><p>Each pin has ==2 bits== that permits the following configurations:</p><ul><li><code>00</code>: No pull-up/pull-down</li><li><code>01</code>: Pull-up</li><li><code>10</code>: Pull-down</li></ul><pre class="line-numbers language-none"><code class="language-none">举例将GPIO口设置为上拉 需要将19 18 位进行清零然后赋值01GPIOF -&gt;PUPDR   &amp;=~(3&lt;&lt;18);GPIOF -&gt;PUPDR   |=1&lt;&lt;18;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="IRD-x2F-ODR"><a href="#IRD-x2F-ODR" class="headerlink" title="IRD/ODR"></a>IRD/ODR</h4><p>偏移地址0x10/0x14</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161614574.png" alt="image-20220425145320382"></p><p>Data Input/Output is <strong>performed through the IDR and ODR registers</strong></p><blockquote><p>ODR可以对单独的位进行书写</p></blockquote><p>Each pin is mapped to the specific bit, so ==only 16 bits are used in the registers==</p><h4 id="CMSIS-to-access-registers"><a href="#CMSIS-to-access-registers" class="headerlink" title="CMSIS to access registers"></a><strong>CMSIS to access registers</strong></h4><p>查找和记住硬件控制寄存器的地址是很乏味的。</p><p>•相反，我们使用特殊的Clanguage支持。</p><p>CMSIS是Cortex微控制器软件接口标准（Cortex Microcontroller Software Interface Standard）</p><p>•Cortex微控制器软件接口标准CMSIS是一个独立于供应商的硬件抽象层，用于基于Arm®Cortex®处理器的微控制器。</p><h4 id="Code-Structure"><a href="#Code-Structure" class="headerlink" title="Code Structure"></a>Code Structure</h4><ul><li>Main code talks to the drivers, producing easy to read and understand code</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//Port 2, bit 6</span><span class="token function">gpio_set_mode</span><span class="token punctuation">(</span>P2_5<span class="token punctuation">,</span> Output<span class="token punctuation">)</span><span class="token comment">//设置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>Drivers utilise CMSIS library and group relevant actions</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">port_struct<span class="token operator">-&gt;</span>direction_reg <span class="token operator">=</span> output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>port_struct是一个指向GPIO端口结构体的指针，direction_reg是该结构体中的一个成员变量，用于控制端口的方向。</p><ul><li>CMSIS transforms <strong>memory mapped registers into C structs</strong></li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">PORT0</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">PORT</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x2000030</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>0x2000030是GPIO端口的基地址，而PORT结构体是用于访问该端口的数据结构。通过将该地址强制转换为指向PORT结构体的指针，并将其定义为宏，可以方便地在代码中引用该GPIO端口，并使用类似于PORT0-&gt;direction_reg = output这样的语法来配置和控制该端口。</p><ul><li>Registers directly control hardware</li><li>Hardware drives IO pins physically</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161654890.png" alt="image-20220425145700139"></p><h4 id="Drivers-Layer-How-It-Works"><a href="#Drivers-Layer-How-It-Works" class="headerlink" title="Drivers Layer: How It Works"></a>Drivers Layer: How It Works</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">gpio_set</span><span class="token punctuation">(</span>Pin pin<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>mask = 1 &lt;&lt; pin index<br> 2) tmp = port_struct-&gt;data_reg &amp; ~mask (取mask的反)<br> 3) tmp |= value &lt;&lt; pin index<br> 4) port_struct-&gt;data_reg = tmp</li></ol><p>e.g. <code>gpio_set(P2_5, 1)</code> with <code>PORT_DATA_REGISTER = 0b01010101</code></p><ol><li><p>Create a mask for the bit we want to set (0b00100000)</p><blockquote><p>为我们想要设置的位创建一个掩码</p></blockquote></li><li><p>Invert the mask (0b11011111) to select all the other bits in the port data register,and save the status of the other bits (tmp = 0b01010101)</p></li></ol><blockquote><p>反转掩码(0b11011111)以选择端口数据寄存器中的所有其他位，并保存其他位的状态(tmp = 0b01010101)</p><p>保留寄存器中其他位的状态，而只修改要设置的那一位（与上补码）并把本位清零</p></blockquote><ol start="3"><li>Move the new value of the bit into position, and or it with the new register value<br>(tmp = 0b01110101)</li></ol><blockquote><p>将改变的mark与原状态或起来(tmp = 0 b01110101)</p></blockquote><ol start="4"><li>Write the new data register value out to the port (PORT_DATA_REGISTER =0b01110101)</li></ol><blockquote><p>将新的数据寄存器值写入端口(PORT_DATA_REGISTER =<br>0b01110101)</p></blockquote><hr><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">gpio_get</span><span class="token punctuation">(</span>Pin pin<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>mask = 1 &lt;&lt; pin index<br> 2) tmp = port_struct-&gt;data_reg &amp; mask  (取mask)<br> 3) tmp &gt;&gt;= pin index<br> 4) return tmp</li></ol><p>e.g. <code>gpio_get(P2_5)</code> with <code>PORT_DATA_REGISTER = 0b01110101</code></p><blockquote><p>将提取位设为1来提取。</p></blockquote><ol><li>Create a mask for the bit we want to get (0b00100000)</li><li>Select the bit in the port data register based on the mask (tmp = 0b00100000)</li><li>Bitshift the value to produce a one or zero (tmp = 0b00000001)</li><li>Return the value of the pin back to the user</li></ol><h3 id="C-Interface-GPIO-Configuration"><a href="#C-Interface-GPIO-Configuration" class="headerlink" title="C Interface: GPIO Configuration"></a>C Interface: GPIO Configuration</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*! This enum describes the directional setup of a GPIO pin. */</span><span class="token keyword">typedef</span> <span class="token keyword">enum</span> <span class="token punctuation">{</span>Reset<span class="token punctuation">,</span> <span class="token comment">//!&lt; Resets the pin-mode to the default value.</span>Input<span class="token punctuation">,</span> <span class="token comment">//!&lt; Sets the pin as an input with no pull-up or pull-down.</span>Output<span class="token punctuation">,</span> <span class="token comment">//!&lt; Sets the pin as a low impedance output.</span>PullUp<span class="token punctuation">,</span> <span class="token comment">//!&lt; Enables the internal pull-up resistor and sets as input.</span>PullDown <span class="token comment">//!&lt; Enables the internal pull-down resistor and sets as input.</span><span class="token punctuation">}</span> PinMode<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*! \brief Configures the output mode of a GPIO pin.* Used to set the GPIO as an input, output, and configure the* possible pull-up or pull-down resistors.* \param pin Pin to set.* \param mode New output mode of the pin.*/</span><span class="token keyword">void</span> <span class="token function">gpio_set_mode</span><span class="token punctuation">(</span>Pin pin<span class="token punctuation">,</span> PinMode mode<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*! \brief Sets a pin to the specified logic level.* \parampin Pin to set.* \param value New logic level of the pin (0 is low, otherwise high).*/</span><span class="token keyword">void</span> <span class="token function">gpio_set</span><span class="token punctuation">(</span>Pin pin<span class="token punctuation">,</span> <span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">/*! \brief Get the current logic level of a GPIO pin.* \param pin Pin to read.* \return The logic level of the GPIO pin (0 if low, 1 if high).*/</span><span class="token keyword">int</span> <span class="token function">gpio_get</span><span class="token punctuation">(</span>Pin pin<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h2><p><strong>Read a pushbutton and lit the LED</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304161701265.png" alt="image-20220425150132490"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// configure pin P1_10 as input</span><span class="token function">gpio_set_mode</span><span class="token punctuation">(</span>P1_10<span class="token punctuation">,</span> Input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// configure pin P2_8 as output</span><span class="token function">gpio_set_mode</span><span class="token punctuation">(</span>P2_8<span class="token punctuation">,</span> Output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// infinite loop</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">int</span> PBstatus<span class="token operator">=</span><span class="token function">gpio_get</span><span class="token punctuation">(</span>P1_10<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gpio_set</span><span class="token punctuation">(</span>P2_8<span class="token punctuation">,</span> <span class="token operator">!</span>PBstatus<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//低的为开灯</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment">//为啥这个不用设置上拉还是下拉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>目标:如果开关SW1被按下，只亮红色LED1，如果没有按下，只亮蓝色led2</strong></p><ul><li>用<code>Pullup</code>的话，SW1<ul><li>没按下 -&gt; 1</li><li>按下     -&gt; 0</li></ul></li></ul><blockquote><p>用Pullup、Pulldown影响的是判断是否按下的语句。</p></blockquote><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">gpio_set_mode</span><span class="token punctuation">(</span>P_LED1<span class="token punctuation">,</span> Output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Set LED pins to outputs</span><span class="token function">gpio_set_mode</span><span class="token punctuation">(</span>P_LED2<span class="token punctuation">,</span> Output<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gpio_set_mode</span><span class="token punctuation">(</span>P_SW<span class="token punctuation">,</span> PullUp<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Switch pin to resistive pull-up</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gpio_get</span><span class="token punctuation">(</span>P_SW<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// Switch is not pressed (active low), turn LED1 off and LED2 on.</span><span class="token function">gpio_set</span><span class="token punctuation">(</span>P_LED1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gpio_set</span><span class="token punctuation">(</span>P_LED2<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// Switch is pressed, turn LED2 off and LED1 on.</span><span class="token function">gpio_set</span><span class="token punctuation">(</span>P_LED2<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">gpio_set</span><span class="token punctuation">(</span>P_LED1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="GPIO-in-keil"><a href="#GPIO-in-keil" class="headerlink" title="GPIO in keil"></a>GPIO in keil</h2><p>导包：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"platform.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"gpio.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="设置模式"><a href="#设置模式" class="headerlink" title="设置模式"></a>设置模式</h3><p><strong>输出</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">gpio_set_mode</span><span class="token punctuation">(</span>PA_0<span class="token punctuation">,</span> Output<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>输入</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">gpio_set_mode</span><span class="token punctuation">(</span>PA_1<span class="token punctuation">,</span> PullUp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">gpio_set_mode</span><span class="token punctuation">(</span>PB_0<span class="token punctuation">,</span> PullDown<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="一个端口输入输出"><a href="#一个端口输入输出" class="headerlink" title="一个端口输入输出"></a>一个端口输入输出</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">volatile</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> q<span class="token punctuation">;</span><span class="token comment">//读取电平值</span>p <span class="token operator">=</span> <span class="token function">gpio_get</span><span class="token punctuation">(</span>PA_13<span class="token punctuation">)</span><span class="token punctuation">;</span>q <span class="token operator">=</span> <span class="token function">gpio_get</span><span class="token punctuation">(</span>PA_14<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置电平值</span><span class="token function">gpio_set</span><span class="token punctuation">(</span>PA_0<span class="token punctuation">,</span> PIN_HIGN<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c">PIN_HIGH <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>PIN_LOW  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="几个端口输入输出"><a href="#几个端口输入输出" class="headerlink" title="几个端口输入输出"></a>几个端口输入输出</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">gpio_get_range</span><span class="token punctuation">(</span>PA_2<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">gpio_set_range(Pinbase，count，value)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基引脚，比特数，比特值</p><h3 id="Toggle"><a href="#Toggle" class="headerlink" title="Toggle"></a>Toggle</h3><p>变成相反的电平</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">gpio_toggle</span><span class="token punctuation">(</span>PB_7<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="GPIO基本结构"><a href="#GPIO基本结构" class="headerlink" title="GPIO基本结构"></a>GPIO基本结构</h3><p>每个GPIO内部都有这样的一个电路结构，这个结构在本文下面会具体介绍。</p><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/20180408224319518" alt="img"></p><p>这边的电路图稍微提一下：</p><ul><li><p><strong>保护二极管：IO引脚上下两边两个二极管用于防止引脚外部过高、过低的电压输入。</strong>当引脚电压高于VDD时，上方的二极管导通；当引脚电压低于VSS时，下方的二极管导通，防止不正常电压引入芯片导致芯片烧毁。但是尽管如此，还是不能直接外接大功率器件，须加大功率及隔离电路驱动，防止烧坏芯片或者外接器件无法正常工作。</p></li><li><p><strong>P-MOS管和N-MOS管：由P-MOS管和N-MOS管组成的单元电路使得GPIO具有“推挽输出”和“开漏输出”的模式。</strong>这里的电路会在下面很详细地分析到。</p></li><li><p><strong>TTL肖特基触发器：信号经过触发器后，模拟信号转化为0和1的数字信号。</strong>但是，当GPIO引脚作为ADC采集电压的输入通道时，用其“模拟输入”功能，此时信号不再经过触发器进行TTL电平转换。ADC外设要采集到的原始的模拟信号。</p></li></ul><p>这里需要注意的是，在查看《STM32中文参考手册V10》中的GPIO的表格时，会看到有“FT”一列，这代表着这个GPIO口时兼容3.3V和5V的；如果没有标注“FT”，就代表着不兼容5V。</p><h3 id="GPIO工作方式"><a href="#GPIO工作方式" class="headerlink" title="GPIO工作方式"></a>GPIO工作方式</h3><p>GPIO支持4种输入模式（浮空输入、上拉输入、下拉输入、模拟输入）和4种输出模式（开漏输出、开漏复用输出、推挽输出、推挽复用输出）。同时，GPIO还支持三种最大翻转速度（2MHz、10MHz、50MHz）。</p><p>每个I/O口可以自由编程，但I/O口寄存器必须按32位字被访问。</p><ol><li>GPIO_Mode_AIN 模拟输入</li><li>GPIO_Mode_IN_FLOATING 浮空输入</li><li>GPIO_Mode_IPD 下拉输入</li><li>GPIO_Mode_IPU 上拉输入</li><li>GPIO_Mode_Out_OD 开漏输出</li><li>GPIO_Mode_Out_PP 推挽输出</li><li>GPIO_Mode_AF_OD 复用开漏输出</li><li>GPIO_Mode_AF_PP 复用推挽输出</li></ol><h4 id="浮空输入模式"><a href="#浮空输入模式" class="headerlink" title="浮空输入模式"></a>浮空输入模式</h4><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/2018040822505125" alt="img"></p><p><strong>浮空输入模式下，I/O端口的电平信号直接进入输入数据寄存器。也就是说，I/O的电平状态是不确定的，完全由外部输入决定；<u>如果在该引脚悬空（在无信号输入）的情况下，读取该端口的电平是不确定的</u>。</strong></p><h4 id="上拉输入模式"><a href="#上拉输入模式" class="headerlink" title="上拉输入模式"></a>上拉输入模式</h4><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/20180408225353767" alt="img"></p><p><strong>上拉输入模式下，I/O端口的电平信号直接进入输入数据寄存器。<u>但是在I/O端口悬空（在无信号输入）的情况下，输入端的电平可以保持在高电平</u>；并且在I/O端口输入为低电平的时候，输入端的电平也还是低电平。</strong></p><h4 id="下拉输入模式"><a href="#下拉输入模式" class="headerlink" title="下拉输入模式"></a>下拉输入模式</h4><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/20180408225847140" alt="img"></p><p><strong>下拉输入模式下，I/O端口的电平信号直接进入输入数据寄存器。但是<u>在I/O端口悬空（在无信号输入）的情况下，输入端的电平可以保持在低电平</u>；并且在I/O端口输入为高电平的时候，输入端的电平也还是高电平。</strong></p><h4 id="模拟输入模式"><a href="#模拟输入模式" class="headerlink" title="模拟输入模式"></a>模拟输入模式</h4><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/20180409125151818" alt="img"></p><p>模拟输入模式下，I/O端口的模拟信号（电压信号，而非电平信号）直接模拟输入到片上外设模块，比如ADC模块等等。</p><h4 id="开漏输出模式"><a href="#开漏输出模式" class="headerlink" title="开漏输出模式"></a>开漏输出模式</h4><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/2018040912560259" alt="img"></p><p>开漏输出模式下，通过设置位设置/清除寄存器或者输出数据寄存器的值，途经N-MOS管，最终输出到I/O端口。这里要注意N-MOS管，当设置输出的值为高电平的时候，N-MOS管处于关闭状态，此时I/O端口的电平就不会由输出的高低电平决定，而是由I/O端口外部的上拉或者下拉决定；当设置输出的值为低电平的时候，N-MOS管处于开启状态，此时I/O端口的电平就是低电平。同时，I/O端口的电平也可以通过输入电路进行读取；注意，I/O端口的电平不一定是输出的电平。</p><h4 id="开漏复用输出模式"><a href="#开漏复用输出模式" class="headerlink" title="开漏复用输出模式"></a>开漏复用输出模式</h4><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/201804091309492" alt="img"></p><p>开漏复用输出模式，与开漏输出模式很是类似。只是输出的高低电平的来源，不是让CPU直接写输出数据寄存器，取而代之利用片上外设模块的复用功能输出来决定的。</p><h4 id="推挽输出模式"><a href="#推挽输出模式" class="headerlink" title="推挽输出模式"></a>推挽输出模式</h4><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/20180409131225598" alt="img"></p><p>推挽输出模式下，通过设置位设置/清除寄存器或者输出数据寄存器的值，途经P-MOS管和N-MOS管，最终输出到I/O端口。这里要注意P-MOS管和N-MOS管，当设置输出的值为高电平的时候，P-MOS管处于开启状态，N-MOS管处于关闭状态，此时I/O端口的电平就由P-MOS管决定：高电平；当设置输出的值为低电平的时候，P-MOS管处于关闭状态，N-MOS管处于开启状态，此时I/O端口的电平就由N-MOS管决定：低电平。同时，I/O端口的电平也可以通过输入电路进行读取；注意，此时I/O端口的电平一定是输出的电平。</p><h4 id="推挽复用输出模式"><a href="#推挽复用输出模式" class="headerlink" title="推挽复用输出模式"></a>推挽复用输出模式</h4><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/20180409131625100" alt="img"></p><p>推挽复用输出模式，与推挽输出模式很是类似。只是输出的高低电平的来源，不是让CPU直接写输出数据寄存器，取而代之利用片上外设模块的复用功能输出来决定的。</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06-Serial Communication (UART)</title>
      <link href="//post/06-Serial%20Communication%20(UART).html"/>
      <url>//post/06-Serial%20Communication%20(UART).html</url>
      
        <content type="html"><![CDATA[<h1 id="Serial-Communication-UART"><a href="#Serial-Communication-UART" class="headerlink" title="Serial Communication (UART)"></a>Serial Communication (UART)</h1><h2 id="Serial-vs-Parallel"><a href="#Serial-vs-Parallel" class="headerlink" title="Serial vs Parallel"></a><strong>Serial vs Parallel</strong></h2><p><strong>Serial</strong>: one bit is presented per cycle (<em>N</em> clock periods)</p><p><strong>Parallel</strong>: <em>N</em> bits together at a cycle (1 clock period)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304181920897.png" alt="image-20230418192014840"></p><h2 id="Serial-Communication"><a href="#Serial-Communication" class="headerlink" title="Serial Communication"></a><strong>Serial Communication</strong></h2><p>如果你想尽量减少连接两个系统的数据线的数量，那么串行通信是首选。</p><p>Tradeoff: the latency/efficiency is lower</p><h4 id="3种模式"><a href="#3种模式" class="headerlink" title="3种模式"></a>3种模式</h4><ul><li><p><strong>Simplex</strong>：单向的，固定一个发一个收</p></li><li><p><strong>Half Duplex</strong>：是双向传输但是不能同时进行</p></li><li><p><strong>Full Duplex</strong>：可以同时双向收发</p></li></ul><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220526233855525.png" alt="image-20220526233855525" style="zoom:80%;"><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>传输的时一个<strong>二进制</strong>数据<strong>流</strong>，即一个“0”或“1”的序列</p><ul><li>发送端：encode the stream<ul><li>例如，<code>'A' = 0x41=b"01000001"</code></li></ul></li><li>接收端：decode the stream<ul><li><strong>为了成功通信，系统在传输过程中必须保持同步</strong>。</li></ul></li></ul><p>两种传输方法：</p><ul><li>==Synchronous==：系统使用统一的时钟</li><li>==Asynchronous==：系统使用分开的时钟</li></ul><h3 id="Synchronous-Transmission"><a href="#Synchronous-Transmission" class="headerlink" title="Synchronous Transmission"></a><strong>Synchronous Transmission</strong></h3><p>==依靠信号中的时钟分量来保持时钟一致==</p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220526234600512.png" alt="image-20220526234600512" style="zoom:80%;"><ul><li>使用<strong>移位寄存器和一个时钟信号</strong>完成<strong>串并转换</strong></li></ul><p><strong>同步：</strong>与数据信号一起的称为explicit clock（显式时钟信号）</p><p> an explicit clock signal is along with the data signal</p><h3 id="Asynchronous-Transmission"><a href="#Asynchronous-Transmission" class="headerlink" title="Asynchronous Transmission"></a><strong>Asynchronous Transmission</strong></h3><p>==使用不同的时钟==Separate clocks</p><ul><li>正确解码的前提：接收机必须与发射机同步采样。</li></ul><p>在实际中，时钟会因为error而出现错误</p><ul><li>所以，我们必须定期重新同步以确保时钟保持同步。</li></ul><p>为了解决同步问题，我们使用==Asynchronous Communication Protocol==</p><h3 id="Asynchronous-Comm-Protocol"><a href="#Asynchronous-Comm-Protocol" class="headerlink" title="Asynchronous Comm. Protocol"></a><strong>Asynchronous Comm. Protocol</strong></h3><p>串行通信协议，其原理是将数据编码成一个个帧，包含起始位、数据位和停止位。起始位用于接收方同步，数据位用于传输数据，停止位表示帧的结束。</p><ul><li><strong>Start bit</strong>：接收器同步的起始位（感应到这个就开始同步）</li><li><strong>Data bits</strong>：传输的word的data</li><li><strong>Stop bit</strong>：表示该帧已传输完</li></ul><p>==Frame与Frame之间保持高电位==(IDLE)【空闲状态保持高电平】。</p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220527002122960.png" alt="image-20220527002122960" style="zoom:80%;"><p>接收机检测<strong>Start bit</strong>前沿，然后将其作为采样数据线的timing reference，在时间$T_{bit}*(N+1.5)$内提取N个数据比特</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304181928357.png" alt="image-20230418171629342"></p><h4 id="difference"><a href="#difference" class="headerlink" title="difference"></a>difference</h4><p>对于8位数据，我们可以容忍大约5%的时钟速度差异。</p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220527002504352.png" alt="image-20220527002504352" style="zoom:80%;"><h4 id="Data-Frame格式"><a href="#Data-Frame格式" class="headerlink" title="Data Frame格式"></a>Data Frame格式</h4><p><strong>Start bit</strong>：1个bit</p><p><strong>Data</strong>：LSB最先，总长度为7-9个bits</p><p>Parity Bit：（可选）用于检测数据中是否有error</p><p><strong>Stop bit</strong>：1个bit或者2个bits</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304182320605.png" alt="image-20230418232025553"></p><h4 id="串口通信速率"><a href="#串口通信速率" class="headerlink" title="串口通信速率"></a>串口通信速率</h4><p>All devices must use the same communications parameters </p><p>所有设备必须使用相同的通信参数</p><ul><li>例如通信速度(300波特、600、1200、2400、9600、14400、19200等)</li></ul><p>Sophisticated network protocols have more information in each data </p><p>frame</p><p>• Medium access control – when multiple nodes are on bus, they must arbitrate for permission to transmit</p><p>• Addressing information – for which node is this message intended?</p><p>• Larger data payload</p><p>• Stronger error detection or error correction information</p><p>• Request for immediate response (“in-frame”)</p><h4 id="Error-Detection"><a href="#Error-Detection" class="headerlink" title="Error Detection"></a><strong>Error Detection</strong></h4><p>Can send additional information to verify data was received correctly</p><p>Need to specify which parity to expect: even, odd or none(指定校验模式)</p><p>补一位使1的个数为奇数——奇校验</p><p>为偶数——偶校验</p><p>• 01110111 has 6 “1” bits, so parity bit will be 1 for odd parity, 0 for even parity</p><p>• 01100111 has 5 “1” bits, so parity bit will be 0 for odd parity, 1 for even parity</p><p>Single parity bit detects if 1, 3, 5, 7 or 9 bits are corrupted, but doesn’t detect an even number of corrupted bits</p><p>只有发生奇数个错误时候，才能检测到，偶数个无法检测</p><p>Stronger error detection codes (e.g. Cyclic Redundancy Check) exist and use multiple bits (e.g. 8, 16), and can detect many more corruptions. </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304182331375.png" alt="image-20230418233126328"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304182332225.png" alt="image-20230418233220186"></p><p>• <strong>Advantages</strong>: simple &amp; inexpensive</p><p>• <strong>Disadvantages</strong>: high overhead because of start and stop bits: 2 / 10 (or more) of bandwidth.</p><h4 id="synchronous-communication-protocol"><a href="#synchronous-communication-protocol" class="headerlink" title="synchronous communication protocol"></a><strong>synchronous communication protocol</strong></h4><p>A common clock signal solves synchronisation problem: more efficient (but more complex) than asynchronous</p><ol><li><p>separate clock and data lines</p></li><li><p>encode clock in the data steam e.g. Manchester coding</p></li></ol><h3 id="Asynchronous-protocol-–-RS232C"><a href="#Asynchronous-protocol-–-RS232C" class="headerlink" title="Asynchronous protocol – RS232C"></a>Asynchronous protocol – RS232C</h3><blockquote><p>RS232C: Recommended Standard number 232 revision Commonly used asynchronous standard</p></blockquote><p>It specifies voltages in Reversed Polarity.(电压反极性表示)</p><p><strong>-3V to -15V = “Mark” or Logic ‘1’</strong></p><p><strong>3V to 15V = “Space” or Logic ‘0’</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304182336652.png" alt="image-20230418233651614"></p><p>DTE = Data Terminal Equipment</p><p>DCE = Data Communications Equipment</p><p>Full duplex communication link between DTE1 and DTE2.</p><p><strong>DTE1 TXD is effectively connected to DTE2 RXD.</strong></p><p><strong>DTE2 TXD is effectively connected to DTE1 RXD</strong></p><h4 id="RS232C-Flow-Control"><a href="#RS232C-Flow-Control" class="headerlink" title="RS232C: Flow Control"></a><strong>RS232C: Flow Control</strong></h4><p>一次传太多会使接收端buffer溢出</p><p>Request-to-send (RTS) and clear-to-send (CTS) allow hardware control of the data flow.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304182341336.png" alt="image-20230418234108292"></p><h3 id="Parsing-Messages-–-decoding-content-from-received-BITs"><a href="#Parsing-Messages-–-decoding-content-from-received-BITs" class="headerlink" title="Parsing Messages – decoding content from received BITs"></a>Parsing Messages – decoding content from received BITs</h3><ul><li><p>Two types of messages:<br>• Actual binary data sent<br>• First identify message type<br>• Second, based on this message type, copy binary data from message fields into variables<br>• May need to use pointers and casting to get code to translate formats correctly and safely</p></li><li><p>ASCII text characters representing data sent<br>• First identify message type<br>• Second, based on this message type, translate (parse) the data from the ASCII message format into a binary format<br>• Third, copy the binary  将二进制数据复制到变量中</p></li></ul><p>==第一步都是要<strong>识别消息类型</strong>==</p><h4 id="Example-Binary-Serial-Data-TSIP"><a href="#Example-Binary-Serial-Data-TSIP" class="headerlink" title="Example Binary Serial Data: TSIP"></a><strong>Example Binary Serial Data: TSIP</strong></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span> <span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">0x84</span><span class="token operator">:</span>lat <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>lon <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>alt <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>clb <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">[</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tof <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">float</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">0x4A</span><span class="token operator">:</span> …<span class="token keyword">default</span><span class="token operator">:</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304182346164.png" alt="image-20230418234645128"></p><p>The Trimble Standard Interface Protocol (TSIP) allows you to control the GPS receiver and set GPS configuration parameters. </p><p>Trimble标准接口协议（TSIP）是一种用于控制GPS接收器和设置GPS配置参数的协议。</p><h4 id="Example-ASCII-Serial-Data-NMEA-0183"><a href="#Example-ASCII-Serial-Data-NMEA-0183" class="headerlink" title="Example ASCII Serial Data: NMEA-0183"></a><strong>Example ASCII Serial Data: NMEA-0183</strong></h4><p>消息格式：$IDMSG,D1,D2,D3,D4,…,Dn*CS\r\n</p><p>• $ denotes the start of a message</p><p>• ID is a two letter mnemonic to describe the source of data, e.g. GP signifies GPS</p><p>• MSG is a three letter mnemonic to describe the message content.</p><p>• Commas are used to delaminate the data fields.</p><p>• Dn represents each of the data fields.</p><p>• * is used to separate the data from the checksum.</p><p>• CS contains two ASCII characters representing the hex value of the checksum.</p><p>• \r\n is the carriage return character followed by the new line character to denote </p><p>the end of a message.</p><p>其中，$表示消息的开始，ID是一个两个字母的助记符，用于描述数据源（例如GP表示GPS），MSG是一个三个字母的助记符，用于描述消息内容。逗号用于分隔数据字段，Dn代表每个数据字段。星号用于将数据与校验和分隔开来。CS包含两个ASCII字符，表示校验和的十六进制值。\r\n是回车符和换行符，用于表示消息结束。</p><p>NMEA 0183接口标准在全球许多行业领域使用。该标准定义了4800波特串行数据总线的电信号要求、数据传输协议和时间以及特定的句子格式</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304182355595.png" alt="image-20230418235517544"></p><p>当状态机处于Start状态时，它等待接收到一个字符。如果接收到的字符是’$’，则状态机将切换到Talker状态。否则，它将保持在Start状态。 当状态机处于Talker状态时，它等待接收两个字母作为数据源标识符，并将其存储在缓冲区中。一旦接收到两个字母，状态机将切换到Sentence Type状态。 当状态机处于Sentence Type状态时，它等待接收三个字母作为消息类型标识符，并将其存储在缓冲区中。一旦接收到三个字母，状态机将切换到Sentence Body状态。 当状态机处于Sentence Body状态时，它等待接收逗号分隔的数据字段，并将每个字段存储在缓冲区中。一旦接收到星号（’*’），则表示消息体已经结束，并且校验和即将开始。此时，状态机将切换到Checksum 1 状态。 当状态机处于Checksum 1 状态时，它等待接收校验和的第一个十六进制字符，并将其存储在缓冲区中。一旦接收到第一个字符，则会切换到Checksum 2 状态。 当状态机处于Checksum 2 状态时，它等待接收校验和的第二个十六进制字符，并将其存储在缓冲区中。一旦接收到第二个字符，则状态机将计算校验和并检查其是否正确。如果校验和正确，则状态机将传递缓冲区中存储的完整消息给下一个处理步骤。否则，它将丢弃该消息并重新开始解析过程</p><h3 id="Asynchronous-x2F-Synchronous-serial-USART-Communications"><a href="#Asynchronous-x2F-Synchronous-serial-USART-Communications" class="headerlink" title="Asynchronous / Synchronous serial (USART) Communications"></a><strong>Asynchronous / Synchronous</strong> <strong>serial (USART) Communications</strong></h3><p><strong>STM32f401 features</strong></p><p>STM32F401是一款微控制器，它包含了多个通信接口，其中之一就是USART（Universal Synchronous/Asynchronous Receiver/Transmitter）。USART是一种通用的同步/异步收发器，可以实现全双工通信。它支持NRZ标准格式</p><p>• Full duplex, asynchronous communications==全双工，异步==</p><p>• NRZ standard format (Mark/Space)用NRZ来传号和传空</p><p>• Configurable oversampling method by 16 or by 8 to give flexibility between speed and clock tolerance</p><p>可以通过16或8的过采样方法进行配置，以在速度和时钟容差之间提供灵活性。过采样是指在接收数据时对信号进行多次采样，以提高数据传输的可靠性。当使用16倍过采样时，USART会对输入信号每个bit进行16次采样，并将这些采样值平均后得到一个结果。这种方法可以提高数据传输的可靠性，但会降低通信速度。相反，当使用8倍过采样时，USART只对输入信号进行8次采样，并将这些采样值平均后得到一个结果。这种方法可以提高通信速度，但会降低数据传输的可靠性。因此，在配置USART时可以根据具体应用场景的需要选择16倍或8倍过采样方法，以在速度和时钟容差之间取得最佳平衡点。</p><p>• Fractional baud rate generator systems</p><p>• Programmable data word length (8 or 9 bits) Data word的长度可以设置为<strong>8bits</strong>或者<strong>9bits</strong></p><p>• Configurable stop bits - support for 1 or 2 stop bits 可以设置stop bits的长度，<strong>1或2 bit</strong></p><p>• Parity control</p><p>• <strong>Four</strong> error detection flags</p><p>• <strong>Ten</strong> interrupt sources with flags</p><p>• <strong>Synchronous mode</strong></p><p>• Hardware flow control mode</p><h4 id="USART区块图"><a href="#USART区块图" class="headerlink" title="USART区块图"></a>USART区块图</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304190014608.png" alt="image-20230419001405562"></p><h4 id="USART-modes"><a href="#USART-modes" class="headerlink" title="USART modes"></a><strong>USART modes</strong></h4><p><strong>Normal mode</strong>-TX pin and RX pin are used:</p><p>• <strong>RX</strong>: Receive Data Input is the serial data input</p><p>• <strong>TX:</strong> Transmit Data Output. When the transmitter is disabled, the output pin returns to its I/O port configuration. When the transmitter is enabled and nothing is to be transmitted, the TX pin is at high level. </p><p>当发送器被禁用时，输出引脚会返回到其I/O端口配置状态。当发送器被启用且没有要传输的数据时，TX引脚处于高电平状态。</p><p><strong>Synchronous mode- CLK</strong> pin is used in addition to Tx and RX</p><p>除了TX和RX引脚之外，还需要使用CLK引脚。在这种模式下，数据传输是由一个显式的时钟信号控制的，这个时钟信号会与数据信号一起传输。</p><p><strong>Hardware flow control mode</strong></p><ul><li>CTS：clear to send，有效电平为低（阻断发送）</li><li>RTS：用来指示USART以及准备好接收数据了，有效电平为低</li></ul><h4 id="Software-Structure"><a href="#Software-Structure" class="headerlink" title="Software Structure"></a><strong>Software Structure</strong></h4><p>通信和程序是异步的 - 不知道程序会执行什么代码【不知道什么时候收到消息】</p><ul><li>不知道下一个item什么时候来</li><li>不知道当前的item什么时候完成传输</li><li>不知道有没有error发生</li></ul><p>Need to synchronize between program and serial communication </p><p>interface somehow. Two options:</p><p><strong>Polling</strong>:</p><p>• Wait until data is available</p><p>• Simple but <strong>inefficient</strong> of processor time</p><p><strong>Interrupt</strong>:</p><p>• CPU interrupts program when data is available</p><p>• Efficient, but more <strong>complex</strong></p><h4 id="Serial-Communications-and-Interrupts"><a href="#Serial-Communications-and-Interrupts" class="headerlink" title="Serial Communications and Interrupts"></a><strong>Serial Communications and</strong> <strong>Interrupts</strong></h4><p>Want to provide multiple threads of control in the program</p><p>需要==一个主线程，三个ISR==</p><p>• Main program (and subroutines it calls)</p><p>• Transmit ISR – executes when serial interface is ready to send another character</p><p>• Receive ISR – executes when serial interface receives a character</p><p>• Error ISR(s) – execute if an error occurs</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304190030547.png" alt="image-20230419003052505"></p><p>Need a way of buffering information between threads</p><p>• Solution: circular queue with head and tail pointers（循环队列）</p><p>• One for TX, one for RX</p><h4 id="Code-to-Implement-Queues"><a href="#Code-to-Implement-Queues" class="headerlink" title="Code to Implement Queues"></a><strong>Code to Implement Queues</strong></h4><p>Enqueue（入队列） at tail: tail is the index of the next free entry</p><p>Dequeue （出队列）from head: head is the index of the item to remove</p><p><strong>==队尾写新，队头读取==</strong></p><p>Queue size is initialised and stored in size</p><p>• One queue per direction（TX RX各有一个队列）</p><p>• TX ISR unloads tx_q</p><p>• RX ISR loads rx_q</p><p> <strong>Need to wrap pointer at end of buffer to make it circular,</strong> </p><p>• Use % (modulus, remainder) operator if queue size is not power of two</p><p>假设队列大小为10，那么在enqueue操作中，可以使用以下代码来更新尾指针：</p><p> <code>tail = (tail + 1) % 10;</code></p><p>• Use &amp; (bitwise and) if queue size is a power of two</p><p>如果队列大小是2的幂，例如16，则可以使用以下代码来更新尾指针：</p><p> <code>tail = (tail + 1) &amp; 15;</code></p><ul><li>==判断队列空==：<code>tail == head</code></li><li>==判断队列满==：<code>(tail + 1) % size == head</code></li></ul><h5 id="Defining-and-initializing-Queues"><a href="#Defining-and-initializing-Queues" class="headerlink" title="Defining and initializing Queues"></a><strong>Defining and initializing Queues</strong></h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">{</span><span class="token class-name">uint8_t</span> <span class="token operator">*</span>data<span class="token punctuation">;</span> <span class="token comment">//!&lt; Array of data, stored on the heap.</span><span class="token class-name">uint32_t</span> head<span class="token punctuation">;</span> <span class="token comment">//!&lt; Index in the array of the oldest element.</span><span class="token class-name">uint32_t</span> tail<span class="token punctuation">;</span> <span class="token comment">//!&lt; Index in the array of the youngest element.</span><span class="token class-name">uint32_t</span> size<span class="token punctuation">;</span> <span class="token comment">//!&lt; Size of the data array.</span><span class="token punctuation">}</span> Queue<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">queue_init</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> size<span class="token punctuation">)</span> <span class="token punctuation">{</span>queue<span class="token operator">-&gt;</span>data <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token class-name">uint8_t</span><span class="token punctuation">)</span> <span class="token operator">*</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>queue<span class="token operator">-&gt;</span>head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>queue<span class="token operator">-&gt;</span>tail <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>queue<span class="token operator">-&gt;</span>size <span class="token operator">=</span> size<span class="token punctuation">;</span><span class="token comment">// If malloc returns NULL (0) the allocation has failed.</span><span class="token keyword">return</span> queue<span class="token operator">-&gt;</span>data <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>判断是否为满</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">queue_is_full</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>queue<span class="token operator">-&gt;</span>tail <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> queue<span class="token operator">-&gt;</span>size<span class="token punctuation">)</span> <span class="token operator">==</span> queue<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> <span class="token function">queue_is_empty</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> queue<span class="token operator">-&gt;</span>tail <span class="token operator">==</span> queue<span class="token operator">-&gt;</span>head<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191000896.png" alt="image-20230419100056824"></p><h5 id="入队-amp-出队"><a href="#入队-amp-出队" class="headerlink" title="入队&amp; 出队"></a>入队&amp; 出队</h5><p>使用queue_enqueue函数将要发送的数据存储在队列中，然后在tx_isr中从队列中读取数据并发送到USART。类似地，可以使用rx_isr从USART接收数据，并使用queue_dequeue函数将接收到的数据存储在uint8_t item中。 </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191021393.png" alt="image-20230419102136352"></p><h5 id="tx-入队"><a href="#tx-入队" class="headerlink" title="tx 入队"></a>tx 入队</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">queue_enqueue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">queue_is_full</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>queue<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>queue<span class="token operator">-&gt;</span>tail<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>queue<span class="token operator">-&gt;</span>tail <span class="token operator">%=</span> queue<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>uint8_t　无符号8位整数　通常用于存储字节数据</p><h5 id="rx出队"><a href="#rx出队" class="headerlink" title="rx出队"></a>rx出队</h5><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">queue_dequeue</span><span class="token punctuation">(</span>Queue <span class="token operator">*</span>queue<span class="token punctuation">,</span> <span class="token class-name">uint8_t</span> <span class="token operator">*</span>item<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">queue_is_empty</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token operator">*</span>item <span class="token operator">=</span> queue<span class="token operator">-&gt;</span>data<span class="token punctuation">[</span>queue<span class="token operator">-&gt;</span>head<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>queue<span class="token operator">-&gt;</span>head <span class="token operator">%=</span> queue<span class="token operator">-&gt;</span>size<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Control-registers"><a href="#Control-registers" class="headerlink" title="Control registers"></a>Control registers</h3><h4 id="USART-CR1"><a href="#USART-CR1" class="headerlink" title="USART_CR1"></a>USART_CR1</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191023955.png" alt="image-20230419102305917"></p><ul><li><p>UE: USART使能位。当该位为1时，USART才能正常工作。</p></li><li><p>M: 字长位。当该位为0时，数据帧长度为8位；当该位为1时，数据帧长度为9位。</p></li><li><p>PCE: 奇偶校验使能位。当该位为1时，启用奇偶校验；当该位为0时，禁用奇偶校验。</p></li><li><p>PS: 奇偶校验选择位。当PCE=1时，PS=0表示选择偶校验；PS=1表示选择奇校验。</p></li><li><p>TE: 发送使能位。当该位为1时，允许发送数据。 - RE: 接收使能位。当该位为1时，允许接收数据。 </p></li><li><p>OVER8: 过采样率选择位。当OVER8=0时，使用16倍过采样率；当OVER8=1时，使用8倍过采样率。</p></li><li><p>PEIE: 它的全称是Parity Error Interrupt Enable。当PEIE位被设置为1时，如果接收到的数据帧出现奇偶校验错误，将会产生一个奇偶校验错误中断。</p></li></ul><h4 id="USART-CR2"><a href="#USART-CR2" class="headerlink" title="USART_CR2"></a>USART_CR2</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191025843.png" alt="image-20230419102550804"></p><ul><li>ADD[3:0]: 地址位。当LINEN=1时，ADD[3:0]表示从机地址；当LINEN=0时，ADD[3:0]表示节点地址。 </li><li>LBDL: LIN波特率检测长度位。当LINEN=1时，LBDL=0表示检测10个比特时间；LBDL=1表示检测11个比特时间。 </li><li>LBDIE: LIN波特率检测中断使能位。当LINEN=1且LBDIE=1时，在检测到LIN波特率错误时会产生一个中断。 </li><li><strong>STOP[1:0]</strong>: 停止位长度位。STOP[1:0]=00表示使用1个停止位；STOP[1:0]=01表示使用0.5个停止位；STOP[1:0]=10表示使用2个停止位；STOP[1:0]=11保留。</li><li><strong>CLKEN:</strong> 时钟使能位。当该位为1时，允许外部时钟输入到USART。 - CPOL: 时钟极性选择位。当CLKEN=1时，<strong>CPOL为串行同步模式下的时钟极性选择位</strong>。</li><li>CPHA: 时钟相位选择位。当CLKEN=1时，CPHA为串行同步模式下的时钟相位选择位。</li></ul><h4 id="Status-register-USART-SR"><a href="#Status-register-USART-SR" class="headerlink" title="Status register: USART_SR"></a>Status register: USART_SR</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191028338.png" alt="image-20230419102812298"></p><ul><li>PE: 奇偶校验错误标志位。当接收到的数据帧出现奇偶校验错误时，该位被置为1。 </li><li>FE: 帧错误标志位。当接收到的数据帧出现帧错误（即停止位不正确）时，该位被置为1。 </li><li>NF: 噪声检测标志位。当接收到的数据帧中出现噪声时，该位被置为1。</li><li>ORE: 溢出错误标志位。当接收缓冲区溢出时，该位被置为1。 </li><li>IDLE: 空闲线路状态标志位。当接收线路空闲一段时间后，该位被置为1。</li><li>RXNE: 接收缓冲区非空标志位。当接收缓冲区中有未读取的数据时，该位被置为1。 </li><li>TC: 传输完成标志位。当发送数据完成后（包括最后一个停止位），该位被置为1。 </li><li>TXE: 发送缓冲区空标志位。当发送缓冲区为空时，该位被置为1。</li></ul><h4 id="Baud-rate-register-USART-BRR"><a href="#Baud-rate-register-USART-BRR" class="headerlink" title="Baud rate register: USART_BRR"></a>Baud rate register: USART_BRR</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191034434.png" alt="image-20230419103441387"></p><h3 id="USART-Character-description"><a href="#USART-Character-description" class="headerlink" title="USART Character description"></a><strong>USART Character description</strong></h3><p>• Word length (depends on M in USAR_CR1)</p><p>• TX pin is in <strong>low state during the start bit</strong>. It is in <strong>high state during the stop bit</strong></p><p>• Idle character**:** an entire frame of “1”s</p><p>• Break character: receiving “0”s for a frame period</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191037203.png" alt="image-20230419103703159"></p><h3 id="USART-Transmitter"><a href="#USART-Transmitter" class="headerlink" title="USART Transmitter"></a>USART Transmitter</h3><p>当【USART_AR1中的】TE设定后，在<u>transmit shift register</u>中的数据会输出到TX上（LSB先出）</p><p>USART_DR（TDR）用于缓存内部总线和发送移位寄存器之间的数据</p><p>写入USART_DR（TDR）时将TXE（Transmit buffer empty）标清除。</p><p>TXE set by HW if:</p><p>• Data moved from TDR to the shift register- Data TX started</p><p>• TDR register is empty.</p><p>• Next data can be written in the USART_DR register</p><p>USART_DR是一个数据寄存器，用于缓存接收和发送的数据。具体来说，当接收到一个字符时，该字符会被存储在USART_DR寄存器中；当发送一个字符时，该字符会从USART_DR寄存器中读取并传到发送移位寄存器中。</p><p>在空闲状态时**,<strong>传送线为逻辑“</strong>1<strong>”状态，而数据的传送总是以一个起始位“</strong>**0*<em><strong>”开始，所以当接收器检测到一个从“</strong></em>*1*<em><strong>”向“</strong></em>*0*<em><strong>”的跳变时，便视为可能的起始位</strong></em>*,*<em><strong>传送线为逻辑“</strong></em>*1*<em><strong>”状态，而数据的传送总是以一个起始位“</strong></em>*0*<em><strong>”开始，所以当接收器检测到一个从“</strong></em>*1*<em><strong>”向“</strong></em>*0****”的跳变时，便视为可能的起始位</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191045124.png" alt="image-20220531205633643"></p><p>TXE告诉：总线空了、总线开始</p><h3 id="USART-Receiver"><a href="#USART-Receiver" class="headerlink" title="USART Receiver"></a><strong>USART Receiver</strong></h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191054959.png" alt="image-20220531205933543"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191055675.png" alt="image-20230419105502622"></p><p>八倍过采样（一个bit采8个点），时钟容忍偏差会降低</p><p>在过采样过程中，每个数据位都会被重复采样多次，以提高数据传输的可靠性和精度。而在这些重复采样的数据位中，只有中间三个样值是必要的，因为它们可以提供足够的信息来确定数据位的值。</p><p>==用上图中间采样的三位来根据下表进行判断==，用于噪声误差检测和字符接收</p><p>当接收器在预期时间内未能识别到停止位（stop bit）时，就会发生帧错误，并且USART_SR寄存器中的FE位会被设置为1。FE位通过USART_SR寄存器读操作和USART_DR寄存器读操作复位。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191100096.png" alt="image-20230419110056053"></p><p>中间的都是noise</p><h3 id="USART-Baud-Rate-generation"><a href="#USART-Baud-Rate-generation" class="headerlink" title="USART Baud Rate generation"></a><strong>USART Baud Rate generation</strong></h3><p>The baud rate for Rx and TX are both set to the same value as programmed in the Mantissa and Fraction values of USARTDIV in USART_BRR.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191104855.png" alt="image-20220531210710399"></p><p>OVER8在使用16 oversampling的时候设为0；当使用8 oversampling的时候设为1</p><p><code>USARTDIV</code>是一个在<em><strong>USART_BRR</strong></em>寄存器上编码的unsigned fix number。</p><p><strong>USART_BRR</strong>：（靠近MSB）前12位为Mantissa；后4位为Fraction</p><p><code>USART_CR1</code>中的OVER8定义过采样率</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191106718.png" alt="image-20220531211025713"></p><p>得到4位的Fraction后，用Fraction的十进制数除以16得到fraction所表示的小数</p><p>左边例子：</p><ul><li>0x1BC转为二进制为11011 1100，取前五位为Mantissa，<strong>后四位为Fraction</strong>【永远用四位为Fraction，是固定的，最多12位表示整数】</li></ul><p>The lower the CPU clock the lower the accuracy for a particular baud rate. </p><h3 id="USART-Parity-check"><a href="#USART-Parity-check" class="headerlink" title="USART Parity check"></a><strong>USART Parity check</strong></h3><p>• Parity control = generation of parity bit in transmission and parity checking in reception.</p><p>• Enabled by setting the PCE bit in the USART_CR1.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191209885.png" alt="image-20230419120916841"></p><p>SB：开始位   STB：结束位  PB：校验位</p><p>M控制 9比特（1） 8比特（0）</p><p>PCE控制是否启用PB（包含在设定的比特数之中）</p><p><strong>Even parity:</strong> obtain an even number of “1s” inside the frame made of data bits and the parity bit. E.g.: data=00110101; 4 bits set=&gt; parity bit will be 0 (PS bit in USART_CR1 = 0).</p><p><strong>Odd parity:</strong> obtain an odd number of “1s” inside the frame made of data bits and the parity bit. E.g.: data=00110101; 4 bits set =&gt; parity bit will be 1 (PS bit inUSART_CR1 = 1).</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191229643.png" alt="image-20230419122959587"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191230473.png" alt="image-20230419123007422"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191230939.png" alt="image-20230419123015886"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191230886.png" alt="image-20230419123059821"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191231269.png" alt="image-20230419123112202"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304191231247.png" alt="image-20230419123119195"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07-timer</title>
      <link href="//post/07-timer.html"/>
      <url>//post/07-timer.html</url>
      
        <content type="html"><![CDATA[<h1 id="Timer-Peripherals"><a href="#Timer-Peripherals" class="headerlink" title="Timer Peripherals"></a>Timer Peripherals</h1><h2 id="How-long-does-it-take-to-execute-an-ARM-instruction"><a href="#How-long-does-it-take-to-execute-an-ARM-instruction" class="headerlink" title="How long does it take to execute an ARM instruction?"></a>How long does it take to execute an ARM instruction?</h2><p>Different instructions requires different clock cycles to complete.</p><p>• CPI = Clock Per Instruction 每条指令所需时钟周期数</p><p>• For instance, CPI of MOV is 1 (unless move to PC).</p><p>ARM M3/M4是pipelined processor，因此可以并行执行多个指令以节省时间。因此，CPI并不固定（但是平均值是可计算的）</p><p>The actual timing of instructions can only be determined when the whole program is ready for simulation or analysis.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305080818477.png" alt="image-20230508081853396"></p><h3 id="Time-Delay-Loop"><a href="#Time-Delay-Loop" class="headerlink" title="Time Delay Loop"></a>Time Delay Loop</h3><p>Estimate the time taken to execute the following code snippet (in terms of clock cycles):</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">DELAYMOV r0, #250LOOPSUBS r0, #1BNE LOOP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>MOV指令需要1个时钟周期，SUBS指令需要1个时钟周期，BNE指令需要3个时钟周期</p><p>Time delay<br>~= 1 + 250 x (1 + 3)<br>~= 1001 cycles<br>This is approximate because of BNE.</p><hr><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">DELAYMOV r0, #250LOOPNOPNOPNOPNOPSUBS r0, #1BNE LOOP<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>NOP需要一个周期</p><p>Time delay<br>~= 1 + 250 x (1 x 4 + 1 + 3)<br>~= 2001 cycles<br>if CPU runs at 80 MHz, this takes approximate 25 μs to execute.</p><p>2001/80,000,000秒，约为25微秒（μs）</p><h3 id="Longer-Time-Delay"><a href="#Longer-Time-Delay" class="headerlink" title="Longer Time Delay"></a>Longer Time Delay</h3><p>可以实现精确的时间延迟</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">__asm void delay_cycles(unsigned int cycles){LSRS r0, #2 // logic shift right 2 bits (/4)BEQ doneloop // each time it takes 4 cyclesSUBS r0, #1BNE loopdoneBX lr}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Time delay = 1 + 1 + cycles/4 x (1 + 3) + 2 (assume BEQ not taken)= cycles + 4</p><p>一开始除4是因为后面循环里有四个周期的指令所以保证传入的参数为cycle</p><p>？？？？？</p><h4 id="实现一个任意长度的延时"><a href="#实现一个任意长度的延时" class="headerlink" title="实现一个任意长度的延时"></a>实现一个任意长度的延时</h4><p>The no. of cycles that can be waited is limited by the size of unsigned int = 32 bits in ARM M3/M4, so we need to calculate how many times we need to call <strong>delay_cycles()</strong>, depending on the clock frequency (<strong>SystemCoreClock</strong> in the code)</p><p> SystemCoreClock:频率，一秒中有几个周期</p><pre class="line-numbers language-assembly" data-language="assembly"><code class="language-assembly">void delay_ms(unsigned int ms) {unsigned int max_step =               //最多计时多少ms 1000 * (UINT32_MAX / SystemCoreClock);//乘以1000是为了将延迟时间从秒转换为毫秒unsigned int max_sleep_cycles = max_step * (SystemCoreClock / 1000); //最多记多少个时钟周期数while (ms &gt; max_step) {ms -= max_step;delay_cycles(max_sleep_cycles);}delay_cycles(ms * (SystemCoreClock / 1000));}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>SystemCoreClock是一个变量，它存储了当前系统的时钟频率</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305081704495.png" alt="image-20230508170404428"></p><h2 id="Timer-Concept"><a href="#Timer-Concept" class="headerlink" title="Timer: Concept"></a>Timer: Concept</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305081711944.png" alt="image-20220430165555035"></p><ul><li><p>Based on <strong>presettable</strong> (i.e. load with a start value) binary counter</p></li><li><p>It is enhanced with configurability:</p><ul><li><p>Count value can be read and written by the processor 可自定义计数</p></li><li><p>Count direction can often <strong>be set to up or down</strong> 可向上或者向下计数</p></li><li><p>Counter’s <strong>clock source can be selected</strong></p><ul><li>Counter mode: count pulses which indicate events (e.g. odometer pulses)</li><li>Timer mode: clock source is periodic, so counter value is proportional to elapsed time (e.g. stopwatch)</li></ul></li><li><p><strong>Counter’s overflow/underflow action can be selected</strong></p><p>Generate interrupt</p><p>Reload counter with special value and continue counting<br>Toggle hardware output signal</p></li></ul></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305081727616.png" alt="image-20230508172715566"></p><h3 id="Interrupt-Timer"><a href="#Interrupt-Timer" class="headerlink" title="Interrupt Timer"></a>Interrupt Timer</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305081727778.png" alt="image-20230508172729744"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305081728179.png" alt="image-20230508172800148"></p><p>• Load start value from register</p><p>• Counter counts down with each clock pulse</p><p>• When timer value reaches zero</p><p>​• Generates interrupt</p><p>​• <strong>Reloads</strong> timer with start value</p><h4 id="Calculating-Start-Value"><a href="#Calculating-Start-Value" class="headerlink" title="Calculating Start Value"></a>Calculating Start Value</h4><p>计算初始值</p><p>Start value = round(<em>T</em> x Freq) - 1</p><p>T是所需的中断间隔（以秒为单位），Freq是时钟频率（以赫兹为单位）。由于定时器的计数器寄存器只能容纳整数值，因此此公式的结果应四舍五入到最近的整数。</p><p>• Example 1: interrupt every 137.41 ms, assuming clock frequency 24 MHz</p><p>​• 137.41 ms x 24 MHz – 1 = 3297839 (happens to be integer)</p><p>• Example 2: interrupt with a frequency of 88 Hz with a 56 MHz clock</p><p>​• round((1/88 Hz) x 46 MHz) - 1 = 522726</p><p>​• actual frequency = 88.0000004591 Hz (very small error)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305081734294.png" alt="image-20230508173459249"></p><p>以100微秒的分辨率测量时间并显示经过的时间，每10毫秒更新屏幕。它使用中断定时器和一个计数器，每100微秒从起始值递减。定时器设置为每100微秒到期一次，并使用公式round(T x Freq) - 1计算起始值，其中T是所需的时间间隔，Freq是时钟频率。例如，在24 MHz的时钟频率下，100微秒时间间隔的起始值将为round(100微秒 x 24 MHz) - 1 = 2399。LCD在N-th ISR更新一次，其中N等于10毫秒/100微秒 = 100。为避免减慢ISR速度，在ISR中设置标志并在主循环中轮询该标志来更新LCD。</p><h3 id="PWM-Module-TPM"><a href="#PWM-Module-TPM" class="headerlink" title="PWM Module (TPM)"></a>PWM Module (TPM)</h3><p><strong>Core Counter</strong></p><ul><li>Clock options - external or internal (signal)</li><li>Prescaler to divide clock (预分频分)</li><li>Can reload with set value, or overflow and wrap around</li></ul><p>Multiple channels - <strong>several modes</strong></p><ul><li><p>Capture Mode: <strong>Capture timer’s value when input signal changes</strong></p></li><li><p>Output Compare: <strong>Change an output signal when timer reaches certain value</strong>.</p><p>输出比较模式。在输出比较模式下，当计时器达到指定值时，可以修改输出信号。可以设置、清除、脉冲或切换（反转）输出信号</p></li><li><p>PWM: <strong>Generate pulse-width-modulated signal. Width of pulse is proportional to specified value.</strong></p></li></ul><p><strong>Possible triggering of interrupt, hardware trigger on overflow</strong></p><p><strong>One I/O pin per channel</strong></p><h4 id="Major-Channel-Modes"><a href="#Major-Channel-Modes" class="headerlink" title="Major Channel Modes"></a>Major Channel Modes</h4><ul><li>Input Capture Mode</li></ul><p>捕获模式。在捕获模式下，计时器会在输入信号发生变化（上升沿、下降沿或两者）时捕获计时器的值。这种模式可以回答一个问题：“我启动计时器后多久输入信号发生变化？”因此，它有效地测量时间差异。</p><ul><li><p>Output Compare Mode</p><p>Modify output signal when timer reaches specified value Set, clear, pulse, toggle (invert)</p><p>Make a pulse of specified width</p><p>Make a pulse after specified delay</p></li></ul><p>Output Compare Mode 是一种计时器模式，用于比较计时器的值和预设的比较值。当计时器的值与比较值相等时，可以执行一些操作，例如生成输出信号或调用中断。在Output Compare Mode中，可以设置不同的操作类型，例如Toggle、Clear和Set等。</p><ul><li>Pulse Width Modulation</li></ul><p>Make a series of pulses of specified width and frequency</p><h5 id="Input-Capture-Mode"><a href="#Input-Capture-Mode" class="headerlink" title="Input Capture Mode"></a>Input Capture Mode</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305081748134.png" alt="image-20230508174854095"></p><p>I/O pin operates as input on edge</p><p>• When valid edge is detected on pin…</p><p>​• Current value of counter is stored</p><p>​• Interrupt is called</p><p>当有效边沿到来时，启动中断，并保存当前值</p><p>当计时器捕获到输入信号的状态变化时，会触发一个中断，并将当前计数器的值保存下来。</p><h4 id="Output-Compare-Mode"><a href="#Output-Compare-Mode" class="headerlink" title="Output Compare Mode"></a>Output Compare Mode</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305082006430.png" alt="image-20230508200606387"></p><p>设置比较值来控制输出信号的变化方式，如切换、清除或设置等。</p><p>Action on match</p><p>• Toggle</p><p>• Clear</p><p>• Set</p><p>When counter matches value …</p><p>• Output signal is generated</p><p>• Interrupt is called (if enabled)</p><h4 id="Pulse-Width-Modulation-PWM"><a href="#Pulse-Width-Modulation-PWM" class="headerlink" title="Pulse Width Modulation (PWM)"></a>Pulse Width Modulation (PWM)</h4><p>• Digital power amplifiers are more efficient and less expensive than analog power amplifiers</p><p>• Applications: motor speed control, light dimmer, switch-mode power conversion</p><p>• Load (motor, light, etc.) responds slowly, averages PWM signal</p><p>• Digital communication is less sensitive to noise than analog methods</p><p>​• PWM provides a digital encoding of an analog value</p><p>​• Much less vulnerable to noise</p><h5 id="PWM-signal-characteristics"><a href="#PWM-signal-characteristics" class="headerlink" title="PWM signal characteristics"></a>PWM signal characteristics</h5><p>• Fixed modulation frequency <em>fmod</em> how many pulses occur per second </p><p>固定的调制频率fmod，即每秒发生多少个脉冲</p><p>• Period: 1 / <em>fmod</em></p><p>• On-time: amount of time that each pulse is on (asserted)</p><p>• Duty-cycle: on-time/period</p><p>• Adjust on-time (hence duty cycle) to represent the analog value</p><p>占空比为高电平时间与周期时间之比，可以通过调整高电平时间来改变占空比，从而实现对外设的控制。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305082021362.png" alt="image-20230508202130315"></p><p>PWM duty cycle proportional to compare value 占空比和比较值成正比</p><p><strong>• Period = max timer value(最多能记多少数)</strong></p><p><strong>• On-time = compare value（设定的比较值）</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305082022855.png" alt="image-20230508202211820"></p><h5 id="Servo-Motor"><a href="#Servo-Motor" class="headerlink" title="Servo Motor"></a>Servo Motor</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305082024817.png" alt="image-20230508202407753"></p><p>在PWM模式下，可以通过改变比较值来控制输出信号的高电平时间，从而控制伺服电机的转动角度。具体地说，PWM信号的周期为20ms，高电平时间在1ms到2ms之间变化，对应着伺服电机转动角度在0度到180度之间变化。</p><h3 id="Low-Power-Timer"><a href="#Low-Power-Timer" class="headerlink" title="Low Power Timer"></a>Low Power Timer</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305082026343.png" alt="image-20230508202609300"></p><p>•特点</p><p>•计数时间或外部脉冲 当计数器匹配比较值时产生中断</p><p>•中断从低功耗模式唤醒MCU</p><p>•电流绘制可以降低到微安甚至纳安!</p><p>Use the <strong>WFI</strong> (Wait For Instruction) instruction (<strong>__WFI()</strong> in C)</p><p>• Puts CPU in low power mode until interrupt request</p><h2 id="Programming-SysTick-and-Interrupt-in-C-with-CMSIS"><a href="#Programming-SysTick-and-Interrupt-in-C-with-CMSIS" class="headerlink" title="Programming SysTick and Interrupt in C (with CMSIS)"></a>Programming SysTick and Interrupt in C (with CMSIS)</h2><p>Cortex-M processors have a small <strong>integrated timer called the SysTick (System Tick) timer.</strong> Cortex‐M3 处理器内部包含了一个简单的定时器。因为所有的 CM3 芯片都带有这个定时器，软件在不同 CM3 器件间的移植工作得以化简。</p><ul><li>Part of NVIC, generating SysTick interrupt.</li></ul><p>SysTick timer is a simple ==decrement== ==24-bit== timer.</p><ul><li>either <strong>on processor clock frequency</strong> 处理器时钟频率, or</li><li><strong>a reference clock frequency</strong> (e.g. on-chip clock source 片上时钟源)</li></ul><p> Systick 是 <a href="https://so.csdn.net/so/search?q=STM32&amp;spm=1001.2101.3001.7020">STM32</a> 的一个系统定时器，又名系统嘀嗒定时器，是一个 24 位的倒计数定时器，当计数到 0 时，将从 RELOAD 寄存器中自动重装载定时初值，开始新一轮计数。</p><p>It is common in modern OS that we need a periodic interrupt to execute the OS kernel.</p><p>Even without an OS, SysTick can be used for periodic interrupt generation, delay generation, or timing measurement.</p><p>即使没有操作系统，SysTick也可以用于周期性中断生成、延迟生成或时间测量。</p><h4 id="SysTick-timer-has-4-registers"><a href="#SysTick-timer-has-4-registers" class="headerlink" title="SysTick timer has 4 registers."></a>SysTick timer has 4 registers.</h4><p>• The data structure SysTick is defined in CMSIS to access them easily.</p><p>SysTick定时器在CTRL寄存器的第0位启用。当SysTick计数器减为0时，它将从VAL寄存器中加载一个新值，并继续计数。</p><p>VAL寄存器是SysTick定时器的当前值寄存器，它保存了当前的计数值。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305082104890.png" alt="image-20230508210428845"></p><p>控制及状态寄存器（CTRL）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305082105964.png" alt="image-20230508210552866"></p><p>重装载数值寄存器（LOAD）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305082106048.png" alt="image-20230508210600986"></p><p>几个周期</p><p>当前数字寄存器（VAL）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305082106826.png" alt="image-20230508210608755"></p><p>校准数值寄存器（CALIB）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305082106904.png" alt="image-20230508210615856"></p><h3 id="Using-the-SysTick-Timer-CMSIS"><a href="#Using-the-SysTick-Timer-CMSIS" class="headerlink" title="Using the SysTick Timer (CMSIS)"></a>Using the SysTick Timer (CMSIS)</h3><p>The easiest way to generate a period SysTick interrupt is to use this CMSIS-Core fuction:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token class-name">uint32_t</span> <span class="token function">SysTick_Config</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> ticks<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The function sets the interrupt interval to ticks, enables the counter using processor clock and enables the SysTick exception with lowest priority.</p><p>将中断周期设置为ticks，并使用处理器时钟启用计数器和SysTick异常，优先级最低。</p><p>优先级最低，因此其他中断可以在SysTick异常之前被处理。</p><p>Example: if you want to trigger a SysTick exception of 1 kHz,</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">SysTick_config</span><span class="token punctuation">(</span>SystemCoreClock <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>SystemCoreClock:系统周期，对应频率1HZ，除1000，对应频率1000Hz</p><p>Then <strong>SysTick_Handler(void)</strong> is triggered at a rate of 1 kHz</p><h4 id="Writing-to-SysTick-registers"><a href="#Writing-to-SysTick-registers" class="headerlink" title="Writing to SysTick registers"></a>Writing to SysTick registers</h4><p>如果你想使用参考时钟源或不触发中断，你可以直接写到SysTick寄存器。</p><ol><li><p>在“SysTick-&gt;CTRL”中输入“0”，关闭SysTick定时器。(以防之前已启用)</p></li><li><p>将新的加载值写入 SysTick-&gt;LOAD  重新加载值应该是(间隔值- 1)。</p></li><li><p>写入SysTick当前值寄存器 SysTick-&gt;VAL    清除当前值为0。</p></li><li><p>写入到SysTick控制和状态寄存器 SysTick-&gt;CTRL   启动SysTick定时器</p></li></ol><p>A simple C example of polling SysTick value for timed delay.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// stop SysTick</span>SysTick<span class="token operator">-&gt;</span>LOAD <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span> <span class="token comment">// count 255+1=256 cycles</span>SysTick<span class="token operator">-&gt;</span>VAL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">//使能+内核时钟</span><span class="token comment">// wait until count flag is set</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">&amp;</span> <span class="token number">0x00010000</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//16bits变为1</span>SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// stop SysTick</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Building-Driver-for-SysTicks"><a href="#Building-Driver-for-SysTicks" class="headerlink" title="Building Driver for SysTicks"></a>Building Driver for SysTicks</h3><ul><li>设置每(timestamp)μs触发一个interrupt</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">timer_init</span><span class="token punctuation">(</span>timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>设置Interrupt handler</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">timer_set_callback</span><span class="token punctuation">(</span>timer_isr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>启动SysTicks</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">timer_enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>关闭SysTicks</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">timer_disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="timer-init"><a href="#timer-init" class="headerlink" title="timer_init()"></a>timer_init()</h4><h4 id=""><a href="#" class="headerlink" title=""></a></h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">timer_init</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">uint32_t</span> tick_us <span class="token operator">=</span> <span class="token punctuation">(</span>SystemCoreClock<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1e6</span><span class="token punctuation">;</span>tick_us <span class="token operator">=</span> tick_us<span class="token operator">*</span>timestamp<span class="token punctuation">;</span><span class="token function">SysTick_Config</span><span class="token punctuation">(</span>tick_us<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//NVIC_SetPriority(SysTick_IRQn, 3);</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Explanation:</p><ul><li>Calculate how many cycles for <strong>each millisecond</strong></li><li>Multiply with timestamp to get required interval (in cycles)</li><li>Configure the interval using SysTick_Config()</li><li><em>Change interrupt priority if needed</em></li></ul><h4 id="Enable-x2F-Disable-Timer"><a href="#Enable-x2F-Disable-Timer" class="headerlink" title="Enable/Disable Timer"></a>Enable/Disable Timer</h4><p>Start and stop the timer by setting/clearing the right bits</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">timer_enable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">=</span> SysTick_CTRL_CLKSOURCE_Msk <span class="token operator">|</span>SysTick_CTRL_TICKINT_Msk <span class="token operator">|</span>SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span><span class="token punctuation">}</span>将三个bit初始化<span class="token keyword">void</span> <span class="token function">timer_disable</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>SysTick<span class="token operator">-&gt;</span>CTRL <span class="token operator">&amp;=</span> <span class="token operator">~</span>SysTick_CTRL_ENABLE_Msk<span class="token punctuation">;</span><span class="token punctuation">}</span>只将enable设为<span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>• start: processor clock, enable interrupt and enable timer</p><p>• stop: disable timer (clear bit 0)</p><p>• All bit masks (e.g. SysTick_CTRL_CLKSOURCE_Msk) are defined for compatibility (and no need to remember exact bit no.)</p><p>Set up a pointer to function for the interrupt service routine</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>timer_callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">timer_set_callback</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>callback<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>timer_callback <span class="token operator">=</span> callback<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">SysTick_Handler</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">timer_callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用户通过调用timer_set_callback()提供一个指向回调函数(实际的ISR)的指针。让timer_callback指向ISR</p><p>当计时器中断发生时，SysTick_Handler()被调用，然后它访问回调的指针并调用函数。</p><h4 id="使用实例-Flashing-an-LED"><a href="#使用实例-Flashing-an-LED" class="headerlink" title="使用实例 Flashing an LED"></a>使用实例 Flashing an LED</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">toggle_led</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">gpio_toggle</span><span class="token punctuation">(</span>LED_PIN<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">timer_init</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 100 ms = 100000 us</span><span class="token function">timer_set_callback</span><span class="token punctuation">(</span>toggle_led<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">timer_enable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">__enable_irq</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token function">__WFI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>__enable_irq()</code>: The function enables interrupts and all configurable fault handlers by clearing PRIMASK.</li><li><code>__WFI()</code> suspends execution until one of the following events occurs (put in low power mode). But the while loop can be replaced by other tasks to be run in parallel.</li></ul>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08-I2C</title>
      <link href="//post/08-I2C.html"/>
      <url>//post/08-I2C.html</url>
      
        <content type="html"><![CDATA[<h1 id="I2C"><a href="#I2C" class="headerlink" title="I2C"></a>I2C</h1><h2 id="a-Bus-oriented-Solution"><a href="#a-Bus-oriented-Solution" class="headerlink" title="a Bus-oriented Solution"></a>a Bus-oriented Solution</h2><p>I2C接口和协议:确保消息可以发送从一个设备到另一个选定的目标<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305100844159.png" alt="image-20230510084443084"></p><h3 id="典型I2C配置方案"><a href="#典型I2C配置方案" class="headerlink" title="典型I2C配置方案"></a>典型I2C配置方案</h3><p>Master作为发送端</p><ul><li>初始发送</li><li>创建CLK</li><li>结束发送</li></ul><p>Slave作为接收端</p><ul><li>监听</li><li><strong>等待Master分配地址</strong></li><li>接收数据</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202306112024977.png" alt="image-20230611202413851"></p><p>在I2C总线上，只有主设备才能启动和控制数据传输。从设备则被动地等待主设备的指令并响应</p><h3 id="Transfer-Procedure"><a href="#Transfer-Procedure" class="headerlink" title="Transfer Procedure"></a>Transfer Procedure</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305100855775.png" alt="image-20230510085537738"></p><ol><li>微控制器启动传输。</li><li>微控制器将LCD地址设置为0x27。</li><li>微控制器向LCD发送写入指令。</li><li>LCD确认来自微控制器的调用。 </li><li>微控制器向LCD发送数据（主-发射机和从-接收机）。</li><li>LCD确认接收到的数据。 </li><li>微控制器停止传输。</li></ol><h3 id="Transfer-Protocol"><a href="#Transfer-Protocol" class="headerlink" title="Transfer Protocol"></a>Transfer Protocol</h3><p>数据传输格式通常是8位字节。每个字节都由一个起始位、8个数据位、一个可选的奇偶校验位和一个或2个停止位组成。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305100901984.png" alt="image-20230510090135940"></p><p><strong>Slave address is 7 bits long.</strong></p><p><strong>Theoretically, at most 128 devices can be attached to the same bus</strong></p><ul><li><p>Address后面的一位叫<code>R/W</code>，用来表示是读取还是写，<code>0</code>表示写，<code>1</code>表示读</p></li><li><p>数据总长为一个字节，8个bits，每一个字节就要回一个ACK</p><p>在I2C总线上，主设备和从设备之间的通信是通过交替使用SDA和SCL线来实现的，并且每个字节都有一个相应的ACK或NACK信号来确认是否成功接收。</p></li></ul><h3 id="I2C-Wires-SDA-amp-SCL"><a href="#I2C-Wires-SDA-amp-SCL" class="headerlink" title="I2C Wires: SDA &amp; SCL"></a>I2C Wires: SDA &amp; SCL</h3><p>SDA是数据信号线，用于在主设备和从设备之间传输数据。SCL是时钟信号线，用于同步数据传输。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305100908681.png" alt="image-20230510090851646"></p><ul><li><p>Serial communications - ONE bit is sent at a time. </p></li><li><p>There are 3 elements in serial comm.: START, BIT, STOP</p></li><li><p>SDA: Serial data - transmits actual address/data bits.</p></li><li><p>SCL: Serial clock - synchronises the data.</p></li></ul><p>• Both are pulled up to supply VCC (‘1’) through resistors.</p><p>• Can be pulled down to Gnd (‘0’) by the devices.</p><p>在I2C总线上，SDA和SCL信号线都通过电阻器上拉到VCC电源电压（通常为5V或3.3V），以保持高电平状态。当设备需要将信号拉低时，它们可以通过将SDA和SCL连接到地（GND）来拉低这些信号线</p><p>两个线在<strong>默认情况下都是高电平</strong>【因为连接到了Vcc】【空闲时都是HIGH】</p><p>==SDA和SCL都是bi-directional的==</p><h3 id="I2C-Electrical-Details"><a href="#I2C-Electrical-Details" class="headerlink" title="I2C Electrical Details"></a>I2C Electrical Details</h3><p>Both SDA and SCL are bi-directional.</p><p>• Uses open collector/drain outputs 使用开路集电极/漏极输出</p><p>• Lines float HIGH unless an output goes LOW.</p><p>正常情况下，这些信号线处于高电平状态（即浮空），除非某个设备需要将其拉低以发送数据。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305100915584.png" alt="image-20230510091512546"></p><h3 id="SDA-amp-SCL-START-BIT-STOP"><a href="#SDA-amp-SCL-START-BIT-STOP" class="headerlink" title="SDA &amp; SCL: START, BIT, STOP"></a>SDA &amp; SCL: START, BIT, STOP</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305100916022.png" alt="image-20230510091609984"></p><p>• START and STOP must be generated by the master.</p><p><code>START</code> 和 <code>STOP</code> 都必须是由Master来创建</p><ul><li>START：SCL为1的情况下，检测到SDA中的<em><strong>下降沿</strong></em></li><li>STOP：SCL为1的情况下，检测到SDA中的<em><strong>上升沿</strong></em></li></ul><p><strong>• Data bit is valid only when SCL is ‘1’.</strong></p><p>SCL is also generated by the master.</p><p>时钟频率决定了数据传输速率</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305100921512.png" alt="image-20230510092123471"></p><p>图中为发送address的例子，最后一位ack之前master必须releaseSDA，这样SDA回到默认的高电平状态（为了让接收机拉低以表示ack）</p><h4 id="Acknowledge-Signal-ACK"><a href="#Acknowledge-Signal-ACK" class="headerlink" title="Acknowledge Signal (ACK)"></a>Acknowledge Signal (ACK)</h4><p>• ACK takes place after every byte is sent.</p><p>It signals to the master/transmitter that the byte was successfully received.</p><p>发射器释放SDA线，因此接收器可以将SDA线拉低(‘0’)。</p><ul><li><p>If SDA remain ‘1’, it is a Not acknowledge signal (NACK). Possible scenarios:</p><p>No receiver on the bus</p><p>The receiver is unable to receive or transmit (not ready)</p><p>During the transfer, the receiver does not understand the data / cannot receive any more data bytes.</p><p>A master-receiver uses NACK to signal the end of the transfer to the slave-transmitter (then generates a STOP)如果主设备向从设备发送了一系列字节，并且从设备无法正确接收其中的某个字节，则它可以发送一个Not Acknowledge (NACK)信号来通知主设备停止传输。这可以避免在总线上出现死锁或其他错误情况。当主设备接收到NACK信号时，它会生成一个STOP条件来结束传输。</p></li></ul><h3 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h3><p>优</p><p>Simple and easy to implement</p><p><strong>ICs can be attached or detached without affecting other circuits.</strong></p><p>There are fewer I/O pins &amp; fewer PCB tracks.</p><p>缺点：</p><ul><li>最慢的I2C设备支配着总线性能，尤其是时钟经常被拉长。【木桶效应】</li><li>7位从地址允许(理论上)在同一总线上最多128个设备。</li><li>因为I²C是一个共享总线，一个故障设备会挂起整个总线。例如，它保持拉SDA低(‘0’)，主机不能产生START/STOP。</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305101011419.png" alt="image-20230510101113249"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305101011133.png" alt="image-20230510101148086"></p><h4 id="Clock-Stretching"><a href="#Clock-Stretching" class="headerlink" title="Clock Stretching"></a>Clock Stretching</h4><p>Clock stretching: slave pulls down SCL to ‘0’ while it is not ready for more data.</p><p>从设备在接收到数据时，如果还没有准备好接收更多的数据，它可以将S<strong>CL线拉低来暂停时钟信号的传输</strong>，这样主设备就发不出来新数据。这可以让从设备有足够的时间来处理之前接收到的数据。主设备必须等待SCL线恢复到高电平后才能继续发送数据。在等待期间，主设备必须保持SDA线保持稳定状态以避免出现错误。</p><p>Master has to wait until SCL = ‘1’ again, and continues to send data after an additional minimum buffer time (say 4 μs).</p><p>主设备必须等待一段时间（称为buffer time）以确保从设备已经准备好接收更多的数据。这个buffer time通常是4微秒左右。</p><h4 id="Bus-Arbitration-总线仲裁"><a href="#Bus-Arbitration-总线仲裁" class="headerlink" title="Bus Arbitration 总线仲裁"></a>Bus Arbitration 总线仲裁</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305101023911.png" alt="image-20230510102335862"></p><p>如果一个设备正在发送数据并且检测到SDA和SCL线上的信号与它发送的信号不匹配，则该设备将停止发送数据并等待一段时间后再次尝试发送。</p><p><strong>总线判优：选取与总线发送数据相同的DATA</strong></p><h3 id="10-bit-Addressing"><a href="#10-bit-Addressing" class="headerlink" title="10-bit Addressing"></a>10-bit Addressing</h3><ul><li>10-bit addressing使得可用地址变多</li><li>用10-bit addressing的和用7-bit addressing的<strong>可以混在一起用</strong></li><li><em><strong>10位从地址由START条件(S)或重复START条件(Sr)后的后两个字节组成。</strong></em></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305101042932.png" alt="在这里插入图片描述"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305101043472.png" alt="image-20230510104319439"></p><h3 id="Combined-Format-amp-Repeated-Start"><a href="#Combined-Format-amp-Repeated-Start" class="headerlink" title="Combined Format &amp; Repeated Start"></a>Combined Format &amp; Repeated Start</h3><p>If the master wants to change the direction of transfer, then it simply addresses the slave again using a new R/W’ with another START signal. (instead of a STOP)</p><p><strong>This is usually called the “repeated START” (Sr)</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305101052856.png" alt="image-20230510105224821"></p><p>A master-transmitter addresses and sends a byte to a slave-receiver. Then it generates a repeated START and change the direction.  The slave then becomes a transmitter and sends data afterwards.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305101053015.png" alt="image-20230510105330975"></p><h3 id="Reserved-Address"><a href="#Reserved-Address" class="headerlink" title="Reserved Address"></a>Reserved Address</h3><p>在I2C总线协议中，每个设备都有一个唯一的7位地址，其中一些地址被保留用于特殊目的。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305101108996.png" alt="image-20230510110805955"></p><p>bit是R/W</p><p>如果知道保留地址永远不会用于其预期目的，则可以将保留地址用于从地址。</p><h4 id="General-Call-广播"><a href="#General-Call-广播" class="headerlink" title="General Call 广播"></a>General Call 广播</h4><p>Address “00000000” is reserved for general call: broadcasts to all devices connected to the bus.</p><p>从设备可以:</p><p>•用NACK忽略这个通用调用(什么都不做)</p><p>•对召唤做出回应和承认，并成为一个接收者。</p><p>I2C总线协议中，如果有多个设备响应主设备的请求，这种情况被称为wired-AND。在这种情况下，主设备不知道响应请求的设备数量。因此，设计系统时需要确保每个请求只有一个设备响应或使用其他方法（例如仲裁）来解决冲突并确保总线上的正确通信</p><p>The second byte in this general call determines the action requested by the master, including Software reset, START byte (for MCU transfer), Bus clear, Device ID</p><p>第二个字节用于指定主设备请求的操作类型。这些操作类型包括软件复位、START字节（用于MCU传输）、总线清除和设备ID等。</p><h2 id="Programming-I2C-in-Cortex-M3-x2F-M4"><a href="#Programming-I2C-in-Cortex-M3-x2F-M4" class="headerlink" title="Programming I2C in Cortex M3/M4"></a>Programming I2C in Cortex M3/M4</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305120831610.png" alt="image-20230512083119565"></p><h4 id="Slave-Mode"><a href="#Slave-Mode" class="headerlink" title="Slave Mode"></a>Slave Mode</h4><blockquote><p>On default, the I2C interface works in slave mode.</p></blockquote><p>• The peripheral input clock must be programmed in the I2C_CR2 register in order to generate correct timings. 在I2C_CR2寄存器中设置外设输入时钟</p><p>标准模式下，SCL时钟频率最高为100 kHz时，外设输入时钟频率必须至少为2 MHz</p><p>It match the slave address in <strong>OAR1</strong>. When matched it generates:</p><p>• an acknowledge pulse if the ACK bit is set </p><p>• the ADDR bit is set by hardware and an interrupt is generated if the ITEVFEN bit is set. </p><p>硬件会将ADDR位设置，并且如果ITEVFEN位被设置，则会生成一个中断</p><p><strong>Own Address Register</strong></p><p>自身地址寄存器。在I2C从设备模式下，当主设备向从设备发送数据时，主设备需要知道从设备的地址才能正确地将数据发送到该从设备。因此，在OAR1寄存器中设置了从设备的地址。</p><p>The TRA bit indicates whether the slave is in Receiver or Transmitter mode. </p><p>TRA是I2C接口的一个位，它是指“Transmitter/Receiver Address bit”，即传输器/接收器地址位。在I2C从设备模式下，当主设备向从设备发送数据时，该位指示从设备当前处于接收器模式还是传输器模式。如果该位被设置为1，则表示从设备当前处于传输器模式；如果该位被设置为0，则表示从设备当前处于接收器模式。</p><h5 id="Transmitter"><a href="#Transmitter" class="headerlink" title="Transmitter"></a>Transmitter</h5><p>硬件通过<u>内部移位寄存器</u><strong>从DR寄存器发送字节到SDA线</strong>。</p><p>当从设备向主设备发送数据时，它会将SCL线拉低，直到ADDR(从设备的地址匹配)被清除并且DR(从设备)被填充了要发送的数据（在下面的EV1和EV3-1期间）。这会强制主设备等待数据。当从设备接收到来自主设备的应答脉冲时，如果ITEVFEN和ITBUFEN位都被设置，则硬件会设置TxE位并产生中断。</p><ul><li>ITBUFEN和ITEVFEN是I2C总线上的中断控制寄存器位。它们用于控制I2C总线上的中断事件。</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305120929182.png" alt="image-20230512092903139"></p><p>EV3-1表示数据寄存器（DR）为空，软件将Data1写入DR。这意味着主设备已经向从设备发送了地址，并且从设备已经确认地址匹配。此时，主设备可以将数据写入DR并开始传输数据。EV3表示数据寄存器（DR）为空，但是移位寄存器正在传输数据。这意味着主设备已经开始向从设备发送数据，并且正在通过移位寄存器逐位传输字节。</p><h5 id="Receiver"><a href="#Receiver" class="headerlink" title="Receiver"></a>Receiver</h5><p>HW通过<u>内部移位寄存器</u><strong>从SDA线接收字节到DR寄存器</strong>。</p><p>After each byte the interface generates in sequence: </p><ul><li>ACK设置为1表示确认脉冲</li><li><code>RxNE</code>位由硬件设置，如果设置了<code>ITEVFEN</code>和<code>ITBUFEN</code>位，则会产生一个Interrupt。</li></ul><p>如果设置了RxNE，并且在<u>下一次数据接收结束之前没有读取DR寄存器中的数</u>据，则设置BTF位，将SCL拉低，使HW等待，<u>直到从I2C_DR寄存器读取BTF清除</u>。【确保Slave接收到了每一个bit】</p><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220621122047573.png" alt="image-20220621122047573"></p><p>接收完最后一个Byte之后，Master会发一个<code>STOP</code>，在HW检测到<code>STOP</code> bit后会设置<code>STOPF</code>bit。如果<code>ITEVFEN=1</code>的话，还会产生一个Interrupt</p><h4 id="Master-Mode"><a href="#Master-Mode" class="headerlink" title="Master Mode"></a>Master Mode</h4><p><em><strong>HW启动数据传输并产生时钟信号</strong></em>，其初始化顺序如下:</p><ul><li>在<code>I2C_CR2</code>中编写Peripheral input clock</li><li>Configure the <u>clock control registers</u></li><li>Configure the <u>rise time register</u></li><li>Program <u>I2C_CR1 registers to enable</u></li><li>Set the <u>START bit in I2C_CR1</u></li></ul><p>HW检查SCL是否有任何stretching</p><p><em><strong>设置START bit会导致 HW产生一个START(a Restart)，并切换到Master模式。</strong></em></p><ul><li>START bit由HW设置，当<code>ITEVFEN=1</code>时产生中断。</li></ul><p>Then it <strong>waits for a read of the SR1 (from SW)</strong> and  <strong>then a write to DR with the slave address</strong>.</p><ul><li>HW enters transmitter mode if R/W’ (LSB in DR) = 0;</li><li>HW enters receiver mode otherwise</li></ul><p>只要发送地址字节，硬件就会设置<code>ADDR bit</code>，如果<code>ITEVFEN=1</code>就会产生interrupt。</p><h5 id="Transmitter-1"><a href="#Transmitter-1" class="headerlink" title="Transmitter"></a>Transmitter</h5><ul><li>SW清除ADDR并向DR加载数据。</li><li>然后HW向SDA发送bytes。</li><li>当slave发送ACK时，<code>TxE</code>位由硬件设置，如果<code>ITEVFEN=ITBUFEN=1</code>【两个同时为1】则产生中断。</li><li>SW设置STOP bit，产生STOP signal。</li><li><u>然后HW回到slave模式</u>。</li></ul><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220621123122664.png" alt="image-20220621123122664"></p><h5 id="Master-i2c-write"><a href="#Master-i2c-write" class="headerlink" title="Master: i2c_write()"></a>Master: i2c_write()</h5><p>利用CMSIS的一些函数，用C代码研究基本轮询版本的主发射机。这里假设使用了I2C1【有很多I2C可以用，这里只用了一个】。</p><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220621123317863.png" alt="image-20220621123317863"></p><h5 id="Receiver-1"><a href="#Receiver-1" class="headerlink" title="Receiver"></a>Receiver</h5><ul><li>HW通过内部移位寄存器从SDA线路接收字节到DR。</li><li>After each byte the interface generates in sequence: <ul><li>An acknowledge pulse if the ACK bit is set</li><li>The RxNE bit is set and an interrupt is generated if <code>ITEVFEN=ITBUFEN=1</code>.</li></ul></li><li>等待从SW读取数据:如果RxNE=1，并且DR寄存器中的数据没有被读取，则设置BTF位将SCL拉低，并等待直到DR寄存器中的BTF被读取清除。</li></ul><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220621123539272.png" alt="image-20220621123539272"></p><h5 id="Master-i2c-read"><a href="#Master-i2c-read" class="headerlink" title="Master: i2c_read()"></a>Master: i2c_read()</h5><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220621123606082.png" alt="image-20220621123606082"></p><h3 id="Error-Conditions"><a href="#Error-Conditions" class="headerlink" title="Error Conditions"></a>Error Conditions</h3><p><em>A quick summary on possible errors raised by I2C interface HW.</em></p><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220621123649588.png" alt="image-20220621123649588"></p><p>在所有情况下，<em><strong>都会设置相应的错误位，并产生一个interrupt</strong></em>(==前提：如果中断错误使能==<code>ITERREN=1</code>)。</p><h3 id="C-Interrupts"><a href="#C-Interrupts" class="headerlink" title="C Interrupts"></a>C Interrupts</h3><p><img src="https://typorastroage.oss-cn-beijing.aliyuncs.com/img/image-20220621123750860.png" alt="image-20220621123750860"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能导论 第二章 推理</title>
      <link href="//post/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%8E%A8%E7%90%86.html"/>
      <url>//post/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%20%E7%AC%AC%E4%BA%8C%E7%AB%A0%20%E6%8E%A8%E7%90%86.html</url>
      
        <content type="html"><![CDATA[<h1 id="搜索及推理"><a href="#搜索及推理" class="headerlink" title="搜索及推理"></a>搜索及推理</h1><p>题求解：在知识表达的基础上，进行机器思维，求解问题。是知识利用的基础。<br>        求解技术：问题求解（从初始状态到目标状态）的方法和途径。与知识表达技术密切相关。<br>        图搜索方法：基于图的知识表达。从图中相当于初始状态的出发到相当于目标状态的终止节点的路线搜索过程。<br>        广度优先搜索，深度优先搜索….<br>        逻辑论证法：基于谓词逻辑或其他形式逻辑方法的知识表达。<br>            不确定性推理<br>            非单调推理</p><h2 id="一般搜索原理"><a href="#一般搜索原理" class="headerlink" title="一般搜索原理"></a>一般搜索原理</h2><ol><li><p>图搜索：在图中寻求从初始状态到目标状态的路径。</p></li><li><p>盲目搜索：无信息搜索，非启发性搜索。</p></li><li><p>搜索策略（盲目）：</p><ul><li>相关数据结构及概念：<br>    OPEN表：用于存放刚生成的节点；<br>      CLOSED表：用于存放将要扩展或<strong>已扩展的节点</strong>；<br>      扩展：用定义的算子或算符对节点进行操作，生成子节点；<br>      指针：用以记录子节点被扩展的路径，反向指向父节点；<br>      搜索图：通过搜索所得的图；<br>      搜索树：由搜索图中所有节点及反向指针所构成的集合。</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211331723.png" alt="image-20230321132515353"></p></li></ol><h4 id="宽度优先"><a href="#宽度优先" class="headerlink" title="宽度优先"></a>宽度优先</h4><p>   搜索按层进行，在对下一层节点进行搜索之前，必须搜索完本层的所有节点</p><p>   <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211332414.png" alt="image-20230321133206380"></p><h4 id="深度优先搜索"><a href="#深度优先搜索" class="headerlink" title="深度优先搜索"></a>深度优先搜索</h4><p>搜索按深度进行，首先扩展最新产生的节点。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211333457.png" alt="image-20230321133306426"></p><p>有界深度优先搜索:<br>    深度优先搜索不完备,可能陷入无限分支中,引入搜索深度界限。</p><h2 id="启发式搜索"><a href="#启发式搜索" class="headerlink" title="启发式搜索"></a>启发式搜索</h2><p>有信息搜索。<br>        有序搜索：选择最有希望的节点作为待扩展节点。</p><p><strong>通过定义某一衡量标准决定希望程度。</strong></p><h4 id="估价函数"><a href="#估价函数" class="headerlink" title="估价函数"></a>估价函数</h4><p>估算节点希望的量度。<br>        一般形式为：f (x) = g (x) + h (x)<br>        f 为估价函数，<strong>f (x)表示节点x的估价函数值。</strong><br>        <strong>g (x)表示从初始节点到x已实际付出的代价；</strong><br>        h(x)是从节点x到目标节点的估计代价，利用问题本身的信息进行估价。</p><p>不同定义选最大最小</p><p>如：宽度优先：深度小者优先；<br>                        深度优先：深度深者优先</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211353967.png" alt="image-20230321135308927"></p><p>d[n]已经付出的代价</p><p>w[n]将要付出的代价</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211359970.png" alt="image-20230321135907931"></p><h2 id="与或树"><a href="#与或树" class="headerlink" title="与或树"></a>与或树</h2><p>可解标识过程：由可解的子节点确定其父、祖节点可解否。（依据可解节点定义）</p><ul><li>解树：由初始节点和标识初始节点可解的子节点构成。</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211413251.png" alt="image-20230321141317204"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211413318.png" alt="image-20230321141323286"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211413869.png" alt="image-20230321141350837"></p><h5 id="与或树的广度优先搜索"><a href="#与或树的广度优先搜索" class="headerlink" title="与或树的广度优先搜索"></a>与或树的广度优先搜索</h5><p>扩展节点n，将其子节点放入OPEN表的尾部，并为每个子节点配置指向节点n的指针。</p><h5 id="与或树的深度优先搜索"><a href="#与或树的深度优先搜索" class="headerlink" title="与或树的深度优先搜索"></a>与或树的深度优先搜索</h5><p>扩展节点n，将其子节点放入OPEN表的首部，并为每个子节点配置指向节点n的指针。有界深度优先搜索：节点n的深度&gt;=深度界限，则标示节点n为不可解节点。</p><h3 id="与或树的有序搜索"><a href="#与或树的有序搜索" class="headerlink" title="与或树的有序搜索"></a>与或树的有序搜索</h3><p>依据代价决定搜索路线。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211419772.png" alt="image-20230321141929738"></p><p>（3）：与后继节点：c(x,yi)扩展代价，h(yi)后续节点代价 代价h(x)为多个后继节点中的最小值</p><p>（4）： 或后继节点：求和或者取最大</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211421186.png" alt="image-20230321142142147"></p><p>红色不可解，淡蓝色可解，可解节点代价为0</p><p>2个解</p><p>2 希望树</p><h5 id="最优解树：代价最小的解树。"><a href="#最优解树：代价最小的解树。" class="headerlink" title="最优解树：代价最小的解树。"></a>最优解树：代价最小的解树。</h5><h5 id="希望树T：在扩展搜索求解中，有可能成为最优解树一部分的待扩展树，当前代价最小的解树。"><a href="#希望树T：在扩展搜索求解中，有可能成为最优解树一部分的待扩展树，当前代价最小的解树。" class="headerlink" title="希望树T：在扩展搜索求解中，有可能成为最优解树一部分的待扩展树，当前代价最小的解树。"></a>希望树T：在扩展搜索求解中，有可能成为最优解树一部分的待扩展树，当前代价最小的解树。</h5><p>T包含（1）初始节点；<br>         （2）节点x在T中，其或后继节点中代价值最小的节点也在T中；<br>         （3）节点x在T中，其所有与后继节点也在T中；</p><h5 id="有序搜索过程"><a href="#有序搜索过程" class="headerlink" title="有序搜索过程"></a>有序搜索过程</h5><p>​（1）找到希望树T；<br>​（2）扩展其端节点n，n为可解节点，进行可解标识；不可解，则进行不可解标识；<br>​（3）重新计算代价，回到（1）。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211434637.png" alt="image-20230321143439579"></p><p>右边为希望树</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303211435356.png" alt="image-20230321143547318"></p><p>希望树变为左边</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303212124588.png" alt="image-20230321212412464"></p><h3 id="博弈树的启发式搜索"><a href="#博弈树的启发式搜索" class="headerlink" title="博弈树的启发式搜索"></a>博弈树的启发式搜索</h3><p>一层与节点一层或节点</p><ul><li><p>博弈：<br>智能性的竞争活动。“二人零和，非偶然，全信息”<br>二人零和：得分函数之和为零，三种结局，我胜、我败、平局；<br>非偶然：双方皆可根据全信息进行分析，选取胜数最大的方案；<br>全信息：当前格局及过去，双方皆知。</p></li><li><p>博弈树：描述此类过程的与或树（始终站在某一方的立场上）<br>（1）初始格局：初始节点；<br>（2）与或节点交替出现；<br>（3）我方扩展节点-&gt;或关系（可选择一个值大的）<br>    敌方扩展节点-&gt;与关系（对方可能选择对我方最不利的方案）<br>    双方轮流；<br>（4）使我方获胜的节点：终叶节点，可解节点；<br>         使队方获胜的节点：不可解节点。<br>          选出对自己最为有利的方案（树）。<br>3 极大极小分析法<br>基本思想：<br>    预先生成一定深度博弈树；<br>    定义估价函数，计算端节点的值（得分），静态估值，再（倒推）计算出父节点的倒推值；<br>    根据值选定合适的分支扩展一定的深度。</p></li></ul><h4 id="剪枝技术"><a href="#剪枝技术" class="headerlink" title="剪枝技术"></a><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303281345435.png" alt="image-20230328134545359">剪枝技术</h4><p>根据倒推值的计算方法，<strong>或中取大，与中取小</strong>，在扩展和计算过程中，能剪掉不必要的分枝，提高效率。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303281346833.png" alt="image-20230328134617792"></p><p>或节点β剪枝，与节点是<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303281352759.png" alt="image-20230328135230727" style="zoom:67%;"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303281346624.png" alt="image-20230328134644585"></p><p>先做个说明：有画弧线的是与，取较小值，没有的是或，去最大值。</p><p>第一步：2、9、3做比较，取最小值2，I点确定为2</p><p>第二步：J点的1和I点2大小进行比较，如果1是J点的最小值，由于J的父节点是取较大值，1&lt;2，无法升高D的值，所以J点的-1可以点可停止搜索，我们划掉该值。</p><p>第三步：I点2接着与K点的左值-1进行比较，如果-1是最小值，由于K的父节点取较大值，-1&lt;2，无法升高D的取值，所以K点的右值可以停止搜索。</p><p>第四步：D的值可以确定为2</p><p>第五步：L点的作用值进行比较，取较小值6，D值与L值相比较，由于E去较大值，假设L就是最大值，E=6，二B点取得是D和E的较小值，2&lt;6，E的结果值无法降低B的取值，所以E的右枝可以截掉。</p><p>第六步：B的值可以确定为2</p><p>第七步：N的左右值进行比较，取0,N点在和O点的左值-5进行比较，假设-5是最小值，0&gt;-5,O点的取值无法升高父节点F的值，所以可以停止搜索O点的右枝。</p><p>第八步：F确定为0.</p><p>第九步：F点假设是C的最小值，它和B点的值比较，2&gt;0,也就是说C点的取值无法升高A点的取值，所以G和H都停止搜索。</p><p>第十步：A点取2.</p><h4 id="子句"><a href="#子句" class="headerlink" title="子句"></a>子句</h4><h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h5><p>文字：谓词逻辑中，原子谓词公式及其否定；<br>    子句：任何文字的析取式（或）；<br>    子句集：子句的合取；<br>    空子句：不含任何文字的子句，NIL；</p><h5 id="化为子句集"><a href="#化为子句集" class="headerlink" title="化为子句集"></a>化为子句集</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202304041319940.png" alt="image-20230404131926898"></p><p>要把否定放在原子谓词前面</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工智能导论 第一章 表示</title>
      <link href="//post/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E8%A1%A8%E7%A4%BA.html"/>
      <url>//post/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E5%AF%BC%E8%AE%BA%20%E7%AC%AC%E4%B8%80%E7%AB%A0%20%E8%A1%A8%E7%A4%BA.html</url>
      
        <content type="html"><![CDATA[<h1 id="人工智能原理"><a href="#人工智能原理" class="headerlink" title="人工智能原理"></a>人工智能原理</h1><p>人工智能：研究如何在机器上实现人类智能的学科。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>人工智能是指由计算机实现的人造智能。人工智能就是用人工的方法在机器（计算机）上实现的智能。作为一门学科，人工智能可定义为：人工智能是一门研究如何构造智能机器（智能计算机）或智能系统，使它能模拟、延伸、扩展人类智能的学科。（能力）</p><p>人工智能是一门交叉边缘学科，与人工智能有关的学科有：计算机科学、数学、哲学、语言学、神经生理学、神经心理学、脑科学、认知科学、逻辑学、控制论等.（学科）</p><ul><li><p>为什么要研究人工智能<br>1、现有计算机系统智能的局限性。<br>2、人类智能的局限性。学习能力因人而异、学习速度慢、效率低。<br>3、信息化社会的迫切要求。</p></li><li><p>目标：<br>近期：用机器来模拟和实现人的部分/某些智力功能；<br>远期：全部甚至可以延伸人的智慧。</p></li><li><p>智能：</p><p>有效获取、传递、处理、再生和利用信息，从而在任意给定的环境下达到预定目的的能力。</p></li><li><p>智能特征：<br>具有感知能力。通过视觉、听觉、触觉、味觉和嗅觉感知外部世界。<br>具有记忆与思维能力。记忆能存储由感知器官感知到的外部信息以及有思维所产生的知识。思维用于对记忆的信息进行处理。思维可分为逻辑思维和形象思维。<br>具有学习能力及自适应能力。<br>具有行为能力。</p></li></ul><h2 id="研究方法"><a href="#研究方法" class="headerlink" title="研究方法"></a>研究方法</h2><h3 id="结构派"><a href="#结构派" class="headerlink" title="结构派"></a>结构派</h3><p>（神经计算、生理学派、连接主义）<br>            网络连接为主的联结主义；</p><ul><li><p>主要观点：<br>    智能活动的基元是神经细胞；<br>      智能活动过程是神经网络的状态演化过程；<br>      智能活动的基础是神经细胞的突触联结机制；<br>      智能系统的工作模式是模仿人脑模式。</p></li><li><p>主要特征：<br>1、通过神经元之间的并行协同作用实现信息处理，具有并行性、动态性、全局性。<br>2、通过神经元间分布式的物理联接存储信息。联想记忆、容错性。<br>3、通过神经元间连接强度的动态调整实现自学习和自适应功能。<br>4、善于模拟人类的形象思维过程。</p></li></ul><h3 id="功能派"><a href="#功能派" class="headerlink" title="功能派"></a>功能派</h3><p>（符号主义、心理学派、逻辑学派）<br>    符号处理为核心的方法；</p><ul><li>主要观点：<br>思维的基元是符号；<br>思维的过程是符号运算；<br>智能的核心是知识，利用知识推理进行问题求解；<br>智能活动的基础是物理符号系统，人脑电脑都是物理符号系统；<br>知识可用符号表示，可建立基于符号逻辑的智能理论体系。</li></ul><h3 id="行为模拟派"><a href="#行为模拟派" class="headerlink" title="行为模拟派"></a>行为模拟派</h3><p>（行为主义、进化主义、控制论学派）<br>基于感知-行为模型的研究途径和方法。</p><ul><li>主要观点：<br>智能行为的基础是感知－行动的反应机制；<br>智能系统的智能行为需要在真实世界的复杂境遇中进行学习和训练，在与周围环境的信息交互与适应过程中不断进化和体现；<br>强调智能系统与环境的交互，认为智能取决于感知和行动；<br>智能行为可以不要知识。</li></ul><h2 id="历史上的人工智能大师"><a href="#历史上的人工智能大师" class="headerlink" title="历史上的人工智能大师"></a>历史上的人工智能大师</h2><p>阿伦•图灵（Alan Turing）</p><p>马文•明斯基（Marniv Lee Minsky）</p><p>约翰•麦卡锡 John McCarthy</p><p>爱德华•费根鲍姆 （Edward A. Feigenbaum）</p><h2 id="数据和信息、知识"><a href="#数据和信息、知识" class="headerlink" title="数据和信息、知识"></a>数据和信息、知识</h2><p>数据：包括事实和数字，未经加工的事实和符号。</p><p>信息：从数据中提炼出来的有关信息，经过分析处理的数据形成信息。数据是信息的载体和表示，信息是数据在特定场合下的具体含义。</p><p>知识： 是有关信息关联在一起所形成的信息结构，反映客观世界中事物之间的关系。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202302282025284.png" alt="image-20230228202546209" style="zoom:50%;"><h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><h4 id="知识的特性"><a href="#知识的特性" class="headerlink" title="知识的特性"></a>知识的特性</h4><p>客观性；<br>        相对正确性：一定条件、时间、环境；<br>        进化性<br>        依附性：离开载体的知识是没有的；<br>        不确定性：信息和关联的随机性、模糊性、不完全性、经验性；<br>        可表示性；可利用性；可重用性；<br>        共享性。</p><h4 id="知识的层次"><a href="#知识的层次" class="headerlink" title="知识的层次"></a>知识的层次</h4><p>事实：知识的最底层，对象、符号和事件之间的各种关系；<br>       概念：关于具有共同属性的一组对象、事件和符号的知识；<br>       规则：一组操作和步骤，被用于完成某一目标，解决某一问题或产生某种结果；<br>       启发式知识：是知识的最高层，是关于规则的知识，是事实、概念和规则的综合。</p><h4 id="知识的分类"><a href="#知识的分类" class="headerlink" title="知识的分类"></a>知识的分类</h4><p>1  作用范围：常识性知识、领域性知识；<br>         2  作用及表示：<br>            事实性知识<br>            过程性知识<br>            控制性知识<br>        3  确定性：确定性知识、不确定性知识<br>        4  结构和表现形式：逻辑性知识、形象性知识<br>        5  其他：领域知识、元知识</p><h4 id="知识的表示方法"><a href="#知识的表示方法" class="headerlink" title="知识的表示方法"></a>知识的表示方法</h4><p>知识表示是研究用机器表示知识的可行性、有效性的一般方法；是理智推理的部分理论；是有效计算的载体；是交流的媒介（如语义网络）；是对知识的一种描述，是一种机器可以接受的用于描述知识的数据结构。</p><h5 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h5><p>产生式规则、语义网络、框架、谓词逻辑、语义网、知识图谱等 </p><p>基于逻辑的知识的表达：</p><p>一阶谓词，非经典逻辑（模态逻辑、模糊逻辑、时序逻辑、非单调逻辑）；</p><p> 面向对象的知识表示：</p><p>对象、框架、语义网；Agent;</p><p> 基于规则的知识表达：</p><p>产生式系统；</p><p> 基于模型的知识表示</p><h3 id="状态空间表示"><a href="#状态空间表示" class="headerlink" title="状态空间表示"></a>状态空间表示</h3><p>利用状态变量和操作符号，表示系统和问题的有关知识的符号体系。</p><ol><li>三元组：（S，F，G）</li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071303274.png" alt="image-20230307130336199"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071303250.png" alt="image-20230307130352222"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071303063.png" alt="image-20230307130358034"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202305141900195.png" alt="image-20230514190056093"></p><ol start="2"><li><p>图示</p><p>节点：对应相应的状态描述；</p><p>弧线：旁边标明算子表明操作及状态的变化；</p><p>最佳路径：两节点间具有最小代价；</p></li></ol><blockquote><p><strong>问题1</strong>：设有三钱币，其初始状态为（反，正，反），每次翻转一个，连翻三次，问是否可达到（正，正，正）或（反，反，反）</p><p>引入三维状态变量Q=[q1,q2,q3],分别表示三钱币的状态，q=0表示正，q=1表示反；</p><p>S={[1，0，1]}  ， G={[0，0，0]，[1，1，1]}</p><p> f1:把q1翻一面；<br>         f2:把q2翻一面；<br>     f3:把q3翻一面；<br>        三元组：（S，{f1,f2,f3},   G)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071317132.png" alt="image-20230307131717086" style="zoom:67%;"></blockquote><blockquote><p><strong>问题2：</strong>在状态描述中应用变量</p><p>猴子、香蕉问题</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071319286.png" alt="image-20230307131920246" style="zoom:50%;"><ol><li><p>定义状态和操作：</p><p>引入四维变量（w,x,y,z)</p><p>w:表示猴子所处的水平位置；<br>x:猴子是否在台子上（x=1在，x=0不在）；<br>y:箱子所处的水平位置；<br>z:猴子是否拿到香蕉（z=1拿到，z=0没有拿到）；</p></li><li><p>定义操作</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071321766.png" alt="image-20230307132144733"></p></li><li><p>状态图</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071332174.png" alt="image-20230307133225123" style="zoom:67%;"></li></ol></blockquote><h3 id="与或树表示"><a href="#与或树表示" class="headerlink" title="与或树表示"></a>与或树表示</h3><p>已知问题描述，通过一系列变换把问题最终变为一个子问题集合，并可以直接求解，解决初始问题。</p><p>（1）初始问题描述；<br>        （2）分解/转换的规则/操作符；<br>        （3）<strong>本原问题</strong>描述：具有明显解答，已解决的问题等。</p><h4 id="与或图"><a href="#与或图" class="headerlink" title="与或图"></a>与或图</h4><p>用类似图的结构来表示把问题归约为后继问题的替换集合。</p><ul><li><p>与图（分解）：将复杂的大问题分解为一组简单的小问题（BCD都解决 A才解决）；</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071337410.png" alt="image-20230307133756377"></p></li><li><p>或图（转化）：将复杂的大问题变换为等价或等效的问题（BCD任一解决，A解决）；</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071338112.png" alt="image-20230307133840079"></p><h5 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h5><p>初始节点：原始问题<br>        终叶节点：本原问题，无后裔<br>        与节点：子问题对应的节点为与逻辑<br>        或节点：子问题对应的节点为或逻辑</p><p><strong>可解节点：</strong></p><p>（1）终叶节点一定为可解节点；<br>        （2）非终叶节点为或节点，后继节点中至少有一个为可解节点；<br>        （3）非终叶节点为与节点，后继节点全部为可解节点；</p><p>初始节点可解（分解转化结束，问题解决）</p><p>解为：一棵树</p><p>终叶节点是与或树中最底层的节点，它们没有后继节点。在与或树中，每个节点都代表一个子问题，而终叶节点代表的子问题已经被分解到无法再进行下去了，因此它们是最基本的问题单元。由于终叶节点没有后继节点，因此它们不需要进一步分解就可以得到问题的解决方案。因此，在与或树中，终叶节点被视为可解节点。</p><p><strong>不可解节点</strong><br>        （1）没有后继的非终叶节点；</p><p><strong>如果一个节点不在与或树的最底层，但是没有后继节点，那么它不是终叶节点。</strong></p><p>（2）或节点其后继节点全部为不可解节点；<br>        （3）与节点其后继至少有一个为不可解节点；</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071359321.png" alt="image-20230307135928284"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071359764.png" alt="image-20230307135919714"></p><h3 id="产生式规则表示法"><a href="#产生式规则表示法" class="headerlink" title="产生式规则表示法"></a>产生式规则表示法</h3><p>基于规则的知识表示，产生式规则的基本结构</p><p>前提状态 -》  结论动作<br>        <strong>IF  前提   THEN   动作/结论</strong></p><ul><li>​IF  动物是鸟  AND   会游泳    AND   不会飞<br>​AND    有黑白两色<br>​THEN   该动物是企鹅</li></ul><h4 id="基于规则的系统的三个主要模块："><a href="#基于规则的系统的三个主要模块：" class="headerlink" title="基于规则的系统的三个主要模块："></a>基于规则的系统的三个主要模块：</h4><ol><li>知识库：存储大量规则；</li><li>数据库：问题的事实和从规则出发推出的事实，中间结果；</li><li>推理机：将关于问题的事实与知识库中的规则匹配，求解</li></ol><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071405539.png" alt="image-20230307140540498" style="zoom: 67%;"><ul><li><p>优点：<br> （1）善于表达领域知识<br> （2）控制和知识相分离<br> （3）知识的模块性强<br> （4）便于实现解释推理<br> （5）便于使用启发性知识</p></li><li><p>缺点：<br>（1）单条规则容易解释，但规则之间的逻辑关系难以确定<br>（2）规则数太大时（万数量级），知识库的一致性难以维护<br>（3）某些类型的知识难以表示，如结构性的知识。</p></li></ul><h3 id="谓词表示法"><a href="#谓词表示法" class="headerlink" title="谓词表示法"></a>谓词表示法</h3><p>命题逻辑、谓词逻辑：人工智能应用中的两种逻辑</p><ol><li><p>命题：具有真假意义的语句，大写英文字母表示。<br>     无法描述客观事物的结构、逻辑特征、不同事物之间的共同特征；</p></li><li><p>谓词：由谓词名和个体/客体变元/变元构成；个体表示某个独立存在的事物或抽象的概念；谓词名用于刻画个体的性质、状态或个体间的关系。P（x1,x2, … , xn) n元一阶谓词、二阶谓词</p></li></ol><h4 id="谓词公式"><a href="#谓词公式" class="headerlink" title="谓词公式"></a>谓词公式</h4><p>连接词：将简单命题连接起来构成一个复合命题，表示复杂的含义。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303071421612.png" alt="image-20230307142110574"></p><p>​非 与 或 蕴含 当且仅当 存在量词 全称量词（所有为真才为真）</p><h5 id="两个谓词公式等价："><a href="#两个谓词公式等价：" class="headerlink" title="两个谓词公式等价："></a>两个谓词公式等价：</h5><p>​P、Q为两个谓词公式，D为其共同个体域，对D上的任何一个解释，P、Q都有相同的真值，称为等价。</p><h5 id="谓词公式表示知识："><a href="#谓词公式表示知识：" class="headerlink" title="谓词公式表示知识："></a>谓词公式表示知识：</h5><p>（1）定义谓词，指出每个谓词的确切含义；<br>        （2）用连接词将相关谓词连接起来，用公式表达完成意义。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141305290.png" alt="image-20230314130554227"></p><p>对于所有x来说如果它是机器人就是灰色</p><ul><li>谓词逻辑中的蕴涵式和产生式规则的基本形式相同，是其特殊情况：<br>（1）谓词逻辑表示精确的知识，而产生式规则不仅可以表示精确知识，也可表示不精确的，例后跟可信度；<br>（2）在推理匹配过程中，产生式规则可进行不精确匹配。</li></ul><h3 id="语义网络法"><a href="#语义网络法" class="headerlink" title="语义网络法"></a>语义网络法</h3><p>语义网络是用图来表示知识，表示事物概念及语义关系。</p><p>​节点：表示概念、实体、事物、事件等；</p><p>​ 弧线或链线：表示关系。</p><h4 id="表示"><a href="#表示" class="headerlink" title="表示"></a>表示</h4><ol><li>基本单元： &lt;节点&gt;&lt;语义关系&gt;&lt;节点&gt;<br> 网络：&lt;基本单元&gt;组合</li><li>表示基本事物和概念：</li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141318578.png" alt="image-20230314131852538"></p><ol start="3"><li><p>表示情况、动作、事件：</p><p>用一节点表示，拥有一组向外的弧，表示不同的情况。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141323884.png" alt="image-20230314132311840"></p></li></ol><p>占用-1是占用的特殊事例</p><ol start="4"><li><p>连接词逻辑关系</p><p>增设合取、析取节点；增设标注。<br>例： 与会者有男有女，有年老的，有年轻的。</p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141327321.png" alt="image-20230314132736282"></p><ol start="5"><li><p>量化（部分网络）：网络分区+全称链</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141334264.png" alt="image-20230314133428227"></p></li><li><p>多元网络：一个节点有多个向外的弧。</p></li><li><p>常见语义联系</p><p>​A member of    个体和集体<br>​Composed of    构成<br>​have                  占有、拥有<br>​Before, After ,At  时间<br>​Located_on        事物间位置关系<br>​Similar to           比较<br>​A Kind of          分类<br>​Part                    聚集、从属</p></li></ol><h4 id="求解"><a href="#求解" class="headerlink" title="求解"></a>求解</h4><ol><li>继承推理：<br> 语义联系上有继承含义，能有属性的继承。</li><li>匹配：<br>     构造问题的语义网络片段；<br>     与存储的语义知识网络进行匹配求解</li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141340096.png" alt="image-20230314134014061"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141340089.png" alt="image-20230314134023052"></p><ol><li><p>优点：<br>         联想性，体现联想思维过程；<br>     自然性，表现问题直观，易于理解；<br>     结构性，结构化的知识表示方式。</p></li><li><p>缺点：<br> 非严格性，无统一公认的形式表示体系；<br> 处理复杂性；<br> 对于判断性知识、深层知识或与时间因素相关的动态知识不善于表达。</p></li></ol><h3 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h3><p>知识图谱是一种揭示实体之间关系的语义网络，可以对现实世界的事物及其相互关系进行形式化地描述。现在的知识图谱已被用来泛指各种大规模的知识库。</p><p>知识图谱专注于如何以工程的方式，从文本中自动抽取或依靠众包的方式获取并组件广泛的、具有平铺结构的知识实例，最后再要求使用它的方式具有容错、模糊匹配等机制。</p><p> E={e1,e2,…,e|E|}是知识库中的实体集合，共包含|E|种不同实体;<br>        R={r1,r2,…,r|E|} 是知识库中的关系集合，共包含 | R | 种不同关系;<br>        S 属于 E ╳R ╳ E 代表知识库中的三元组集合</p><ul><li><p>实体是知识图谱中的最基本元素，不同的实体间存在不同的关系。</p></li><li><p>关系用来连接两个实体，刻画它们之间的关联。</p></li><li><p>概念主要指集合、 类别、对象类型、事物的种类，例如人物、地理等; </p></li><li><p>属性主要指对象可能具有的属性、特征、特点以及参数，例如国籍、生日等;</p></li><li><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303152111163.png" alt="image-20230315211115988"></p><h4 id="知识图谱构建"><a href="#知识图谱构建" class="headerlink" title="知识图谱构建"></a>知识图谱构建</h4><p>从最原始的数据（包括结构化、半结构化、非结构化数据）出发，采用一系列自动或者半自动的技术手段，从原始数据库和第三方数据库中提取知识事实，并将其存入知识库的数据层和模式层，这一过程包含：</p><p>知识抽取<br>知识表示<br>知识融合<br>知识推理<br>每一次更新迭代均包含这四个阶段。</p></li></ul><h4 id="属性图："><a href="#属性图：" class="headerlink" title="属性图："></a>属性图：</h4><ul><li><p>节点(Nodes)：是图中的实体，用表示其类型的0到多个文本标签进行标记，相当于实体。</p></li><li><p>边(Edges)：是节点之间的定向链接，每条边连接一个“from node”和一个“to node” 。边是定向的且每条边都有一个标签，它们可以在任何方向上导航和查询。相当于实体之间的关系。</p></li><li><p>属性(Properties)：是一个键值对，顶点和边都可以包含属性。</p><p>满足如下性质：<br>1）每个节点具有唯一的id<br>2）每个节点具有一组属性，每个属性是一个键值对；<br>3）每条边具有唯一的id<br>4）每条边具有一个标签，表示联系<br>5）每条边具有一组属性，每个属性是一个键值对</p></li></ul><h4 id="RDF："><a href="#RDF：" class="headerlink" title="RDF："></a>RDF：</h4><p>RDF就是资源描述框架，可以理解成一种资源表示的模板，就是一种知识表达形式。就是只有实体及关系没有概念（domain和range）.形式上也就是大家最常见的&lt;实体-关系/属性-实体/属性值&gt;三元组。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303152114258.png" alt="image-20230315211404216" style="zoom:67%;"><h3 id="框架表示法"><a href="#框架表示法" class="headerlink" title="框架表示法"></a>框架表示法</h3><p>框架提供一种结构和组织，描述一种格式相对固定的语义网络的节点和槽。<br>        以框架作为一基础单位，语义网络可看作框架集合。</p><h4 id="构成-1"><a href="#构成-1" class="headerlink" title="构成"></a>构成</h4><p>框架名<br>        槽   ： 指框架中的一个属性或特征，例如“颜色”、“大小”等。<br>        侧面<br>        值<br>        约束条件</p><p>框架通常有描述事物各个方面的若干<strong>槽（slot）组成，每一个槽也可以根据实际情况\拥有若干个侧面（aspect）</strong>，每一个侧面又可以拥有若干个<strong>值（value）</strong>。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141407955.png" alt="image-20230314140738915"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303141407683.png" alt="image-20230314140754647"></p><h5 id="表示及值的说明："><a href="#表示及值的说明：" class="headerlink" title="表示及值的说明："></a>表示及值的说明：</h5><p>（1） 框架名的值允许带参数，被调用时需要提供；</p><p>（2） 槽值和侧面值可以是过程调用、谓词表达等;</p><p>（3） 槽值和侧面值可以定义某些约束和限定条件，例如范围、缺省值等等；     </p><p>（4）约束部分为可选部分。 </p><h5 id="框架网络"><a href="#框架网络" class="headerlink" title="框架网络"></a>框架网络</h5><p>（1）横向联系：框架中的槽值和侧面值是另一个框架的名字，例如教师框架、住址框架、工资框架等之间的调用；<br>（2）纵向联系：用继承槽来建立纵向联系，下层框架可以继承上层框架的值，<br>                            例如教职工框架和教师框架之间。</p><h5 id="槽、侧面的设置和组织"><a href="#槽、侧面的设置和组织" class="headerlink" title="槽、侧面的设置和组织"></a>槽、侧面的设置和组织</h5><p>（1）充分表达各方面的属性<br>        （2）充分表达相关事物之间的关系。常见槽：<br>                ISA ：概念类属关系，是一个、一类、一种；<br>                AKO：具体类属关系，是一种；<br>                Subclass:子类、子集；<br>                Instance：AKO的逆关系，指出其下层框架；<br>                Part of：部分与全部的关系；<br>                Infer：表示两框架之间的逻辑关系，蕴涵，条件与结论；<br>        （3）对槽和侧面进行合理组织<br>                共性抽取，选择合适的槽<br>        （4）有利于进行求解和推理</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303152114023.png" alt="image-20230315211442954" style="zoom:50%;"><h4 id="求解-1"><a href="#求解-1" class="headerlink" title="求解"></a>求解</h4><p>默认推理，继承推理</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303152115744.png" alt="image-20230315211556681" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303152116319.png" alt="image-20230315211608257"></p><p>相似网络：<br>        候选框架不能满足项目匹配，寻找其它可选择的网络，建立一种框架的相似网络。</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>结构性，嵌套式结构，深入表达；<br>        自然性；<br>        继承性；<br>        不善于表达过程性的知识。</p><h3 id="面向对象的表示法"><a href="#面向对象的表示法" class="headerlink" title="面向对象的表示法"></a>面向对象的表示法</h3><p>以面向对象的观点进行描述。<br>        研究领域和世界由各种对象构成，对象又可被划分成对象类。</p><p>面向对象方法学的观点，对象的形式定义为：<br>        对象 ::= &lt;ID, DS, MS, MI&gt;，其中：<br>        ID为对象标识名；<br>        DS描述对象当前的内部状态和所具有的静态属性；<br>        MS说明对象所具有的内部处理方法或对受理消息的操作过程；<br>        MI为对象接收外部信息和驱动内部方法的对外接口。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/202303152117767.png" alt="image-20230315211713715" style="zoom:50%;"><h5 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h5><p>​单继承性：每一对象类只有唯一的父类；<br>​多继承性：允许对象类从一个以上的父类中继承信息。</p><h5 id="封装性"><a href="#封装性" class="headerlink" title="封装性"></a>封装性</h5><p>​用于定义一个对象的实例属性和方法，仅仅属于该对象，对其他对象不可见。</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大三下课程笔记 </tag>
            
            <tag> BUPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022总结</title>
      <link href="//post/2022%E6%80%BB%E7%BB%93.html"/>
      <url>//post/2022%E6%80%BB%E7%BB%93.html</url>
      
        <content type="html"><![CDATA[<h1 id="2022年度总结"><a href="#2022年度总结" class="headerlink" title="2022年度总结"></a>2022年度总结</h1><p>大学上了三年，第一次觉得有必要写一次总结回忆这一年。总看论坛上大佬的年度总结，想着自己虽然没毕业也没技术但还是想记录生活的碎片，留给将来的自己。2022过的真的很快，好像刚刚开始就以及结束了。去年的今天刚从学校回家不久，却不曾想一整年几乎都将在家里度过<span class="github-emoji" style="display:inline;vertical-align:middle"><span>😳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>。翻了翻相册和聊天记录，才意识到这一年有不少事情是值得记录的。总归是不想让这些东西被时间冲淡了，给以后留下回忆。</p><p>先回顾一下这一年，这一年的状态相比刚上大学确实好了一些，逐渐适应大学的节奏，身边多了三五好友，与女朋友的感情也逐渐加深，学到了不少有用的技能。</p><h4 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h4><p>所幸，在嘈杂的校园生活中认识几个可以花整晚陪我阔谈人生的朋友，认识几个可以真心为你着想的好兄弟。</p><p>印象里比较深的几个生活碎片：</p><h5 id="一月"><a href="#一月" class="headerlink" title="一月"></a>一月</h5><p>和女朋友一起通关了双人成行</p><h5 id="三月"><a href="#三月" class="headerlink" title="三月"></a>三月</h5><p>在年初挂了一次科四后终于拿到了驾照成为宿舍里最晚一个拿本的人。</p><h5 id="四月"><a href="#四月" class="headerlink" title="四月"></a>四月</h5><p>因为疫情没有返校，在家买了蛋糕陪妈妈过了生日</p><h5 id="五月"><a href="#五月" class="headerlink" title="五月"></a>五月</h5><p>全月在家封控，靠视频和朋友们联系…</p><p>和女朋友坚持早睡（用sleeptown 盖房子）盖了二十几天就放弃了</p><h5 id="七月"><a href="#七月" class="headerlink" title="七月"></a>七月</h5><p>第一次自驾带着女朋友畅游云南，登顶玉龙雪山，环游苍山洱海；西双版纳的夜市里夜景，普洱茶园里的沁香</p><h5 id="八月"><a href="#八月" class="headerlink" title="八月"></a>八月</h5><p>再度开学未遂，没能见到最后的沙河，也没尝到南区食堂…</p><p>因为封控有机会给女朋友做上一桌小菜</p><h5 id="九月"><a href="#九月" class="headerlink" title="九月"></a>九月</h5><p>在朋友的帮助下第一次养了棵荔枝树，很快无疾而终…</p><h5 id="十月"><a href="#十月" class="headerlink" title="十月"></a>十月</h5><p>和室友和朋友们每周去吃遍北京各家自助餐…</p><h5 id="十一月"><a href="#十一月" class="headerlink" title="十一月"></a>十一月</h5><p>被疫情搞得人心惶惶，月底终究又回到了家中，因为全程静默走了一天回到了家里，结束了短暂的百天学期</p><h5 id="十二月"><a href="#十二月" class="headerlink" title="十二月"></a>十二月</h5><p><strong>阳</strong> 康</p><p>好朋友因为意外休学…</p><div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;"><iframe src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/video/2022%E6%80%BB%E7%BB%93.mp4" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;"> </iframe></div><h4 id="学业"><a href="#学业" class="headerlink" title="学业"></a>学业</h4><p>比起大一大二，更觉得今年才是真正意义上大学的第一年。上半年因为北京的疫情居家学习，削减了很多乐趣。除了每周去几次健身房似乎也没别的体育活动。一直因为觉得大学中知识只是单纯应付考试，提不起兴趣的情况在今年有所改善。或许是专业课变多的原因，逐渐能体会到不同课程中的微妙的联系。此外，英方课的加入让学习压力更上一层，但也让我抽出更多的时间放在自学中。一直感觉对课程内容的理解和GPA关系并不是很大，但对我来说，仔细学一门专业课也是一种契机：或许以后不会接触这个邻域，但领悟这门课却也是一个系统了解某个领域的方法。这一年学习中最大的收获就是对之后的职业规划有一丝看法。</p><p>刚刚结束的下半年也并不轻松，和很多好友谈及下一步的计划，感觉大家都开始为自己的下一步做考虑。每个人都有或多或少的焦虑情绪，毕竟这可能是大学最关键的一年。期间我见识到身边一些朋友在选择人生分叉路口的魄力与远见，感觉努力之余的选择是更为关键的部分。这一年找到了很多之前看不到的东西，也舍弃了一些让自己分心的东西。我觉得重要的是保持对自己的信心，无论什么困难都不能丧失信心。这个学期也试图去参与一些自己从未涉及到的领域，所幸都有所收获。最大的成就就是第一次决定用笔来记录自己的学习历程，所以在上个学期中的某一天萌生搭建一个blog的想法，只是单纯记录平时的笔记与生活碎片。希望以后能用技术来丰富这个小空间。</p><p><strong>2023，重新出发</strong></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网协议-Chapter 3  Network Layer</title>
      <link href="//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE-Chapter%203%20%20Network%20Layer.html"/>
      <url>//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE-Chapter%203%20%20Network%20Layer.html</url>
      
        <content type="html"><![CDATA[<h1 id="Network-Layer"><a href="#Network-Layer" class="headerlink" title="Network Layer"></a>Network Layer</h1><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221116181013270.png" alt="image-20221116181013270"></p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><h3 id="network-layer-functions"><a href="#network-layer-functions" class="headerlink" title="network-layer functions"></a><em>network-layer functions</em></h3><p>▪<em>forwarding:</em> move packets from router’s input to appropriate router output（数据平面）路由器内</p><p>▪<em>routing:</em> determine route taken by packets from source to destination（控制平面）整个过程</p><h3 id="Network-layer"><a href="#Network-layer" class="headerlink" title="Network layer"></a>Network layer</h3><ul><li><p>transport <strong>datagram</strong> from sending to receiving host</p><p>on sending side encapsulates segments into datagrams（把TCP报文段封装为IP数据报）</p><p>on receiving side, delivers segments to transport layer（把报文段上交给传输层）</p></li><li><p>network layer 存在于主机和路由器之中，但是路由器只有下三层，不具备transport和application的功能</p></li><li><p>router examines header fields in all IP datagrams passing through it（路由器检查datagram的header）</p></li></ul><h3 id="data-plane-control-plane"><a href="#data-plane-control-plane" class="headerlink" title="data plane, control plane"></a>data plane, control plane</h3><h4 id="Data-plane"><a href="#Data-plane" class="headerlink" title="Data plane"></a><em>Data plane</em></h4><p><strong>local, per-router function</strong></p><p>determines how datagram arriving on router input port is forwarded to router output port</p><p><strong>forwarding function</strong></p><h4 id="Control-plane"><a href="#Control-plane" class="headerlink" title="Control plane"></a><em>Control plane</em></h4><p><strong>network-wide logic</strong></p><p>determines how datagram is routed among routers along end-end path from source host to destination host</p><h5 id="two-control-plane-approaches"><a href="#two-control-plane-approaches" class="headerlink" title="two control-plane approaches:"></a>two control-plane approaches:</h5><p>• <em>traditional routing algorithms:</em> implemented in routers（每个路由器实现转发和路由）</p><p>• <em>software-defined networking</em> <em>(SDN)</em>: implemented in (remote) servers</p><h6 id="traditional-routing-algorithms-Per-router-control-plane"><a href="#traditional-routing-algorithms-Per-router-control-plane" class="headerlink" title="traditional routing algorithms: Per-router control plane"></a><em>traditional routing algorithms:</em> Per-router control plane</h6><p>Individual routing algorithm components <em>in each and every</em> <em>router</em> interact in the control plane</p><p>路由选择算法在每台路由器中运行，并且在每台路由器中都包含转发和路由两种功能</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005153912272.png" alt="image-20221005153912272" style="zoom:50%;"><h6 id="software-defined-networking-SDN-Logically-centralized-control-plane"><a href="#software-defined-networking-SDN-Logically-centralized-control-plane" class="headerlink" title="software-defined networking *(SDN) :*Logically centralized control plane"></a><em>software-defined networking</em> *(SDN) :*Logically centralized control plane</h6><p>A distinct (typically remote) controller interacts with local control agents (CAs)</p><p>控制平面与数据平面分离，路由选择设备只执行转发，远程控制器计算并分发转发表</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005153854504.png" alt="image-20221005153854504" style="zoom:50%;"><h2 id="数据平面"><a href="#数据平面" class="headerlink" title="数据平面"></a>数据平面</h2><h3 id="Router-architecture-overview"><a href="#Router-architecture-overview" class="headerlink" title="Router architecture overview"></a>Router architecture overview</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005154934175.png" alt="image-20221005154934175" style="zoom:50%;"><h4 id="Input-port-functions"><a href="#Input-port-functions" class="headerlink" title="Input port functions"></a>Input port functions</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005155339876.png" alt="image-20221005155339876" style="zoom:67%;"><p>从左向右：分别实现物理层和链路层</p><ul><li><p>decentralized switching*:*分布式交换（在此处使用转发表查找输出端口） 从总览图可以看到SDN控制器把转发表发送此处。</p></li><li><p>利用头部信息中的IP地址来查找输出段口有两种方法：</p><ol><li><em>destination-based forwarding 基于目标转发:</em> 只是依赖于IP地址，判断区间来判断输出端口（有超过40亿种表项）</li></ol><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005160603008.png" alt="image-20221005160603008" style="zoom:50%;"><ul><li><p><strong>Longest prefix matching</strong>：最长前缀匹配</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005161048192.png" alt="image-20221005161048192" style="zoom:50%;"></li></ul></li></ul><p>​                   匹配IP中前面的字段，匹配成功则发送对应端口</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005194220261.png" alt="image-20221005194220261" style="zoom:50%;"><p>选取最长的前缀作为匹配</p><p> often performed using ternary content addressable memories (TCAMs) specialised very high speed memory</p><p><em>content addressable:</em> present address to TCAM: retrieve address in one clock cycle, regardless of table size</p><ol start="2"><li><p><strong>generalized forwarding 通用转发:</strong> </p><p> forward based on any set of header field values，不只依赖于IP做转发，诸多因素会影响其转发</p></li></ol><h4 id="Switching-fabrics"><a href="#Switching-fabrics" class="headerlink" title="Switching fabrics"></a>Switching fabrics</h4><p><strong>transfer the packet from input buffer to appropriate output buffer</strong></p><p>switching rate: rate at which packets can be transfer from inputs to outputs</p><p>• N inputs: switching rate N times line rate desirable</p><p>switch rate是 input rate的N倍（假如N个数据入口）</p><p><strong>three types of switching fabrics</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005200416981.png" alt="image-20221005200416981" style="zoom:50%;"><h5 id="Switching-via-memory-内存交换"><a href="#Switching-via-memory-内存交换" class="headerlink" title="Switching via memory:内存交换"></a>Switching via memory:内存交换</h5><p>第一代路由器：本质为传统计算机 traditional computers with switching under direct control of CPU</p><p>packet copied to system’ s memory</p><p>speed limited by memory bandwidth (2 bus crossings per datagram<strong>数据报通过总线两次（读＋写）</strong>)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005201440230.png" alt="image-20221005201440230" style="zoom:50%;"><h5 id="Switching-via-a-bus：-总线交换"><a href="#Switching-via-a-bus：-总线交换" class="headerlink" title="Switching via a bus： 总线交换"></a>Switching via a bus： 总线交换</h5><p><strong>datagram from input port memory to output port memory via a shared bus</strong></p><p><em>bus contention（总线竞争）:</em> switching speed limited by bus bandwidth</p><p>分组可以到达所有输出端口，但是只有端口号匹配的端口才能保存</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005201859824.png" alt="image-20221005201859824" style="zoom:67%;"><h5 id="Switching-via-interconnection-network-：互联网络交换"><a href="#Switching-via-interconnection-network-：互联网络交换" class="headerlink" title="Switching via interconnection network ：互联网络交换"></a>Switching via interconnection network ：互联网络交换</h5><p> <strong>overcome bus bandwidth limitations</strong></p><p>advanced design: fragmenting datagram into fixed length cells, switch cells through the fabric. </p><p>可以并行转发多个分组(输出端口不一样时)</p><p>输出端口一致，仍要等待</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221116155839250.png" alt="image-20221116155839250" style="zoom:67%;"><h4 id="Output-ports"><a href="#Output-ports" class="headerlink" title="Output ports"></a>Output ports</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005203018901.png" alt="image-20221005203018901" style="zoom:50%;"><h4 id="queue"><a href="#queue" class="headerlink" title="queue"></a>queue</h4><p>Datagram (packets) can be lost due to congestion, lack of buffers</p><p>▪ <em>buffering</em> required when <strong>datagrams arrive from fabric faster than the transmission rate</strong></p><p>▪ <em>scheduling discipline</em> chooses among queued datagrams for transmission调度规则来选择调度</p><h5 id="Input-port-queuing"><a href="#Input-port-queuing" class="headerlink" title="Input port queuing"></a>Input port queuing</h5><p>switch rate slower than input ports combined -&gt; queueing may occur at <strong>input queues</strong> </p><ul><li><em>queueing delay and loss due to input buffer overflow!</em></li></ul><p>Head-of-the-Line (HOL) blocking 线路前部阻塞 : queued datagram at front of queue prevents others in queue from moving forward</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005204549535.png" alt="image-20221005204549535" style="zoom:50%;"><p><strong>当下方红色块在排队等待上方红色块交换时，绿色块不得已地被阻塞了</strong></p><h5 id="Output-port-queueing"><a href="#Output-port-queueing" class="headerlink" title="Output port queueing"></a>Output port queueing</h5><p>buffering when switch rate via switch exceeds output line speed</p><p><em>queueing (delay) and loss due to output port buffer</em> <em>overflow!</em></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005204729584.png" alt="image-20221005204729584" style="zoom:50%;"><p>buffering equal to （N条TCP流对应的Buffer数量）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005205040747.png" alt="image-20221005205040747" style="zoom:33%;"><h4 id="Scheduling-mechanisms"><a href="#Scheduling-mechanisms" class="headerlink" title="Scheduling mechanisms"></a>Scheduling mechanisms</h4><p>调度机制：当分组到达输出端buffer时，选择某种mechanism将packets transmit到link</p><p><em>scheduling:</em> choose next packet to send on link.  选哪一个packet输出</p><p>▪ FIFO scheduling – first in first out 先进先出</p><p>​      弃尾：   If queue is full last packets are dropped.</p><p>▪ Priority scheduling 优先调度</p><p>​        Some packets are more important </p><p>​        会有一部分packet进入优先权队列</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221027103356484.png" alt="image-20221027103356484" style="zoom:67%;"><p>▪ Round robin scheduling 循环调度</p><p>​       • If your queue is from several inputs ports treat them fairly</p><p>​      • Pick a packet from input port 1, then 2, then 3, then 4</p><p>​      • Port that is sending lots of traffic doesn’t block others. 不会阻塞别的端口</p><p>​      • **Weighted Fair Queue加权公平排队 (like this but give some queues a little more priority – give a little more traffic（流量） to port 1) **可以给某个端口更多的加权</p><h3 id="IP-Internet-Protocol"><a href="#IP-Internet-Protocol" class="headerlink" title="IP :Internet Protocol"></a>IP :Internet Protocol</h3><h4 id="IP-datagram-format"><a href="#IP-datagram-format" class="headerlink" title="IP datagram format"></a>IP datagram format</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221005212030239.png" alt="image-20221005212030239" style="zoom:67%;"><p>IP头部：20-60byte</p><p>overhead（开销）：指头部</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221027105050722.png" alt="image-20221027105050722"></p><h4 id="IP-fragmentation-reassembly"><a href="#IP-fragmentation-reassembly" class="headerlink" title="IP fragmentation, reassembly"></a>IP fragmentation, reassembly</h4><p>数据报分片重组</p><p><strong>network links have MTU</strong>（Maximum Transfer Unit ） （largest possible link-level frame）</p><p>链路层有MTU,且不同路由之间链路的MTU可能不同</p><p>MTU是链路层最大有效载荷（包括IP头部加IP信息）</p><p>large IP datagram divided (“fragmented”) within net</p><p>所以长的数据报可能无法装在MTU中，需要分片</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221027105352608.png" alt="image-20221027105352608"></p><p>• one datagram becomes several datagrams “reassembled” only at final destination</p><p>在目标主机重组</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006090423533.png" alt="image-20221006090423533" style="zoom:50%;"><p>• IP header bits used to identify, and order related fragments</p><p>将<strong>标识、标志</strong>和<strong>片偏移字段</strong>放在数据报首部</p><p>为了让目的主机绝对地相信它已收到了 初始数据报的最后一个片，最后片的标志比特（fragflag）被设为0 、而所有其他片的标志比特被设为1，为了让目的主机确定是否丢失了片（且能按正础的顺序重新组装片）使用偏移字段（offset）指定该片应放在初始 IP 数据报的哪个位置(不算头部)</p><p>20byte header+1480 segment data  </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006090459530.png" alt="image-20221006090459530" style="zoom:67%;"><p>分片长度必须为8的整数倍：偏移量单位为8B</p><p>MTU=1500bytes只能装1480的数据，此外offset是指该片的初始（第一个data）应该放在最终组合起来的数据报中的哪个位置（<strong>不算header</strong>，以8B为单位）最后一个的offset肯定是第一个非0 offset的整数倍</p><p><strong>exercise:</strong></p><p>An IP packet has 4620 bytes in total of which 20 bytes are the IP header. It enters a network that has a Maximum Transfer Unit of 1900 bytes. </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006091621110.png" alt="image-20221006091621110" style="zoom:50%;"><h4 id="IPv4-addressing"><a href="#IPv4-addressing" class="headerlink" title="IPv4 addressing"></a>IPv4 addressing</h4><h5 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h5><p><em>IP address:</em> 32-bit identifier for host, router interface</p><p>一个iP地址与一个接口相关联 <em>associated</em> <em>with each interface</em>，而不是与包括该接口的主机或路由器相关联</p><p>只有第三层的设备才有IP</p><ul><li><em>interface:</em> connection between host/router and physical link(主机与物理链路之间的边界叫作接口)</li><li>routers typically have <strong>multiple</strong> interfaces(实现转发)</li><li>host typically has <strong>one or two</strong> interfaces IPv4 address notation(以太网+无线网)</li></ul><p>每个 IP 址长度为 32 比特（等价为4字节），因 此总共有大约 40 亿个可能的 iP , 这些地址通常按所谓点分十进制记法(dotted-decimal notation)书写，即地址中的每个字节用它的十进制形式书写，各字间以句点隔开</p><p>There are three common notations to show an IPv4 address: </p><p>• binary notation</p><p>• dotted-decimal notation (most commonly used) </p><p>• hexadecimal notation </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006092234012.png" alt="image-20221006092234012" style="zoom:80%;"><p><strong>exercise:</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006092303478.png" alt="image-20221006092303478" style="zoom:50%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221027133704701.png" alt="image-20221027133704701"></p><p>十进制转2进制</p><h5 id="Subnets"><a href="#Subnets" class="headerlink" title="Subnets"></a>Subnets</h5><p>ip地址为subnet part（网络）（高位）+host part（低位）</p><h6 id="what’s-a-subnet"><a href="#what’s-a-subnet" class="headerlink" title="what’s a subnet ?"></a><em>what<strong>’</strong>s a subnet ?</em></h6><p><strong>device interfaces with same subnet part of IP address</strong></p><p>can physically reach each other <em>without</em> intervening router</p><blockquote><p>to determine the subnets, detach each interface from its host or router, creating islands of isolated networks</p></blockquote><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006105212450.png" alt="image-20221006105212450" style="zoom:50%;"><p>图中有6个子网</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006100736953.png" alt="image-20221006100736953" style="zoom:67%;"><p><em>subnet mask (or slash</em> <em>notation)</em>: <em>number of bits</em> <em>taken to identify network</em></p><p>子网掩码的长度也是32位，左边是网络位，用<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6?fromModule=lemma_inlink">二进制</a>数字“1”表示，1的数目等于网络位的长度；右边是主机位，用<a href="https://baike.baidu.com/item/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%95%B0%E5%AD%97/5920908?fromModule=lemma_inlink">二进制数字</a>“0”表示，0的数目等于主机位的长度。</p><p>如：<em>223.1.3.0/24</em> 表示子网（子网位）部分有24位</p><p>• <em>/8 size of old class A</em> </p><p>• <em>/16 size of class B</em> </p><p>• <em>/24 size of class C</em></p><h6 id="Three-Level-Addressing"><a href="#Three-Level-Addressing" class="headerlink" title="Three-Level Addressing"></a>Three-Level Addressing</h6><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006102118725.png" alt="image-20221006102118725" style="zoom:50%;"><p>例如，<code>130.66.0.0是一个B类网络，它的主机位部分有两个字节</code>。当借用此网络的第三个字节的高两位分配子网时，其可用的子网地址分别为130.66.2.0和130.66.3.0。</p><p>其中，130.66.2.216的网络地址为130.66.0.0，子网地址为130.66.2.0 主机位为216。（130.66.255.255、130.66.2.255不可作为host地址，是广播地址）</p><h6 id="Network-mask-and-subnetwork-mask"><a href="#Network-mask-and-subnetwork-mask" class="headerlink" title="Network mask and subnetwork mask"></a>Network mask and subnetwork mask</h6><p>Subnetting increases length of <strong>netid</strong> and decreases length of <strong>hostid</strong>.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006101131042.png" alt="image-20221006101131042" style="zoom:70%;"><p>To divide a network to <strong>s</strong> number of subnetworks, each of equal numbers of hosts, the <strong>subnetid</strong> for each subnetwork can be calculated as</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006101203339.png" alt="image-20221006101203339" style="zoom:67%;"><p>subnetid 包括 netid</p><h6 id="Why-subnetting"><a href="#Why-subnetting" class="headerlink" title="Why subnetting ?"></a><strong>Why subnetting ?</strong></h6><p>▪ The idea of splitting a block to smaller blocks is referred to as subnetting.</p><p>▪ In subnetting, a network is divided into several smaller subnetworks (subnets) <strong>with each subnetwork having its own subnetwork address</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006103524442.png" alt="image-20221006103524442"></p><h6 id="Classful-IP-addressing-分类编址"><a href="#Classful-IP-addressing-分类编址" class="headerlink" title="Classful IP addressing 分类编址"></a>Classful IP addressing 分类编址</h6><p>In classful addressing, the IP address space is divided into five classes: A, B, C, D, E. </p><p>Starting number, n (first byte), shows whether Class A, B or C</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221027125327926.png" alt="image-20221027125327926" style="zoom:67%;"><p>• <strong>Class A</strong>: n &lt; 128 (($2^{24}-2$) hosts)          0</p><p>• <strong>Class B</strong>: 128 &lt; n &lt; 192 (($2^{16}-2$) hosts) 10</p><p>• <strong>Class C</strong>: 192 &lt; n &lt; 224 (($2^8-2$)hosts)   110</p><p>去除全0和全1地址（全0为网络地址，全1为广播地址）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006102406906.png" alt="image-20221006102406906" style="zoom:90%;"><p>These addresses are “special” and not used on the general Internet. You use them to set up test networks or networks of machines not accessible from outside.、</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006102804234.png" alt="image-20221006102804234" style="zoom:50%;"><h6 id="Classless-addressing"><a href="#Classless-addressing" class="headerlink" title="Classless addressing"></a>Classless addressing</h6><p>In this architecture, the entire address space ($2^{32}$ addresses) is divided into blocks of different sizes.（可以任意分网络部分和主机部分，不用每8bit分一次，n可以等于0-32任何数）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006104357462.png" alt="image-20221006104357462" style="zoom:70%;"><p> slash notation ： CIDR (Classless InterDomain Routing) notation.</p><p>For a /n address, the first n bits are the network address and the last 32-n bits are for the host.</p><p>▪ Example 129.66.25.5/22</p><ul><li>Network part (22 bits – because it is /22)，Host part 10 bits(32 bits – 22 bits)</li></ul><p>​      <strong>10000001.01000010.000110</strong>01.00000101</p><ul><li>Network address: 129.66.24.0/22</li></ul><blockquote><p>Network address is the address with all the host bits set to zero – address like any other but represents the network. Network address 也可以分给主机</p></blockquote><p>​       <strong>10000001.01000010.000110</strong>00.00000000</p><ul><li>Broadcast address: 129.66.27.255/22</li></ul><blockquote><p>Broadcast address (sends to everyone) is the address with <strong>all the host bits set to one.</strong></p></blockquote><p>​        <strong>10000001.01000010.000110</strong>11.11111111</p> <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006104923565.png" alt="image-20221006104923565" style="zoom:50%;"><p>可以容纳2^m-1个主机</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006105041972.png" alt="image-20221006105041972" style="zoom:50%;"><p>3个主机但是要去掉广播地址（网络地址可以用）</p><h6 id="VLSM-variable-length-subnet-mask"><a href="#VLSM-variable-length-subnet-mask" class="headerlink" title="VLSM(variable length subnet mask)"></a>VLSM(variable length subnet mask)</h6><p>使用VLSM为某个网络分配地址。最有效的利用现有的地址空间。</p><p>所谓VLSM，就是说每个子网的子网id可变，这样比较灵活。</p><p>Only classless routing protocols support VLSM</p><h6 id="exercise"><a href="#exercise" class="headerlink" title="exercise:"></a>exercise:</h6><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006110539733.png" alt="image-20221006110539733"></p><ol><li><p>首先我们要知道整个网络能分配的ip有哪些。观察到题中给了192.168.1.0/24，可以知道前24位都不能分，后面8位都可以分。</p></li><li><p><strong>start with the largest subnet to avoid waste</strong>，50(00110010)个host对应于 6bits (32&lt;50&lt;64),所以从后八位中取出前2位(后六位留给主机位)</p><p>192.168.1.0 - 192.168.1.63 (allocate to the largest subnet with 50 hosts: 192.168.1.0/26) </p><p>同理20=00010100 = 5 bits</p><p>Reserve 5 bits for hosts</p><p>192.168.1.0 – 192.168.1.63 (already allocated)</p><p>192.168.1.64 - 192.168.1.95 (allocate to the subnet with 20 hosts: 192.168.1.64/27)</p><p>192.168.1.96 – 192.168.1.127 (allocate to the other subnet with 20 hosts: 192.168.1.96/27)</p></li><li><p>为路由器（点到点）分配ip</p><p><strong>/30 is commonly used for point-to-point WAN link/serial link between routers</strong></p></li><li><p>2=00000010 = 2 bitsReserve 2 bits for hosts</p><p>192.168.1.128 -192.168.1.131 (allocated to link between routers: 192.168.1.128/30)</p><p>192.168.1.132 -192.168.1.135 (allocated to link between routers: 192.168.1.132/30) </p><p>192.168.1.136 -192.168.1.139 (allocated to link between routers: 192.168.1.136/30) </p><p><strong>Only classless routing protocols support VLSM.</strong></p></li></ol><h6 id="DHCP-Dynamic-Host-Configuration-Protocol"><a href="#DHCP-Dynamic-Host-Configuration-Protocol" class="headerlink" title="DHCP: Dynamic Host Configuration Protocol"></a>DHCP: Dynamic Host Configuration Protocol</h6><p>allow host to <em>dynamically</em> obtain its IP address from network server when it joins network</p><p>DHCP 许主机自动获取（被分配）IP 地址 </p><p>• can renew its lease on address in use</p><p>• allows reuse of addresses (only hold address while connected/“ on ”) </p><p>• support for mobile users who want to join network (more shortly)</p><p>   移动设备可以不用配置直接连接进网络</p><p>每个子网具有DHCP服务器，通过一个中继代理路由器与之相连</p><p>*DHCP :*新主机到达子网时的配置操作(这里配置的其实是私有网)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006122507325.png" alt="image-20221006122507325" style="zoom:50%;"><p>DHCP只在网络、子网中工作，因为broadcast只存在于子网中</p><h6 id="DHCP过程"><a href="#DHCP过程" class="headerlink" title="DHCP过程"></a>DHCP过程</h6><ol><li><p>host broadcasts “DHCP discover” msg [optional]</p><p>DHCP发现报文（客户端寻找DHCP服务器）此时使用源IP 0.0.0.0和广播目的地址255.255.255.255. 该子网中所有节点都接收到此message（包括DHCP）</p></li><li><p>DHCP server responds with “DHCP offer” msg [optional]</p><p>DHCP服务提供报文，向客户端做出响应：向255.255.255.255进行广播为它分配到的新加入主机的IP。</p><p>每个子网里有多个DHCP,经过DHCP discover 广播后，多个DHCP server都提供了IP</p></li><li><p>host requests IP address: “DHCP request” msg</p><p>客户端在接收到所有DHCP offer后选择一个想要的IP，并将这个IP对应的DHCPserver的IP地址封装成<strong>DHCP请求</strong>一起广播出去，对于该DHCP来说，意味着接收了它的IP。对于其他DHCP来说意味着拒绝了它的ip</p><p>注意此时还没完全分配IP，所以还是使用0.0.0.0</p></li><li><p>DHCP server sends address: “DHCP ack” msg</p><p>DHCP服务器确认请求（表示允许你用这个IP）</p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006123133184.png" alt="image-20221006123133184"></p><p> 67 68是端口号（因为是UDP）</p><p>可以发现，DHCP 交互中，<strong>全程都是使⽤</strong> <strong>UDP</strong> <strong>⼴播通信</strong></p><ul><li><p><strong>DHCP can return more than just allocated IP address on subnet:</strong></p><p>• <strong>address of first-hop router for client（destination ip）</strong></p><p>  便于以后发消息时候可以找到第一跳路由</p><p>• name and IP address of DNS sever</p><p>• network mask (indicating network versus host portion of address)</p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006124136344.png" alt="image-20221006124136344" style="zoom: 67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006124144846.png" alt="image-20221006124144846" style="zoom:67%;"><p>DHCP基于UDP</p><h5 id="Hierarchical-addressing"><a href="#Hierarchical-addressing" class="headerlink" title="Hierarchical addressing"></a>Hierarchical addressing</h5><p>提高效率 </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221116171336239.png" alt="image-20221116171336239" style="zoom: 67%;"><p>把organization1 转入isp1时ISP向Internet请求信息的子网地址多了一条信息</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221102174321926.png" alt="image-20221102174321926" style="zoom:67%;"><h4 id="NAT-network-address-translation"><a href="#NAT-network-address-translation" class="headerlink" title="NAT: network address translation"></a>NAT: network address translation</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221102181534841.png" alt="image-20221102181534841" style="zoom:67%;"><ul><li>本地网络通过一个NAT router　（一个IP地址）与外界联系</li></ul><p><em>all</em> datagrams <em>leaving</em> local network single source NAT IP address: 138.76.29.7, different source port numbers</p><ul><li>专用地址：可以在子网中互发信息但是在外网看来，只有一个IP　local network uses just one IP address</li></ul><p>datagrams with source or destination in this network　have 10.0.0/24 address for source, destination (as usual)</p><ul><li><p>range of addresses not needed from ISP: just one IP address for all devices 这个地址不是由ISP划分的（是路由器中DCHP使用保留地址进行分配的：不是E类地址）</p></li><li><p>can change addresses of devices in local network without notifying outside world在本地网络中更改，与外界无关</p></li><li><p>can change ISP without changing addresses of devices in local network</p></li><li><p>devices inside local net not explicitly addressable, visible by outside world (a security plus)</p></li></ul><p>　</p><h5 id="implementation"><a href="#implementation" class="headerlink" title="implementation"></a><em>implementation</em></h5><p>▪ <em>outgoing datagrams: replace</em> (source IP address, port #) of every outgoing datagram to (NAT IP address, new port #). . . remote clients/servers will respond using (NAT IP address, new port #) as destination addr</p><p>把LAN的源IP、端口替换为中NAT的IP和任意一个未在转换表中的端口</p><p>▪ <em>remember (in NAT translation table)</em> every (source IP address, port #) to (NAT IP address, new port #) translation pair</p><p>记录在NAT translation table</p><p>▪ <em>incoming datagrams: replace</em> (NAT IP address, new port #) indest fields of every incoming datagram with the corresponding (source IP address, port #) stored in NAT table</p><p>传回来的数据从NAT translate table中查询，转化为LAN地址和端口</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221102183657636.png" alt="image-20221102183657636" style="zoom:80%;"><p>16-bit port-number field 端口号字段为16bit: </p><p>• 60,000 simultaneous connections with a single LAN-side address!(可以支持超过60000个并行连接)</p><h5 id="NAT几点争议："><a href="#NAT几点争议：" class="headerlink" title="NAT几点争议："></a>NAT几点争议：</h5><ul><li><p>routers should only process up to layer 3（但NAT router涉及到了port）</p></li><li><p>address shortage should be solved by IPv6</p></li><li><p>violates end-to-end argument (complexity should be at network “ends” not middle)</p><p><a href="https://blog.csdn.net/weixin_43495262/article/details/106507357">(22条消息) 为什么我们的IP都是192.168.X.X ？_泼天猴的博客-CSDN博客_为什么都是192.168</a></p></li></ul><h4 id="IPv6"><a href="#IPv6" class="headerlink" title="IPv6"></a>IPv6</h4><ul><li><p>32-bit address space be completely allocated(using 128 bit)</p></li><li><p><em>IPv6 datagram format:</em> </p><p>   fixed-length <strong>40-byte</strong> header</p><p>   <strong>no fragmentation allowed</strong></p><p>   <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105193951205.png" alt="image-20221105193951205"></p></li></ul><h5 id="IPv6-datagram-format"><a href="#IPv6-datagram-format" class="headerlink" title="IPv6 datagram format"></a>IPv6 datagram format</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221102185608990.png" alt="image-20221102185608990" style="zoom:67%;"><p><em>priority:</em> identify priority among datagrams in flow</p><p><em>flow Label:</em> identify datagrams in same “flow.”</p><p><em>next header:</em> identify upper layer protocol for data</p><p><em>checksum</em>: removed entirely to reduce processing time at each hop 和TCP，UDP重复　删掉了</p><p> <em>options:</em> allowed, but outside of header, indicated by “Next Header” field</p><p>变成下一个header</p><p>IPv6 相⽐ IPv4 的⾸部改进：<strong>取消了⾸部校验和字段。</strong> 因为在数据链路层和传输层都会校验，因此 IPv6 直接取消了 IP 的校验。</p><p><strong>取消了分片</strong>重新组装相关字段。</p><p><strong>取消选项字段。</strong> 选项字段不再是标准 IP ⾸部的⼀部分了，但它并没有消失，⽽是可能出现在 IPv6 ⾸部中的「下⼀个⾸部」指出的位置上。删除该选项字段使的 IPv6 的⾸部成为固定⻓度的 40 字节。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105194129313.png" alt="image-20221105194129313"></p><p><em>ICMPv6:</em> new version of ICMP (see later lecture)</p><p>• additional message types, e.g. “Packet Too Big”</p><p>• multicast group management functions</p><h5 id="Transition-from-IPv4-to-IPv6"><a href="#Transition-from-IPv4-to-IPv6" class="headerlink" title="Transition from IPv4 to IPv6"></a>Transition from IPv4 to IPv6</h5><p>not all routers can be upgraded simultaneously　路由器内部封装的协议是IPv４，无法同时把世界上的router全upgrade</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221102192333302.png" alt="image-20221102192333302" style="zoom:67%;"><p><em>tunneling:</em> IPv6 datagram carried as <em>payload</em> in IPv4 datagram among IPv4 routers</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221102193123521.png" alt="image-20221102193123521"></p><p>ipv4数据报中的载荷是ipv6的全部数据报</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221102193229542.png" alt="image-20221102193229542" style="zoom:67%;"><h5 id="IPv6-and-IPv4"><a href="#IPv6-and-IPv4" class="headerlink" title="IPv6 and IPv4"></a>IPv6 and IPv4</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221117172814850.png" alt="image-20221117172814850"></p><h3 id="Generalized-Forward-and-SDN"><a href="#Generalized-Forward-and-SDN" class="headerlink" title="Generalized Forward and SDN"></a>Generalized Forward and SDN</h3><p>SDN allows more flexibility in the control and data plane.</p><p>• Program your own control algorithms in language you know (Java, python etc).</p><p>• Forwarding can use any part of the packet header.</p><p>• Not a distributed system, but a single centralised control point.</p><p>• Programmable, not fixed – you can program the controller in a high-level language that you know.</p><p>• Create your own algorithms and test them on the network without spending a million dollars to create a new hardware router.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221102195640593.png" alt="image-20221102195640593" style="zoom:67%;"><h5 id="OpenFlow-data-plane"><a href="#OpenFlow-data-plane" class="headerlink" title="OpenFlow data plane"></a>OpenFlow data plane</h5><p> <strong>OpenFlow is a specific SDN protocol</strong>，帮助沟通控制平面和数据平面</p><p><em>flow</em>: defined by header fields</p><p>generalized forwarding: simple packet-handling rules</p><p><em>match+action:</em> different kinds of devices become one 集合这些设备的功能</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221116180735834.png" alt="image-20221116180735834" style="zoom:67%;"><p>通用转发的例子</p><p>Flow Table Entries</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221102200559697.png" alt="image-20221102200559697" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221102200537687.png" alt="image-20221102200537687" style="zoom:67%;"><p>分组头部与流表不同字段匹配实现不同功能</p><p>通用转发：并不是和基于目标转发一样只识别IP地址进行转发，而是整合了网络中各个层次的网络配置信息，由一些关键字和执行动作组成的灵活规则。</p><p>当OpenFlow交换机收到一个数据包，将包头解析后与流表中流表项的匹配域进行匹配，匹配成功则执行指令</p><h2 id="Control-Plane"><a href="#Control-Plane" class="headerlink" title="Control Plane"></a>Control Plane</h2><p><em>data plane：    forwarding:</em> move packets from router’s input to appropriate router output</p><p><em>control plane：</em>  <em>routing:</em> determine route taken by packets from source to destination</p><h3 id="Routing-protocols"><a href="#Routing-protocols" class="headerlink" title="Routing protocols"></a>Routing protocols</h3><p><em>Routing protocol goal:</em> determine “good” paths (equivalently, routes), from sending hosts to receiving host, through network of routers 从发送方到接收方的过程中确定一条好路径</p><p>▪ path: sequence of routers packets will traverse in going from given initial source host to given final destination host</p><h4 id="Graph-abstraction-of-the-network"><a href="#Graph-abstraction-of-the-network" class="headerlink" title="Graph abstraction of the network"></a>Graph abstraction of the network</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105200917581.png" alt="image-20221105200917581" style="zoom:67%;"><p>graph: G = (N,E） N个节点E条边的集合</p><p>N = set of routers = { u, v, w, x, y, z }</p><p>E = set of links ={ (u,v), (u,x), (u,w), (v,x), (v,w), (x,w), (x,y), (w,y), (w,z), (y,z) }</p><p>c(x,x’) = cost of link (x,x’) 每个连接上的开销</p><blockquote><p>cost could always be 1, or inversely related to bandwidth,or inversely related to congestion</p></blockquote><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105201152362.png" alt="image-20221105201152362" style="zoom:67%;"><p><em>routing algorithm:</em> algorithm that finds that least cost path</p><ul><li><p>Routing algorithm classification</p></li><li><p><em>global or decentralized</em> <em>information</em></p><ol><li><p><em>global:</em></p><p>▪ all routers have complete topology, link cost info</p><p><strong>▪ “link state” algorithms</strong></p></li><li><p><em>decentralized:</em> </p><p>▪ router knows physically-connected neighbors, link costs to neighbors</p><p>▪ iterative process of computation, exchange of info with neighbors</p><p>走一步看一步</p><p><strong>▪ “distance vector” algorithms</strong></p></li></ol></li><li><p><em>static or dynamic</em></p><ol><li><p><em>static:</em></p><p>▪ routes change slowly over time路由随时间变化非常缓慢</p></li><li><p><em>dynamic:</em> </p><p>▪ routes change more quickly</p><p>周期性变化</p><p>• periodic update</p><p>• in response to link cost changes</p></li></ol></li></ul><h4 id="A-link-state-routing-algorithm：Dijkstra’s-algorithm"><a href="#A-link-state-routing-algorithm：Dijkstra’s-algorithm" class="headerlink" title="A link-state routing algorithm：Dijkstra’s algorithm"></a>A link-state routing algorithm：<em>Dijkstra<strong>’</strong>s algorithm</em></h4><p>链路状态路由选择算法，是集中式路由算法</p><p><em>Dijkstra<strong>’</strong>s algorithm</em></p><p> via “link state broadcast” known net topology, link costs  to all nodes</p><p>在开启算法之前，提前通过广播知道每个连接的开销</p><p> after k iterations, know least cost path to k dest.’ s</p><p><strong>c(x,y)</strong>: link cost from node x to y; = ∞ if not direct neighbors</p><p><strong>D(v)</strong>: current value of cost of path from source to dest. v</p><p>源节点到v的最低开销</p><p><strong>p(v)</strong>: predecessor node along path from source to v</p><p>前序节点</p><p><strong>N’</strong>: set of nodes whose least cost path definitively known</p><p>最小开销已经明确了的节点的集合</p><pre class="line-numbers language-none"><code class="language-none">1 Initialization:2 N' = {u} 3 for all nodes v 4 if v adjacent to u 5 then D(v) = c(u,v) 6 else D(v) = ∞ 7 8 Loop9 find w not in N' such that D(w) is a minimum 10 add w to N' 11 update D(v) for all v adjacent to w and not in N' : 12 D(v) = min( D(v), D(w) + c(w,v) ) 13 /* new cost to v is either old cost to v or known shortest path cost to w plus cost from w to v */ 14 until all nodes in N'<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105205256882.png" alt="image-20221105205256882"></p><p>画圈：首先N’中只有u,现在找与其相连边中开销最小的作为路径如图（u，w）,此时N’中有u和w,找与这两个节点相邻，并且<strong>到u开销最小</strong>的：如图为x………如此循环直到到达目标节点。<strong>当LS算法结束时，我们发现对于每个节点我们都能找到到它的最短路径</strong></p><ul><li>shortest-path tree from u：</li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105210703219.png" alt="image-20221105210703219" style="zoom:67%;"><ul><li>forwarding table in u:</li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105210725775.png" alt="image-20221105210725775" style="zoom:67%;"><h5 id="algorithm-complexity"><a href="#algorithm-complexity" class="headerlink" title="algorithm complexity:"></a><em>algorithm complexity:</em></h5><p> n nodes（不算源节点） 最坏情况迭代次数为 n(n+1)/2 comparisons: <strong>O(n2 )</strong></p><h5 id="oscillations-possible："><a href="#oscillations-possible：" class="headerlink" title="oscillations possible："></a><em>oscillations possible</em>：</h5><p> support link cost equals amount of carried traffic: 以流量为负载的情况</p><p>初始路由是B逆时针发送1个单位给A，D顺时针发送1个单位给A，C逆时针发送e个单位给B，B再给A</p><p>当再次运行LS算法之后，B、C、D路由都将会认为顺时针路由费用最低</p><p>再次运行LS算法，B、C、D路由器又将会向逆时针方向交付分组</p><p>产生选择震荡</p><p>（顺时针流量小拥堵时候，所有包都被路由表引导到逆时针，运行一会后，逆时针又会产生拥堵，所有包又被引导回顺时针）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105213015128.png" alt="image-20221105213015128"></p><h4 id="Distance-vector-algorithm"><a href="#Distance-vector-algorithm" class="headerlink" title="Distance vector algorithm"></a>Distance vector algorithm</h4><p>距离向量算法是一种分散式路由算法，路由器不需要知道所有信息，只需要知道相邻路由的开销即可工作。然后通过迭代与相邻节点进行数据交换。</p><p><em>Bellman-Ford equation (dynamic programming)</em> </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105214410744.png" alt="image-20221105214410744" style="zoom:50%;"><p>x到y的最小开销为：x到所有neighbor的开销加这个邻居到y的开销的和的最小值</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105214710850.png" alt="image-20221105214710850" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105215412848.png" alt="image-20221105215412848" style="zoom:50%;"><p>用距离向量Dx估计到所有点的距离</p><p>▪ node x:</p><p>• knows cost to each neighbor v: c(x,v)</p><p>• maintains its neighbors’ distance vectors（X的neighbor的位置向量）. For each neighbor v, x maintains <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105215744785.png" alt="image-20221105215744785" style="zoom: 50%;"></p><h5 id="DV-characters"><a href="#DV-characters" class="headerlink" title="DV characters"></a>DV characters</h5><ul><li><em>iterative, asynchronous:</em></li></ul><p> local iteration caused by local link cost change，Then DV update message from neighbor</p><ul><li><em>distributed:</em></li></ul><p>each node notifies neighbors <em>only</em> when its DV changes</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105221222131.png" alt="image-20221105221222131" style="zoom:50%;"><ul><li><p>from time-to-time, each node sends its own distance vector estimate to neighbors</p></li><li><p>when x receives new DV estimate from neighbor, it updates its own DV using B-F eq</p></li></ul><p>每个节点不时的向邻居发送距离向量，如果x的distance vector因为bellman-ford方程发生改变，节点x将会向每个邻居发送更新后的距离向量，这继而让所有neighbor都更新自己的距离向量。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105220607658.png" alt="image-20221105220607658" style="zoom:50%;"><p>the estimate <em>Dx</em> <em>(y)</em> <em>converge to the actual least cost</em> dx (y)最终收敛到实际最短开销</p><h5 id="DV-process"><a href="#DV-process" class="headerlink" title="DV process"></a>DV process</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105222608355.png" alt="image-20221105222608355"></p><p>第一列的三个表是初始化的路由表，所以并没有上一个状态的邻居的距离向量（初始化为∞）。初始化后，每个节点向它的两个邻居发送距离向量（每个表中一行为一个距离向量），而在第二列表中由于距离向量更新，所以要按照bellman-ford公式重新计算路由表（计算过程看上图），而后由于y的距离向量在三张表里相同，所以并不发送，而xz会发送新值。最终无更新报文发送，则该算法达到了停止态。</p><h5 id="link-cost-changes"><a href="#link-cost-changes" class="headerlink" title="link cost changes"></a>link cost changes</h5><p>❖ node detects local link cost change </p><p>❖ updates routing info, recalculates distance vector</p><p>❖ if DV changes, notify neighbors</p><h6 id="开销减少的情况"><a href="#开销减少的情况" class="headerlink" title="开销减少的情况"></a>开销减少的情况</h6><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105223949128.png" alt="image-20221105223949128" style="zoom:67%;"><p><em>t0</em> : <em>y</em> detects link-cost change, updates its DV, informs its neighbors.</p><p><em>t1</em> : <em>z</em> receives update from <em>y</em>, updates its table, computes new least cost to <em>x</em> , sends its neighbors its DV.</p><p><em>t2</em> : <em>y</em> receives <em>z</em> ’s update, updates its distance table. <em>y</em> ’ s least costs do <em>not</em> change, so <em>y</em> does <em>not</em> send a message to <em>z</em>. 此时进入静止态。</p><p>开销减少的好消息在网络中迅速传播</p><h6 id="开销增多的情况"><a href="#开销增多的情况" class="headerlink" title="开销增多的情况"></a>开销增多的情况</h6><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105224400644.png" alt="image-20221105224400644" style="zoom:67%;"><p>开销增多的坏消息在网络中缓慢传播</p><p>❖ node detects local link cost change </p><p>❖ <em>bad news travels slow</em> - “ count to infinity” problem!（路由选择环路）</p><p>❖ 44 iterations before algorithm stabilizes ？？？</p><p>解决方法：*poisoned reverse:*（毒性逆转）</p><p>❖ If Z routes through Y to get to X :</p><p>▪ Z tells Y its (Z’s) distance to X is infinite (so Y won’ t route to X via Z)</p><p>Z告诉Y:经过y到x的距离向量无穷大</p><p>综上：LS ：source router需要全局的信息，而DV中每一个router只需要与邻居进行通信，neighbor会告诉它neighbor 已知的信息</p><h3 id="intra-AS-routing-in-the-Internet"><a href="#intra-AS-routing-in-the-Internet" class="headerlink" title="intra-AS routing in the Internet"></a>intra-AS routing in the Internet</h3><p>现实中的路由器并不完全相同，而且拥有上亿（billions ）的规模，can ’t store all destinations in routing tables，永远无法收敛。</p><p>此外由于英特网是ISP的网络，每个ISP都want to control routing in its own network</p><h4 id="autonomous-systems-AS"><a href="#autonomous-systems-AS" class="headerlink" title="autonomous systems(AS)"></a><strong>autonomous systems(AS)</strong></h4><p>aggregate routers into regions</p><h5 id="intra-AS-routing-域内路由选择"><a href="#intra-AS-routing-域内路由选择" class="headerlink" title="intra-AS routing 域内路由选择"></a>intra-AS routing <strong>域内路由选择</strong></h5><p>将一个ISP的路由器和它们之间的链路聚合成一个AS，相同AS中路由器运行着相同的路由选择算法（all routers in AS must run <em>same</em> intra-domain protocol）</p><ul><li><strong>gateway router:</strong> at “edge” of its own AS, has link(s) to router(s) in other AS’es</li></ul><h5 id="inter-AS-routing-域间路由选择"><a href="#inter-AS-routing-域间路由选择" class="headerlink" title="inter-AS routing 域间路由选择"></a>inter-AS routing <strong>域间路由选择</strong></h5><p>gateways perform inter-domain routing </p><p>forwarding table configured by both intra and inter-AS routing algorithm</p><p><strong>自治系统内部和自治系统外部，分别采用不同类别的路由选择协议，分别进行路由选择</strong></p><ul><li><p>intra-AS routing determine entries for destinations within AS</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221106221910787.png" alt="image-20221106221910787" style="zoom:70%;"></li></ul><p>suppose router in AS1receives datagram destined outside of AS1 </p><p>AS1接收到其他AS中发来的datagram,它需要发到gateway router,必须知道目的地的是否可到达，同时把这个datagram的可传达性传达给别的AS，这个工作是由inter- AS routing负责</p><p>router should forward packet to gateway router, but which one?</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221106222240737.png" alt="image-20221106222240737" style="zoom:80%;"><p>内部网关使用的协议：<em>interior gateway protocols (IGP)</em></p><p>外部网关使用的协议：<strong>Border Gateway Protocol（BGP）</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221106221501793.png" alt="image-20221106221501793"></p><h4 id="Intra-AS-Routing：OSPF"><a href="#Intra-AS-Routing：OSPF" class="headerlink" title="Intra-AS Routing：OSPF"></a>Intra-AS Routing：OSPF</h4><p>most common intra-AS routing protocols:</p><p>• RIP: Routing Information Protocol 适合路由数量较少</p><p>• OSPF: Open Shortest Path First </p><p>• IGRP: Interior Gateway Routing Protocol </p><h5 id="OSPF-Open-Shortest-Path-First"><a href="#OSPF-Open-Shortest-Path-First" class="headerlink" title="OSPF (Open Shortest Path First)"></a>OSPF (Open Shortest Path First)</h5><p>open指 publicly available公众可用</p><ul><li><p>link-state algorithm  使用LS</p></li><li><p>route computation using Dijkstra’s algorithm，一台路由器构建整个AS的完整topology</p></li></ul><p>router floods（泛洪） OSPF link-state advertisements to all other routers in <em>entire</em> AS</p><p>像所有路由器广播状态信息，每有一个链路变化，就泛洪一次，即使没状态变化也周期性泛洪</p><p><strong>carried in OSPF messages directly over IP</strong></p><h6 id="features"><a href="#features" class="headerlink" title="features"></a>features</h6><ol><li><p><em>security:</em> all OSPF messages authenticated 所有信息需要授权(to prevent intrusion) </p></li><li><p>multiple same-cost paths allowed (only one path in RIP)</p><p>如果多条路开销一致，可以多路并行，分担开销</p></li><li><p>integrated uni- and multi-cast support 对单播和多播综合支持</p><p>Multicast OSPF (MOSPF) uses same topology data base as OSPF</p></li><li><p>hierarchical 支持层次结构</p></li></ol><h4 id="Internet-inter-AS-routing-BGP"><a href="#Internet-inter-AS-routing-BGP" class="headerlink" title="Internet inter-AS routing: BGP"></a>Internet inter-AS routing: BGP</h4><p>BGP (Border Gateway Protocol) 边界网关协议（每个AS统一的协议）</p><p>autonomous system 间的协议</p><p>将互联网中的ISP（glue）粘合在一起</p><p>使用DV算法，告诉路由器路径</p><p>BGP provides each AS a means to:</p><p>• eBGP 外部BGP:    连接不同AS之间的链路</p><p> obtain subnet reachability information from neighboring ASes (从相邻的ASes那里获得子网可达信息) 告诉别的子网”我在那”，接收到所有子网的”我在那”</p><p>• iBGP 内部BGP:      一个AS内部的BGP链路</p><p>  propagate reachability information to all AS internal routers.（将获得的子网可达信息传遍到AS内部的所有路由器）</p><p>BGP选择一条最好的路径去其他AS，基于reachability information and <em>policy</em></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221109222911176.png" alt="image-20221109222911176" style="zoom:67%;"><p>BGP session: two BGP routers (“ peers ”) exchange BGP messages over semi-permanent TCP connection: 两个BGP router通过半永久TCP交换路由选择信息</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221109223330469.png" alt="image-20221109223330469" style="zoom:67%;"><p>向AS1 AS2通告前缀x的可达性信息</p><p>when AS3 gateway router 3a advertises path AS3 ,X to AS2 gateway router 2c</p><p>由于3a 参与AS3内所有路由运算，所有3a可以收集所有路由可达信息，并一起发给2c，相当于3a向2c承诺说 你可以通过我到达x</p><h5 id="Path-attributes-and-BGP-routes"><a href="#Path-attributes-and-BGP-routes" class="headerlink" title="Path attributes and BGP routes"></a>Path attributes and BGP routes</h5><p>为了在多条路径中选择下一条，BGP在prefix里加入BGP attributes </p><p>prefix + attributes = “route” 前缀加属性=路由</p><ul><li>two important attributes:</li></ul><p>• AS-PATH: list of ASes through which prefix advertisement has passed 记录前缀通过了的AS，每通过一个AS，向列表中记录一个</p><p>• NEXT-HOP: indicates specific internal-AS router to next hop AS</p><p>如当路由为AS2 AS3 x，Nest hop为2a左侧接口的IP地址</p><h5 id="Policy-based-routing"><a href="#Policy-based-routing" class="headerlink" title="Policy-based routing:"></a><em>Policy-based routing:</em></h5><p>gateway receiving route advertisement uses <em>import policy</em> to accept/decline path</p><p> 当一个<strong>网关路由器</strong>接收到了一个路由通告, 使用<strong>输入策略</strong>来接受或过滤</p><p> 过滤原因例1：不想经过某个AS，转发某些前缀的分组 </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221112141352063.png" alt="image-20221112141352063" style="zoom:67%;"><p>AS2 router 2c receives path advertisement AS3,X (via eBGP) from AS3 router 3a</p><p>Based on AS2 policy, AS2 router 2c accepts path AS3,X, propagates (via iBGP) to all AS2 routers</p><p>Based on AS2 policy, AS2 router 2a advertises (via eBGP) path AS2, AS3, X to AS1 router 1c</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221112142218374.png" alt="image-20221112142218374" style="zoom:67%;"><p>另一种policy：绕开AS2</p><p>▪ Based on policy, AS1 gateway router 1c chooses path <em>AS3,X, and</em> <em>advertises path within AS1</em> <em>via iBGP</em></p><h5 id="BGP-route-selection"><a href="#BGP-route-selection" class="headerlink" title="BGP route selection"></a>BGP route selection</h5><p>▪ router may learn about more than one route to destination AS, selects route based on:</p><ol><li><p>local preference value attribute: policy decision</p></li><li><p>shortest AS-PATH </p></li><li><p>closest NEXT-HOP router: hot potato routing</p></li><li><p>additional criteria</p></li></ol><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221112143005029.png" alt="image-20221112143005029" style="zoom:67%;"><h3 id="SDN"><a href="#SDN" class="headerlink" title="SDN"></a>SDN</h3><p>easier network management: avoid router misconfigurations, greater flexibility of traffic flows</p><p>传统per-router control plane无法解决的问题：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221112152056262.png" alt="image-20221112152056262" style="zoom: 50%;"><h4 id="SDN特点"><a href="#SDN特点" class="headerlink" title="SDN特点"></a>SDN特点</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221112155303138.png" alt="image-20221112155303138" style="zoom: 67%;"><p>通用“ flowbased” 基于流的匹配+行动</p><p> <em>可编程控制应用</em>在控制器之上以网络应用形式实现各种网络功能</p><p>The control plane is “logically” centralised (it seems as if there is just one controller though there may be several for redundancy)</p><h4 id="SDN结构"><a href="#SDN结构" class="headerlink" title="SDN结构"></a>SDN结构</h4><p><em>Data plane switches</em></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221112155651558.png" alt="image-20221112155651558" style="zoom:50%;"><p>fast, simple, commodity switches implementing generalized data-plane forwarding in hardware</p><p> API for table-based switch control</p><p>基于南向API（例如OpenFlow），SDN控制器访问基于流的交换机</p><p><em>SDN controller (network OS):</em></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221112160328364.png" alt="image-20221112160328364" style="zoom:50%;"><p>interacts with network control applications “above” via northbound API</p><p> 通过上面的北向API和网络控制应用交互</p><p>interacts with network switches “below” via southbound API</p><p> 通过下面的南向API和网络交换机交互</p><p>southbound protocol –connects controller to switch</p><p>northbound protocol –connects controller to apps</p><p><em>network-control apps</em></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221112160927263.png" alt="image-20221112160927263" style="zoom:50%;"><p>implement control functions using lower-level services, API provided by SDN controller</p><p>采用下层提供的服务（SDN控制器提供的API)，实现网络功能</p><h5 id="OpenFlow-protocol"><a href="#OpenFlow-protocol" class="headerlink" title="OpenFlow protocol"></a>OpenFlow protocol</h5><p>运行在SDN controller switch 之间，基于TCP</p><h4 id="SDN-control-x2F-data-plane-interaction-example"><a href="#SDN-control-x2F-data-plane-interaction-example" class="headerlink" title="SDN: control/data plane interaction example"></a>SDN: control/data plane interaction example</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221112161225598.png" alt="image-20221112161225598" style="zoom:67%;"><ol><li><p>S1, experiencing link failure using OpenFlow port status message to notify controller</p><p>假设s1 s2之间端口，采用OpenFlow报文通告控制器</p></li><li><p>SDN 控制器接收OpenFlow报文，更新链路状态信息</p></li><li><p>Dijkstra路由算法应用被调用</p></li><li><p>Dijkstra路由算法访问控制器中的网络拓扑信息，链路状态信息计算新路由</p></li><li><p>链路状态路由app和SDN控制器中流表计算元件交互，计算出新的所需流表</p></li><li><p>控制器采用OpenFlow在交换机上安装新的需要更新的流表</p></li></ol><h3 id="ICMP-internet-control-message-protocol"><a href="#ICMP-internet-control-message-protocol" class="headerlink" title="ICMP: internet control message protocol"></a>ICMP: internet control message protocol</h3><p>used by hosts &amp; routers to communicate network-level information</p><p>最典型的用途是差错报告</p><ul><li>ICMP 的第一个功能是<strong>确认 IP 包是否能够成功到达目标地址</strong>，当两个设备通过互联网相连时，任意一个设备发送给另一个设备的 IP 包如果没有到达，就会生成 ICMP 数据包发送给设备共享。</li><li>ICMP 的第二个功能是进行<code>网络诊断</code>，经常使用 ICMP 数据包的两个终端程序是 <code>ping</code> 和 <code>traceroute</code>，traceroute 程序用于显示两台互联网设备之间可能的路径并测量数据包在 IP 网络上的时延。ping 程序是 traceroute 的简化版本，我们经常使用 ping 命令来测试两台设备之间是否互联，ping 通常用来测试两台主机之间的连接速度，并准确报告数据包到达目的地并返回后所花费的时间。</li></ul><p>network-layer “above” IP: 位于IP之上</p><p>• ICMP msgs carried in IP datagrams其msgs包含在IP数据头中</p><ul><li>ICMP message: type, code plus first 8 bytes of IP datagram causing error</li></ul><p>ICMP报文中包含一类型字段一个编码字段，以及引起该ICMP报文首次生成的IP数据报的首部和前八个字节</p><p>http中一些状态码就是基于ICMP</p><p>ICMP报文类型：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113095707396.png" alt="image-20221113095707396"></p><h4 id="Traceroute-and-ICMP"><a href="#Traceroute-and-ICMP" class="headerlink" title="Traceroute and ICMP"></a>Traceroute and ICMP</h4><blockquote><p>通过发送探测报文来获取链路地址信息。第一个探测报文TTL为1，到达第一个路由器时，TTL减1为0所以丢掉这个探测包，同时向源主机发回ICMP时间超过报文，这时源主机就获得了第一个路由器的IP地址；接着源主机发送第二个探测报文，TTL增1为2，到达第一个路由器TTL减1为1并转发探测包到第二个路由器，这时TTL减1为0，丢掉这个探测包并向源主机发回ICMP时间超过报文，源主机就获得了第二个路由器的IP地址；以此类推，直到探测报文到达traceroute的目的地，这时源主机就获得了到目的地的每一跳路由的IP地址</p></blockquote><p>source sends series of UDP segments to destination 源主机发送一系列不可达的UDP报文段，并且设置第一个数据报RTT为1 第二个为2……主机也为数据报启动定时器</p><p>when datagram in <em>n</em>th set arrives to nth route， router discards datagram and sends source ICMP message (type 11, code 0) router丢弃数据报后，返回ICMP警告给源主机，这个报文包括 name of router &amp; IP address. </p><p>when ICMP message arrives, source records RTTs.当这个ICMP message到达源主机，源主机记录RTT，记录第n台路由器的IP和名字</p><p><em>stopping criteria（停止条件）:</em></p><p>▪ UDP segment eventually arrives at destination host</p><p>▪ destination returns ICMP “port unreachable”message (type 3, code 3)</p><p>▪ source stops</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113100656165.png" alt="image-20221113100656165"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> 互联网协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网协议-Chapter 2  Transport Layer</title>
      <link href="//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE-Chapter%202%20%20Transport%20Layer.html"/>
      <url>//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE-Chapter%202%20%20Transport%20Layer.html</url>
      
        <content type="html"><![CDATA[<h1 id="Chapter-2-Transport-Layer"><a href="#Chapter-2-Transport-Layer" class="headerlink" title="Chapter 2   Transport Layer"></a>Chapter 2   Transport Layer</h1><h2 id="提纲"><a href="#提纲" class="headerlink" title="提纲"></a>提纲</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221003130033331.png" alt="image-20221003130033331"></p><p>[TOC]</p><h2 id="Application-layer"><a href="#Application-layer" class="headerlink" title="Application layer"></a>Application layer</h2><h3 id="1-Application-layer"><a href="#1-Application-layer" class="headerlink" title="1. Application layer"></a>1. Application layer</h3><p>application layer 不是本课重点，所以只用几页ppt简介（高编里重点讲了）</p><p>This is the layer you (mostly) work with as a programmer.</p><p>At the application layer the “network” is abstracted away and you access a stream of data that arrives at a “socket”.通过套接字socket访问网络层数据流</p><p> <strong>Different applications have different formats:</strong></p><p>• HTTP (Hypertext transfer protocol) world-wide web</p><p>• FTP (File transfer protocol) moving data</p><p>• SMTP (Send Mail transfer protocol) sending email</p><p>• IMAP (Internet message access protocol) receiving email</p><h4 id="Sockets"><a href="#Sockets" class="headerlink" title="Sockets"></a><strong>Sockets</strong></h4><p>process sends/receives messages to/from its socket</p><p>进程通过socket传递信息</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220914211304193.png" alt="image-20220914211304193" style="zoom:67%;"><ul><li>套接字 &lt;=&gt; 门户</li></ul><p>发送进程将报文<strong>推出</strong>门户，发送进程依赖于传输层设施在另外一侧的门将报文交付给接受进程 </p><p> 接收进程从另外一端的门户<strong>收到</strong>报文（依赖于传输层设施）</p><h4 id="Addressing-processes"><a href="#Addressing-processes" class="headerlink" title="Addressing processes"></a>Addressing processes</h4><p>进程寻址</p><p>to receive messages, process must have <em>identifier</em></p><p>host device has unique 32- bit IP address</p><blockquote><p><em>identifier</em> includes both IP address and port numbers（进程端口号） associated with process on host.</p></blockquote><p>example port numbers:</p><p>• HTTP server: 80</p><p>• mail server: 25</p><p><em>Q:</em> does IP address of host on which process runs suffice for identifying the process?</p><p> <em>A:</em> no, <em>many</em> processes can be running on same host（一个主机多个进程）</p><h4 id="4-different-addresses-in-TCP-x2F-IP"><a href="#4-different-addresses-in-TCP-x2F-IP" class="headerlink" title="4 different addresses in TCP/IP"></a>4 different addresses in TCP/IP</h4><h5 id="Physical-address-Layer-2"><a href="#Physical-address-Layer-2" class="headerlink" title="Physical address Layer 2"></a><strong>Physical address Layer 2</strong></h5><p>• ==Also known as the link address, is the address of a node as defined by its LAN or WAN== </p><p><strong>物理地址</strong>称为链路地址，是由接点所在的局域网或广域网为该结点指定的地址。</p><h5 id="Logical-address-Layer-3-32-bit-IPv4-128-bit-IPv6"><a href="#Logical-address-Layer-3-32-bit-IPv4-128-bit-IPv6" class="headerlink" title="Logical address Layer 3 (32-bit , IPv4 128-bit IPv6)"></a><strong>Logical address Layer 3 (32-bit , IPv4 128-bit IPv6)</strong></h5><p>• Logical (IP) addresses are for universal communications（ 全局通信 ）that are independent of underlying physical networks <strong>与底层物理网络无关</strong></p><h5 id="Port-address-Layer-4-16-bit"><a href="#Port-address-Layer-4-16-bit" class="headerlink" title="Port address Layer 4 (16-bit)"></a><strong>Port address Layer 4 (16-bit)</strong></h5><p>• Port addresses differentiate different processes</p><h5 id="Application-specific-address-Layer-7-特定应用地址"><a href="#Application-specific-address-Layer-7-特定应用地址" class="headerlink" title="**Application-specific address Layer 7 **特定应用地址"></a>**Application-specific address Layer 7 **特定应用地址</h5><p>• Some applications have user-friendly addresses that are designed for that specific application, <strong>such as email address, URL.</strong> </p><p>有些应用程序具有专门为其量身定做的用户友好型地址。</p><h4 id="application-protocol-defines"><a href="#application-protocol-defines" class="headerlink" title="application protocol defines"></a>application protocol defines</h4><p>应用层协议定义了在不同端系统如何传递报文</p><h5 id="1-types-of-messages-exchanged"><a href="#1-types-of-messages-exchanged" class="headerlink" title="1. types of messages exchanged"></a>1. <strong>types of messages exchanged</strong></h5><p>• e.g., request, response </p><h5 id="2-message-syntax"><a href="#2-message-syntax" class="headerlink" title="2. message syntax"></a>2. <strong>message syntax</strong></h5><p>what fields（字段） in messages &amp; how fields are delineated</p><h5 id="3-message-semantics-语义"><a href="#3-message-semantics-语义" class="headerlink" title="3. message semantics (语义)"></a>3. <strong>message semantics</strong> (语义)</h5><p>meaning of information in fields</p><h5 id="4-rules-for-when-and-how-processes-send-amp-respond-to-messages"><a href="#4-rules-for-when-and-how-processes-send-amp-respond-to-messages" class="headerlink" title="4. rules for when and how processes send &amp; respond to messages"></a>4. <strong>rules for when and how processes send &amp; respond to messages</strong></h5><h5 id="open-protocols"><a href="#open-protocols" class="headerlink" title="open protocols:"></a>open protocols:</h5><p>defined in RFCs (request for comments) 由RFC文档定义</p><p>allows for interoperability 允许互操作</p><p> e.g., HTTP (web), SMTP (email)</p><h5 id="proprietary-protocols专用（私有）协议"><a href="#proprietary-protocols专用（私有）协议" class="headerlink" title="proprietary protocols专用（私有）协议:"></a>proprietary protocols专用（私有）协议:</h5><p> e.g., Skype</p><h2 id="translation-layer"><a href="#translation-layer" class="headerlink" title="translation layer"></a>translation layer</h2><p>provide <em>logical communication</em> between app processes running on different hosts</p><ul><li><p>send side: breaks app messages into <em>segments</em>, passes to network layer</p></li><li><p>rcv side: reassembles segments into messages, passes to app layer</p></li></ul><blockquote><p>network layer: logical communication between hosts</p></blockquote><blockquote><p>transport layer: logical communication between processes</p></blockquote><h3 id="Multiplexing-x2F-demultiplexing"><a href="#Multiplexing-x2F-demultiplexing" class="headerlink" title="Multiplexing/demultiplexing"></a>Multiplexing/demultiplexing</h3><h5 id="Multiplexing-Mux"><a href="#Multiplexing-Mux" class="headerlink" title="Multiplexing (Mux):"></a>Multiplexing (Mux):</h5><p>• Combining several streams of data into a single stream.</p><p>• Example – your phone is browsing the web, refreshing your email, connecting to WeChat at the same time. All these connections are sent over the same link.</p><h5 id="Demultipliexing-Demux"><a href="#Demultipliexing-Demux" class="headerlink" title="Demultipliexing (Demux)"></a>Demultipliexing (Demux)</h5><p>A stream of data is separated out into its individual components.</p><p>The stream of packets the phone received is split up and sent to the appropriate program for web, email, wechat.</p><p><em>multiplexing at sender:</em> handle data from multiple sockets, add transport header (later used for demultiplexing, 提供进程的信息：IP+port) </p><p><em>demultiplexing at receiver:</em> use header info to deliver received segments to correct socket</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220916181140758.png" alt="image-20220916181140758" style="zoom:67%;"><h5 id="How-demultiplexing-works"><a href="#How-demultiplexing-works" class="headerlink" title="How demultiplexing works"></a>How demultiplexing works</h5><p>host receives IP datagrams(数据报：第三层的packet)</p><p>• each datagram has source IP address, destination IP address</p><p>• each datagram carries one transport-layer segment</p><p>• each segment has source, destination port number </p><p>无论tcp udp 都有source port and destination port(当然还有其它字段)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922212050738.png" alt="image-20220922212050738" style="zoom:67%;"><ul><li>host uses <em>IP addresses &amp;</em> <em>port numbers</em> to direct（引导） segment to appropriate socket</li></ul><h4 id="Connectionless-demux"><a href="#Connectionless-demux" class="headerlink" title="Connectionless demux"></a>Connectionless demux</h4><p> <strong>UDP socket identified by 2-tuple</strong></p><p>• checks destination port # in segment</p><p>• directs UDP segment to socket with that port #</p><p>如果两个不同源IP地址/源端口号的数据报，但是有相同的目标IP地址和端口号，则被定位到相同的套接字（一个UDP套接字是被目标IP与目标port唯一标识的）</p><blockquote><p>IP datagrams with <em>same</em> <em>dest. port #,</em> but different source IP addresses and/or source port numbers will be directed to <em>same socket</em> at dest 具备相同目标IP地址和目标端口号，即使是源IP地址或/且源端口号不同的IP数据报，将会被传到相同的目标UDP套接字上</p></blockquote><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220916204454938.png" alt="image-20220916204454938" style="zoom:67%;"><h4 id="Connection-oriented-demux"><a href="#Connection-oriented-demux" class="headerlink" title="Connection-oriented demux"></a>Connection-oriented demux</h4><p> <strong>TCP socket identified by 4-tuple</strong></p><p><strong>( demux: receiver uses all four values to direct segment to appropriate socket):</strong> </p><p>• source IP address</p><p>• source port number</p><p>• dest IP address</p><p>• dest port number</p><p>TCP socket是由四元组（目标ip 目标port 源IP 源port）唯一确定的</p><p>一个port可以有多个进程</p><blockquote><p>web servers have different sockets for each connecting client</p></blockquote><p>server host may support many simultaneous TCP sockets:</p><ul><li>web servers have different sockets for each connecting client</li><li>所以每有一个客户端连接，就新建一个process（p4 p5 p6）</li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220916205726093.png" alt="image-20220916205726093" style="zoom:67%;"><p>但是进程与socket并不是一一对应关系，当一个进程包含多个thread时可能对应多个socket</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922215853886.png" alt="image-20220922215853886"></p><h4 id="Typical-port-numbers-for-applications"><a href="#Typical-port-numbers-for-applications" class="headerlink" title="Typical port numbers for applications"></a>Typical port numbers for applications</h4><p>背一下，可能考</p><ul><li><p>Port 80: Standard HTTP (Hypertext Transfer Protocol – browse the web</p></li><li><p>Port 22: ssh (secure shell) log in from remote computer</p></li><li><p>Port 25: SMTP (simple mail transfer protocol) – send mail via this host</p></li><li><p>Port 143: IMAP (Internet Message Access Protocol) – read your email </p></li><li><p>Port 443: HTTPS (secure HTTP) browse the web securely</p></li></ul><h3 id="UDP-User-Datagram-Protocol"><a href="#UDP-User-Datagram-Protocol" class="headerlink" title="UDP: User Datagram Protocol"></a>UDP: User Datagram Protocol</h3><h5 id="Simplest-usable-Internet-transport-protocol"><a href="#Simplest-usable-Internet-transport-protocol" class="headerlink" title="Simplest usable Internet transport protocol"></a>Simplest usable Internet transport protocol</h5><p>“best effort”尽力而为 service, UDP segments may be:</p><p>• lost</p><p>• delivered out-of-order to app 失序</p><h5 id="connectionless"><a href="#connectionless" class="headerlink" title="connectionless:"></a><em>connectionless:</em></h5><p>• no “handshaking” between UDP sender, receiver (can send immediately without asking first)</p><p>每个UDP报文段都被独立地处理handled independently </p><h5 id="UDP-use"><a href="#UDP-use" class="headerlink" title="UDP use:"></a>UDP use:</h5><p>streaming multimedia(流媒体) apps (loss tolerant, rate sensitive)</p><p> DNS</p><p>NMP</p><h5 id="reliable-transfer-over-UDP-用udp实现可靠传输的方法"><a href="#reliable-transfer-over-UDP-用udp实现可靠传输的方法" class="headerlink" title="reliable transfer over UDP: 用udp实现可靠传输的方法"></a>reliable transfer over UDP: 用udp实现可靠传输的方法</h5><ul><li>add reliability at application layer</li><li>application-specific error recovery!应用特定的差错恢复</li></ul><p>多了length 和checksum</p><p>头部一共8byte</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220917110357366.png" alt="image-20220917110357366" style="zoom:67%;"><p>为什么要有UDP(UDP 好处)?</p><ul><li><p>不建立连接 （会增加延时）</p></li><li><p>简单：在发送端和接收端没有连接状态</p></li><li><p>报文段的头部很小(开销小)也就是报文段可以占更多空间 </p></li><li><p>无拥塞控制和流量控制：UDP可以尽可能快的发送报文段</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220917111918022.png" alt="image-20220917111918022"></p><h4 id="UDP-checksum"><a href="#UDP-checksum" class="headerlink" title="UDP checksum"></a>UDP checksum</h4><p><em>Goal:</em> detect “ errors ”（flipped bits 比特翻转）</p><p><strong>sender:</strong> </p><ol><li><p>treat segment contents, including header fields, as sequence of 16-bit integers.</p><p>分成多个十六比特序列</p></li><li><p>checksum: addition of all of segment contents(各数据段相加回卷反码)</p></li><li><p>sender puts checksum value into UDP checksum field 把结果放到检验和区域</p></li></ol><p><strong>receiver:</strong></p><ol><li><p>compute checksum of received segment（先用segment compute）</p></li><li><p>check if computed checksum equals checksum field value: （再和发来的checksum比）</p><p>不相同一定传输有错，相同不一定没错</p></li></ol><p>• NO - error detected</p><p>• YES - no error detected.</p><p>还是有可能有错误：checksum传输错误，payload也错误，并且最后比对结果一致</p><h3 id="Principles-of-reliable-data-transfer-（rdf）"><a href="#Principles-of-reliable-data-transfer-（rdf）" class="headerlink" title="Principles of reliable data transfer （rdf）"></a>Principles of reliable data transfer （rdf）</h3><h4 id="可靠数据传输原理"><a href="#可靠数据传输原理" class="headerlink" title="可靠数据传输原理"></a>可靠数据传输原理</h4><p>将较低层直接视为不可靠信道（在不可可靠的下层协议基础上实现reliable data transfer）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922222354580.png" alt="image-20220922222354580"></p><p>**rdt_send():**发送方上层调用，将数据发往接收方application layer</p><p><strong>udt_send():</strong> rdt调用将数据发给udt(下层)</p><p>**rdt_rcv():**数据到达接收方</p><p>**deliver_data():**rdt调用将数据交付更高层</p><p><strong>consider only unidirectional data transfer（单向数据传输）</strong>因为双向仅仅是重复</p><h4 id="rdt1-0-reliable-transfer-over-a-reliable-channel"><a href="#rdt1-0-reliable-transfer-over-a-reliable-channel" class="headerlink" title="rdt1.0: reliable transfer over a reliable channel"></a>rdt1.0: reliable transfer over a reliable channel</h4><p>完全可靠信道的rdf(假设底层信道完全可靠)</p><ul><li>underlying channel perfectly reliable</li></ul><p>​         • no bit errors</p><p>​         • no loss of packets</p><ul><li><p>separate FSMs（Finite State Machine） for sender, receiver</p></li><li><p>横线上是event横线下是action</p><p>独立fsm:</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922223426930.png" alt="image-20220922223426930"></p><h4 id="rdt2-0-channel-with-bit-errors"><a href="#rdt2-0-channel-with-bit-errors" class="headerlink" title="rdt2.0: channel with bit errors"></a>rdt2.0: channel with bit errors</h4><ol><li><p>underlying channel may flip bits in packet（下层信道可能发生bit受损）</p><p>• checksum to detect bit errors</p></li></ol><p>• <em>acknowledgements (ACKs):</em> receiver explicitly tells sender that pkt received OK</p><p>• <em>negative acknowledgements (NAKs):</em> receiver explicitly tells sender that pkt had errors</p><p>• sender retransmits pkt on receipt of NAK(重传)</p><p><strong>Sender（状态机上所有信息都是指某一方的）:</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922223853232.png" alt="image-20220922223853232"></p><p>当reciver wait for call时，来了一个ACK/NACK -&gt;do nothing（stop-wait）</p><p><strong>receiver:</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922223917457.png" alt="image-20220922223917457"></p><p>corrupt(rcvpkt)接收方发现分组损坏</p><p> <strong>fatal flaw</strong>： ACK/NAK corrupted，can’t just retransmit: possible duplicate  （sender 发送完后等待ACK，此时reciver接收到data但是返回的ack在传输过程中corrupt，发送方被迫重传，造成duplicate）</p><p><strong>handling duplicates:</strong> </p><p>▪ sender retransmits current pkt if ACK/NAK corrupted</p><p>▪ sender adds <em>sequence</em> number (seq) to each pkt编号防止重复</p><p>▪ receiver discards (doesn’t deliver up) duplicate pkt</p><blockquote><p>sender sends one packet, then waits for receiver’s response</p></blockquote><h4 id="rdt2-1-sender-handles-corrupt-ACK-x2F-NAKs"><a href="#rdt2-1-sender-handles-corrupt-ACK-x2F-NAKs" class="headerlink" title="rdt2.1: sender, handles corrupt ACK/NAKs"></a>rdt2.1: sender, handles corrupt ACK/NAKs</h4><p>sender:</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922234658714.png" alt="image-20220922234658714"></p><p> receiver:</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922234734873.png" alt="image-20220922234734873"></p><ul><li><p>为什么两个状态数（0 1）就足够？</p><p>只需要让发送发知道是在传last packet（seq same）还是 now packet(seq different)</p></li><li><p>receiver can <em>not</em> know if its last ACK/NAK received OK at sender</p><p>接收端无法确定ACK/NAK是否会被发送端接受，通过观察发送端的反应来判断它是否成功收到。</p><p>比如：本身应该wait for 1但是由于上一次接收端没收到ack，重新发数据（0）接收端发现发来的不是1，那就明白发送端当时收错了，所以发<strong>ACK</strong>回去，继续等待1.</p><p>只要接收到packet没有corrupt就发ack，不管序号是否正确</p></li><li><p>状态数量是前者两倍</p></li></ul><h4 id="rdt2-2-a-NAK-free-protocol"><a href="#rdt2-2-a-NAK-free-protocol" class="headerlink" title="rdt2.2: a NAK-free protocol"></a>rdt2.2: a NAK-free protocol</h4><p>▪ instead of NAK, receiver sends ACK for last pkt received OK</p><p>• receiver must <em>explicitly</em> include seq # of pkt being ACKed</p><p>不用NAK,而是用一个带序号的ACKA(上一个数据分组的序号)-确认上个分组收到了（没收到现在的分组）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922235616504.png" alt="image-20220922235616504"></p><h4 id="rdt3-0-channels-with-errors-and-loss"><a href="#rdt3-0-channels-with-errors-and-loss" class="headerlink" title="rdt3.0: channels with errors and loss"></a>rdt3.0: channels with errors <em>and</em> loss</h4><p>underlying channel can also lose packets （假设底层也丢包）</p><p><strong>approach:</strong> </p><p><strong>每发一个分组</strong>就启动一个倒计时计时器(cutdown timer) 当收到该分组的ACK或重发分组时重建一个计时器</p><p>sender waits “reasonable” amount of time for ACK </p><p>界定一个合理的时间，如果时间耗尽则界定为丢包——重发该分组</p><p> 如果这个分组只是delay了（没loss）retransmission will be duplicate, but seq. #’ s already handles this</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220923001412614.png" alt="image-20220923001412614"></p><p>四种情况：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221013211248929.png" alt="image-20221013211248929"></p><p>d接收到ACK1什么都不做（不重发）ppt有点问题</p><h4 id="Performance-of-rdt3-0"><a href="#Performance-of-rdt3-0" class="headerlink" title="Performance of rdt3.0"></a>Performance of rdt3.0</h4><p>3.0 rdt的性能 </p><p>rdt3.0 is correct, but performance is very bad</p><blockquote><p>Define round-trip-time as time to propagate there and back – (2 x end-to-end delay)</p></blockquote><p> e.g.: 1 Gbps link, 15 ms delay, 8000 bit packet</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220923173911550.png" alt="image-20220923173911550"></p><p>1Gbps的链路只能每秒发33kB数据，利用率很低</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220923174108957.png" alt="image-20220923174108957"></p><p>为了解决如上问题使用pipelined protocols不用stop-wait协议</p><h3 id="Pipelined-protocols"><a href="#Pipelined-protocols" class="headerlink" title="Pipelined protocols"></a>Pipelined protocols</h3><p><strong>pipelining:</strong> Allows a sender to send more than one message at a time without receiving acknowledged</p><p><strong>one after one</strong>  </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220923174605251.png" alt="image-20220923174605251" style="zoom:67%;"><ul><li><p>range of sequence numbers must be increased（每个输送的分组必须有唯一序号）</p></li><li><p>buffering at sender and/or receiver(缓存那些已经发送但没有确认的分组)（停等协议不需要buffer）</p></li></ul><p><strong>two</strong> generic forms of pipelined protocols: <em>go-Back-N回退N步,</em> <em>selective repeat选择重传</em></p><h4 id="slide-window流程"><a href="#slide-window流程" class="headerlink" title="slide window流程"></a>slide window流程</h4><p>发送窗口N=1 接收窗口N=1 此时称为stop-wait</p><p>发送窗口N&gt;1 接收窗口N=1 此时称为GBN</p><p>发送窗口N&gt;1 接收窗口N&gt;1 此时称为SR</p><p>滑动窗口(slide window)：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924094559245.png" alt="image-20220924094559245"></p><h5 id="sender"><a href="#sender" class="headerlink" title="sender:"></a>sender:</h5><ol><li><p>未发送任何数据：后沿=前沿 , 之间为发送窗口的尺寸=0</p><p>发送窗口的最大值&lt;=发送缓冲区的值</p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924095144137.png" alt="image-20220924095144137"></p><ol start="2"><li><p>上层传递一个分组，发送该分组但还没确认</p><p>前沿移动的极限：不能够超过发送缓冲区</p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924095343242.png" alt="image-20220924095343242"></p><ol start="3"><li><p>老分组得到确认</p><p>发送窗口后沿移动 ：收到老分组的确认，不能够超过前沿</p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924095510350.png" alt="image-20220924095510350"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924095606883.png" alt="image-20220924095606883" style="zoom:67%;"><h5 id="reciver"><a href="#reciver" class="headerlink" title="reciver"></a>reciver</h5><p>接收窗口用于控制哪些分组可以接收； </p><p>• 只有收到的分组序号落入接收窗口内才允许接收 </p><p>• 若序号在接收窗口之外，则丢弃；</p><p>也就是说</p><p><strong>接收窗口尺寸Wr=1，则只能顺序接收；</strong>(GBN stop-wait)</p><p>就一个槽位没法接收其他序号</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924100119226.png" alt="image-20220924100119226"></p><p><strong>接收窗口尺寸Wr&gt;1 ，则可以乱序接收</strong></p><p>低序号的分组到来（0到来）接收窗口移动</p><p>如果高序号到来（1先到来）接收窗口不移动直到0到来直接移动到2（一起交付给上层）</p><p>（因为要实现rdt，不允许失序）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924100209693.png" alt="image-20220924100209693" style="zoom:67%;"><p>• 接收窗口尺寸=1 ； 发送连续收到的最大的分组确认（累计确认）</p><p>看上上图 ：如果收到3仍然发送0的确认（表示没收到0，重发）</p><p>• 接收窗口尺寸&gt;1 ； 收到分组，发送那个分组的确认（非累计确认）</p><p>收到几就发几</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924100610233.png" alt="image-20220924100610233"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924100651409.png" alt="image-20220924100651409"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924100703428.png" alt="image-20220924100703428"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924100713986.png" alt="image-20220924100713986"></p><h4 id="Go-Back-N"><a href="#Go-Back-N" class="headerlink" title="Go-Back-N"></a>Go-Back-N</h4><p>sender can have up to N unacked packets in pipeline</p><p> receiver only sends <em>cumulative ACK</em>（累计确认：当前序号的分组被acknowledged意味着前面所有序号的分组都被acknowledged）</p><blockquote><p>累计确认：一个确认包确认了累积到某一序号的所有包，而不是对每个序号都发确认包。</p><p>分别确认：每个包都单独确认</p></blockquote><p>doesn’t ACK packet if there’ s a gap（如果分组乱序：接收packet1-&gt;packet3，则不会acknowledge packet3，会返回packet2继续等待packet2）</p><p>sender has timer for oldest unacked packet(发送方对最早发出去的未被确认的数据有计时器，一旦此数据被acknowledged计时停止，如果超时则重发该分组之后所有已发送但未确认的分组，尽管有些序号更大的分组可能已经成功确认)也只有一个计时器</p><p>when timer expires, retransmit <em>all</em> unacked packets(重传所有未被确认的分组)</p><h5 id="sender："><a href="#sender：" class="headerlink" title="sender："></a>sender：</h5><ol><li><p><strong>ACK(n):</strong> ACKs all packets up to, including sequence # n -<em>“<strong>cumulative ACK（sender）</strong>”</em> </p><p>• may receive duplicate ACKs (see receiver)</p></li><li><p><strong>timer for oldest in-flight pkt</strong></p></li><li><p><em>timeout(n):</em> retransmit packet n and all higher seq # pkts in window</p><p>发送方只维持已发送但未被确认的最小序号</p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924101227037.png" alt="image-20220924101227037"></p><p>GBN：当发现N没发，就回到N，发N及之后的</p><h4 id="Selective-repeat"><a href="#Selective-repeat" class="headerlink" title="Selective repeat"></a>Selective repeat</h4><ul><li><p>sender can have up to N unacked packets in pipeline</p></li><li><p>Receiver sends <em>individual</em> <em>ACK</em> for each packet</p><p>buffers packets, as needed, for eventual in-order delivery to upper layer</p></li><li><p>sender maintains timer for each packet with no ACK</p><p>• when timer expires（到期）, retransmit only that unacked packet（只重传没有确认的分组）</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924101729671.png" alt="image-20220924101729671"></p><ul><li><p>out-of-order: buffer</p></li><li><p>in-order: deliver (also deliver buffered, in-order pkts), advance window to next not-yet-received pkt</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924102206821.png" alt="image-20220924102206821"></p><h4 id="窗口长度必须小于等于序号空间大小一半"><a href="#窗口长度必须小于等于序号空间大小一半" class="headerlink" title="窗口长度必须小于等于序号空间大小一半"></a>窗口长度必须小于等于序号空间大小一半</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924103927507.png" alt="image-20220924103927507"></p><p>第一种情况：pkt3丢失，此时应该传第二轮的pkt0</p><p>第二种情况：ack0 ack1 ack2丢失，此时应该传第一轮的pkt0</p><p>但是这俩情况无法区分，所以<strong>窗口长度必须小于等于序号空间大小一半</strong></p><h3 id="TCP-（Transmission-Control-Protocol）"><a href="#TCP-（Transmission-Control-Protocol）" class="headerlink" title="TCP （Transmission Control Protocol）"></a>TCP （Transmission Control Protocol）</h3><h4 id="TCP-header"><a href="#TCP-header" class="headerlink" title="TCP header"></a>TCP header</h4><p>头部20B~60B</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924160336189.png" alt="image-20220924160336189"></p><ul><li><strong>sequence number:</strong></li></ul><p>• byte stream “number” of first <strong>byte</strong> in segment’s data</p><p>本报文段中第一个字节在字节流中的编号（0、1000）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924160909990.png" alt="image-20220924160909990"></p><ul><li><strong>acknowledgements确认号:</strong></li></ul><p>•seq # of <strong>next byte</strong> <strong>expected from other side</strong>(<strong>cumulative ACK</strong>)</p><p>期望从另一方收到的<strong>下一个</strong>字节的序号（与rdt不一样）</p><ul><li><p><strong>how receiver handles out-of-order segments</strong></p><p>如果以乱序到达，TCP没有规定一定要向GBN一样丢弃PKT,提供可编程实现的操作，可以丢弃也可以保留（后等待前面的到来）</p></li></ul><p>注意区分seq和ack的不同，这里ack是期待的序号而不是本位序号</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924162403745.png" alt="image-20220924162403745" style="zoom:50%;"><p>这个图是一收一发的过程：seq=上一个的ack, 但ack等于上一个seq＋1</p><h4 id="TCP-round-trip-time-timeout"><a href="#TCP-round-trip-time-timeout" class="headerlink" title="TCP round trip time, timeout"></a>TCP round trip time, timeout</h4><p><strong>how to set TCP timeout value?</strong></p><p>如何设置TCP超时等待时间，应该比RTT长，但是RTT随阻塞和负载情况变化</p><ul><li>longer than RTT</li><li>but RTT varies</li></ul><p><em>too short:</em> early timeout, <strong>unnecessary retransmissions</strong></p><p><em>too long:</em> slow reaction to segment loss</p><p><strong>how to estimate RTT?</strong></p><p><strong>SampleRTT</strong>: measured time from segment transmission until ACK receipt</p><p><strong>SampleRTT</strong> will vary, average several <em>recent</em> measurements, not just current <strong>SampleRTT</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924172108930.png" alt="image-20220924172108930"></p><p>exponential weighted moving average: 移动平均系统？dsp里那个</p><p>influence of past sample decreases exponentially fast 因为只想与最近的值有关（实时更新数据？）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924172343876.png" alt="image-20220924172343876" style="zoom:67%;"><p><strong>timeout interval: EstimatedRTT</strong> plus “safety margin”</p><p><strong>EstimtedRTT</strong> + 安全边界时间</p><p>• large variation in <strong>EstimatedRTT -&gt;</strong> larger safety margin（变化大边界也设置大一点）</p><p>偏移量（实际值与平均值的偏移）：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924172841826.png" alt="image-20220924172841826" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924172915984.png" alt="image-20220924172915984" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924173032974.png" alt="image-20220924173032974" style="zoom:67%;"><p>TCP不同于rdt中每个packet设置一个timer，tcp使用单一的重传定时器。</p><p>定时器只与最早的，未被确认的报文有关系</p><h4 id="retransmission-scenarios"><a href="#retransmission-scenarios" class="headerlink" title="retransmission scenarios"></a>retransmission scenarios</h4><ol><li>丢包导致超时</li></ol><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924190440712.png" alt="image-20220924190440712" style="zoom:67%;"><ol start="2"><li><p>过早超时</p><p>此时报文段seq=100没有重传，因为在ack=100返回HostA时将再启动一个计时器，上一个计时器结束，这ACK=120在新计时区间里被找到，不用重传</p><p>定时器只与seq </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924190528434.png" alt="image-20220924190528434" style="zoom:67%;"></li><li><p>累计确认</p><p>当第一段报文在网络中丢失，但在超时前主机A收到120号ack,因为是<strong>累积确认</strong>，所以HostA知道Host B收到了119前的所有数据只会传120</p></li></ol><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924190815926.png" alt="image-20220924190815926" style="zoom:67%;"><p>cumulative ACK像GBN</p><p>虽然ACK=100没到，但是ACK=120到了，那么sender知道reciver已经收到ack=100,这很像GBN</p><h4 id="TCP-fast-retransmit"><a href="#TCP-fast-retransmit" class="headerlink" title="TCP fast retransmit"></a>TCP fast retransmit</h4><p>不等timeout就重传：</p><p>time-out period often relatively long:</p><p>• long delay before resending lost packet</p><p><strong>detect lost segments via duplicate ACKs</strong></p><p>if the segment is lost, there will likely be many duplicate ACKs（接收方反复期待）</p><p>if sender receives <strong>3  duplicate ACKs</strong>（一共四个） for same data(“triple duplicate ACKs”), resend unacked segment with smallest seq# </p><p>三次冗余后才重传</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924193340373.png" alt="image-20220924193340373" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924194604857.png" alt="image-20220924194604857"></p><h4 id="TCP-flow-control"><a href="#TCP-flow-control" class="headerlink" title="TCP flow control"></a>TCP flow control</h4><p>控制rwnd来控制发送发数据量，防止丢失</p><p>receiver controls sender, so sender will not overflow receiver buffer by transmitting too much, too fast</p><p><strong>发送方根据接收方的处理能力来发送数据，不会导致接收方处理不过来，是流量控制</strong>(这是由接收窗口实现的)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928200219780.png" alt="image-20220928200219780" style="zoom:67%;"><p>从TCP socket缓冲区中移走数据的速度比接收方交付数据的速度慢</p><p>receiver “advertises” free buffer space by including <strong>rwnd</strong> value in TCP header of receiver-to-sender segments</p><p>TCP通过发送方维护一个称为receive window（接收窗口）的变量（TCPpacket头部中一个变量）来提供流量控制，接收窗口用于告诉发送方，还有多少可以用于接收的缓存空间</p><p><strong>rwnd</strong> = receive window</p><p>• <strong>RcvBuffer</strong> size set via socket options (typical default is 4096 bytes) 接收缓存</p><p>• many operating systems autoadjust <strong>RcvBuffer</strong></p><ul><li>sender limits amount of unacked (“in-flight”) data to receiver’ s <strong>rwnd</strong> value</li></ul><p><strong>guarantees receive buffer will not overflow</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928200852965.png" alt="image-20220928200852965"></p><h4 id="MSS-and-MTU"><a href="#MSS-and-MTU" class="headerlink" title="MSS and MTU"></a>MSS and MTU</h4><p>MSS (Maximum Segment Size最大报文长度) is a parameter specifying the largest amount of data in a single IP datagram that should be sent by a remote host. </p><p>报文段里应用层数据的最大长度</p><p>MTU is a parameter specifying the largest amount of data that a communication protocol or system can pass onwards. For example, standards (e.g. Ethernet) can fix the size of an MTU, or systems (such as point- to-point serial links) may set MTU at connect time.</p><p>MSS size is set according to MTU:</p><p><strong>MSS = MTU – IP header size – TCP header size.</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928202026280.png" alt="image-20220928202026280" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928205502637.png" alt="image-20220928205502637" style="zoom:67%;"><h4 id="Nagle’s-algorithm"><a href="#Nagle’s-algorithm" class="headerlink" title="Nagle’s algorithm"></a>Nagle’s algorithm</h4><p>问题：</p><ul><li><p>TCP will send the data as it arrives at the send buffer if there is space left in the send buffer.</p></li><li><p>This means (for ssh/telnet) one packet sent every time user hits key.</p></li><li><p>Overhead of this is huge (TCP header + IP header + frame header to send one byte)</p><p>应用程序一次产生一字节数据，这样会导致网络由于太多的包而过载（一个常见的情况是发送端的”<strong>糊涂窗口综合症(Silly Window Syndrome)</strong>“）。从键盘输入的一个字符，占用一个字节，可能在传输上造成41字节的包，其中包括1字节的有用信息和40字节的首部数据。</p></li></ul><h5 id="Nagle’s-algorithm-1"><a href="#Nagle’s-algorithm-1" class="headerlink" title="Nagle’s algorithm"></a>Nagle’s algorithm</h5><ol><li><p>The sending TCP sends the first piece of data it receives – no matter no small or large</p></li><li><p>Sending TCP accumulates data in the buffer and waits until one of the following before sending the segment:</p><ul><li><p>The receiving TCP sends an ACK</p></li><li><p>Data has accumulated to fill a maximum size segment （数据达到MSS）</p></li></ul></li><li><p>Repeat step 2</p><p>当需要较快的交互/需要传递small pkt时不用Nagle’s algorithm</p></li></ol><h5 id="Silly-Window-Syndrome"><a href="#Silly-Window-Syndrome" class="headerlink" title="Silly Window Syndrome"></a>Silly Window Syndrome</h5><p>糊涂窗口综合症是指当发送端应用进程产生数据很慢、或接收端应用进程处理接收缓冲区数据很慢，或二者兼而有之；就会使应用进程间传送的报文段很小，特别是有效载荷很小； 极端情况下，有效载荷可能只有1个字节；传输开销有40字节(20字节的IP头+20字节的TCP头) 这种现象。</p><h6 id="发送端引起的糊涂窗口综合症"><a href="#发送端引起的糊涂窗口综合症" class="headerlink" title="发送端引起的糊涂窗口综合症"></a>发送端引起的糊涂窗口综合症</h6><p>​       Sender produces data very slowly</p><h6 id="接收端引起的糊涂窗口综合症"><a href="#接收端引起的糊涂窗口综合症" class="headerlink" title="接收端引起的糊涂窗口综合症"></a>接收端引起的糊涂窗口综合症</h6><p>• Single byte or small number removed from full receive buffer.</p><p>• Sender is informed of opportunity to send <strong>small number of</strong> bytes and immediately sends filling buffer.</p><p>• Process repeats</p><p>接收端的TCP可能产生糊涂窗口综合症，如果它为消耗数据很慢的应用程序服务，例如，一次消耗一个字节。假定发送应用程序产生了1000字节的数据块，但接收应用程序每次只吸收1字节的数据。再假定接收端的TCP的输入缓存为4000字节。发送端先发送第一个4000字节的数据。接收端将它存储在其缓存中。缓存满了。它通知窗口大小为零，这表示发送端必须停止发送数据。接收应用程序从接收端的TCP的输入缓存中读取第一个字节的数据。在入缓存中有了1字节的空间。接收端的TCP宣布其窗口大小为1字节，这表示正渴望等待发送数据的发送端的TCP会把这个宣布当作一个好消息，并发送只包括一个字节数据的报文段。这样的过程一直继续下去。一个字节的数据被消耗掉，然后发送只包含一个字节数据的报文段。</p><p>解决办法– receiver does not advertise windows that <strong>would</strong> </p><p>**cause sender to send small amounts of data.**等buffer空间足够大再发送rwnd的值</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928211203211.png" alt="image-20220928211203211" style="zoom:67%;"><h4 id="Connection-Management"><a href="#Connection-Management" class="headerlink" title="Connection Management"></a>Connection Management</h4><p>连接管理 handshake</p><ul><li><p>agree to establish connection (each knowing the other willing to establish connection)</p></li><li><p>agree on connection parameters</p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928211406116.png" alt="image-20220928211406116" style="zoom:50%;"><p><em>Q:</em> will 2-way handshake always work in network?</p><ul><li><p>variable delays</p></li><li><p>retransmitted messages (e.g. req_conn(x)) due to message loss</p></li><li><p>message reordering</p></li><li><p>cannot  “ see ” other side</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928213357259.png" alt="image-20220928213357259"></p><p>req_conn(x)第一次超时，导致重传，然而第一次发出去的req_conn(x)并没有丢失，而是回到sender，与之建立了连接，此时连接x已经完成。但是重传的req_conn(x)到达接收端后，再向发送端发送的ack被拒绝了也就是建立了half open connection持续占用资源</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928220319877.png" alt="image-20220928220319877"></p><p>关闭连接后，发送方重传的报文才到达，此时server会误认为又新建一个连接，于是保持一个连接状态，但是client不这么认为（它知道是重传的）所以不会建立连接，白白浪费主机资源</p><p><a href="https://juejin.cn/post/7152855718817693726">TCP之三次握手和四次挥手 - 掘金 (juejin.cn)</a></p><p><a href="https://zhuanlan.zhihu.com/p/430799766">深入浅出TCP三次握手 （多图详解） - 知乎 (zhihu.com)</a></p><h5 id="TCP-3-way-handshake"><a href="#TCP-3-way-handshake" class="headerlink" title="TCP 3-way handshake"></a><strong>TCP 3-way handshake</strong></h5><p>将小明当作客户端，小红当作服务器端，两人写信告白：<br> <strong>第一次握手：</strong><br> 小明告诉小红：我喜欢你。<br> <strong>第二次握手：</strong><br> 小红告诉小明：我知道了，我也喜欢你。<br> 此时小红并不确定小明是否收到了告白信，直到<br> <strong>第三次握手：</strong><br> 小明回信：我也知道了，我们在一起吧。此时才真正建立连接。</p><p>(DHCP 也是这么个逻辑)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928220916474.png" alt="image-20220928220916474"></p><p>主机A发送位码为syn＝1，随机产生seq number=x的数据包到服务器，主机B由SYN=1知道，A要求建立联机；</p><p>主机B收到请求后要确认联机信息，向A发送ack number=(主机A的seq+1)，syn=1，ack=1，随机产生seq=y的包</p><p>主机A收到后检查ack number是否正确，即第一次发送的seq number+1，以及位码ack是否为1，若正确，主机A会再发送ack number=(主机B的seq+1)，ack=1，主机B收到后确认seq值与ack=1则连接建立成功。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928221429468.png" alt="image-20220928221429468"></p><h5 id="TCP-closing-a-connection-四次挥手"><a href="#TCP-closing-a-connection-四次挥手" class="headerlink" title="TCP: closing a connection 四次挥手"></a>TCP: closing a connection 四次挥手</h5><p>client, server each close their side of connection</p><p>• send TCP segment with FIN bit = 1respond to received FIN with ACK</p><p>• on receiving FIN, ACK can be combined with own FIN</p><p>simultaneous FIN exchanges can be handled</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928221631257.png" alt="image-20220928221631257" style="zoom:67%;"><p>恋爱之后，小明和小红煲电话粥。依旧将小明当作客户端，小红当作服务器端。小明跟小红说话<br> 第一次挥手：<br> 小明说：我说完了。<br> 第二次挥手：<br> 小红说：好的，我知道了，我还没说完。<br> 小红继续吧啦吧啦，说完之后<br> 第三次挥手：<br> 小红告诉小明：我说完了。<br> 第四次挥手：<br> 小明收到后告诉小红：好的，我知道了。等了2MSL之后小明挂断了。<br> 如果此时小红说完，等了2MSL，小明一直不出声，这个时候就会重新说一次：我说完了。直到收到小明最后的回复，才挂断电话。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928222126446.png" alt="image-20220928222126446"></p><h4 id="Principles-of-congestion-control"><a href="#Principles-of-congestion-control" class="headerlink" title="Principles of congestion control"></a>Principles of congestion control</h4><p><em>congestion</em>:too many sources sending too much data too fast for <em>network</em> to handle</p><ol><li>表现为</li></ol><p>• lost packets (buffer overflow at routers)</p><p>• long delays (queueing in router buffers)</p><ol start="2"><li>原因（网络自身问题）：</li></ol><ul><li><p>Too much traffic enters router – buffer fills up, this increases delay</p></li><li><p>Much too much traffic enters router – buffer overfills and causes loss. Packet needs to be retransmitted</p></li><li><p>If packet is lost after several “hops” then many resources are wasted. (e.g. Packet travels from A to B to C to D then lost at D – it has taken up space at A, B and C unnecessarily)</p></li><li><p>前面的流量控制是避免「发送方」的数据填满「接收方」的缓存，但是并不知道网络的中发生了什么。一般来说，计算机网络都处在一个共享的环境。因此也有可能会因为其他主机之间的通信使得网络拥堵。TCP 不能忽略网络上发生的事，它被设计成一个无私的协议，当网络发送拥塞时，TCP 会自我牺牲，降低发送的数据量。那么怎么知道当前网络是否出现了拥塞呢？</p><p>其实只要「发送方」没有在规定时间内接收到 ACK 应答报文，也就是<strong>发生了超时重传，就会认为网络出现了拥塞。</strong></p></li></ul><ol start="3"><li><strong>goodput</strong>（实际吞吐量） – this is the rate at which data reaches the application layer. Different from throughput because of:</li></ol><p>​      • loss</p><p>​      • retransmission</p><p>​      • corrupted packets </p><ol start="4"><li><p>rwnd = flow control (not too fast for receiver)</p><p>cwnd = congestion control (not too fast for network)</p></li></ol><h4 id="TCP-congestion-control"><a href="#TCP-congestion-control" class="headerlink" title="TCP congestion control"></a>TCP congestion control</h4><p>congestion window由发送方主动调节</p><p>两种控制方式</p><h6 id="Slow-Start"><a href="#Slow-Start" class="headerlink" title="Slow Start"></a>Slow Start</h6><p>在TCP建立连接的开始：increase rate exponentially until first loss event</p><p>• initially <strong>cwnd</strong> = 1 MSS</p><p>• double <strong>cwnd</strong> every RTT</p><p>• done by incrementing <strong>cwnd</strong> for every ACK received（收到一个ACK cwnd×2）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221003115215903.png" alt="image-20221003115215903" style="zoom:50%;"><h5 id="AIMD（additive-increase-multiplicative-decrease）"><a href="#AIMD（additive-increase-multiplicative-decrease）" class="headerlink" title="AIMD（additive increase multiplicative decrease）"></a>AIMD（additive increase multiplicative decrease）</h5><p>加性增，乘性减</p><p><em>approach:</em> sender increases transmission rate (window size), probing for usable bandwidth, until loss occurs</p><p>• Set cwnd – congestion window to initial value</p><p>additive increase <em>:</em> increase <strong>cwnd</strong> by 1 MSS（一个窗口大小） every RTT until loss detected</p><p>multiplicative decrease ：cut <strong>cwnd</strong> in half after loss </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221003114347991.png" alt="image-20221003114347991"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221003114520503.png" alt="image-20221003114520503"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221003114549589.png" alt="image-20221003114549589"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221003114616597.png" alt="image-20221003114616597"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221003115513562.png" alt="image-20221003115513562" style="zoom:67%;"><p>TCP Tahoe和Reno是处理TCP拥塞控制的两种形式（在三次冗余ack上有不同）</p><p> <strong>TCP RENO:</strong></p><p>由于超时所引发的loss ，将cwnd设为1 MSS(重设threshold为上次丢包值的一半)，重新慢启动至ssthresh慢启动门限，再使用AIMD</p><p>由3 duplicate ACK引发的loss cwnd减半然后线性增加（AIMD）</p><p><strong>TCP Tahoe :</strong></p><p>always sets <strong>cwnd</strong> to 1 (timeout or 3 duplicate acks)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221003124835772.png" alt="image-20221003124835772"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113174621820.png" alt="image-20221113174621820"></p><p>TCP throughput平均吞吐量</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221003124801776.png" alt="image-20221003124801776"></p><h4 id="TCP-Fairness"><a href="#TCP-Fairness" class="headerlink" title="TCP Fairness"></a>TCP Fairness</h4><p>if K TCP sessions share same bottleneck link of bandwidth R, each should have average rate of R/K</p><p>TCP比起UDP来说需要在意网络拥塞的状态，而不是像UDP不管不顾的一直发送</p><p>application can open multiple parallel connections between two hosts</p><p>一个应用通常同时使用多个TCP连接（否则一直建立解除TCP效率太低了）</p><p>e.g., link of rate R with </p><p>9 existing connections:</p><p>• new app asks for 1 TCP, gets rate R/10</p><p>• new app asks for 11 TCPs, gets just over R/2 </p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> 互联网协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网协议-Chapter 1 Introduction</title>
      <link href="//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE-Chapter%201%20Introduction.html"/>
      <url>//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE-Chapter%201%20Introduction.html</url>
      
        <content type="html"><![CDATA[<h1 id="chapter-1-Introduction-to-IP"><a href="#chapter-1-Introduction-to-IP" class="headerlink" title="chapter 1  Introduction to IP"></a>chapter 1  Introduction to IP</h1><hr><h2 id="Introduction-to-IP"><a href="#Introduction-to-IP" class="headerlink" title="Introduction to IP"></a>Introduction to IP</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220929220935497.png" alt="image-20220929220935497"></p><h3 id="1-1-what-is-the-Internet"><a href="#1-1-what-is-the-Internet" class="headerlink" title="1.1. what is the Internet?"></a>1.1. what is the Internet?</h3><h4 id="what-is-the-Internet-具体角度"><a href="#what-is-the-Internet-具体角度" class="headerlink" title="what is the Internet? (具体角度)"></a>what is the Internet? (具体角度)</h4><ol><li><h5 id="billions-of-connected-computing-devices-running-network-apps"><a href="#billions-of-connected-computing-devices-running-network-apps" class="headerlink" title="billions of connected  computing devices+running network apps"></a>billions of connected  computing devices+running network apps</h5><p>  👉hosts = end systems</p><p>主机以及其上运行的程序称为主机节点（<span class="github-emoji" style="display:inline;vertical-align:middle"><span>🔲</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f532.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</p></li><li><h5 id="communication-links（通信链路）："><a href="#communication-links（通信链路）：" class="headerlink" title="communication links（通信链路）："></a>communication links（通信链路）：</h5><p> fiber, copper, radio,  satellite（光纤、铜、无线电、卫星）</p><blockquote><p>transmission rate = bandwidth</p></blockquote></li><li><h5 id="packet-switches（分组交换机）"><a href="#packet-switches（分组交换机）" class="headerlink" title="packet switches（分组交换机）:"></a>packet switches（分组交换机）:</h5><p>路由器（网络层）、链路层交换机（数据链路层）都为switch的一种</p><p>路由器（routers）/交换机（packet switches）<span class="github-emoji" style="display:inline;vertical-align:middle"><span>👉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f449.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>数据交换节点（<span class="github-emoji" style="display:inline;vertical-align:middle"><span>⚪</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/26aa.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>）</p></li></ol><blockquote><p>ISP (Internet Service Provider)</p></blockquote><ol start="4"><li><h5 id="Internet-“network-of-networks”-1-3-Internet-structure-network-of-networks"><a href="#Internet-“network-of-networks”-1-3-Internet-structure-network-of-networks" class="headerlink" title="[Internet: “network of networks”](#1.3. Internet structure: network of networks)"></a>[Internet: “network of networks”](#1.3. Internet structure: network of networks)</h5><p>网络的网络：Interconnected Internet Service  Providers (ISPs)</p><p>ISP的小网络之间的互联</p></li><li><h5 id="protocols-control-sending-receiving-of-messages-What’s-a-protocol"><a href="#protocols-control-sending-receiving-of-messages-What’s-a-protocol" class="headerlink" title="[**protocols** control sending, receiving of  messages](#What’s a protocol?)"></a>[**protocols** control sending, receiving of  messages](#What’s a protocol?)</h5></li></ol><table><thead><tr><th align="center">TCP</th><th align="left"><strong>Transmission Control Protocol</strong></th></tr></thead><tbody><tr><td align="center">IP</td><td align="left"><strong>Internet Protocol</strong></td></tr><tr><td align="center">HTTP</td><td align="left"><strong>HyperText Transfer Protocol</strong></td></tr><tr><td align="center">802.11</td><td align="left"><strong>WiFi standard</strong></td></tr></tbody></table><ol><li><h5 id="Internet-standards"><a href="#Internet-standards" class="headerlink" title="Internet standards"></a>Internet standards</h5><p>• RFC: Request for comments </p><p>• IETF: Internet Engineering Task Force</p></li></ol><h4 id="What’s-the-Internet-a-service-view"><a href="#What’s-the-Internet-a-service-view" class="headerlink" title="What’s the Internet? a service view"></a>What’s the Internet? a service view</h4><ol><li><h5 id="infrastructure-that-provides-services-to-applications"><a href="#infrastructure-that-provides-services-to-applications" class="headerlink" title="infrastructure that provides  services to applications:"></a>infrastructure that provides  services to applications:</h5><p>Web, VoIP (Voice over IP),  email, games, e-commerce,  social nets</p></li><li><h5 id="provides-programming-interface-to-apps"><a href="#provides-programming-interface-to-apps" class="headerlink" title="provides programming  interface to apps"></a>provides programming  interface to apps</h5><p>为APP提供编程接口</p><p>hooks that allow sending  and receiving app programs  to  “ connect ” to Internet</p><p>将发送接收数据的互联网app联系起来</p><p>provides service options,  like postal service:</p><ul><li><p>无连接不可靠服务</p></li><li><p>面向连接的可靠服务</p></li></ul></li></ol><h4 id="What’s-a-protocol"><a href="#What’s-a-protocol" class="headerlink" title="What’s a protocol?"></a>What’s a protocol?</h4><p>network protocols:</p><blockquote><p>protocols define format, order of  messages sent and received among network entities, and  actions taken on message  transmission, receipt</p><p>协议定义了在两个或多个通信实体之间交换的 报文格式和次序，以及在报文传输和/或接收或其他事件方面所采取的动作</p></blockquote><blockquote><p>all communication activity  in Internet governed by  protocol</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220909090952782.png" alt="image-20220909090952782"></p><p><code>TCP协议：两个端先进行握手通信再传数据</code></p><h3 id="1-2-network-structure"><a href="#1-2-network-structure" class="headerlink" title="1.2. network structure:"></a>1.2. network structure:</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220909091829857.png" alt="image-20220909091829857"></p><ol><li><p>network edge（图中小框）:</p><ul><li>hosts: clients and servers</li><li>part of the network with the  users and computers</li></ul></li><li><p>access networks, physical  media:</p><p>接入网、物理媒介</p><ul><li>wired, wireless  communication links</li></ul></li><li><p>network core（图中大圈）:</p><ul><li>interconnected routers （路由器互联）</li><li>network of networks</li></ul></li></ol><h4 id="Access-networks-and-physical-media"><a href="#Access-networks-and-physical-media" class="headerlink" title="Access networks and physical media"></a>Access networks and physical media</h4><h5 id="Access-networks"><a href="#Access-networks" class="headerlink" title="Access networks:"></a>Access networks:</h5><p>These networks connect end users to the rest of  the internet.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220909092751743.png" alt="image-20220909092751743" style="zoom:50%;"><p>接入网的方式：</p><ul><li><p>residential access nets </p></li><li><p>institutional access  networks (school, company) </p></li><li><p>mobile access networks</p><blockquote><p>bandwidth (bits per second)</p></blockquote></li></ul><p>shared or dedicated(专用)</p><h5 id="Physical-media"><a href="#Physical-media" class="headerlink" title="Physical media"></a>Physical media</h5><p>Physical media represent the actual hardware that  carries the data.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912104033330.png" alt="image-20220912104033330" style="zoom:67%;"><h5 id="补充：bits-and-bytes"><a href="#补充：bits-and-bytes" class="headerlink" title="补充：bits and bytes"></a>补充：bits and bytes</h5><p>​      A bit is a “binary digit” – a single 0 or 1</p><p>​      A byte is a group of eight bits – can be thought of as a  number from 0 to 255</p><p>注意大小写：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220909093220997.png" alt="image-20220909093220997" style="zoom:50%;"><h4 id="network-edge"><a href="#network-edge" class="headerlink" title="network edge"></a>network edge</h4><ul><li>packets(分组)</li></ul><p>​    主机： 信息通过分组的形式发送</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912102944537.png" alt="image-20220912102944537" style="zoom: 50%;"><ul><li><p>分组交换：以分组为单位存储转发</p></li><li><p>Host: sends packets of data</p><p> takes application message breaks into smaller chunks, known as packets,  of length <strong>L</strong> bits </p><p> transmits packet into  access network at  <strong>transmission rate R</strong> </p><p>link <strong>transmission rate</strong>,  aka link <strong>capacity</strong>, aka <strong>link bandwidth</strong></p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912103639908.png" alt="image-20220912103639908" style="zoom:50%;"><h4 id="network-core"><a href="#network-core" class="headerlink" title="network core"></a>network core</h4><ul><li><p>mesh of interconnected routers(互联路由的网状结构)</p></li><li><p>packet-switching: hosts break application-layer messages into <em>packets</em></p></li><li><p>forward packets from one router to the next, across links on path from source to destination</p><h6 id="路由器的store-and-forward方式："><a href="#路由器的store-and-forward方式：" class="headerlink" title="路由器的store-and-forward方式："></a>路由器的<strong>store-and-forward</strong>方式：</h6><p>利用该方式在网络中传递数据</p><p><em>store and forward:</em> entire packet must arrive at router before it can be transmitted on next link链路</p><p>takes <em>L</em>/<em>R</em> seconds to transmit (push out) <em>L</em>-bit packet into link at <em>R</em> bps</p><p>路由器之间一小段称为hop</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220913133042283.png" alt="image-20220913133042283" style="zoom:50%;"><p><em>one-hop numerical example:</em></p><p>▪ <em>L</em> = 7.5 Mbits</p><p>▪ <em>R</em> = 1.5 Mbps</p><p>▪ one-hop transmission delay = 5 sec</p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220913133119730.png" alt="image-20220913133119730" style="zoom: 50%;"><p>​    </p><h5 id="Two-key-network-core-functions"><a href="#Two-key-network-core-functions" class="headerlink" title="Two key network-core functions"></a><strong>Two key network-core functions</strong></h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912110605649.png" alt="image-20220912110605649" style="zoom:67%;"><p>路由: 决定分组采用的源到目标的路径</p><p>转发: 将分组从路由器的输 入链路转移到输出链路</p><p><span class="github-emoji" style="display:inline;vertical-align:middle"><span>❗</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2757.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>example:</p><p><strong>Edge or core</strong> <strong>?</strong><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912151910856.png" alt="image-20220912151910856" style="zoom:50%;"></p><h3 id="1-3-Internet-structure-network-of-networks"><a href="#1-3-Internet-structure-network-of-networks" class="headerlink" title="1.3. Internet structure: network of networks"></a>1.3. Internet structure: network of networks</h3><p>End systems connect to Internet via access ISPs (Internet Service Providers)</p><p>▪ Access ISPs in turn must be interconnected.  so that any two hosts can send packets to each other</p><h4 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h4><ul><li>connect each access ISP to one global transit ISP (internet service providers) 服务提供商</li></ul><p><em>Customer</em> <em>and</em> <em>provider</em> <em>ISPs have economic agreement.</em></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912143642633.png" alt="image-20220912143642633" style="zoom:50%;"><ul><li><p>there will be competitors which must be interconnected and regional networks may arise to connect access nets to ISPs </p></li><li><p>and regional networks may arise to connect access nets to ISPs</p></li></ul><p>​           way of interconnected:  1. Peering link 对等连接</p><p>​                                            2. internet exchange point(IXP) 交换点</p><ul><li>content provider networks（内容提供商） (e.g., Google, Microsoft, Akamai) may run their own network, to bring services, content close to end users</li></ul><p>  content provider networks在全球布置机房（离ISP很近）在全球用自己的电缆相连跳过全球ISP，基于ISP</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912144709676.png" alt="image-20220912144709676" style="zoom:50%;"><ul><li><p>at center: small of well-connected large networks:</p><p>一些为数不多的充分连接的大范围网络（分布广、节点有限、但是之间有着多重连接）</p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912145443268.png" alt="image-20220912145443268" style="zoom:50%;"><p>• “tier-1” commercial ISPs (e.g., Level 3, Sprint, AT&amp;T, NTT), ==national &amp; international coverage==</p><p>• content provider network (e.g., Google): private network that connects it data centers to Internet, ==often bypassing tier-1, regional ISPs==（因为诸如谷歌之类的大型content provider network在世界范围内有大量独立的数据中心，它们之间连接可以bypass tier 1 ISP，但是要与底层ISP连接，目的是更方便的与客户相连）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912150203735.png" alt="image-20220912150203735" style="zoom:50%;"><p>example <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220913134200366.png" alt="image-20220913134200366" style="zoom:67%;"></p><h3 id="1-4-How-do-loss-and-delay-occur"><a href="#1-4-How-do-loss-and-delay-occur" class="headerlink" title="1.4. How do loss and delay occur"></a>1.4. How do loss and delay occur</h3><h4 id="packets-queue-in-router-buffers-在路由器缓冲区的分组队列"><a href="#packets-queue-in-router-buffers-在路由器缓冲区的分组队列" class="headerlink" title="packets queue in router buffers (在路由器缓冲区的分组队列)"></a>packets <em>queue</em> in router buffers (在路由器缓冲区的分组队列)</h4><blockquote><p>packet arrival rate to link (temporarily) exceeds output link capacity</p></blockquote><p>queuing and loss: </p><p>▪ if arrival rate (in bits) to link exceeds transmission rate of link for a period of time:</p><p>• packets will queue, wait to be transmitted on link </p><p>• packets can be dropped (lost) if memory (buffer) fills up </p><p>packets queue, wait for turn（分组等待排到队头、被传输）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912153048590.png" alt="image-20220912153048590" style="zoom: 80%;"><h4 id="Four-sources-of-packet-delay"><a href="#Four-sources-of-packet-delay" class="headerlink" title="Four sources of packet delay"></a>Four sources of packet delay</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912153216147.png" alt="image-20220912153216147" style="zoom:80%;"><p>（1） <em>d</em>proc : nodal processing(确定的)</p><ul><li><p>check bit errors</p></li><li><p>determine output link（决定输出的链）</p></li><li><p>typically &lt; msec</p></li></ul><p>（2） <em>d</em>queue: queueing delay（随机的）</p><ul><li><p>time waiting at output link for transmission </p></li><li><p>depends on congestion level of router</p></li></ul><p>（3）<em>d</em>trans: transmission delay（理解为出路由器的时间）</p><ul><li><p><em>L</em>: packet length (bits) </p></li><li><p><em>R</em>: link <em>bandwidth (bps)</em></p></li><li><p><em>d</em>trans <em>= L/R</em></p></li></ul><p>（4）<em>d</em>prop: propagation delay（媒介里跑的时间）:</p><ul><li><p><em>d</em>: length of physical link</p></li><li><p><em>s</em>: propagation speed (~2x10e8 m/sec) （电磁波在媒介的传播速度）</p></li><li><p><em>d</em>prop = <em>d</em>/<em>s</em></p></li></ul><h4 id="Packet-loss"><a href="#Packet-loss" class="headerlink" title="Packet loss"></a>Packet loss</h4><p>The queue（ buffer ）capacity of the link is limited</p><p>packet arriving to full queue dropped (aka lost)</p><p>lost packet may be retransmitted by previous node, by source end system, or not at all</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912154250000.png" alt="image-20220912154250000"></p><h4 id="Throughput"><a href="#Throughput" class="headerlink" title="Throughput"></a>Throughput</h4><ul><li><p><em>吞吐量:</em> 在源端和目标端之间传输的速率（数据量/单位时间）</p><p>• <em>instantaneous:</em> rate at given point in time</p><p>• <em>average:</em> rate over longer period of time</p></li><li><p>per-connection end-end throughput: ==min(Rc ,Rs,R/10)==</p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912161830983.png" alt="image-20220912161830983" style="zoom:50%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912162249887.png" alt="image-20220912162249887"></p><ul><li><p>Bottleneck:</p><p>link on end-end path that constrains end-end throughput</p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912162220109.png" alt="image-20220912162220109" style="zoom:50%;"><h3 id="1-5-Internet-model"><a href="#1-5-Internet-model" class="headerlink" title="1.5. Internet model"></a>1.5. Internet model</h3><h4 id="Why-layering"><a href="#Why-layering" class="headerlink" title="Why layering?"></a>Why layering?</h4><p>explicit structure allows identification, relationship of complex system’s pieces</p><p>modularization eases maintenance, updating of system</p><p>Helps with complexity: break a complex design task into several smaller ones</p><p> 概念化：结构清晰，便于标示网络组件，以及描述其相互关系</p><p>结构化：模块化更易于维护和系统升级 改变某一层服务的实现不影响系统中的其他层次</p><h4 id="TCP-x2F-IP-model"><a href="#TCP-x2F-IP-model" class="headerlink" title="TCP/IP model"></a>TCP/IP model</h4><p><strong>Transmission Control Protocol/Internet Protocol</strong> </p><h5 id="application-supporting-network-applications"><a href="#application-supporting-network-applications" class="headerlink" title="application: supporting network applications"></a><em>application:</em> supporting network applications</h5><p>• FTP, SMTP, HTTP</p><h5 id="transport-process-process-进程到进程-data-transfer"><a href="#transport-process-process-进程到进程-data-transfer" class="headerlink" title="transport: process-process(进程到进程) data transfer"></a><em>transport:</em> process-process(进程到进程) data transfer</h5><p>• TCP, UDP</p><h5 id="network-routing-of-datagrams-from-source-to-destination"><a href="#network-routing-of-datagrams-from-source-to-destination" class="headerlink" title="network: routing of datagrams from source to destination"></a><em>network:</em> routing of datagrams from source to destination</h5><p>• IP, routing protocols</p><h5 id="datalink-data-transfer-between-neighboring-network-elements"><a href="#datalink-data-transfer-between-neighboring-network-elements" class="headerlink" title="datalink: data transfer between neighboring network elements"></a><em>datalink:</em> data transfer between neighboring network elements</h5><p>• Ethernet, 802.111 (WiFi), PPP</p><h5 id="physical-bits-“on-the-wire”"><a href="#physical-bits-“on-the-wire”" class="headerlink" title="physical: bits “on the wire”"></a><em>physical:</em> bits “on the wire”</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912163145761.png" alt="image-20220912163145761"></p><h4 id="ISO-x2F-OSI-reference-model"><a href="#ISO-x2F-OSI-reference-model" class="headerlink" title="ISO/OSI reference model"></a>ISO/OSI reference model</h4><ul><li><p>ISO = International Standards Office</p></li><li><p>OSI = Open Systems Interconnection</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220929214205207.png" alt="image-20220929214205207"></p></li></ul><h5 id="presentation-表示层-layer-6-allow-applications-to-interpret-meaning-of-data-e-g-encryption-compression-machine"><a href="#presentation-表示层-layer-6-allow-applications-to-interpret-meaning-of-data-e-g-encryption-compression-machine" class="headerlink" title="presentation(表示层)  (layer 6): allow applications to interpret meaning of data e.g.encryption, compression, machine"></a><em>presentation(表示层)  (layer 6):</em> allow applications to interpret meaning of data e.g.encryption, compression, machine</h5><p>specific conventions</p><p>允许应用解释传输的数据（加密压缩数据）</p><p>• In working Internet this is at the application layer.</p><h5 id="session（会话层）-layer-5-synchronization-checkpointing-recovery-of-data-exchange"><a href="#session（会话层）-layer-5-synchronization-checkpointing-recovery-of-data-exchange" class="headerlink" title="session（会话层） (layer 5): synchronization,  checkpointing, recovery of data exchange"></a><em>session（会话层） (layer 5):</em> synchronization,  checkpointing, recovery of data exchange</h5><p>建立管理会话</p><ul><li>In working Internet this is at the application layer.</li></ul><h4 id="ISO-x2F-OSI-left-vs-TCP-x2F-IP-right"><a href="#ISO-x2F-OSI-left-vs-TCP-x2F-IP-right" class="headerlink" title="ISO/OSI (left) vs TCP/IP (right)"></a>ISO/OSI (left) vs TCP/IP (right)</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912163625721.png" alt="image-20220912163625721" style="zoom:67%;"><p><em>layers:</em> each layer implements a service</p><p>▪ via its own internal-layer actions</p><p>▪ relying on services provided by layer below</p><h4 id="Layering-and-headers（头部信息）"><a href="#Layering-and-headers（头部信息）" class="headerlink" title="Layering and headers（头部信息）"></a>Layering and headers（头部信息）</h4><p>Most layers of the TCP/IP model are associated with a particular type of “header” </p><ul><li>header信息包括：</li></ul><p>• Information separate from the data being sent that says things about that data.</p><p>• Which computer is it being sent to?</p><p>• Which program on that computer must receive it?</p><p>• How long is this data?</p><ul><li>header+information 封装成PDU（Protocol Data Unit)</li></ul><p>包含来自上层的信息，以及当前层的实体附加的信息</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912173056761.png" alt="image-20220912173056761" style="zoom:67%;"><h5 id="各layers的headers"><a href="#各layers的headers" class="headerlink" title="各layers的headers:"></a>各layers的headers:</h5><p>下层包括上层的header</p><blockquote><p>At each lower layer a new header is added incorporating the headers underneath. A layer 2 packet has a layer 2 header but includes headers from layer 3 and 4.</p></blockquote><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912165219586.png" alt="image-20220912165219586" style="zoom:67%;"><h4 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h4><p>一步步加header 的过程</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912165327362.png" alt="image-20220912165327362" style="zoom:67%;"><p>在发送机一个application-layer messages被发送给transport，transport收取信息(M)并附上自己的header（Ht）encapsulate成<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912165631349.png" alt="image-20220912165631349" style="zoom:50%;">这段报文将被destination的transport解封利用</p><ul><li><p>switch是layer-3的设备</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220929215152100.png" alt="image-20220929215152100" style="zoom:50%;"><p>it reads a layer 2 address and works out which nearby computer should get a message</p></li><li><p>router是layer-2的设备</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220929215118747.png" alt="image-20220929215118747" style="zoom:50%;"><p>it reads a layer 3 address and works out which direction a packet should go.</p></li><li><p>repeater（中继器）是layer-1的设备</p><p> it strengthens or reconstructs a corrupted signal and carries on sending it.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> 互联网协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网协议-Chapter 4 Datalink Layer</title>
      <link href="//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE-Chapter%204%20Datalink%20Layer.html"/>
      <url>//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE-Chapter%204%20Datalink%20Layer.html</url>
      
        <content type="html"><![CDATA[<h1 id="Datalink"><a href="#Datalink" class="headerlink" title="Datalink"></a>Datalink</h1><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/Datalink.png" alt="Datalink"></p><h2 id="Link-layer-introduction"><a href="#Link-layer-introduction" class="headerlink" title="Link layer: introduction"></a>Link layer: introduction</h2><ul><li><p>nodes：hosts and routers</p></li><li><p>links： communication channels that connect adjacent（相邻） nodes along the communication path</p></li><li><p>layer-2 packet: frame, encapsulates datagram</p></li></ul><blockquote><p>功能：  <em>data-link layer</em> has responsibility of transferring datagram from one node to <em>physically adjacent</em> node over a link</p></blockquote><p>datagram transferred by different link protocols over different links:</p><p>在不同链路上传输的数据报的链路层协议是不同的</p><p>each link protocol provides different services</p><p> may or may not provide rdt over link</p><h3 id="链路层服务"><a href="#链路层服务" class="headerlink" title="链路层服务"></a>链路层服务</h3><ul><li><p><em>framing</em>：encapsulate datagram into frame, adding header, trailer</p></li><li><p><em>link access</em>:“MAC” addresses used in frame headers to identify source, destination </p></li><li><p><em>reliable delivery between adjacent nodes</em>: seldom used on low bit-error link (fiber, some twisted pair)   通常用于wireless links: high error rates</p></li><li><p><em>flow control:</em>  pacing between adjacent sending and receiving nodes</p></li><li><p><em>error detection</em>: errors caused by signal attenuation, noise. </p><p>receiver detects presence of errors </p></li><li><p><em>error correction:</em>  不仅可以检测错误，还可以检测错误出现的位置</p><p>receiver identifies <em>and corrects</em> bit error(s) without retransmission</p></li><li><p><em>half-duplex and full-duplex</em>：with half duplex, nodes at both ends of link can transmit, but not at same time</p></li></ul><h3 id="链路层在何处实现"><a href="#链路层在何处实现" class="headerlink" title="链路层在何处实现"></a>链路层在何处实现</h3><p>in each and every host, combination of hardware, software, firmware</p><p>link layer implemented in “adaptor”网络适配器 (aka <em>network</em> interface card NIC 网络接口卡) or on a chip芯片</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221120211125944.png" alt="image-20221120211125944" style="zoom:67%;"><p>attaches into host’s system buses</p><p>控制器接收frame并抽取出网络层数据报</p><h2 id="Error-detection"><a href="#Error-detection" class="headerlink" title="Error detection"></a>Error detection</h2><p>EDC= Error Detection and Correction bits </p><p>D = Data protected by error checking, may include header fields </p><p>通常D中不只包含数据报，同时包含链路层frame首部</p><ul><li>Error detection not 100% reliable!</li></ul><p>选择合适的差错检测方案使得遗漏错误概率很小miss some errors, but rarely</p><ul><li>larger EDC field yields better detection and correction</li></ul><p>EDC的比特越多，检测和纠错效率越好</p><h3 id="Parity-checking"><a href="#Parity-checking" class="headerlink" title="Parity checking"></a>Parity checking</h3><p><em>single bit parity:</em></p><p>奇偶校验：发送方只需要包含一个附加的比特，选择它的值，<strong>使得ｄ＋１位中的１的总数总是偶数</strong>，如果总数为计数就说明至少有一个比特的错误</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221120212343297.png" alt="image-20221120212343297" style="zoom:67%;"><p><em>two-dimensional bit parity:</em> detect and correct single bit errors</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221120212650886.png" alt="image-20221120212650886" style="zoom:67%;"><p>二维奇偶校验可以检测出错误，并通过行和列的索引纠正它</p><h3 id="Internet-checksum"><a href="#Internet-checksum" class="headerlink" title="Internet checksum"></a>Internet checksum</h3><p>校验和方法</p><p>detect “errors”  in transmitted packet </p><p> full packet checksum guaranteed UDP/TCP only（对首部和数据字段都计算checksum）</p><p>具体方法：</p><p>treat segment contents as sequence of 16-bit integers</p><p>checksum: addition (1’s complement sum) of segment contents  求和之后的补码</p><p>sender puts checksum value into UDP checksum field</p><p>check if computed checksum equals checksum field value:</p><p>• NO - error detected</p><p>• YES - no error detected. </p><h3 id="Cyclic-Redundancy-Check-CRC"><a href="#Cyclic-Redundancy-Check-CRC" class="headerlink" title="Cyclic Redundancy Check (CRC)"></a>Cyclic Redundancy Check (CRC)</h3><p>algorithm has good protection against bursts of errors.</p><h2 id="Multiple-access-protocols"><a href="#Multiple-access-protocols" class="headerlink" title="Multiple access protocols"></a>Multiple access protocols</h2><h5 id="两种类型链路："><a href="#两种类型链路：" class="headerlink" title="两种类型链路："></a>两种类型链路：</h5><p>point-to-point (connect two computers only)</p><p><em>broadcast (shared wire or medium)</em></p><p>链路层中一个很重要的问题就是：如何协调多个发送和接收节点对一条<strong>单一共享广播信道</strong>的访问，这就是多路访问问题。为了避免冲突（collision，如果有多个节点同时传输数据帧而不受任何控制，传输的帧可能在接收方处碰撞，碰撞帧的信号纠缠在一起</p><p>  “collision” – 2 or more transmissions at once</p><p>采用<strong>多路访问协议</strong>（multiple access protocol）来规范它们在共享的广播信道（“share” medium）上的传输行为</p><h5 id="理想的多路访问协议："><a href="#理想的多路访问协议：" class="headerlink" title="理想的多路访问协议："></a>理想的多路访问协议：</h5><p>给定：Rbps的广播信道</p><ol><li><p>当一个节点要发送时，可以R速率发送</p></li><li><p>当M个节点要发送，每个可以以R/M的平均速率发送</p></li><li><p>fully decentralized:</p></li><li><p>Simple</p></li></ol><h5 id="三种多路访问协议类型"><a href="#三种多路访问协议类型" class="headerlink" title="三种多路访问协议类型"></a>三种多路访问协议类型</h5><p>Partition channel 信道划分协议, random access 随机接入协议, “take turns”轮流协议</p><h3 id="Channel-partitioning-MAC-protocols"><a href="#Channel-partitioning-MAC-protocols" class="headerlink" title="Channel partitioning MAC protocols"></a>Channel partitioning MAC protocols</h3><h4 id="TDMA"><a href="#TDMA" class="headerlink" title="TDMA"></a>TDMA</h4><p>time division multiple access 时分多址</p><p>时间域被分成周期循环的等长的<strong>时分复用帧（TDM帧）</strong>，并进一步划分每个时间帧为 N 个<strong>时隙（slot）</strong></p><p>access to channel in “rounds” </p><p>each station gets fixed length slot (length = packet transmission time) in each round </p><p>如果站点无帧传输，时隙空闲-&gt;浪费</p><p>6站LAN，1、3、4有数据报，时隙2、5、6空闲</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221120221030502.png" alt="image-20221120221030502"></p><p>大家占用相同的spectrum，但是按使用不同的时间段。比如把1秒钟（或更小的一个时间单位）分成六个相等的<a href="https://www.zhihu.com/search?q=%D1%85%E2%96%91%D0%9F%D1%86%D0%A7%E2%95%A2%D1%89%D0%A7%E2%94%A4%D1%85%D0%9D%D0%A5%D1%84%E2%95%9C%D0%9D&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1048437877%7D">小时间单位</a>，时间单位1给channel1用，<a href="https://www.zhihu.com/search?q=%D1%86%D0%A7%E2%95%A2%D1%89%D0%A7%E2%94%A4%D1%85%D0%9D%D0%A5%D1%84%E2%95%9C%D0%9D2&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:1048437877%7D">时间单位2</a>给channel 2用…以此类推。</p><h4 id="FDMA"><a href="#FDMA" class="headerlink" title="FDMA"></a>FDMA</h4><p> frequency division multiple access 频分复用</p><p>channel spectrum divided into frequency bands</p><p>each station assigned fixed frequency band</p><p>分配给站点的频段如果没有被使用，则空闲</p><p>6站LAN，1、3、4有数据报，频段2、5、 6空闲</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221120221614402.png" alt="image-20221120221614402" style="zoom:67%;"><h3 id="Random-access-protocols"><a href="#Random-access-protocols" class="headerlink" title="Random access protocols"></a>Random access protocols</h3><p><strong>when node has packet to send transmit at full channel data rate R.</strong></p><p>two or more transmitting nodes ➜ “collision” </p><p>在随机访问协议中，一个传输节点总是以信道的全部速率（即 R bps）进行发送。由于信道不划分，所以可能出现而且允许冲突，而冲突意味着数据传输失败，因此随机访问协议需要定义：</p><p>1）如何检测冲突；</p><p>2）如何从冲突中恢复</p><ul><li>examples of random access MAC protocols:</li></ul><p>• slotted ALOHA (不是首字母缩写，你好)</p><p>• ALOHA</p><p>• CSMA, CSMA/CD, CSMA/CA</p><p>但是当一个节点检测到碰撞时，不会立即重发，而是会等待一个随机的时延，碰撞的每个节点随机选择时延的过程是独立的，所以有可能重发时可以避免碰撞</p><h4 id="Slotted-ALOHA"><a href="#Slotted-ALOHA" class="headerlink" title="Slotted ALOHA"></a>Slotted ALOHA</h4><p>在对时隙 ALOHA 的描述中，我们做下列假设：</p><p>① 所有数据帧大小相同，假定所有帧由 L 比特组成；</p><p>② 时间被划分成等长的时隙，每个时隙长度为 L / R 秒；</p><p>③<strong>节点</strong>只能在时隙开始时刻发送数据帧（实际上是节点上的网络适配器，或称为网卡，来发送数据帧）。nodes start to transmit only slot beginning</p><p>④ 节点间<strong>时钟同步</strong>步，每个节点都知道时隙何时开始。nodes are synchronized</p><p>⑤ 如果在一个时隙中有多个节点发送数据帧，则节点在该时隙结束之前检测到该冲突事件。</p><p>if 2 or more nodes transmit in slot, all nodes detect collision</p><p>when node obtains fresh frame, transmits in next slot（当节点有新的数据帧时，在<strong>下一个时隙</strong>发送</p><p>• <em>if no collision:</em> node can send new frame in next slot  如果没有冲突，该节点成功地传输它的数据帧，从而不需要考虑重传该帧。（如果该节点有新帧，它可以在下一个时隙继续发送新的帧。）</p><p>• <em>if collision:</em> node retransmits frame in each subsequent slot with prob. p until success</p><p>如果有冲突，该节点在时隙结束之前检测到这次冲突，并在下一个时隙以随机概率 p 重传该帧，直至成功。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221120223513660.png" alt="image-20221120223513660"></p><p>node 1,2,3在slot1 collision,然后2在slot4发送成功，1在slot8 发送成功，3在slot10成功</p><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>single active node can continuously transmit <strong>at full rate of channel</strong></p><p>highly decentralized: only slots in nodes need to be in sync</p><p>simple</p><h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>collisions, wasting slots  一旦碰撞就会产生时隙浪费</p><p>idle slots 总会产生空时隙</p><p>nodes may be able to detect collision in less than time to transmit packet</p><p>节点检测冲突的时间&lt;帧传输的时间，必须等时钟到来才能重传</p><p>clock synchronization</p><h4 id="Pure-unslotted-ALOHA"><a href="#Pure-unslotted-ALOHA" class="headerlink" title="Pure (unslotted) ALOHA"></a>Pure (unslotted) ALOHA</h4><p>第一个 ALOHA 协议实际上是一个非时隙、完全分散的协议，也称为<strong>纯ALOHA 协议</strong></p><p>unslotted Aloha: <strong>simpler, no synchronization</strong> </p><p>• transmit immediately 不必等时钟，立刻重传</p><p>当有新的数据帧生成时，节点立刻将该帧完整地传输进广播信道，因此冲突的可能性增大。如果一个传输的帧与其他传输发生冲突，这个节点立即以概率 p重传该帧；否则，该节点等待<strong>一个帧传输时间</strong>后，再以概率 p重传该帧，重复以上过程直至成功</p><p>collision probability increases:</p><p>• frame sent at t0 collides with other frames sent in [$t_0$-1,$t_0$+1]：在[$t_0$-1,$t_0$]中发出的帧后半部分一定会与i 帧冲突，而i帧后半部分又会与[$t_0$,$t_0$+1]发出的帧冲突</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221120224424358.png" alt="image-20221120224424358"></p><p> <strong>half as efficient as slotted: 效率是slotted ALOHA的一半</strong></p><h4 id="CSMA-carrier-sense-multiple-access"><a href="#CSMA-carrier-sense-multiple-access" class="headerlink" title="CSMA (carrier sense multiple access)"></a>CSMA (carrier sense multiple access)</h4><p>ALOHA中节点在开始传输前，并不关心是否会发生冲突（不关心现在channel中是否有帧）</p><p>载波侦听多路访问采用碰撞检测：如果和另一个帧同时发出，则停止发送，作废</p><p><em>CSMA</em>: listen before transmit 载波侦听</p><p>if channel sensed idle: transmit entire frame</p><p>if channel sensed busy, defer transmission</p><p>在发送数据帧之前，先监听信道，如果信道空闲，则发送<strong>完整帧</strong>；如果信道忙，则推迟发送：节点则等待直到监听到一小段时间空闲，然后开始传输。 </p><p>发生collision的情况：</p><p>因为有propagation delay 所以 two nodes may not hear each other’ s transmission</p><p><strong>只要发生collision，整个packet的transmission time wasted</strong></p><p>传播时延越大载波节点不能侦听到另一节点开始传播的可能就越大</p><p>下图显示了连接到一个线状广播总线的 4 个节点 (A,B,C,D) 的时空图，横轴表示</p><p>每个节点在空间中的位置，纵轴表示时间。在时刻$t_0$，节点 B 监听到信道是空闲的，</p><p>因此节点 B 开始传输，沿着广播链路在两个方向上传播它的比特，B 的比特沿着广</p><p>播链路传播延迟不是零（虽然以接近光速传播）。尽管节点 B 在$t_1$时刻正在传输，<strong>但 B 传输的比特信号还没有到达节点 D，因此 D 在$t_1 $监听到信道空闲</strong>根据CSMA 协议，D 也开始传输它的数据帧。一个短暂的时间后，B 的传输开始在 D 干扰 D 的传输，也就是发生了冲突。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221121090116928.png" alt="image-20221121090116928" style="zoom:67%;"><h4 id="CSMA-x2F-CD-collision-detection"><a href="#CSMA-x2F-CD-collision-detection" class="headerlink" title="CSMA/CD (collision detection)"></a>CSMA/CD (collision detection)</h4><p>前面的CSMA没有加入碰撞检测机制：一旦检测到碰撞，B和D都立刻停止传输（上图还在继续传输）</p><p>具有collision的CSMD</p><p>• collisions <em>detected</em> within short time</p><p>• colliding transmissions aborted, reducing channel wastage</p><p>一但检测到collision，立刻结束传输</p><p> B 和 D <strong>节点在发送数据的同时能检测冲突，一旦检测到冲突将立即停止传输</strong>，这样就能够<strong>减少信道资源的浪费</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/20210219105153902.png" alt="хЬиш┐ЩщЗМцПТхЕехЫ╛чЙЗцППш┐░" style="zoom:80%;"><h5 id="Ethernet-CSMA-x2F-CD-algorithm"><a href="#Ethernet-CSMA-x2F-CD-algorithm" class="headerlink" title="Ethernet CSMA/CD algorithm"></a>Ethernet CSMA/CD algorithm</h5><ol><li><p>Network Interface Card (NIC)从网络层收到 datagram, creates frame</p></li><li><p>If NIC senses channel idle, 开始传输帧. If NIC senses channel busy, 等待直到信道idle, then transmits.</p></li><li><p>If NIC 传输 entire 帧 的过程中没有检测到其他帧在传输, NIC is done with frame</p></li><li><p>If NIC detects another transmission while transmitting, aborts and sends jam signal传输中止</p></li><li><p>After aborting, NIC enters 2进制指数后退算法 <em>binary (exponential) backoff:</em> after <em>m</em> th collision, NIC chooses <em>K</em> at random from${0,1,2, … , 2^m-1}$ NIC waits K·512 bit times, <strong>returns to Step 2</strong></p><p>在该帧经历了一连串的 m 次 (m &lt; 10) 碰撞后，节点随机地从${0,1,2, … , 2^m-1}$中选择一个 K 值，等待的时间量为 K ⋅ 512 比特的传输延迟（发送512比特时间的k倍）；在 10 次或更多次碰撞之后，从 {0,1,2,3,…,1023}中随机选择 K</p></li></ol><h5 id="CSMA-x2F-CD-Frame-size"><a href="#CSMA-x2F-CD-Frame-size" class="headerlink" title="CSMA/CD: Frame size"></a>CSMA/CD: Frame size</h5><p>▪ Collision Window 碰撞窗口</p><p> Related to end-to-end propagation delay 以太网端到端的往返时延 只有经过碰撞窗口这段时间还没检测到冲突，发送方才能肯定这次发送不会发生冲突。</p><p>Minimum packet size must be greater than collision window</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221121094255864.png" alt="image-20221121094255864" style="zoom:67%;"><p>RTT = 2x5000m/2x10^8 m/s = 0.00005s </p><p>min frame size = 0.00005s x 10,000,000 bits/sec = (500 bits) ~64B(最小帧是RTT时间里发送的帧的长度)</p><p>可以想象发送方发送一个持续时间小于RTT的帧，过了T（RTT一半）时间后在接收方发生碰撞，然而该碰撞有需要T时间传回来，此时该帧早已发完，不知道产生了碰撞。</p><p> two frames are transmitted within certain time, collisions will occur. Both senders need to detect collision. The senders only detect collision during transmission. If transmission is too short, the senders cannot detect collision. If the transmission is long enough, the senders can detect collision.</p><p>如果某主机发送一个帧的64字节仍无冲突，以后就不会再发生冲突了，<strong>称此主机捕获了信道</strong>。</p><p>所以最小帧为64B，如果小于这个数，可能无法检测到冲突</p><p>The transmitting station is still transmitting long enough for a corrupted signal to be detected </p><h4 id="CSMA-x2F-CA（collision-avoid）"><a href="#CSMA-x2F-CA（collision-avoid）" class="headerlink" title="CSMA/CA（collision avoid）"></a>CSMA/CA（collision avoid）</h4><p>无线局域网中传输</p><p>802.11: 没有冲突检测</p><p>一旦发出就一定发完整个帧</p><p>由于自身信号强度远远大于其他信号：其他信号衰减weak received signals (fading)</p><p>目标: <em>avoid collisions:</em> CSMA/C(ollision)A(voidance) </p><p>• 为了避免无CD带来的信道利用率低的问题，事前进行冲突避免</p><p>无法感受到所有的冲突：存在隐藏站点问题</p><h5 id="Hidden-and-Exposed-Station"><a href="#Hidden-and-Exposed-Station" class="headerlink" title="Hidden and Exposed Station"></a>Hidden and Exposed Station</h5><p>圈代表信号覆盖范围：有可能发生冲突的区域</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221124093649537.png" alt="image-20221124093649537"></p><p>(a) The hidden station problem. A and C are hidden from each other</p><p>隐藏终端问题可以简单定义为：<strong>节点之间（A与C）无法互相监听对方。但当其不可以同时传输时（如果A向B发送会进入C的范围造成冲突），其同时传输，从而导致冲突发生。隐藏终端在单个AP（或者单个Receiver）时就有可能发生。</strong></p><p>(b) The exposed station problem. B is exposed to transmission from A</p><p>暴露终端问题可以简单定义为：<strong>节点之间能够互相监听对方。但其可以同时传输时，其不传输（A在向范围内的节点传输，此时B明明可以向不在A范围内的传输，但是由于侦听到了A的信号，放弃了对C的传播），从而造成浪费。</strong></p><p>所以802.11中不冲突检测，检测了也没用</p><h5 id="如何解决：事前侦听"><a href="#如何解决：事前侦听" class="headerlink" title="如何解决：事前侦听"></a>如何解决：事前侦听</h5><p>1 如果感受到channel idle for <strong>DIFS</strong>（ <strong>Short InterFrame Space</strong>） then transmit entire frame (no CD)</p><p>2 if 感受channel很忙，然后设置一个随机的backoff计时器，在信道空缺时候倒计时。当计数值减为 0，该站点发送整个数据帧并等待确认</p><p>3.如果收到确认，发送站点知道它的帧已被目的站正确接收了，如果未收到确认，发送站点将重新进入回退阶段，并从一个更大的范围内选取随机值</p><p><strong>DCF = Distributed Coordination Function</strong> 分布式协调功能</p><p><strong>DIFS = DCF InterFrame Space</strong>分布式帧间间隔</p><p><strong>SIFS = Short InterFrame Space</strong> 短帧间间隔</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221124095613926.png" alt="image-20221124095613926" style="zoom:67%;"><p>此外还可以进行预约信道：allow sender to “reserve” channel rather than random </p><p>access of data frames: <strong>avoid collisions of long data frames</strong>为了避免长帧的冲突</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221124100936105.png" alt="image-20221124100936105" style="zoom:67%;"><p>使用CSMA向BS（base station）发送一个小的RTS（request-to-send） packets</p><p>如果发送碰撞，就backoff重发</p><p>预约成功后，BS broadcasts <strong>clear-to-send</strong> CTS in response to RTS</p><p>目的是告诉发送方可以开始发了，告诉其他节点停止发送</p><p><em>avoid data frame collisions completely</em> <em>using small reservation packets!</em></p><h2 id="LANs"><a href="#LANs" class="headerlink" title="LANs"></a>LANs</h2><p>MAC（LAN or Physical or Ethernat）地址是48 bit MAC address (for most LANs) burned in NIC ROM只有NIC有关, also sometimes software settable</p><p>e.g.: 1A-2F-BB-76-09-AD 十六进制表示每个小隔断里有８比特（48ｂｉｔ）</p><p>function: <em>used “locally” to get frame from one interface to</em> <em>another physically-connected interface (same network, in IP addressing sense)</em></p><p>each adapter on LAN has unique <em>LAN</em> address每个适配器具有一个MAC address</p><p>IP地址是分层的，MAC地址平面化的</p><p> FF-FF-FF-FF-FF-FF MAC广播地址</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221124104711786.png" alt="image-20221124104711786" style="zoom:50%;"><p>对于某些具有多个网卡的端设备，具有多个LAN地址</p><p>世界上的每一个网卡MAC地址都不同：MAC address allocation administered by IEEE</p><p>网卡制造商需要购买MAC address space</p><p>MAC flat address ➜ portability mac address具有扁平结果，这决定了其网卡可以在不同设备中移植，而地址不会变</p><p>• can move LAN card from one LAN to another</p><p><strong>值得注意的是，交换机没有MAC地址！</strong></p><h3 id="ARP-address-resolution-protocol"><a href="#ARP-address-resolution-protocol" class="headerlink" title="ARP: address resolution protocol"></a>ARP: address resolution protocol</h3><p>地址解析协议：Address Resolution Protocol, ARP is used to find the destination MAC address when only the destination IP address is known（已知IP地址查找MAC地址）</p><p>each IP node (<strong>host, router</strong>) on LAN has ARP table</p><p>&lt; IP address; MAC address; TTL&gt;格式</p><p>TTL (Time To Live)：time after which address mapping will be forgotten </p><p>存储MAC－IP pair直到 information that times out</p><p>从表中删除每个映射的时间</p><h5 id="子网中寻址"><a href="#子网中寻址" class="headerlink" title="子网中寻址"></a>子网中寻址</h5><p>具体流程：</p><ul><li>A wants to send datagram to B：B’s MAC address not in A’ s ARP table.（先查表，如果表里有对应IP的MAC直接用，如果没有开始广播）</li><li>A broadcasts ARP query packet, containing B’s IP address （destination MAC address = FF-FF-FF-FF-FF-FF）此时所有节点都收到了这个查询</li><li>B receives ARP packet, replies to A with its (B’s) MAC address</li></ul><p>把自己的MAC发送给A的MAC地址，而不是广播</p><h5 id="routing-to-another-LAN"><a href="#routing-to-another-LAN" class="headerlink" title="routing to another LAN"></a>routing to another LAN</h5><p>send datagram from A to B via R</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221124221023899.png" alt="image-20221124221023899" style="zoom:67%;"><p>A creates link-layer frame with R’s MAC address as destination address, frame contains A-to-B IP datagram <strong>以R的MAC地址作为目的地，并把A到B的数据报封装进去</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221124221214900.png" alt="image-20221124221214900" style="zoom:67%;"><p>frame received at R, datagram removed, passed up to IP</p><p>R creates link-layer frame with B’s MAC address as destination address, frame contains A-to-B IP datagram</p><p><strong>传到R后将IP数据报提取出来然后封装成以B MAC地址为目的地的帧继续发（如果不知道地址，ARP查询）</strong></p><p>全程源IP目标IP不变，但是源MAC和目标MAC始终在变</p><h3 id="Ethernet"><a href="#Ethernet" class="headerlink" title="Ethernet"></a>Ethernet</h3><p>有线网络中最常使用的LAN技术（与802.3几乎一致），无线网络中最常用802.11</p><h5 id="physical-topology"><a href="#physical-topology" class="headerlink" title="physical topology"></a>physical topology</h5><p><em>bus:</em> all nodes in same collision domain（都在一个碰撞域中）同一个碰撞域中使用CSMA/CD同一时间只有一个在传</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221124222053565.png" alt="image-20221124222053565" style="zoom:67%;"><p>两个端口同时发出一个帧在总线中，就会发生碰撞</p><p><em>star:</em></p><p>• active <em>switch</em> in center</p><p>• each line runs a (separate) Ethernet protocol (nodes do not collide with each other)交换机内分端口发送不会产生碰撞（Ａ－＞Ｂ不影响Ｃ－＞Ｄ）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221124222128514.png" alt="image-20221124222128514" style="zoom:67%;"><h4 id="Ethernet-frame-structure"><a href="#Ethernet-frame-structure" class="headerlink" title="Ethernet frame structure"></a>Ethernet frame structure</h4><p>sending adapter encapsulates IP datagram (or other network layer protocol packet) in Ethernet frame</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221124222324633.png" alt="image-20221124222324633"></p><h6 id="preamble（前同步码）"><a href="#preamble（前同步码）" class="headerlink" title="preamble（前同步码）:"></a><em>preamble（前同步码）:</em></h6><p>7 bytes with pattern 10101010 followed by one byte with pattern 10101011前7比特都是10101010，最后一个是10101011</p><p><strong>used to synchronize receiver, sender clock rates</strong></p><h6 id="addresses-6-byte-source-destination-MAC-addresses"><a href="#addresses-6-byte-source-destination-MAC-addresses" class="headerlink" title="addresses: 6 byte source, destination MAC addresses"></a><em>addresses:</em> 6 byte source, destination MAC addresses</h6><p>if adapter receives frame with <strong>matching destination address,</strong> or with <strong>broadcast address</strong> (e.g. ARP packet), it passes data in frame to network layer protocol</p><h6 id="type-indicates-higher-layer-protocol-mostly-IP-but-others-possible）高层协议"><a href="#type-indicates-higher-layer-protocol-mostly-IP-but-others-possible）高层协议" class="headerlink" title="type: indicates higher layer protocol (mostly IP but others possible）高层协议"></a><em>type:</em> indicates higher layer protocol (mostly IP but others possible）高层协议</h6><h6 id="CRC-cyclic-redundancy-check-at-receiver"><a href="#CRC-cyclic-redundancy-check-at-receiver" class="headerlink" title="CRC: cyclic redundancy check at receiver"></a><em>CRC:</em> cyclic redundancy check at receiver</h6><p>发现错误就丢弃该frame</p><h5 id="connectionless-no-handshaking-between-sending-and-receiving-NICs"><a href="#connectionless-no-handshaking-between-sending-and-receiving-NICs" class="headerlink" title="connectionless: no handshaking between sending and receiving NICs"></a><em>connectionless:</em> no handshaking between sending and receiving NICs</h5><p>不握手，直接发</p><h5 id="unreliable-receiving-NIC-doesn’t-send-ACK-or-NACK-to-sending-NIC"><a href="#unreliable-receiving-NIC-doesn’t-send-ACK-or-NACK-to-sending-NIC" class="headerlink" title="unreliable: receiving NIC doesn’t send ACK or NACK to sending NIC"></a><em>unreliable:</em> receiving NIC doesn’t send ACK or NACK to sending NIC</h5><p>和UDP、IP一样，出错不归链路层管，从TCP再次生成分组重新封装成帧重发（或者应用层重发）</p><p>只有使用上层的TCP，丢弃的帧才会重传</p><h5 id="使用的MAC协议是unslotted-CSMA-x2F-CD-with-binary-backoff"><a href="#使用的MAC协议是unslotted-CSMA-x2F-CD-with-binary-backoff" class="headerlink" title="使用的MAC协议是unslotted CSMA/CD with binary backoff"></a>使用的MAC协议是<strong>unslotted <em>CSMA/CD with</em> <em>binary backoff</em></strong></h5><h4 id="Ethernet-switch"><a href="#Ethernet-switch" class="headerlink" title="Ethernet switch"></a>Ethernet switch</h4><p>store, forward Ethernet frames</p><p>examine incoming frame’s MAC address, selectively forward frame to one-or-more outgoing links when frame is to be forwarded on segment, uses CSMA/CD to access segment</p><p><em>transparent</em>：交换机对于子网中所有主机和路由器都是透明的</p><p>主机并不知道有交换机存在（网络层面认为子网内一跳可达，链路层可能经过很多交换机）</p><p><em>plug-and-play, self-learning</em>：不要configured，自学习得到交换表</p><p> <strong><em>multiple</em> simultaneous transmissions</strong>：<strong>多重同步传输，同时有很多节点并发的发送</strong>，每个主机有dedicate，direct connection to switch，switch可以buffer frame，并且no collision （each link is its own collision domain）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221124224331897.png" alt="image-20221124224331897" style="zoom:67%;"><p><strong>A-to-A’ and B-to-B’ can transmit simultaneously</strong> （MAC协议在其中弱化了，因为几乎不存在碰撞）</p><p>如何获取具有MAC－IP pair 的switch table? switch具有self-learning</p><h5 id="Switch-self-learning"><a href="#Switch-self-learning" class="headerlink" title="Switch: self-learning"></a>Switch: self-learning</h5><p>switch <em>learns</em> which hosts can be reached through which interfaces</p><p>when frame received, switch “learns” location of sender: incoming LAN segment</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221124235638208.png" alt="image-20221124235638208" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221124235702200.png" alt="image-20221124235702200" style="zoom:67%;"><p>初始时，switch table为空，当有主机经过交换机发送时，记录其端口以及MAC地址，并设置一个TTL（Time to Live），超过这个时间自动删除。</p><p>帧发送到交换机，把A地址和1 接口存入交换表</p><h5 id="frame-filtering-x2F-forwarding过滤转发"><a href="#frame-filtering-x2F-forwarding过滤转发" class="headerlink" title="frame filtering/forwarding过滤转发"></a>frame filtering/forwarding过滤转发</h5><p>过滤 (filtering) 是决定某个帧应该转发到某个接口还是应当将其丢弃的交换机功能</p><p>转发 (forwarding） 是决定某个帧应该被导向哪个接口，并把该帧移动到那些接口</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125001058054.png" alt="image-20221125001058054" style="zoom:67%;"><p>如果没有匹配的表项，直接广播，有匹配的但是和发送时使用的端口一样，无需再发回去，直接丢弃（过滤）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125001516364.png" alt="image-20221125001516364" style="zoom: 50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125001530248.png" alt="image-20221125001530248" style="zoom:67%;"><p>在上个例子基础上，A的帧到达switch后A’的location unknown: <em>flood</em></p><p>然后A’向A发送frame时，A已经在表中，所以可以直接从１输出</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125002515918.png" alt="image-20221125002515918" style="zoom:67%;"><p>去的时候flood，回来时候走一条确定的路线</p><h4 id="Switches-vs-routers"><a href="#Switches-vs-routers" class="headerlink" title="Switches vs. routers"></a>Switches vs. routers</h4><p>both are store-and-forward: </p><p><em>routers:</em> network-layer devices (examine network—layer headers)</p><p><em>switches:</em> link-layer devices (examine link-layer headers)both have forwarding tables:          </p><p><em>routers:</em> compute tables using routing algorithms, IP addresses，需要配置不是即插即用</p><p><em>switches:</em> learn forwarding table using flooding, learning, MAC addresses，可以即插即用</p><h3 id="WLANS"><a href="#WLANS" class="headerlink" title="WLANS"></a>WLANS</h3><p>wireless local area network </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125091620720.png" alt="image-20221125091620720" style="zoom: 50%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125091636117.png" alt="image-20221125091636117" style="zoom:67%;">wireless host：may be stationary (non-mobile) or mobile</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125091739013.png" alt="image-20221125091739013" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125091916367.png" alt="image-20221125091916367" style="zoom:50%;">base station（AP） : connected to wired network</p><p>sending packets between wired network and wireless host(s) </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125091948246.png" alt="image-20221125091948246" style="zoom:50%;">wireless link: connect </p><p>mobile(s) to base station</p><ul><li><p>ad hoc mode:自组织网络（不需要接入点(Access Point)） no <strong>base stations</strong>，<strong>route</strong> among themselves</p><p>在Ad hoc网络中，结点具有转发能力，结点间的通信可能要经过多个中间结点的转发（多跳），这是Ad hoc网络与其他移动网络的最根本区别。</p></li></ul><p>nodes can only transmit to other nodes within link coverage</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125092715031.png" alt="image-20221125092715031" style="zoom:67%;"><p>不需要AP</p><h4 id="802-11-WLAN"><a href="#802-11-WLAN" class="headerlink" title="802.11 WLAN"></a>802.11 WLAN</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125221028008.png" alt="image-20221125221028008"></p><p>无线主机与基站通信base station = access point (AP)</p><p>Basic Service Set <strong>基本服务集</strong> (BSS) contains:</p><p>• wireless hosts</p><p>• access point (AP): <strong>base station（家用路由器）是链路层设备</strong></p><p>• ad hoc mode: hosts only 如果是自组织网络只有主机</p><h5 id="802-11-frame"><a href="#802-11-frame" class="headerlink" title="802.11 frame"></a>802.11 frame</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125221413045.png" alt="image-20221125221413045"></p><p>Address1：要接收该帧的AP或主机的ＭＡＣ</p><p>Address2: 发送该帧的站点的MAC地址</p><p>Address３：与AP直接相连的路由器的MAC地址</p><p>Address4：如果不用：<em>00-00-00-00-00-00</em></p><h5 id="addressing"><a href="#addressing" class="headerlink" title="addressing"></a>addressing</h5><p>AP是链路层设备，它与IP地址无关，所以从路由器角度来看，<strong>它认为它与子网中一台主机H1直接相连：</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221125224352531.png" alt="image-20221125224352531"></p><p>H1生成一个802.11帧用AP的MAC地址和H1的MAC地址作为地址1和地址2，R1的MAC作为地址3，当AP接收到该帧，将其转换为以太网帧：源地址为H1 MAC目标地址为R1的MAC地址发往路由器（看起来好像是低一层的packet在这里deliver）</p><p>802.11帧：</p><p>上面是以byte为单位，下面是bit</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130195851544.png" alt="image-20221130195851544" style="zoom:67%;"><h3 id="VLAN"><a href="#VLAN" class="headerlink" title="VLAN"></a>VLAN</h3><p>虚拟局域网：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130201513856.png" alt="image-20221130201513856" style="zoom:67%;"><p>带有VLAN功能的交换机（们）可以被配置成：一个物理LAN基础设施，虚拟成多个虚拟的LANs</p><p>在一个VLAN内主机可以彼此通信，仿佛与交换机直接相连。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130220836910.png" alt="image-20221130220836910" style="zoom:67%;"><p><em>流量隔离:</em> 从/到1-8端口的流量只会涉及到1-8</p><p>动态成员: 成员可以在VLANs之间动态分配</p><p>在VLANs间转发:通过路由器进行转发 (就像他们通过各自的交换机相联一样)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130221000519.png" alt="image-20221130221000519" style="zoom:67%;"><h3 id="Multiprotocol-label-switching-MPLS"><a href="#Multiprotocol-label-switching-MPLS" class="headerlink" title="Multiprotocol label switching (MPLS)"></a>Multiprotocol label switching (MPLS)</h3><ul><li>纯IP网络是按照IP地址对分组进行转发的</li></ul><p>前缀匹配，转发的方法固定</p><p>无法控制IP分组的路径，无法支持流连工程</p><p>也无法对一个IP分组流进行资源分配，性能无法保证</p><ul><li>MPLS网络按照标签label进行分组的转发</li></ul><p>有基于标签的转发表</p><p>▪ initial goal: high-speed IP forwarding using fixed length label (instead of IP address) </p><p>•使用固定长度标识符(而不是最长前缀匹配)快速查找</p><p>•借鉴虚拟电路(VC)方法 但IP数据报仍然保留IP地址!</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130232115766.png" alt="image-20221130232115766" style="zoom:67%;"><h4 id="MPLS-capable-routers"><a href="#MPLS-capable-routers" class="headerlink" title="MPLS capable routers"></a>MPLS capable routers</h4><p>标签交换路由器</p><p>只根据标签值将报文转发到出接口(不检查IP地址)</p><p>MPLS forwarding table distinct from IP forwarding tables</p><p><em>flexibility:</em> MPLS forwarding decisions can <em>differ</em> from those of IP</p><p> 采用源地址和目标地址来路由到达同一个目标的流，不同路径（支持流量工程）</p><p>如果链路失效，能够快速重新路由: 预先计算好的备份链路 (对于VoIP有效)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130232738438.png" alt="image-20221130232738438" style="zoom:67%;"><p>▪ <em>IP routing:</em> <em>path to destination determined</em> <em>by destination address alone</em></p><p>▪ <em>MPLS routing:</em> path to destination can be based on source <em>and</em> destination address</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130234201683.png" alt="image-20221130234201683" style="zoom:67%;"><p>R4到A有两种路径</p><h3 id="A-day-in-the-life"><a href="#A-day-in-the-life" class="headerlink" title="A day in the life"></a>A day in the life</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204113346524.png" alt="image-20221204113346524" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204113358918.png" alt="image-20221204113358918" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204113411135.png" alt="image-20221204113411135" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204113425727.png" alt="image-20221204113425727" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204113449697.png" alt="image-20221204113449697" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204113505080.png" alt="image-20221204113505080" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204113520122.png" alt="image-20221204113520122" style="zoom:50%;"><p>我们假定 Bob启动他的便携机，然后将其用一根以太网电缆连接到学校的以太网交换</p><p>机，交换机又与学校的路由器相连，如图6-32所示。学校的这台路由器与一个ISP连接，</p><p>本例中 ISP为comcast. net。在本例中，comcast.net 为学校提供了DNS 服务;所以，DNS</p><p>服务器驻留在 Comcast 网络中而不是学校网络中。我们将假设 DHCP服务器运行在路由器</p><p>中，就像常见情况那样。当 Bob 首先将其便携机与网络连接时，没有IP 地址他就不能做任何事情（例如下载一个Web 网页）。所以，Bob 的便携机所采取的一个网络相关的动作是运行 DHCP 协议，以从本地 DHCP服务器获得一个IP 地址以及其他信息。</p><p>1）Bob便携机上的操作系统生成一个DHCP请求报文（4.3.3节），并将这个报文放入具有目的端口67（DHCP服务器）和源端口68（DHCP客户）的UDP报文段（3.3节）链路层和局域网 327该UDP报文段则被放置在一个具有广播 IP目的地址（255.255.255.255）和源 IP地址0.0.0.0的IP数据报中（4.3.1节），因为 Bob的便携机还没有一个IP地址。</p><p>2）包含 DHCP请求报文的IP数据报则被放置在以太网帧中。该以太网帧具有目的 MAC地址 FF∶FF∶FF∶FF∶FF∶FF，使该帧将广播到与交换机连接的所有设备（如果顺利的话也包括 DHCP 服务器）;该帧的源 MAC 地址是 Bob便携机的 MAC 地址00:16: D3:23:68:8A。</p><p>3）包含 DHCP请求的广播以太网帧是第一个由 Bob便携机发送到以太网交换机的帧。该交换机在所有的出端口广播入帧，包括连接到路由器的端口。</p><p>4）路由器在它的具有 MAC地址 00∶22∶6B∶45∶IF的接口接收到该广播以太网帧。该帧中包含 DHCP请求，并且从该以太网帧中抽取出 IP数据报。该数据报的广播IP 目的地址指示了这个IP 数据报应当由在该节点的高层协议处理，因此该数据报的载荷（一个UDP报文段）被分解（3.2节）向上到达 UDP，DHCP请求报文从此 UDP报文段中抽取出来。此时 DHCP服务器有了DHCP请求报文。</p><p>5）我们假设运行在路由器中的 DHCP服务器能够以CIDR（4.3.3节）块68.85.2.0/24分配IP地址。所以本例中，在学校内使用的所有IP 地址都在 Comcast 的地址块中。我 们假设 DHCP服务器分配地址 68.85.2.101 给 Bob 的便携机。DHCP服务器生成包含这个IP地址以及 DNS 服务器的 IP 地址（68.87.71.226）、默认网关路由器的 IP 地址（68.85.2.1）和子网块（68.85.2.0/24）（（等价为”网络掩码”）的一个DHCP ACK报文。该DHCP报文被放入一个UDP报文段中，UDP报文段被放入一个IP数据报中，IP 数据报再被放入一个以太网帧中。这个以太网帧的源 MAC地址是路由器连到归属网络时接口的 MAC地址（00∶22∶6B∶45∶1F∶1B）、目的 MAC地址是 Bob便携机的 MAC地址（00∶16∶ D3∶23∶68∶8A）。</p><p>6）包含 DHCP ACK 的以太网帧由路由器发送给交换机。因为交换机是自学习的，并且先前从 Bob便携机收到（包含 DHCP请求的）以太网帧，所以该交换机知道寻址到00∶16∶D3∶23∶68∶8A的帧仅从通向 Bob便携机的输出端口转发。</p><p>7）Bob便携机接收到包含 DHCP ACK 的以太网帧，从该以太网帧中抽取IP 数据报，从IP数据报中抽取 UDP报文段，从 UDP报文段抽取 DHCP ACK报文。Bob 的 DHCP客户则记录下它的IP 地址和它的 DNS 服务器的 IP地址。它还在其IP转发表中安装默认网关的地址。Bob便携机将向该默认网关发送目的地址为其子网68.85.2.0/24 以外的所有数据报。此时，Bob 便携机已经初始化好它的网络组件、并准备开始处理 Web 网页获取。（注意到在第 4 章给出的四个步骤中仅有最后两个 DHCP步骤是实际必要的。）</p><p>当Bob 将 <a href="http://www.google.com/">www.google.com</a> 的 URL 键入其Web浏览器时，他开启了一长串事件，这将导致谷歌主页最终显示在其Web 浏览器上。Bob的 Web浏览器通过生成一个TCP套接字开始了该过程，套接字用于向<a href="http://www.google.com发送http请求.为了生成该套接字,bob/">www.google.com发送HTTP请求。为了生成该套接字，Bob</a> 便携机将需要知道 <a href="http://www.google.com/">www.google.com</a> 的IP地址。我们在2.4节中学过，使用 DNS协议提供这种名字到 IP地址的转换服务。</p><p>8）Bob便携机上的操作系统因此生成一个 DNS查询报文（2.4.3节），将字符串<a href="http://www.google.com放入dns报文的问题段中.该dns报文则放置在一个具有53号(dns/">www.google.com放入DNS报文的问题段中。该DNS报文则放置在一个具有53号（DNS</a> 服务器）目的端口的 UDP报文段中。该UDP报文段则被放入具有IP目的地址68.87.71.226和源IP 地址 68.85.2.101的IP数据报中。</p><p>9）Bob便携机则将包含 DNS请求报文的数据报放入一个以太网帧中。该帧将发送（在链路层寻址）到 Bob学校网络中的网关路由器。然而、即使 Bob 便携机经过上述第5步中的 DHCP ACK报文知道了学校网关路由器的IP 地址（68.85.2.1），但仍不知道该网关路由器的 MAC地址。为了获得该网关路由器的 MAC 地址，Bob 便携机将需要使用 ARP协议（6.4.1节）。</p><p>10）Bob便携机生成一个具有目的IP地址68.85.2.1（默认网关）的ARP查询报文，将该ARP报文放置在一个具有广播目的地址（FF∶FF∶FF∶FF∶FF∶FF）的以太网帧中，并向交换机发送该以太网帧，交换机将该帧交付给所有连接的设备，包括网关路由器。</p><p>11）网关路由器在通往学校网络的接口上接收到包含该 ARP查询报文的帧，发现在ARP报文中目标IP地址68.85.2.1匹配其接口的IP地址。网关路由器因此准备一个 ARP回答，指示它的 MAC地址00∶22∶∶6B∶45∶1F∶1B对应IP地址 68.85.2.1。它将ARP回答放在一个以太网帧中，其目的地址为00∶ 16∶D3∶23∶68∶8A（Bob 便携机），并向交换机发送该帧，再由交换机将帧交付给 Bob便携机。</p><p>12）Bob便携机接收包含 ARP回答报文的帧，并从 ARP回答报文中抽取网关路由器的 MAC地址（00∶22∶6B∶45∶1F∶1B）。</p><p>13）Bob便携机现在（最终!）能够使包含 DNS查询的以太网帧寻址到网关路由器的MAC地址。注意到在该帧中的IP数据报具有IP 目的地址 68.87.71.226（DNS服务器），而该帧具有目的地址00∶22∶6B∶45∶1F∶1B（网关路由器）。Bob 便携机向交换机发送该帧，交换机将该帧交付给网关路由器。</p><p>14）网关路由器接收该帧并抽取包含 DNS 查询的IP数据报。路由器查找该数据报的目的地址（68.87.71.226），并根据其转发表决定该数据报应当发送到图6-32的 Comcast网络中最左边的路由器。IP数据报放置在链路层帧中，该链路适合将学校路由器连接到最左边 Comcast 路由器，并且该帧经这条链路发送。</p><p>15）在 Comcast 网络中最左边的路由器接收到该帧，抽取IP数据报，检查该数据报的目的地址（68.87.71.226），并根据其转发表确定出接口，经过该接口朝着 DNS服务器转发数据报，而转发表已根据Comcast 的域内协议（如 RIP、OSPF 或IS-IS，5.3节）以及因特网的域间协议 BGP（5.4 节）所填写。</p><p>16）最终包含 DNS查询的 IP 数据报到达了 DNS服务器。DNS服务器抽取出 DNS查询报文，在它的 DNS数据库中查找名字 <a href="http://www.google.com(2.4/">www.google.com（2.4</a> 节），找到包含对应<a href="http://www.google/">www.google</a>. com 的IP地址（64.233.169.105）的 DNS源记录。（假设它当前缓存在 DNS服务器中。）前面讲过这种缓存数据源于 google.com的权威 DNS 服务器（2.4.2节）。该DNS服务器形成了一个包含这种主机名到IP地址映射的 DNS 回答报文，将该DNS回答报文放入 UDP报文段中，该报文段放入寻址到 Bob便携机（68.85.2.101）的IP数据报中。该数据报将通过Comcast 网络反向转发到学校的路由器，并从这里经过以太网交换机到Bob 便携机。</p><p>17）Bob便携机从 DNS报文抽取出服务器 <a href="http://www.google.com/">www.google.com</a> 的IP地址。最终，在大量工作后，Bob 便携机此时准备接触 <a href="http://www.google.com/">www.google.com</a> 服务器!链路层和局城网 329</p><p>18）既然 Bob便携机有了 <a href="http://www.google.com/">www.google.com</a> 的IP地址，它能够生成 TCP套接字，该套接字将用于向 <a href="http://www.google.com/">www.google.com</a> 发送HTTP GET报文。当 Bob生成TCP套接字时，在 Bob便携机中的TCP 必须首先与<a href="http://www.google.com/">www.google.com</a> 中的 TCP 执行三次握手（3.5.6节）。Bob便携机因此首先生成一个具有目的端口 80（针对 HTTP的）的 TCP SYN报文段，将该TCP报文段放置在具有目的IP地址64.233.169.105（<a href="http://www.google.com)的ip数据报中,将该数据报放置在/">www.google.com）的IP数据报中，将该数据报放置在</a> MAC 地址为00∶22∶6B∶45∶1F∶1B（网关路由器）的帧中，并向交换机发送该帧。</p><p>19）在学校网络、Comcast 网络和谷歌网络中的路由器朝着 <a href="http://www.google/">www.google</a>. com转发包含TCP SYN的数据报，使用每台路由器中的转发表，如前面步骤 14~16那样。前面讲过支配分组经 Comcast 和谷歌网络之间域间链路转发的路由器转发表项，是由 BGP 协议决定的（第5章）。</p><p>20）最终，包含TCP SYN的数据报到达 <a href="http://www.googole/">www.googole</a>. com。从数据报抽取出 TCP SYN报文并分解到与端口 80相联系的欢迎套接字。对于谷歌 HTTP 服务器和 Bob便携机之间的TCP连接生成一个连接套接字（2.7节）。产生一个TCP SYNACK（3.5.6节）报文段，将其放入向 Bob 便携机寻址的一个数据报中，最后放入链路层帧中，该链路适合将www. google. com 连接到其第一跳路由器。</p><p>21）包含TCP SYNACK 报文段的数据报通过谷歌、Comcast 和学校网络，最终到达Bob便携机的以太网卡。数据报在操作系统中分解到步骤18生成的TCP 套接字，从而进入连接状态。</p><p>22）借助于Bob便携机上的套接字，现在（终于!）准备向 <a href="http://www.google.com发送字节了,bob的浏览器生成包含要获取的url的/">www.google.com发送字节了，Bob的浏览器生成包含要获取的URL的</a> HTTP GET报文（2.2.3节）。HTTPGET报文则写入套接字，其中GET报文成为一个TCP报文段的载荷。该TCP报文段放置进一个数据报中，并交付到 www. google.com，如前面步骤18~20所述。</p><p>23）在 <a href="http://www.google.com的/">www.google.com的</a> HTTP服务器从 TCP套接字读取 HTTP GET报文，生成一个HTTP响应报文（2.2节），将请求的Web 页内容放入 HTTP响应体中，并将报文发送进TCP套接字中。</p><p>24）包含 HTTP回答报文的数据报通过谷歌、Comcast 和学校网络转发，到达 Bob便携机。Bob 的 Web 浏览器程序从套接字读取 HTTP响应，从 HTTP响应体中抽取Web 网页的html，并最终（终于!）显示了Web网页。</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> 互联网协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网协议-test</title>
      <link href="//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE-test.html"/>
      <url>//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE-test.html</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction-to-IP-Network"><a href="#Introduction-to-IP-Network" class="headerlink" title="Introduction to IP Network"></a>Introduction to IP Network</h1><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175031269.png" alt="image-20221113175031269" style="zoom:67%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175058737.png" alt="image-20221113175058737" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175214189.png" alt="image-20221113175214189" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175322976.png" alt="image-20221113175322976" style="zoom:67%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175356080.png" alt="image-20221113175356080" style="zoom: 100%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175419943.png" alt="image-20221113175419943" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175419943.png" alt="image-20221113175419943" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175550478.png" alt="image-20221113175550478" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175612344.png" alt="image-20221113175612344" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175640431.png" alt="image-20221113175640431" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175702002.png" alt="image-20221113175702002" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175804815.png" alt="image-20221113175804815" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175829786.png" alt="image-20221113175829786" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175859559.png" alt="image-20221113175859559" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175911779.png" alt="image-20221113175911779" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113175940798.png" alt="image-20221113175940798" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180016197.png" alt="image-20221113180016197" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180042499.png" alt="image-20221113180042499" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180103793.png" alt="image-20221113180103793" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180125381.png" alt="image-20221113180125381" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180150030.png" alt="image-20221113180150030" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180209019.png" alt="image-20221113180209019" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180222182.png" alt="image-20221113180222182" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180309067.png" alt="image-20221113180309067" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180332784.png" alt="image-20221113180332784" style="zoom:50%;"><hr><h1 id="transport-layer"><a href="#transport-layer" class="headerlink" title="transport layer"></a>transport layer</h1><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180356740.png" alt="image-20221113180356740" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180408704.png" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180441986.png" alt="image-20221113180441986" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180457707.png" alt="image-20221113180457707" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180520924.png" alt="image-20221113180520924" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180537473.png" alt="image-20221113180537473" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180600512.png" alt="image-20221113180600512" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180617706.png" alt="image-20221113180617706" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180652115.png" alt="image-20221113180652115" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180714366.png" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180756517.png" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180828129.png" alt="image-20221113180828129" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180850906.png" alt="image-20221113180850906" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113180908326.png" alt="image-20221113180908326" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181105210.png" alt="image-20221113181105210" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181123218.png" alt="image-20221113181123218" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181211653.png" alt="image-20221113181211653" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181302743.png" alt="image-20221113181302743" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181356078.png" alt="image-20221113181356078" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181423855.png" alt="image-20221113181423855" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181441333.png" alt="image-20221113181441333" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181501047.png" alt="image-20221113181501047" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181516383.png" alt="image-20221113181516383" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181516383.png" alt="image-20221113181516383" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181630902.png" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181705152.png" alt="image-20221113181705152" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181720796.png" alt="image-20221113181720796" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181854878.png" alt="image-20221113181854878" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181911545.png" alt="image-20221113181911545" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181929935.png" alt="image-20221113181929935" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113181944787.png" alt="image-20221113181944787" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182034878.png" alt="image-20221113182034878" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182054055.png" alt="image-20221113182054055" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182108404.png" alt="image-20221113182108404" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182130187.png" alt="image-20221113182130187" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182154099.png" alt="image-20221113182154099" style="zoom:40%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182225945.png" alt="image-20221113182225945" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182249070.png" alt="image-20221113182249070" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182316102.png" alt="image-20221113182316102" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182341402.png" alt="image-20221113182341402" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182406444.png" alt="image-20221113182406444" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182431698.png" alt="image-20221113182431698" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182731191.png" alt="image-20221113182731191" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182743796.png" alt="image-20221113182743796" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182807509.png" alt="image-20221113182807509" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182821328.png" alt="image-20221113182821328" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182850019.png" alt="image-20221113182850019" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182904157.png" alt="image-20221113182904157" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182918093.png" alt="image-20221113182918093" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113182935701.png" alt="image-20221113182935701" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183005553.png" alt="image-20221113183005553" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183015060.png" alt="image-20221113183015060" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183044114.png" alt="image-20221113183044114" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183100907.png" alt="image-20221113183100907" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183119848.png" alt="image-20221113183119848" style="zoom:40%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183135898.png" alt="image-20221113183135898" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183154605.png" alt="image-20221113183154605" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183211912.png" alt="image-20221113183211912" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183225018.png" alt="image-20221113183225018" style="zoom:40%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183247419.png" alt="image-20221113183247419" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183247419.png" alt="image-20221113183247419" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183317771.png" alt="image-20221113183317771" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183338863.png" alt="image-20221113183338863" style="zoom:40%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113183359324.png" alt="image-20221113183359324" style="zoom:50%;"><h1 id="network-layer"><a href="#network-layer" class="headerlink" title="network layer"></a>network layer</h1><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184144915.png" alt="image-20221113184144915" style="zoom:67%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184212721.png" alt="image-20221113184212721" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184320432.png" alt="image-20221113184320432" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184332086.png" alt="image-20221113184332086" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184344844.png" alt="image-20221113184344844" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184358858.png" alt="image-20221113184358858" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184416841.png" alt="image-20221113184416841" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184454989.png" alt="image-20221113184454989" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184516442.png" alt="image-20221113184516442" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184535625.png" alt="image-20221113184535625" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184556459.png" alt="image-20221113184556459" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184625716.png" alt="image-20221113184625716" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184634208.png" alt="image-20221113184634208" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184647290.png" alt="image-20221113184647290" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184658456.png" alt="image-20221113184658456" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184718278.png" alt="image-20221113184718278" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184731480.png" alt="image-20221113184731480" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184746120.png" alt="image-20221113184746120" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184806937.png" alt="image-20221113184806937" style="zoom:45%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184830537.png" alt="image-20221113184830537" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184851253.png" alt="image-20221113184851253" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184913674.png" alt="image-20221113184913674" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184924592.png" alt="image-20221113184924592" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113184944771.png" alt="image-20221113184944771" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185000183.png" alt="image-20221113185000183" style="zoom:45%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185113201.png" alt="image-20221113185113201" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185130020.png" alt="image-20221113185130020" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185148981.png" alt="image-20221113185148981" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185200877.png" alt="image-20221113185200877" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185215559.png" alt="image-20221113185215559" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185231571.png" alt="image-20221113185231571" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185246129.png" alt="image-20221113185246129" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185253324.png" alt="image-20221113185253324" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185331846.png" alt="image-20221113185331846" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185346198.png" alt="image-20221113185346198" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185419423.png" alt="image-20221113185419423" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185430930.png" alt="image-20221113185430930" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113185507873.png" alt="image-20221113185507873" style="zoom:50%;"><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211160644850.png" alt="image-20221211160644850"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211160716314.png" alt="image-20221211160716314"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211160740286.png" alt="image-20221211160740286"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211162136484.png" alt="image-20221211162136484"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211160819013.png" alt="image-20221211160819013"></p><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211161001733.png" alt="image-20221211161001733" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211161019143.png" alt="image-20221211161019143"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211163751246.png" alt="image-20221211163751246"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211163801556.png" alt="image-20221211163801556"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211163808390.png" alt="image-20221211163808390"></p><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211163951173.png" alt="image-20221211163951173" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211164005668.png" alt="image-20221211164005668"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211164045306.png" alt="image-20221211164045306" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211164101696.png" alt="image-20221211164101696" style="zoom:67%;"><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211161151420.png" alt="image-20221211161151420"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211161606480.png" alt="image-20221211161606480"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211161616404.png" alt="image-20221211161616404"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211161634548.png" alt="image-20221211161634548"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211161643405.png" alt="image-20221211161643405"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211161750359.png" alt="image-20221211161750359"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211161816249.png" alt="image-20221211161816249"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211161911529.png" alt="image-20221211161911529"></p><hr><h2 id="Link-layer"><a href="#Link-layer" class="headerlink" title="Link layer"></a>Link layer</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211163726106.png" alt="image-20221211163726106"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211164637549.png" alt="image-20221211164637549"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211164649912.png" alt="image-20221211164649912"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211164709898.png" alt="image-20221211164709898"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211164721320.png" alt="image-20221211164721320"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211164739982.png" alt="image-20221211164739982"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211164858819.png" alt="image-20221211164858819"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211164911168.png" alt="image-20221211164911168"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211164926038.png" alt="image-20221211164926038"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211165014273.png" alt="image-20221211165014273"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211165031797.png" alt="image-20221211165031797"></p><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221216161107951.png" alt="image-20221216161107951" style="zoom:67%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221216161133875.png" alt="image-20221216161133875" style="zoom:67%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221216161154189.png" alt="image-20221216161154189" style="zoom:67%;"><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221216161219338.png" alt="image-20221216161219338"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221216161231836.png" alt="image-20221216161231836"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221216161246024.png" alt="image-20221216161246024"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221216161305170.png" alt="image-20221216161305170"></p><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221216161317244.png" alt="image-20221216161317244" style="zoom:50%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221216161328664.png" alt="image-20221216161328664" style="zoom:67%;"><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221216161343997.png" alt="image-20221216161343997" style="zoom:67%;"><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211170128843.png" alt="image-20221211170128843"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211170140422.png" alt="image-20221211170140422"></p><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211170208202.png" alt="image-20221211170208202" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211170217807.png" alt="image-20221211170217807"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211170247290.png" alt="image-20221211170247290"></p><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211170310951.png" alt="image-20221211170310951"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211170333737.png" alt="image-20221211170333737"></p><hr><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211170355442.png" alt="image-20221211170355442" style="zoom:67%;"><hr><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211170409108.png" alt="image-20221211170409108"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211170459197.png" alt="image-20221211170459197"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> 互联网协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>互联网协议-Chapter 5 Security and Network Management</title>
      <link href="//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE-Chapter%205%20Security%20and%20Network%20Management.html"/>
      <url>//post/%E4%BA%92%E8%81%94%E7%BD%91%E5%8D%8F%E8%AE%AE-Chapter%205%20Security%20and%20Network%20Management.html</url>
      
        <content type="html"><![CDATA[<h1 id="Security-Network-Management"><a href="#Security-Network-Management" class="headerlink" title="Security + Network Management"></a>Security + Network Management</h1><h2 id="Firewalls"><a href="#Firewalls" class="headerlink" title="Firewalls"></a>Firewalls</h2><p>isolates organization’s internal net from larger Internet, allowing some packets to pass, blocking others</p><p>将组织的内部网络与更大的互联网隔离开来，允许一些数据包通过，阻止其他数据包</p><p>防火墙（firewall）是一个硬件和软件的结合体，它将一个机构的内部网络与整个因特网隔离开，允许一些数据分组通过而阻止另一些分组通过。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211144244634.png" alt="image-20221211144244634"></p><ul><li>prevent denial of service attacks:</li></ul><p>SYN flooding: attacker establishes many bogus TCP connections, no resources left for “real” connections</p><ul><li><strong>prevent illegal modification/access of internal data</strong></li></ul><p> attacker replaces homepage with something else</p><ul><li><strong>allow only authorized access to inside network</strong></li></ul><p>set of authenticated users/hosts</p><ul><li>three types of firewalls:</li></ul><ol><li><p>stateless packet filters</p></li><li><p>stateful packet filters</p></li><li><p>application gateways</p></li></ol><h3 id="Stateless-packet-filtering"><a href="#Stateless-packet-filtering" class="headerlink" title="Stateless packet filtering"></a>Stateless packet filtering</h3><p>个机构通常都有一个将其内部网络与其 ISP（并因此与更大的公共因特网相连）相连的网关路由器。所有离开和进入内部网络的流量都要经过这个路由器，而这个路由器正是分组过滤（packet filtering）出现的地方</p><p>internal network connected to Internet via router firewall</p><p>router <em>filters packet-by-packet,</em> decision to forward/drop packet based on:</p><p>• source IP address, destination IP address</p><p>• TCP/UDP source and destination port numbers</p><p>• ICMP message type</p><p>• TCP SYN and ACK bits</p><p><em>example 1:</em> block incoming and outgoing datagrams with IP protocol field = 17 and with either source or dest port = 23</p><p>• <em>result:</em> all incoming, outgoing UDP flows and telnet connections are blocked</p><p>一条过滤策略能够基于地址和端口号的结合。例如，一台过滤路由器能够转发所有Telnet 数据报（那些具有端口号23 的数据报）、但那些包括在一个特定的IP地址列表中的去往和来自的地址除外。</p><p><em>example 2:</em> block inbound TCP segments with ACK=0.</p><p>• <em>result:</em> prevents external clients from making TCP connections with internal clients, but allows internal clients to connect to outside.</p><p>过滤也可根据 TCP ACK 比特是否设置来进行。如果一个机构要使内部客户连接到外部服务器，却要防止外部客户连接到内部服务器，这个技巧很有效。3.5节讲过，在每个TCP连接中第一个报文段的 ACK 比特都设为0、而连接中的所有其他报文段的 ACK 比特都设为1。因此，如果一个机构要阻止外部客户发起到内部服务器的连接，就只需直接过滤进入的所有 ACK 比特设为0的报文段。这个策略去除了所有从外部发起的所有TCP连接，但是允许内部发起TCP连接。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211150800122.png" alt="image-20221211150800122"></p><h4 id="Access-Control-Lists"><a href="#Access-Control-Lists" class="headerlink" title="Access Control Lists"></a>Access Control Lists</h4><p>在路由器中使用访问控制列表实现防火墙规则，每个路由器接口有它自己的列表。</p><p><em>ACL:</em> table of rules, applied top to bottom to incoming packets: (action, condition) pairs: looks like OpenFlow forwarding!</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211151101163.png" alt="image-20221211151101163" style="zoom:67%;"><p>第一条规则允许任何具有目的端口80的 TCP分组离开该机构网络;</p><p>第二条规则允许任何具有源端口80且ACK比特置位的TCP分组进入该机构网络。</p><h3 id="Stateful-packet-filtering"><a href="#Stateful-packet-filtering" class="headerlink" title="Stateful packet filtering"></a>Stateful packet filtering</h3><p>状态分组过滤器</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211151940300.png" alt="image-20221211151940300"></p><p>track status of every TCP connection：增加了核对连接的状态跟踪</p><p>track connection setup (SYN), teardown (FIN): determine whether incoming, outgoing packets “makes sense” 通过跟踪SYN、FIN控制分组判断是否有意义（防止一些伪造成符合无状态分组过滤器ACL表项的包进入攻击）</p><p>为防火墙能够通过观察三次握手（SYN、SYNACK 和 ACK）来观察一条新连接的开始;而日当它看到该连接的个 FIN分组时。它能够观察该连接的结束</p><p>timeout inactive connections at firewall: no longer admit packets</p><p>当防火墙经过比如说60秒还没有看到该连接的任何活动性，它也能够（保守地）假设该连接结束了。</p><h3 id="Application-gateways"><a href="#Application-gateways" class="headerlink" title="Application gateways"></a>Application gateways</h3><p>filter packets on application data as well as on IP/TCP/UDP fields.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211152615727.png" alt="image-20221211152615727" style="zoom:67%;"><p>应用程序网关除了看 IP/TCP/UDP首部外，还基于应用数据来做策略决定。</p><p>*example:*只允许内部客户的受限集合向外Telnet，不允许任何外部客户向内Telnet</p><ol><li><p>要求所有Telnet用户通过网关进行Telnet。</p></li><li><p>对于有权限的用户，网关会建立到dest主机的Telnet连接。网关在2个连接之间中继数据</p></li><li><p>路由器过滤器阻止所有不是来自网关的Telnet连接。</p></li></ol><h2 id="Network-Management"><a href="#Network-Management" class="headerlink" title="Network Management"></a>Network Management</h2><p>Autonomous systems (aka “network”): 100s or 1000s of interacting hardware/software components</p><p> automatic way to report on large number of hosts, switches and routers</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211154155940.png" alt="image-20221211154155940"></p><h4 id="Network-Management-standards"><a href="#Network-Management-standards" class="headerlink" title="Network Management standards"></a>Network Management standards</h4><p>OSI CMIP：Common Management Information Protocol</p><p>SNMP: Simple Network Management Protocol</p><h4 id="Simple-Network-Management-Protocol-SNMP"><a href="#Simple-Network-Management-Protocol-SNMP" class="headerlink" title="Simple Network Management Protocol (SNMP)"></a>Simple Network Management Protocol (SNMP)</h4><p>便于管理信息交换的协议</p><p>A Protocol that Facilitates the exchange of management information</p><p>between network devices. </p><p>控制和监控网络设备的状态</p><p>•允许网络管理员:</p><p>管理网络性能</p><p>发现并解决网络问题</p><p>计划网络增长</p><h4 id="SNMP-Basic-Components"><a href="#SNMP-Basic-Components" class="headerlink" title="SNMP Basic Components"></a>SNMP Basic Components</h4><p>网络管理站</p><p>•收集和存储管理信息，并通过SNMP协议提供给网管使用</p><p>•可以是工作站或个人电脑</p><p>网络管理系统(NMS)</p><p>•执行监控和控制被管理设备的应用程序</p><p>代理</p><p>网络管理软件模块，位于被管理设备中</p><p>MIB (管理信息库)</p><p>•由经理和代理共同使用，存储和交换管理信息</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211155035341.png" alt="image-20221211155035341" style="zoom:80%;">]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> 互联网协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电信系统-1-First half</title>
      <link href="//post/%E7%94%B5%E4%BF%A1%E7%B3%BB%E7%BB%9F-1-First%20half.html"/>
      <url>//post/%E7%94%B5%E4%BF%A1%E7%B3%BB%E7%BB%9F-1-First%20half.html</url>
      
        <content type="html"><![CDATA[<h1 id="first-half"><a href="#first-half" class="headerlink" title="first half"></a>first half</h1><h1 id="Telecoms-Systems"><a href="#Telecoms-Systems" class="headerlink" title="Telecoms Systems"></a>Telecoms Systems</h1><h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><h3 id="repeater作用"><a href="#repeater作用" class="headerlink" title="repeater作用"></a>repeater作用</h3><p>When a signal travels through a channel, it suffers <strong>attenuation</strong>, <strong>distortion</strong> and <strong>noise contamination</strong>. Since their negative effects increase with the distance, special equipment called repeaters are inserted along the way.</p><p>由于存在<a href="https://baike.baidu.com/item/%E6%8D%9F%E8%80%97/2731413?fromModule=lemma_inlink">损耗</a>，在线路上传输的信号功率会逐渐<a href="https://baike.baidu.com/item/%E8%A1%B0%E5%87%8F/10871592?fromModule=lemma_inlink">衰减</a>，衰减到一定程度时将造成信号失真，因此会导致接收错误。<strong>中继器就是为解决这一问题而设计的。它完成物理线路的连接，对衰减的信号进行放大，保持与原数据相同。</strong></p><p>在模拟系统中，传输的是连续变化（continuously- varying）的波形。为了保持发射波形，<strong>中继器</strong>主要对信号进⾏滤波、均衡和<strong>放⼤</strong>。（filter， equalize and amplify the signal）</p><ul><li><h5 id="analog-systems-repeaters-essentially-filter-equalize-and-amplify-the-signal"><a href="#analog-systems-repeaters-essentially-filter-equalize-and-amplify-the-signal" class="headerlink" title="analog systems: repeaters essentially filter, equalize and amplify the signal."></a><strong>analog systems:</strong> repeaters essentially filter, equalize and amplify the signal.</h5></li><li><p>In <strong>digital systems</strong> sequences predefined waveforms (symbols) are transmitted. In this case, repeaters <strong>regenerate</strong> such waveforms</p></li></ul><h3 id="Transmission-impairment"><a href="#Transmission-impairment" class="headerlink" title="Transmission impairment"></a>Transmission impairment</h3><p>媒介中信号传输会有 impairment（损失）其中包括：</p><blockquote><p><strong>attenuation 衰减, distortion 失真 and noise 噪声.</strong></p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920085443941.png" alt="image-20220920085443941"></p><p>如何去让信号的传输更加稳定可靠，就是本课程的目的。我们关注信号的处理方式，以及信道的设计等等，以尽可能的减少Impairment，让通信过程更加可靠。 </p><h4 id="Attenuation"><a href="#Attenuation" class="headerlink" title="Attenuation"></a>Attenuation</h4><p><strong>loss of energy</strong> for <strong>overcoming</strong> the **resistance **of  medium(<strong>克服介质的阻⼒</strong>). </p><p><strong>amplifiers</strong>(放大器) are used to boost the signal back up to its original level(compensate for energy loss)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920085432843.png" alt="image-20220920085432843" style="zoom:50%;"><h4 id="Distortion"><a href="#Distortion" class="headerlink" title="Distortion"></a>Distortion</h4><p>signal <em>changes</em> in its <strong>form</strong> or <strong>shape</strong>. </p><p>Typically effects complex or composite signals:  the composite signal carrying different frequencies suffers from the delay of some of these frequencies （第二行和第三行delay了）</p><p>通常影响<strong>复杂信号</strong>（complex）或者<strong>合成信号</strong>（composite signal）</p><p>Each frequency component has its own propagation <strong>attenuation</strong> through a medium. </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920085852630.png" alt="image-20220920085852630" style="zoom:67%;"><h4 id="Noise"><a href="#Noise" class="headerlink" title="Noise"></a>Noise</h4><p>◆ Noise is the <strong>main source</strong> of a signal being corrupted</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920090119278.png" alt="image-20220920090119278" style="zoom:70%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920090203227.png" alt="image-20220920090203227" style="zoom:67%;"><p>可以看出analog信号在传输过程中比digital更容易失真</p><h3 id="WIRELESS-COMMUNICATIONS"><a href="#WIRELESS-COMMUNICATIONS" class="headerlink" title="WIRELESS COMMUNICATIONS"></a><strong>WIRELESS COMMUNICATIONS</strong></h3><h4 id="Types-of-wireless-network"><a href="#Types-of-wireless-network" class="headerlink" title="Types of wireless network"></a>Types of wireless network</h4><p>◆ WPAN (Wireless Personal Area Network)</p><p>– typically operates within about 30 feet</p><p>无线个人网：主要用于个人用户工作空间，典型距离覆盖几米，可以与计算机同步传输文件，访问本地外围设备，如打印机等。目前主要技术包括蓝牙（Bluetooth）和红外（IrDA）。</p><p>◆ WLAN (Wireless Local Area Network)</p><p>– operates within 300 yards </p><p>无线局域网：主要用于宽带家庭、大楼内部以及园区内部，典型距离覆盖几十米至上百米。目前主要技术为802.11系列。</p><p>◆ WMAN (Wireless Metropolitan Area Network )</p><p>– operates within tens of miles</p><p>◆ WWAN (Wireless Wide Area Network )</p><p>– operates over a large geographical area, mobile phone, </p><p>无线城域网和广域网：覆盖城域和广域环境，主要用于Internet/email访问，但提供的带宽比无线局域网技术要低很多。</p><h4 id="Why-wireless"><a href="#Why-wireless" class="headerlink" title="Why wireless?"></a>Why wireless?</h4><p>◆ No more cables</p><p>◆ Mobility and convenience</p><p>◆ Flexibility</p><p>◆ Scalability</p><h3 id="INFORMATION-CONVERSION"><a href="#INFORMATION-CONVERSION" class="headerlink" title="INFORMATION CONVERSION"></a>INFORMATION CONVERSION</h3><h4 id="Formatting-Data"><a href="#Formatting-Data" class="headerlink" title="Formatting  Data"></a>Formatting  Data</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920091038908.png" alt="image-20220920091038908" style="zoom:50%;"><p>Different sources of information need different methods to transform the source information to a digital format（ <strong>minimise bitrate but maintain quality</strong>）</p><p>– Text – ASCII (used to be others)</p><p>Each alphanumeric character is transformed into binary by character coding. Most popular character coding method is ASCII</p><p>– Voice (PSTN) – Pulse Code Modulation (G711a/u) 64kps</p><p>– Voice (GSM) – GSM codec (13kbps) EFR (improved quality)</p><p>– 3G WCDMA – AMR (adaptive Multi Rate) </p><p>– Picture – JPEG …..</p><p>– Video – MPEG2, MPEG4, H264</p><h4 id="可靠的通信系统传输信息"><a href="#可靠的通信系统传输信息" class="headerlink" title="可靠的通信系统传输信息"></a>可靠的通信系统传输信息</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920125903361.png" alt="image-20220920125903361" style="zoom:67%;"><p>pulse shaping : <strong>脉冲整形</strong>是改变传输脉冲波形的过程。其目的是使发射的信号更适合其目的或通信信道，通常是通过限制传输的有效带宽。</p><p>Multiplex: 传输媒体的带宽或容量往往会大于传输单一信号的需求，为了有效地利用通信线路,希望一个信道同时传输多路信号，这就是所谓的多路复用技术(Multiplexing)。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920124632755.png" alt="image-20220920124632755"></p><p><strong>信源输出</strong>可以为 模拟 OR 数字；<strong>信源编码器</strong>把analog or digital signal转成二进制符号表示（被称为信息序列）；<strong>信道编码器</strong>以受控的方式向信息序列中提供某种冗余，以克服噪声和信道干扰对信道造成的失真；<strong>数字调制器</strong>把二进制序列映射成信号波形，是与信道的接口。</p><p><strong>数字解调器</strong>把传输波形映射为信号编码，判断波形是0/1，</p><h2 id="模数转换"><a href="#模数转换" class="headerlink" title="模数转换"></a>模数转换</h2><p>数字信号的传输抗干扰能力更强，且可引入加密技术。所以为了使用数字信号，必须把模拟信号转换：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006184420428.png" alt="image-20221006184420428"></p><p>将模拟信号转换为数字信号需要三个步骤，统称为调制：</p><ol><li><p>采样（sampling）：对模拟信号抽样得到时间离散幅值连续的信号</p></li><li><p>量化：对有可能有无穷多个取值的抽样值进行近似，将其表现为有限个数值</p></li><li><p>编码：把0/1比特序列分配到量化器的不同输出</p><p>将模拟信号转化为数字信号的过程就叫做<strong>数字化</strong>。因此，数字化包括将模拟信息在时间上和幅度上都要离散化，时间上离散化是<strong>采样 sampling</strong>，幅度上离散化是<strong>量化 quantisation</strong></p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006184719926.png" alt="image-20221006184719926"></p><h3 id="SAMPLING"><a href="#SAMPLING" class="headerlink" title="SAMPLING"></a><strong>SAMPLING</strong></h3><h5 id="Analog-information-has-the-following-properties"><a href="#Analog-information-has-the-following-properties" class="headerlink" title="Analog information has the following properties:"></a><strong>Analog information has the following properties:</strong></h5><p>• Continuous in time.</p><p>• Continuous in amplitude.</p><h5 id="digital-information-is"><a href="#digital-information-is" class="headerlink" title="digital information is:"></a><strong>digital information is:</strong></h5><p>• Discrete in time.</p><p>• Discrete in amplitude.</p><p>digitization on**（数字化） consists of discretising analog information both in time (<strong>sampling</strong>) and in amplitude (**quantisation)</p><h5 id="时域和频域的对应关系："><a href="#时域和频域的对应关系：" class="headerlink" title="时域和频域的对应关系："></a>时域和频域的对应关系：</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Faecae253de3d4c39b1144c6187d6e060_th.gif" alt="img"></p><h5 id="Sampling-in-the-Time-Domain"><a href="#Sampling-in-the-Time-Domain" class="headerlink" title="Sampling in the Time Domain"></a>Sampling in the Time Domain</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006190123305.png" alt="image-20221006190123305" style="zoom:50%;"><p>乘 a train of impulses</p><p>The quantity <em>Ts</em> is known as the sampling period and <strong>f</strong>s = 1/<em>Ts</em> is the sampling frequency</p><h5 id="Sampling-in-the-Frequency-Domain"><a href="#Sampling-in-the-Frequency-Domain" class="headerlink" title="Sampling in the Frequency Domain"></a>Sampling in the Frequency Domain</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006190622225.png" alt="image-20221006190622225" style="zoom:67%;"><p>By using the convolution property, we can prove that the spectrum of a sampled signal consists of replicas of the original spectrum centred at multiples of the sampling frequency</p><p>频域表现为象以采样频率搬移</p><h5 id="Interpolating-for-D-x2F-A-conversion"><a href="#Interpolating-for-D-x2F-A-conversion" class="headerlink" title="Interpolating for D/A conversion"></a>Interpolating for D/A conversion</h5><p>可以还原采样前信号</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006192018672.png" alt="image-20221006192018672" style="zoom:67%;"><p>最理想条件下的采样：</p><h5 id="单位冲激："><a href="#单位冲激：" class="headerlink" title="单位冲激："></a>单位冲激：</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006192533366.png" alt="image-20221006192533366" style="zoom:67%;"><p><em>(a) signal g(t);</em> <em>(b) signal spectrum;</em> <em>(c) sampling</em> function;</p><p><em>(d) spectrum of</em> sampling <em>function;</em> <em>(e) sampled signal;</em> </p><p><em>(f) spectrum of</em> sampled signal</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006193346608.png" alt="image-20221006193346608"></p><h5 id="方波："><a href="#方波：" class="headerlink" title="方波："></a>方波：</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006193124183.png" alt="image-20221006193124183" style="zoom:67%;"><p><em>(g) finite width</em> <em>sample;</em> <em>(h) spectrum of (g); (i) sampled signal;</em> </p><p><em>(j) spectrum of (i);</em> <em>(k) receiver</em> equalizing filter to <em>recover g(t)</em> </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006193327479.png" alt="image-20221006193327479"></p><h4 id="Sampling-Theorem-Nyquist’s-Criterion"><a href="#Sampling-Theorem-Nyquist’s-Criterion" class="headerlink" title="Sampling Theorem (Nyquist’s Criterion)"></a>Sampling Theorem (Nyquist’s Criterion)</h4><p>To prevent aliasing and hence to allow the original signal to be recovered the sampling frequency (fs ) must be given by:</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006193629794.png" alt="image-20221006193629794" style="zoom:50%;"><p>where <em>f</em>max is the highest frequency present in the original signal.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006194322468.png" alt="image-20221006194322468" style="zoom:67%;"><p>Oversampling makes it easier to design a simpler filter to recover the original signal</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006200652384.png" alt="image-20221006200652384" style="zoom:50%;"><p>混叠在时域中的表现：由于结果的不定性，根据欠采样点可能会画出一条完全不同的正弦曲线</p><h3 id="QUANTISATION"><a href="#QUANTISATION" class="headerlink" title="QUANTISATION"></a><strong>QUANTISATION</strong></h3><p>抽样使时间离散，但是幅度仍然连续。必须通过量化使幅度值也离散，才可以得到数字信号</p><p><strong>困惑：为啥说幅度值是连续的？</strong></p><p>这里是针对于非理想（自然）采样结果来说，采样后的结果中，每个自然采样的幅度仍然有无穷多种可能的取值，而数字系统只能处理数量有限的数据</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006201439124.png" alt="image-20221006201439124" style="zoom:67%;"><p>量化的目的是为了让脉冲的幅度值离散，且限制在一个有限集合中</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006201626089.png" alt="image-20221006201626089" style="zoom:50%;"><p>Results from mapping continuous analogue values to discrete values that can be represented digitally</p><p>May be uniform or nonuniform</p><p>Pulse-code modulation (PCM) is a method used to digitally represent sampled analogue signals</p><h4 id="量化原理"><a href="#量化原理" class="headerlink" title="量化原理"></a>量化原理</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006202647734.png" alt="image-20221006202647734"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006202728949.png" alt="image-20221006202728949"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006202735259.png" alt="image-20221006202735259"></p><p>对于赋值来说，设置不相交的量化区间（Quantisation Region）如果幅度值在某个量化区间内，则把该幅度值近似赋为该量化区间对应的量化电平（Quantized value），再将这些电平按二进制编码（假设有N种可能电平）<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006203153113.png" alt="image-20221006203153113">个比特就足够表示这N个电平。但是在这个过程中会引发Quantisation distortion</p><h4 id="均匀量化uniform-Quantisation"><a href="#均匀量化uniform-Quantisation" class="headerlink" title="均匀量化uniform Quantisation"></a>均匀量化uniform Quantisation</h4><p>Quantisation interval, <em>q</em>,(step size)（区间长度） uniformly distributed over the full range（量化区间均匀分布）</p><p>The approximation will result in an error no larger than ±<em>q</em>/2</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006203650281.png" alt="image-20221006203650281" style="zoom:67%;"><h4 id="Quantising-distortion"><a href="#Quantising-distortion" class="headerlink" title="Quantising distortion"></a>Quantising distortion</h4><p>量化失真</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006203831718.png" alt="image-20221006203831718"></p><p>量化函数的差值一直在-q/2和q/2之间来回变，上面和下面那个error signal是一直对应的。幅度横跨整个数字位宽表示范围的信号，其四舍五入的量化误差可以通过一个峰峰值幅度为q的锯齿波形来表示。</p><p>Error (<em>e</em>) is approximately sawtooth over the quantization region, apart from the dwell regions.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006205331095.png" alt="image-20221006205331095" style="zoom:67%;"><p>A sawtooth waveform has a uniform pdf: all values are equally likely. The area under the pdf must be 1 so that the amplitude is 1/<em>q</em>. Note that p(<em>e</em>)=0 outside the range +<em>q</em>/2 to -<em>q</em>/2</p><p>the power of the quantization error is  <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006205713563.png" alt="image-20221006205713563" style="zoom:67%;"></p><p><strong>distortion power is constant and depends only on the step size.</strong></p><h5 id="SQNR"><a href="#SQNR" class="headerlink" title="SQNR"></a>SQNR</h5><p>SQNR (Signal to Quantisation Noise Ratio 信号量化噪声比 简称量噪比)来衡量量化后的性能</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006210716785.png" alt="image-20221006210716785" style="zoom:50%;"><p>其中M是Number of quantisation level（电平数）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006210813582.png" alt="image-20221006210813582" style="zoom:67%;"><p> α is the ratio of peak to mean signal power（峰值与均值的电压差与均值的比的平方）</p><p>n是bit数</p><p>这个比率可以很好的描述出我们通信的质量，因为计算的是我们需要的信息（量化信号）和不要的信息（噪声）的比例。所以这个比例越高，说明通信系统越好，通信质量更清晰。</p><h5 id="dB"><a href="#dB" class="headerlink" title="dB:"></a>dB:</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006221922947.png" alt="image-20221006221922947" style="zoom:67%;"><h4 id="非均匀量化non-uniform-Quantisation"><a href="#非均匀量化non-uniform-Quantisation" class="headerlink" title="非均匀量化non-uniform Quantisation"></a>非均匀量化non-uniform Quantisation</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221007091842466.png" alt="image-20221007091842466" style="zoom:67%;"><p>Non-uniform quantisation can provide fine quantisation of the weak signals and coarse quantisation of the strong signals.非均匀量化对弱信号可 以提供更精细的量化 ，而对强信号则采取较为粗糙的量化 ，因此可以通过非均匀量化使量化噪声与信号大小成正 比</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006222425796.png" alt="image-20221006222425796"></p><p>Solution is to use nonuniform quantisation: </p><p>– Step-size varies with amplitude of sample. </p><p>– For larger amplitudes, larger step-sizes are used</p><p>– ‘Nonuniform’ because step-size changes from sample to sample. </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221006225025785.png" alt="image-20221006225025785" style="zoom:50%;"><h4 id="principle"><a href="#principle" class="headerlink" title="principle"></a>principle</h4><p>Nonuniform quantisation uses logarithmic compression and expansion.（对数压扩量化）</p><p>Compress at the transmitter and expand at the receiver.</p><p>Compression changes the distribution of the signal amplitude. </p><p>– Lower amplitude signals strength to higher values of quantisation</p><p>The logarithmic compression and expansion function is also called <strong>Companding</strong>（压扩 ）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221007090054152.png" alt="image-20221007090054152"></p><ul><li><p>Pass x(t) thro’ <strong>compressor</strong> to produce y(t).</p></li><li><p>y(t) is quantised uniformly to give y’(t) which is transmitted or stored digitally. </p></li><li><p>At receiver, y’(t) passed thro’ <strong>expander which</strong> reverses effect of compressor.</p></li></ul><h5 id="Companding"><a href="#Companding" class="headerlink" title="Companding"></a>Companding</h5><p>There are two companding standards for telephony: A-law (G711a - used mainly in Europe) and µ-law(G711u - used in North America and Japan). </p><p><strong>Implemented as a segmented, piece-wise linear</strong> </p><p>approximation. </p><ul><li>A率压缩曲线：</li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221007090716032.png" alt="image-20221007090716032" style="zoom:67%;"><p>观察一开始的图像：强信号斜率大于1，而弱信号斜率小于1，通过压缩使强信号减弱，弱信号增强，都趋向于正比信号。</p><h6 id="13-segment-compression-A-law十三折线法近似A率："><a href="#13-segment-compression-A-law十三折线法近似A率：" class="headerlink" title="13-segment compression A-law十三折线法近似A率："></a>13-segment compression A-law十三折线法近似A率：</h6><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221007092818486.png" alt="image-20221007092818486" style="zoom:67%;"><p>在正8段和负8段中，正1，2段和负1，2段斜率相同，合为一段。所以原来的16段折线变为13段折线，故又称A律13折线。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221007092949736.png" alt="image-20221007092949736" style="zoom:67%;"><p>8-bit code consist of</p><p>– i) polarity bit P (range is ±V) 0正1负</p><p>– ii) 3 segment decoding bits XYZ （代表不同的segment）</p><p>– iii) 4 bits (abcd) specifying intra segment value on a linear scale （每个segment里均匀量化十六段）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221007160729717.png" alt="image-20221007160729717" style="zoom:67%;"><h3 id="调制modulation"><a href="#调制modulation" class="headerlink" title="调制modulation"></a>调制modulation</h3><p>采样、量化和解码是调制的重要步骤</p><h4 id="PCM调制技术流程："><a href="#PCM调制技术流程：" class="headerlink" title="PCM调制技术流程："></a>PCM调制技术流程：</h4><p>In pulse-code modulation (PCM) we can identify three components: sampler, quantiser and encoder.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010221059283.png" alt="image-20221010221059283"></p><p><strong>分为均匀PCM和非均匀PCM</strong></p><h5 id="bit-rate"><a href="#bit-rate" class="headerlink" title="bit rate"></a>bit rate</h5><p>The encoder converts the sequence of quantized amplitudes into a sequence of bits. Hence, the bit rate <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010221839606.png" alt="image-20221010221839606" style="zoom:33%;"> can be calculated as </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010221851261.png" alt="image-20221010221851261" style="zoom:50%;"><p>N是每个量化级别的比特数 fs是采样频率</p><h4 id="Analogue-amp-Digital-Bandwidth"><a href="#Analogue-amp-Digital-Bandwidth" class="headerlink" title="Analogue &amp; Digital Bandwidth"></a>Analogue &amp; Digital Bandwidth</h4><p><strong>Analogue bandwidth</strong> of a medium is expressed in cycles per second (Hz).</p><p><strong>Digital bandwidth</strong> is expressed in bits per second</p><p>Analogue bandwidth is the <strong>range of frequencies</strong> that a medium can pass.</p><p>Digital bandwidth is the <strong>maximum bit rate</strong> that a medium can pass.</p><h3 id="Delta-modulation-DM"><a href="#Delta-modulation-DM" class="headerlink" title="Delta modulation (DM)"></a>Delta modulation (DM)</h3><p>增量调制</p><p>Provides a staircase version of the message signal by referring to the difference between the input signal and its approximation</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010223118773.png" alt="image-20221010223118773" style="zoom:50%;"><p>正Δ对应1，负Δ对应0</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010223312237.png" alt="image-20221010223312237" style="zoom:50%;"><p>reciver 收到编码后，1则代表增加一个步长，0代表减少一个步长</p><h5 id="DM-quantisation-error"><a href="#DM-quantisation-error" class="headerlink" title="DM quantisation error"></a>DM quantisation error</h5><p>Slope overload distortion  斜率过载失真 输入变化太快</p><p>Granular noise 粒状噪声 输入变化太慢</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010223615506.png" alt="image-20221010223615506" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010223932513.png" alt="image-20221010223932513" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010223950967.png" alt="image-20221010223950967" style="zoom:50%;"><h3 id="信源-source"><a href="#信源-source" class="headerlink" title="信源  source"></a>信源  source</h3><p>信源编码的目的：Used to compress the source so that it uses less resources in transmission – use Information Theory to do this</p><h5 id="Memoryless-source"><a href="#Memoryless-source" class="headerlink" title="Memoryless source"></a><strong>Memoryless source</strong></h5><p>Probability of an event occurring does not depend on what came before.</p><p>如果一个离散信源输 出的码元是统计独立的 ，则称该离散信源是无记忆性的(memoryless)。这 </p><p>意味着如果同一时刻输出两个<strong>码元</strong> ，则它们的联合概率密度可以由各自的概率简单相乘得到</p><p>Probability of a particular <strong>symbol</strong> is fixed</p><p>Sum of probabilities is 1</p><h5 id="Source-with-memory"><a href="#Source-with-memory" class="headerlink" title="Source with memory"></a>Source with memory</h5><p>Probability of a symbol depends on previous symbol</p><p>如果一个离散信源各个分量之间是相关的，则称该离散信源是记忆性的。码元之间的相关性意 味着在一个M码元序列中，当已知前 M-1 个码元时，第M 个码元的不确定性就减少了</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010225225793.png" alt="image-20221010225225793"></p><p>Lots of real sources in this category and coding like JPEG and MPEG exploits this to produce smaller file sizes</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010225919726.png" alt="image-20221010225919726" style="zoom:50%;"><p>P(A;B)=P(AB)</p><h4 id="Information-theory"><a href="#Information-theory" class="headerlink" title="Information theory"></a>Information theory</h4><ul><li><p>Information in communication.</p><p>   – Signals: carry the information, a physical concept.</p></li></ul><p>​         – Symbols(信元): describe the information by mathematics</p><ul><li><p>Measure of information is a measure of uncertainty - more certain data contains less information.</p></li><li><p>定义信息量（information）I:</p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010230813852.png" alt="image-20221010230813852" style="zoom:50%;"><p>​       take logs to base 2 to get the units in bits.</p><p>​     信息量和码元出现概率成反比概率：</p><p>​           P=0       I=∞</p><p>​           P=1       I=0</p><ul><li><p>Entropy(信源墒):  the <em>average information content</em> <em>per symbol</em></p><p>每个符号所含信息的统计平均值</p><p>单位是 bit/symbol</p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010231007188.png" alt="image-20221010231007188" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010231051333.png" alt="image-20221010231051333" style="zoom:80%;"><h5 id="example"><a href="#example" class="headerlink" title="example:"></a>example:</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010231145696.png" alt="image-20221010231145696" style="zoom:67%;"><p>Maximum Entropy: This occurs when all events have the same probability.</p><p>当每个码元<strong>等概率</strong>出现时，信源具有最大信息量，最大平均信息量（熵）为<strong>比特数</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010231240896.png" alt="image-20221010231240896" style="zoom:50%;"><p><strong>在example中需要传四个symbol，所以需要的比特数为2，也就是说 Maximum entropy= 2bits/symbol。</strong></p><p>求得code efficiency=1.785/2=0.875 (87.5%)【因为要用2bit（通过编码长度<strong>加权平均</strong>算出来），但是每个比特传达信息的效率没有达到最高，所以需要coding】</p><h4 id="Source-coding："><a href="#Source-coding：" class="headerlink" title="Source coding："></a><strong>Source coding</strong>：</h4><p><strong>Aims to reduce the number of bits transmitted</strong></p><p>再看一个例子：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010231615948.png" alt="image-20221010231615948" style="zoom:50%;"><p>H=1.75 bit/symbol</p><p>还是ABCD四个symbol，但是对于这四个probability 编码不再只使用两个bit，而是按上述方式编码</p><p>这样做的好处是，使平均bit位数减少，从而提高code efficiency</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010232206065.png" alt="image-20221010232206065" style="zoom:50%;"><h5 id="编码方式：Huffman-coding"><a href="#编码方式：Huffman-coding" class="headerlink" title="编码方式：Huffman coding"></a>编码方式：Huffman coding</h5><p>Put symbols in DESCENDING order of probability</p><p>Combine the lowest 2 and re-order</p><p>Repeat until only one value of “1”</p><p><strong>Compression ratio</strong>= no source coding bits / average number of bits transmitted</p><p><strong>Efficiency</strong>=H / average code length</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2F86f7863b5ff6011822310bc96d4be12.jpg" alt="86f7863b5ff6011822310bc96d4be12"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010233630865.png" alt="image-20221010233630865" style="zoom:67%;"><h3 id="DIGITAL-CHANNELS"><a href="#DIGITAL-CHANNELS" class="headerlink" title="DIGITAL CHANNELS"></a><strong>DIGITAL CHANNELS</strong></h3><p>The digital channel is a mathematical abstraction. It describes the relationship between the sequence of symbols that leaves the digital channel encoder and the one that reaches the digital channel decoder.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010234029824.png" alt="image-20221010234029824" style="zoom:47%;"><p> digital channel is an abstraction encompassing: (1) the modulator at the transmitter, (2) the physical medium and the (3) demodulator at the receiver.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010234122555.png" alt="image-20221010234122555" style="zoom:50%;"><p>Hence, the modulator, the physical medium and the demodulator <strong>determine the relationship between the input symbol sequence x and the output symbol sequence y.</strong></p><p>然而Y是不等于X的 因为会出现</p><ul><li><p>Attenuation</p></li><li><p>Noise</p></li><li><p>Bandwidth limitations.</p></li><li><p>Multipath propagation</p></li></ul><h5 id="Mathematical-definition-of-a-digital-channel"><a href="#Mathematical-definition-of-a-digital-channel" class="headerlink" title="Mathematical definition of a digital channel"></a>Mathematical definition of a digital channel</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221011001654792.png" alt="image-20221011001654792" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221011002118106.png" alt="image-20221011002118106" style="zoom:50%;"><p>H(X) / H(Y) :the information content of each source</p><p> <em>H</em>(<em>X, Y</em> ): the information content of both sources.</p><p>H(X|Y) H(Y|X) :  the new information provided by one source if the other source is known.</p><p>I(X；Y) : 互信息</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221011002253193.png" alt="image-20221011002253193" style="zoom:50%;"><p>0 ≤ <em>I</em>(<em>X</em>; <em>Y</em> ) ≤ min(<em>H</em>(<em>X</em>)<em>, H</em>(<em>Y</em> ))</p><h4 id="digital-memoryless-channel"><a href="#digital-memoryless-channel" class="headerlink" title="digital memoryless channel"></a>digital memoryless channel</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010234224127.png" alt="image-20221010234224127" style="zoom:67%;"><p>A digital channel will be defined by a probabilistic relationship between the output and input sequence, namely the probability of observing y when we use x as the input, p(ylx)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010234428428.png" alt="image-20221010234428428" style="zoom:50%;"><p>memoryless channels输出只取决于输入</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010234521702.png" alt="image-20221010234521702" style="zoom:47%;"><h5 id="binary-symmetric-channel："><a href="#binary-symmetric-channel：" class="headerlink" title="binary symmetric channel："></a>binary symmetric channel：</h5><p>The binary symmetric channel is a special case of memoryless channelfor which the input and output alphabet are binary <em>X</em> = 0*,* 1 and <em>Y</em> = 0*,* 1and the symbol conditional probabilities are defined as:</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010234814277.png" alt="image-20221010234814277" style="zoom:50%;"><p>The value <em>ɛ</em> is known as the <strong>crossover probability</strong>. Note that <em>p</em>(1|0) + <em>p</em>(0|0) = 1 and <em>p</em>(1|1) + <em>p</em>(0|1) = 1.</p><h4 id="Additive-white-gaussian-noise-AWGN-channel"><a href="#Additive-white-gaussian-noise-AWGN-channel" class="headerlink" title="Additive white gaussian noise (AWGN) channel"></a>Additive white gaussian noise (AWGN) channel</h4><p>Binary PAM is the simplest digital modulation method. Symbol 1 is converted into a pulse waveform <em>S</em>1(<em>t</em>) of amplitude <em>A</em>, whereas symbol 0 is converted into a pulse waveform <em>S</em>2(<em>t</em>) of amplitude −<em>A</em></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010235247141.png" alt="image-20221010235247141"></p><p>利用模拟信号当作载波传递数字信号：A-&gt;1;-A-&gt;0</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010235335461.png" alt="image-20221010235335461" style="zoom:70%;"><p> output <em>r</em>(<em>t</em>) can be expressed as the message signal at input <em>sm</em>(<em>t</em>) plus white gaussian noise, <em>n</em>(<em>t</em>)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010235422444.png" alt="image-20221010235422444"></p><p>r(t)不是y(t),y是r(t)经过demodulate后的信号</p><p>The binary PAM demodulator consists of three steps, namely a matched filter, a sampler and a detector.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010235832012.png" alt="image-20221010235832012" style="zoom:67%;"><p>匹配滤波器将输入波形与预期波形进行比较。采样器提供了接收波形与预期波形相似程度的数值。基于这个值，检测器将决定是接收到符号1还是符号0。</p><p>一个问题：这个检测器的判断标准是什么？难道大于0就应该1；小于0就应该是0吗</p><p>​        </p><p>看这张图:在传播过程中以矩形波为载体，到达demodulation端后，由于信号的损失可能信号已经变为红线这样，在对其进行采样＋量化 ，所以量化标准是什么？是否是上个问题那样</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fdb9607a8456c2c0a5e18e49b205a496.jpg" alt="db9607a8456c2c0a5e18e49b205a496" style="zoom:67%;"><p>回答：根据统计这样有一定错误概率</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221017231343945.png" alt="image-20221017231343945" style="zoom:50%;"><p>这个图是r(t)的概率分步曲线可以看到在r&lt;0的部分仍有可能将y判断成1.</p><p>所以判断错误的概率是</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221017231527642.png" alt="image-20221017231527642" style="zoom:67%;"><h3 id="Channel-capacity"><a href="#Channel-capacity" class="headerlink" title="Channel capacity"></a>Channel capacity</h3><p>The main objective when transmitting information over a channel is <strong>reliability</strong>, which is measured by the probability of correct reception at the receiver.</p><p>Information theory tells us that this probability can be increased as much as we want as long as the transmission rate is less than the **channel ** capacity.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221017233316117.png" alt="image-20221017233316117" style="zoom:67%;"><p>The channel capacity imposes（施加） a <strong>theoretical limit</strong> on the transmission speed. Hence, <strong>the probability of error affects the speed of the</strong> <strong>communication</strong></p><p>信道容量在传输速率上施加了一个限制，这个限制就是channel capacity（是与错误率有关的）</p><p>首先是一个例子：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221017233918194.png" alt="image-20221017233918194" style="zoom:50%;"><p>现在有一个四输入四输出的离散信道，如果发送方发送a有几率会在发送过程中变成b, 同理如果接收方收到b它也无法判断这个b是否是真实的b传输而来（或者是a发生了错误）。这就是我们说的不确定性，也就是说不能进行可靠的信息传递。</p><p>为了进行可靠的信息传递，我们必须牺牲掉一部分输入(只用字符a c通信 则接收方收到a/b都可以认为源信息是a)这就消除了不确定度。值得注意的是我们选择传输symbol的时候要确定他们对应的输出是不为相交的，这样才不会产生信息的不确定性。<strong>Using only those inputs whose corresponding possible outputs are disjoint, and thus do not cause ambiguity</strong></p><h4 id="Channel-capacity-of-Binary-Symmetric-Channels"><a href="#Channel-capacity-of-Binary-Symmetric-Channels" class="headerlink" title="Channel capacity of Binary Symmetric Channels"></a>Channel capacity of Binary Symmetric Channels</h4><p>Let us consider a memoryless binary digital channel with input sequence <strong>x</strong>= [<em>x</em>1*, x<em>2</em>, . . . , xN* ] and output sequence <strong>y</strong> = [<em>y</em>1*, y<em>2</em>, . . . , yN* ]. Let <em>ɛ</em> be the crossover (error) probability.</p><p>这里x1,x2是symbol（相当于上图中abcd）</p><p>For <em>N</em> large enough, we will expect <em>N</em> × <em>ɛ</em> errors in the output sequence <strong>y</strong>. 当N足够大时，我们预计输出序列中会有<em>N</em> × <em>ɛ</em>个错误</p><p>Using Stirling’s approximation for factorials, the number of possible output sequences <strong>y</strong> that disagree with <strong>x</strong> in <em>N</em> × <em>ɛ</em> positions is</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018000505003.png" alt="image-20221018000505003" style="zoom:33%;"><p>where <em>Hb</em> (<em>ɛ</em>) = −<em>ɛ</em>log <em>ɛ</em>− (1 − <em>ɛ</em>) log(1 − <em>ɛ</em>).</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018000709777.png" alt="image-20221018000709777" style="zoom:50%;"><p>This means that for every input sequence <strong>x</strong> of length <em>N</em> there will be approximately <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018001147257.png" alt="image-20221018001147257" style="zoom:33%;"> different</p><p>output sequences <strong>y</strong> of length <em>N</em>  N个X对应<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018001147257.png" alt="image-20221018001147257" style="zoom:33%;">个y</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018001433306.png" alt="image-20221018001433306" style="zoom:50%;"><p>x（一个sequence）可以映射到y中多个字符（类比于开始时那个例子里a对应到y处的a和b）</p><p>所以说一个小圈里的sequence数目是<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018001702199.png" alt="image-20221018001702199" style="zoom:63%;">有趣的是H(<em>ɛ</em>)是由信道自身属性决定，所以每个圈里sequence个数是一样的</p><p>一个大圈里的sequence数目是<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018001811588.png" alt="image-20221018001811588" style="zoom:67%;"></p><p>Hence, the <strong>maximum number of input sequences</strong> that produce almost non-overlapping output sequences is at most equal to</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018001901522.png" alt="image-20221018001901522" style="zoom:50%;"><p>（N是Y的数目，M是可以使用的X数目（N减去舍弃的X的值））</p><p>Then, in theory, <strong>if we choose wisely</strong> <em>M</em> **different input sequences **we can always identify them without error by looking at the output sequence.</p><p>If we restrict ourselves to <em>M</em> different binary input sequences of length <em>N</em> , the transmission rate <em>R</em> will be:</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018003355443.png" alt="image-20221018003355443" style="zoom:50%;"><p>How can we increase the transmission rate? Either by reducing <em>Hb</em> (<em>ɛ</em>)or by increasing <em>H</em>(<em>Y</em> ):</p><p> The quantity <em>Hb</em> (<em>ɛ</em>) cannot be controlled, since it is a property ofthe channel.</p><p> The entropy <em>H</em>(<em>Y</em>) can however be maximized by wisely choosing p*(*x).</p><p>P(x)等于0.5时<em>H</em>(<em>Y</em>) max=1(  H(y)max=所用比特数，因为这里binary symmetric channel所以只有两个状态且是等概率，信源熵达到最大1)</p><p>binary symmetric <strong>channel capacity</strong>： The resulting maximum transmission rate <em>C</em> will be: <em>C</em> = 1 − <em>Hb</em> (<em>ɛ</em>) bits/transmission</p><p>最大传输速率与<em>ɛ</em>的关系</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018004320418.png" alt="image-20221018004320418" style="zoom:50%;"><p>显然只是二进制熵函数颠倒： 0和1不确定性最小所以说明容量最大，0.5时不确定性最大，容量也最小</p><h4 id="The-Noisy-Channel-Coding-Theorem"><a href="#The-Noisy-Channel-Coding-Theorem" class="headerlink" title="The Noisy Channel Coding Theorem"></a>The Noisy Channel Coding Theorem</h4><p>互信息是y已知情况下x减少的不确定性，所以如果可以选择p(x)使x不确定性减少到最大，此时信息传输最多，传输率为C</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024091129347.png" alt="image-20221024091129347" style="zoom:50%;"><p>max下面的P(x)意思是当取到最合适概率时，是信道容量</p><p>可以理解成A-B在某信道上通信，A给B的传达的信息量在信道收受干扰会丢失，丢失之后，B最终得到的每个信号上的有效信息，是互信息量（bit/symbol），最大化互信息量可以达到信道容量，即传送信息的最大能力，如果高于这个值去传输信息，会产生大量错误。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024091811216.png" alt="image-20221024091811216"></p><p>If the transmission rate <em>R</em> is less than the channel capacity <em>C</em>, therewill exist a code that will result in an error probability as small as desired. If <em>R</em> &gt; <em>C</em>, the error probability will be bounded away from 0.</p><h3 id="CAPACITY-OF-AWGN-CHANNEL"><a href="#CAPACITY-OF-AWGN-CHANNEL" class="headerlink" title="CAPACITY OF AWGN CHANNEL"></a><strong>CAPACITY OF AWGN CHANNEL</strong></h3><p>additive white gaussian noise</p><h4 id="Shannon’s-formula"><a href="#Shannon’s-formula" class="headerlink" title="Shannon’s formula"></a>Shannon’s formula</h4><p>Only when the information rate is below the capacity of the channel,error-free transmission <strong>can</strong> be achieved</p><p>According to Shannon’s formula, the capacity of an additive white Gaussian noise channel is</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024092526670.png" alt="image-20221024092526670" style="zoom:70%;"><ul><li>SNR信噪比：信号的功率比噪声的功率</li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024150545785.png" alt="image-20221024150545785" style="zoom:80%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024150711077.png" alt="image-20221024150711077" style="zoom:67%;"><p>In digital systems, the speed of communication is measured by the <strong>bit</strong> <strong>transmission rate</strong> <em>RB</em> (number of bits per second) or, in general, by the <strong>symbol transmission rate</strong> <em>RS</em>(number of symbols per second)</p><p><strong>the maximum symbol transmission rate is</strong> 2<em>W</em> <strong>symbol/s</strong></p><p>所以也可以使用这种形式表示：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024151521577.png" alt="image-20221024151521577" style="zoom:80%;"><p>Consequently, we can measure the channel’s capacity both in bits/sec and bits/symbol</p><p>从公式看，C与W和SNR有关，下文介绍这两个参数对C的影响</p><h4 id="Signal-to-noise-ratio（SNR）"><a href="#Signal-to-noise-ratio（SNR）" class="headerlink" title="Signal to noise ratio（SNR）"></a>Signal to noise ratio（SNR）</h4><p>信噪比</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024152104297.png" alt="image-20221024152104297" style="zoom:60%;"> is the average energy that we use to transmit one bit</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024152136274.png" alt="image-20221024152136274" style="zoom:67%;">is the duration of one bit</p><p>Rb是bit/s</p><p>信号功率可以表示为：<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024152236748.png" alt="image-20221024152236748" style="zoom:67%;"> 每秒每传输一比特的功率</p><p>所以信噪比可以表示为：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024152210266.png" alt="image-20221024152210266" style="zoom:67%;"><ul><li><p>η<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024152552700.png" alt="image-20221024152552700" style="zoom:60%;"> 是  spectral efficiency 带宽利用率</p><p><em>η</em> is used to measure how efficiently the available bandwidth is used. It is defined as</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024171119842.png" alt="image-20221024171119842" style="zoom:50%;"></li></ul><p>and Shannon’s formula as</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024152454807.png" alt="image-20221024152454807" style="zoom:80%;"><h4 id="Bandwidth-effects"><a href="#Bandwidth-effects" class="headerlink" title="Bandwidth effects"></a>Bandwidth effects</h4><p>With higher bandwidths the transmission rate can be increased. However, higher bandwidths also imply higher noise power. The following limit can be derived:</p><p>增加带宽，可以使信道每秒传输更多的抽样信号，增大了传输速率，但从另一方面来说，也会增大噪声的功率，当W趋于无穷大时，信道容量为：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024153243025.png" alt="image-20221024153243025" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024153256197.png" alt="image-20221024153256197"></p><p>所以仅仅通过增加信号带宽不能将信道容量增大到任意值</p><p><strong>SNR effects</strong>·</p><p>By increasing the signal to noise ratio (SNR) the maximum information rate for reliable communications increases.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024153623050.png" alt="image-20221024153623050"></p><p>（Shannon formula 两边同除w）</p><p>图中r与η相同：为spectral efficiency（带宽利用率）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024154700465.png" alt="image-20221024154700465" style="zoom:50%;">是每bit信噪比</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221024153851786.png" alt="image-20221024153851786"></p><p>这里两个参数分别为，纵轴：频谱比特速率，横轴：每比特信噪比。分别衡量带宽效率和功率效率。</p><h3 id="CHANNEL-CODING"><a href="#CHANNEL-CODING" class="headerlink" title="CHANNEL CODING"></a><strong>CHANNEL CODING</strong></h3><p>Coding is a process that produces a sequence of symbols from another sequence of symbols.</p><ul><li><p>In <strong>source coding</strong>, given a sequence of symbols we produce a new,shorter sequence that contains the same information. Hence,<strong>eliminate redundancy</strong></p></li><li><p>信源编码的目的：信源输出符号序列变换为最短的码字序列，使后者的各码元所载荷的平均信息量最大</p></li><li><p><strong>channel coding</strong> our aim is to protect informationagainst errors and for that we <strong>introduce redundancy</strong>, producinglonger sequences of symbols.</p></li><li><p>信道编码的目的：就是在发送端对原数据添加冗余信息，这些冗余信息是和原数据相关的，再在接收端根据这种相关性来检测和纠正传输过程产生的差错。（冗余是可靠的代价，我认为可以理解成前面信道建模时候把M个x编到N个）</p></li></ul><p>在信源编码中减少不必要的redundancy，在信道编码时我们又加入合适的redundancy.</p><h4 id="Coding-rate"><a href="#Coding-rate" class="headerlink" title="Coding rate"></a>Coding rate</h4><p>Let <em>k</em> be the length of the original binary sequence and <em>n</em>the length of the sequence after coding. Hence, we are introducing <em>m</em> = <em>n</em> − <em>k</em> redundancy bits</p><p>k个信息位，n-k个冗余（校验位），根据某种数学关系构成长为n的码字，码率为k/n</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025003127021.png" alt="image-20221025003127021" style="zoom:70%;"><p>2的n次种序列中只有2的k次是有效的码，如果收到不是这2的k次中的组合，则意味出现错误</p><h5 id="Effects-of-coding-on-the-bandwidth-and-the-bit-rate"><a href="#Effects-of-coding-on-the-bandwidth-and-the-bit-rate" class="headerlink" title="Effects of coding on the bandwidth and the bit rate"></a>Effects of coding on the bandwidth and the bit rate</h5><p>信道编码对带宽的影响：<em>RC</em> = <em>k</em>/<em>n</em></p><p>如果bandwidth是固定的，那么n the information rate will decrease by <em>RC</em> </p><p>如果信息传输率是固定的， the transmission rate will increase by 1/<em>RC</em> and so will the necessary bandwidth</p><h5 id="Error-detection-and-correction"><a href="#Error-detection-and-correction" class="headerlink" title="Error detection and correction"></a>Error detection and correction</h5><p>两种纠错方式：</p><ol><li><p>FEC：<strong>Forward error correction</strong>：protects our messageagainst up to <em>NC</em> errors. </p><p>错误数小于Nc的情况下接收方自动纠错（比如说0编码为000错误为001，接收方认为001也是0意思）</p></li><li><p><strong>Automatic repeat request</strong>(ARQ) consists of asking the sender to retransmit the message</p></li></ol><p>For the same code rate <em>RC</em> , <em>ND</em> &gt; <em>NC</em></p><h5 id="Types-of-channel-codes"><a href="#Types-of-channel-codes" class="headerlink" title="Types of channel codes"></a>Types of channel codes</h5><p><strong>Block codes</strong>. In a block code, an information sequence isbroken into blocks of length <em>k</em> and each block is mapped intochannel inputs of length <em>n</em>. Each block is independent fromany other block</p><p><strong>Convolutional codes</strong>. In a convolutional code, <em>k</em> bits of theinformation sequence enter a <em>k</em> × <em>L</em> shift registry. The bits are linearly combined to produce <em>n</em> bits. Hence, each <em>n</em>-bitoutput depends on the previos <em>k</em> × (<em>L</em> − 1) bits. In other words, convolutional codes have memory</p><h4 id="linear-block-codes"><a href="#linear-block-codes" class="headerlink" title="linear block codes"></a>linear block codes</h4><p>An (<em>n, k</em>) block code <em>C</em> = {<strong>c</strong>1*,* <strong>c</strong>2 <em>. . . ,</em> <strong>c</strong>M} is defined by a collection of <em>M</em> = 2^<em>k</em> binary sequences of length <em>n</em> called <em>code words</em>. Instead of sending the original block of <em>k</em> bits, we send a code word.</p><p><em>code words</em>:编码后的信号</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025004654922.png" alt="image-20221025004654922" style="zoom:67%;"><p><strong>Definition</strong>: A block code is said to be <strong>linear</strong> if any linear combination of code words is also a code word.</p><p>linear combinations are defined as the component-wise modulo 2addition (i.e. 0+0=0, 1+1=0, 1+0=1, 0+1=1)</p><p><strong>zero sequence 0 is always a code word of any linear block code</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025004842897.png" alt="image-20221025004842897" style="zoom:67%;"><p>可见这四组为线性编码</p><h5 id="Hamming-distance-and-Hamming-weight"><a href="#Hamming-distance-and-Hamming-weight" class="headerlink" title="Hamming distance and Hamming weight"></a>Hamming distance and Hamming weight</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025004954168.png" alt="image-20221025004954168" style="zoom:80%;"><p>hamming距离：两个码之间不同的位数</p><p>hamming权重：码中1的个数</p><p>对于线性分组码，除去全0.最小hamming距离为最小码重</p><p>In the previous example, the Hamming distance between code words01111 and 10100 is <em>d</em>(01111*,* 10100) = 4. However, the minimum distance of the code is <em>dmin</em> = 2.</p><h5 id="Hamming-distance"><a href="#Hamming-distance" class="headerlink" title="Hamming distance"></a>Hamming distance</h5><p>Given an output sequence y, we can obtain the distance between this sequence and all of the code words <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025005348957.png" alt="image-20221025005348957" style="zoom:50%;"></p><p>hamming 距离与纠错的关系：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025005541195.png" alt="image-20221025005541195" style="zoom:67%;"><h4 id="Generator-matrix"><a href="#Generator-matrix" class="headerlink" title="Generator matrix"></a>Generator matrix</h4><p>any information sequence <strong>x</strong> can be mapped into its code word <strong>c</strong> by multiplying it by the generator matrix <strong>G</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025010300182.png" alt="image-20221025010300182"></p><p>编码过程： <strong>c</strong> = <strong>xG</strong>.</p><p>It is easy to see that the code word for the sequence10 <em>. . .</em> 0 is <strong>g</strong>1, for 010 <em>. . .</em> 0 is <strong>g</strong>2 and so on，所以信息源为10000…的码字就是纵向的g1,01000…码字是g2</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025010004824.png" alt="image-20221025010004824" style="zoom:50%;"><h5 id="Systematic-codes（系统码）"><a href="#Systematic-codes（系统码）" class="headerlink" title="Systematic codes（系统码）"></a>Systematic codes（系统码）</h5><p>前k位为信息位，后n-k校验位</p><p>In a systematic code, the code word consists of the information sequence followed by a sequence of <em>m</em> = <em>n</em> − <em>k</em> bits, known as the <strong>parity bits</strong>.</p><p>所以可以得到 the generator matrix has the form</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025090504216.png" alt="image-20221025090504216" style="zoom:67%;"><p>用x×g可以保证前k位还是原始信息bit</p><h4 id="Parity-check-matrix"><a href="#Parity-check-matrix" class="headerlink" title="Parity check matrix"></a>Parity check matrix</h4><p>校验矩阵</p><p>The parity check matrix <strong>H</strong> allows us to check whether a code word belongs to our code or not. It has the property that</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025091541306.png" alt="image-20221025091541306"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025092013513.png" alt="image-20221025092013513" style="zoom:30%;"><p>If the code is systematic, the parity check matrix can be obtained as</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025091823474.png" alt="image-20221025091823474" style="zoom:67%;"><ul><li>example:</li></ul><p>P的转置是H的左半部分</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025092200330.png" alt="image-20221025092200330" style="zoom:67%;"><h4 id="Principles-of-block-decoding"><a href="#Principles-of-block-decoding" class="headerlink" title="Principles of block decoding"></a>Principles of block decoding</h4><p>译码过程：<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025091733010.png" alt="image-20221025091733010" style="zoom:70%;"></p><p>During decoding we essentially **compare each received sequence with <em>all the code words</em>  defining the code and then **choose the most similar code word.</p><p>如何定义相似性？接收端如何能认为一个发生错误的码字本身为某个信息源码</p><h5 id="syndrome-decoding"><a href="#syndrome-decoding" class="headerlink" title="syndrome decoding"></a><strong>syndrome decoding</strong></h5><p>校验子</p><p>Let us denote by <strong>e</strong> the error binary sequence. The output sequence y that we obtain when code word c is transmitted can be expressed as</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025092950727.png" alt="image-20221025092950727" style="zoom:70%;"><p>y是接收的码字，c是编码后的码字，e是错误图样</p><p>If there are no errors during transmission, e = 0, if there is an error in the first bit, e = (10 . . . 0), if there is an error in the first and third bite= (1010 . . . 0), and so on.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025093139118.png" alt="image-20221025093139118" style="zoom:67%;"><blockquote><p>Notice that the result of this operation <strong>depends on the error</strong> <strong>sequence e and not on the code word c that we have transmitted</strong>(因为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025093405378.png" alt="image-20221025093405378" style="zoom:67%;">为0)</p></blockquote><p>定义行向量<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025093436409.png" alt="image-20221025093436409" style="zoom:67%;">为syndrome</p><p>s is a <strong>1 × m</strong> vector and there will exist<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025093613121.png" alt="image-20221025093613121" style="zoom:70%;"> different syndrome sequences <strong>s</strong>.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025093712706.png" alt="image-20221025093712706" style="zoom:67%;"><p>relate an error sequence <strong>e</strong> to one syndrome sequence <strong>s</strong>, we can determine <strong>e</strong> based on the calculation <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025093952493.png" alt="image-20221025093952493" style="zoom:67%;"></p><p><strong>c = y + e</strong></p><h5 id="译码过程"><a href="#译码过程" class="headerlink" title="译码过程"></a>译码过程</h5><p>根据以下算法列出所有可能的伴随式与错误图样的对应关系</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025094035056.png" alt="image-20221025094035056" style="zoom:67%;"><p>比如：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025131032086.png" alt="image-20221025131032086" style="zoom:67%;"><p>接收方收到y，通过校验矩阵<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025130733042.png" alt="image-20221025130733042" style="zoom:67%;">算出s再找s与错误图样的对应表（事先算好），然后可以得到e再用c=y+e得到准确的码字</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025094047615.png" alt="image-20221025094047615" style="zoom:67%;"><p>Hence, we need as many syndrome sequences <strong>s</strong> as error sequences <strong>e</strong> we want to identify.</p><p>if we want to be able to correct onesingle error in our sequence we need</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025130010521.png" alt="image-20221025130010521" style="zoom:67%;"><p>s的总数大于n＋1</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> 电信系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电信系统-2-second half</title>
      <link href="//post/%E7%94%B5%E4%BF%A1%E7%B3%BB%E7%BB%9F-2-second%20half.html"/>
      <url>//post/%E7%94%B5%E4%BF%A1%E7%B3%BB%E7%BB%9F-2-second%20half.html</url>
      
        <content type="html"><![CDATA[<h1 id="Line-Codes-and-Spectra"><a href="#Line-Codes-and-Spectra" class="headerlink" title="Line Codes and Spectra"></a>Line Codes and Spectra</h1><p>Digital Data to Signal Conversion</p><p>◆ Four stages:</p><p>– Line coding</p><p>– Block coding（option）</p><p>– Scrambling（option）</p><p>– Modulating</p><h2 id="数字信号波形的数学表达"><a href="#数字信号波形的数学表达" class="headerlink" title="数字信号波形的数学表达"></a>数字信号波形的数学表达</h2><p>The voltage (or current) waveforms for digital signals can be expressed as an orthogonal series with a finite number of terms N</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107221908484.png" alt="image-20221107221908484"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107221954015.png" alt="image-20221107221954015"></p><p>wk是数字数据，w(t)是数字信号,<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107222030049.png" alt="image-20221107222030049" style="zoom:67%;">是N个正交函数，决定了数字波形的形状</p><p>在接收端接收到信号，如何恢复成数据：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107222348021.png" alt="image-20221107222348021" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107222433882.png" alt="image-20221107222433882"></p><p>矢量表示：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107222701474.png" alt="image-20221107222701474" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107222717205.png" alt="image-20221107222717205" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107223012627.png" alt="image-20221107223012627"></p><ul><li>The symbol rate (baud,波特) is defined as:</li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107223253631.png" alt="image-20221107223253631" style="zoom:67%;"><ul><li>The bit rate is defined as:</li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107223301846.png" alt="image-20221107223301846" style="zoom:80%;"><p>The lower bound for the bandwidth of the waveform representing the digital signal can be obtained:</p><ul><li>表示数字信号的波形的带宽的下界（lower bound）</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107223507532.png" alt="image-20221107223507532" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107223521217.png" alt="image-20221107223521217"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108112413396.png" alt="image-20221108112413396"></p><p>For other pulse shapes, the bandwidth will be larger than this lower bound</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107223850242.png" alt="image-20221107223850242" style="zoom:80%;"><p>这里的p(t)没有归一化</p><p>◆ The set {<em>p</em>j (t)} is a set of orthogonal functions. </p><p>◆ The function p(t) is the pulse shape for each bit as show in Figure (c).  p(t)是下图中的脉冲波形</p><p>◆ Using the orthogonal function approach, we can represent the waveform s(t) as exact linear combinations of 𝜑𝑗(𝑡) by 可以用𝜑𝑗(𝑡)的线性组合表示s(t)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108101514417.png" alt="image-20221108101514417" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108101524213.png" alt="image-20221108101524213"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108101712454.png" alt="image-20221108101712454"></p><p>这里的𝜑𝑗(𝑡)是归一化的标准正交基</p><p>其中标准正交级数的系数为：<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108102752300.png" alt="image-20221108102752300" style="zoom:67%;"></p><p>将这个系数在以𝜑1，𝜑2，𝜑3为基的坐标系中画出</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108102954524.png" alt="image-20221108102954524"></p><p>Note that for this N=3 – dimensional case with binary signalling, only 2^3=8 different waveforms could be represented (<em>M</em>=8).  三个基只能有八种可能的信号</p><p>Each waveform corresponds to a vector that terminates on a vertex of a cube.每一种对应一个顶点</p><h2 id="Line-coding"><a href="#Line-coding" class="headerlink" title="Line coding"></a>Line coding</h2><p>Line coding is the process of converting digital data to digital signals at the TX (Transmitter)</p><p>把数字信息转换成适合传输的数字脉冲信号</p><p>At the RX (Receiver), the digital data are recreated by decoding the digital signal.</p><p>通过解码数字信号重新⽣成数字数据</p><p>目的：<strong>To make the regeneration of the original signal more reliable</strong></p><p>为什么不能采用简单的两个电平的波形（Binary Transmission）作为载波</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114153620454.png" alt="image-20221114153620454" style="zoom:67%;"><p>因为在传输过程中我们需要考虑两个问题：</p><ul><li>随机码流中可能出现长串1或0，没有边沿存在，造成位同步信息丢失，给定时提取（ timing recovery）造成困难</li><li>由于0和1 数量不同，直流分量会随机波动，造成基线漂移，Need zero (or constant) DC level as communications paths do not usually pass DC</li><li>此外因为考虑传输效率通常还需要考虑带宽</li></ul><p>所以我们要选择不同的line code来使传输更可靠</p><h3 id="Direct-current-Component-DC"><a href="#Direct-current-Component-DC" class="headerlink" title="Direct-current Component (DC)"></a>Direct-current Component (DC)</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107215647706.png" alt="image-20221107215647706" style="zoom:67%;"><p>Receivers usually use the mean value of the signal as a reference/baseline to distinguish between 1’s and 0’s</p><p>接收端通常使⽤信号的平均值 (mean value)作为参考/基线 (reference/baseline)，来区分0信号和1信号</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107220329073.png" alt="image-20221107220329073" style="zoom:67%;"><p>A long string of 0’s or 1’s can cause a drift in the baseline/reference</p><p>一长串的1或者0会使基准线偏离中心</p><ul><li><p><strong>DC– affects the reliability in reproducing the original signal.</strong></p></li><li><p><strong>Frequency just about zero and can not pass through LPF</strong> 频率几乎为0，不能通过低通滤波器</p></li></ul><h3 id="Timing-and-synchronisation"><a href="#Timing-and-synchronisation" class="headerlink" title="Timing and synchronisation"></a>Timing and synchronisation</h3><p>Timing of the incoming signal controls the reading rate.</p><p>输⼊信号的时间控制读取速率（reading rate）</p><p>It keeps the receiver synchronised with the transmitter（extracted from the pulse pattern.）</p><p>这让接收端和发射端保持同步（发送端发送一个脉冲接收方接收一个），从脉冲图中提取</p><p>A long sequences without a pulse edge makes timing very hard to maintain</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107220946311.png" alt="image-20221107220946311" style="zoom:50%;"><p>没有脉冲边缘，很难计时</p><h3 id="Line-Coding-Characteristics"><a href="#Line-Coding-Characteristics" class="headerlink" title="Line Coding Characteristics"></a>Line Coding Characteristics</h3><p>Baseband channels do not include any frequency translation, have increasing attenuation with frequency and often block DC基带通道（baseband channels）不包括任何频率转换（frequency translation），其衰减随频率增加，经常阻塞直流（block DC）</p><p>– has a high timing content (transitions) irrespective of data to be transmitted.</p><p>– has a zero (or constant) DC level.</p><p>– must be uniquely decodable.</p><p>– must be transparent to input signal.</p><p>– must minimise the bandwidth required for transmission.</p><h3 id="Line-coding-schemes"><a href="#Line-coding-schemes" class="headerlink" title="Line coding schemes"></a>Line coding schemes</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113195135581.png" alt="image-20221113195135581" style="zoom:67%;"><h4 id="几种常用线路码"><a href="#几种常用线路码" class="headerlink" title="几种常用线路码"></a>几种常用线路码</h4><p>◆ Unipolar</p><p>– All signal levels are organised on one side of the time axis.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113195320528.png" alt="image-20221113195320528" style="zoom:80%;"><p>◆ Polar</p><p>– The signal voltage levels are organised on the both sides of the time axis.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113195334243.png" alt="image-20221113195334243" style="zoom:80%;"><p>◆ Bipolar</p><p>– Uses three levels: positive, zero and negative. The voltage level for one data element is at zero while other element alternates between positive and negative</p><p>必须正负交替</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113195401490.png" alt="image-20221113195401490" style="zoom:80%;"><p>◆<strong>Manchester</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113200901962.png" alt="image-20221113200901962" style="zoom:80%;"><p><strong>Return-to-zero (RZ), and no return-to-zero (NRZ)</strong> </p><p>RZ：通常半个比特周期回一次0</p><p>归零码和非归零码</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113200115215.png" alt="image-20221113200115215"></p><h4 id="advantages-and-disadvantages"><a href="#advantages-and-disadvantages" class="headerlink" title="advantages and disadvantages"></a>advantages and disadvantages</h4><ul><li><p>The <strong>unipolar NRZ</strong> line code has the advantage of using circuits that required <strong>only one</strong> power supply可以使用单个电源, e.g. a signal 5V power supply for the circuit, </p><p>but it has the disadvantage of requiring channels that are DC coupled因为波形有明显的<strong>直流分量</strong>，所以需要具有直流耦合能力的信道（在f=0处有很好频率响应）来传输, e.g. with frequency response down to f=0, because the waveform has a nonzero DC value.</p></li><li><p>The <strong>polar NRZ</strong> line code does not required a DC-control channel, provided that the data toggles between binary 1’s and 0’s often and that equal numbers of binary 1’s and 0’s are sent.如果0 和 1数目一样，无需具有直流耦合的信道</p><p> However, the circuitry that produces the polar NRZ signal requires a negative voltage power supply as well as a positive voltage power supply. 需要正负电压电源</p></li><li><p>The <strong>Manchester NRZ</strong> line code has the advantage of always having a 0-DC value, regardless of the data sequence, 直流分量永远为0（0 1数目必定一样）</p><p>but it has twice the bandwidth of the unipolar NRZ or polar NRZ code because the pulses are half the width. 因为脉冲宽度是unipolar和polar的二分之一，所以带宽是其两倍</p></li></ul><blockquote><p>其中只有unipolar一定需要直流分量</p></blockquote><h4 id="Summary-of-desirable-properties-of-a-line-code"><a href="#Summary-of-desirable-properties-of-a-line-code" class="headerlink" title="Summary of desirable properties of a line code"></a>Summary of desirable properties of a line code</h4><p><strong>Self-synchronization.</strong> </p><p>– Three is enough timing information built into the code so that bit synchronizers can be designed to extract the timing or clock signal. A long series of binary 1’s and 0’s should not cause a problem in the time recover. </p><p><strong>Low probability of bit error.</strong></p><p>– Receivers can be designed that will recover the binary data with a low probability of bit error when the input data signal is corrupted by noise or ISI. The ISI problem will be discussed later. </p><p><strong>A spectrum that is suitable for the channel</strong></p><p>– For example, if the channel is AC coupled, the PSD of the line code signal should be negligible at frequencies near zero. In addition, the signal bandwidth needs to be sufficiently small compared to the channel bandwidth, so that ISI will not a problem. </p><p><strong>Transmission bandwidth</strong></p><p>– This should be as small as possible.</p><p><strong>Error detection capability.</strong></p><p>– it should be possible to implement this feature easily by addition of channel encoders and encoders, or the feature should be incorporated into the line code.</p><p><strong>Transparency</strong></p><p>– The data protocol and line code are designed so that every possible sequence of data is fathfully and transparently received.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107221625623.png" alt="image-20221107221625623"></p><h4 id="Power-spectra-for-binary-line-codes"><a href="#Power-spectra-for-binary-line-codes" class="headerlink" title="Power spectra for binary line codes"></a>Power spectra for binary line codes</h4><p>◆ The power spectrum density (PSD) can be evaluated by using either a deterministic or a stochastic technique.</p><p>A digital signal (or line code) can be represented by </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113202308847.png" alt="image-20221113202308847" style="zoom:67%;"><p>For binary signaling, 𝑇𝑠 = 𝑇𝑏, where 𝑇𝑏 is the time that it takes to send 1 bit.</p><p>For multilevel signaling, 𝑇𝑠 = 𝑙𝑇b</p><p>The set {𝑎𝑛} is the set of random data. For example, for the unipolar NRZ line code <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113202749935.png" alt="image-20221113202749935" style="zoom: 50%;">and 𝑎𝑛 = +𝐴 V when a binary 1 is sent, and 𝑎𝑛 = 0 V when a binary 0 is sent</p><p>The general expression for the PSD of a digital signal can be expressed by<br>$$<br>P(f)=\frac{|F(f)|^2}{T_s} \sum_{k=-\infty}^{\infty} R(k) e^{j 2 \pi k f T_S}<br>$$<br> F(f) is the Fourier transform of the pulse shape（波形） f(t)</p><p>R(k) is the autocorrelation（自相关系数） of the data<br>$$<br>\mathrm{R}(k)=\sum_{i=1}^l\left(a_n a_{n+k}\right)_i P_i<br>$$<br><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113203151038.png" alt="image-20221113203151038" style="zoom:80%;"></p><p>Note that equation shows that the spectrum of the digital signal depends on two things: </p><p>– The pulse shape used</p><p>– Statistical properties of the data</p><h5 id="Unipolar-NRZ-signalling"><a href="#Unipolar-NRZ-signalling" class="headerlink" title="Unipolar NRZ signalling"></a>Unipolar NRZ signalling</h5><p>For unipolar signalling, the possible levels for the a’s are +A and 0 V</p><p>Assume that these values are equally likely to occur and that data are independent</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221120191127058.png" alt="image-20221120191127058"></p><h6 id="计算R（k）："><a href="#计算R（k）：" class="headerlink" title="计算R（k）："></a>计算R（k）：</h6><ul><li><p>k=0时 the possible products of 𝑎𝑛 × 𝑎𝑛 are 𝐴 × 𝐴 = 𝐴 2 and 0 × 0 = 0, and consequently, 𝐼 = 2 (an×an 可能值只有这两种)For random data, the probability of having <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113204445214.png" alt="image-20221113204445214" style="zoom: 67%;">is 50%, and the probability of having 0 is 50%</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113204529982.png" alt="image-20221113204529982" style="zoom:67%;"></li><li><p>For 𝑘 ≠ 0, there are I=4 possibilities for the product values: 𝐴 × 𝐴, 𝐴 ×0, 𝑎𝑛𝑑 0 × 𝐴, 0 × 0. They all occur with a probability of ¼</p></li></ul>  <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113204734346.png" style="zoom:67%;"><ul><li>Overall<br>$$<br>\mathrm{R}_{\text {unipolar }}(k)=\left{\begin{array}{ll}<br>\frac{1}{2} A^2 &amp; k=0 \<br>\frac{1}{4} A^2 &amp; k \neq 0<br>\end{array}\right}<br>$$</li></ul><h6 id="求PSD"><a href="#求PSD" class="headerlink" title="求PSD"></a>求PSD</h6><p>For rectangular NRZ pulse shape, the Fourier transform pair is</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113204943655.png" alt="image-20221113204943655" style="zoom:80%;"><p>使用上面PSD的公式：𝑇𝑠 = 𝑇𝑏, we find that the PSD for the unipolar NRZ line code is </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113205113895.png" alt="image-20221113205113895" style="zoom:80%;"><p>with a weight of ½.</p><p>有泊松和公式：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113205359240.png" alt="image-20221113205359240" style="zoom:67%;"><p>最后可得：<br>$$<br>P_{\text {unipolar } N R Z}(f)=\frac{A^2 T_b}{4}\left(\frac{\sin \pi f T_b}{\pi f T_b}\right)^2\left[1+\frac{1}{T_b} \sum_{n=-\infty}^{\infty} \delta\left(f-\frac{n}{T_b}\right)\right]<br>$$<br><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113205818491.png" alt="image-20221113205818491"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113205831391.png" style="zoom:80%;"><p>If A is selected so that the normalized average power of the unipolar NRZ signal is unity取单极性NRZ信号的归一化平均功率为单位值, then<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113210521102.png" alt="image-20221113210521102" style="zoom:80%;"></p><p>The PSD is plotted in Figure (a), where<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113210737384.png" alt="image-20221113210737384" style="zoom:67%;">, the bit rate of the line code横坐标是线路码的比特率</p><p>由于$ \lim\limits_{f \to 0}{P(f)=\frac{1}{2T_b}+\frac{1}{2}\delta(f)} $可以看到坐标轴0点处，存在冲激</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113210753169.png" alt="image-20221113210753169"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114155812984.png" alt="image-20221114155812984"></p><h5 id="Polar-NRZ-signalling"><a href="#Polar-NRZ-signalling" class="headerlink" title="Polar NRZ signalling"></a>Polar NRZ signalling</h5><p>For polar NRZ signaling, the possible levels for a’s are +A and –A V. For equally likely occurrences of +A and –A, and assuming that the data are independent of bit to bit, we get</p><p>假设信号中这两种水平电荷出现概率相同，且数据位与位之间独立</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221120191507194.png" alt="image-20221120191507194"></p><h6 id="自相关系数"><a href="#自相关系数" class="headerlink" title="自相关系数"></a>自相关系数</h6><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113212440928.png" alt="image-20221113212440928" style="zoom:67%;"><p>For 𝑘 ≠ 0</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113212725491.png" alt="image-20221113212725491" style="zoom:80%;"><p>Thus <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113212756296.png" alt="image-20221113212756296" style="zoom:80%;"></p><p>代入傅里叶变换对以及PSD公式：</p><h6 id="功率"><a href="#功率" class="headerlink" title="功率"></a>功率</h6><p>$$<br>P_{\text {polar } N R Z}(f)=A^2 T_b\left(\frac{\sin \pi f T_b}{\pi f T_b}\right)^2<br>$$</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113213051237.png" alt="image-20221113213051237"></p><p>The polar signal has the disadvantage of having a large PSD near DC</p><p>The probability of bit error performance（误比特率性能） is superior to that of other signaling methods. </p><p>0点纵轴坐标：$ \lim\limits_{f \to 0}{P(f)=T_b} $ </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113213202074.png" alt="image-20221113213202074"></p><h5 id="Unipolar-RZ-signalling"><a href="#Unipolar-RZ-signalling" class="headerlink" title="Unipolar RZ signalling"></a>Unipolar RZ signalling</h5><p>自相关系数已经在前面给出（与NRZ相同）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221120191539180.png" alt="image-20221120191539180"></p><p>For RZ signaling, the pulse duration is 𝑇𝑏/2 instead of 𝑇𝑏, as used in NRZ signaling. That is, for RZ（对应RZ来说，脉冲周期为 𝑇𝑏/2，Ts=Tb/2）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113213651545.png" alt="image-20221113213651545" style="zoom:80%;"><p>代入傅里叶变换对以及PSD公式：<br>$$<br>P_{\text {unipolar } R Z}(f)=\frac{A^2 T_b}{16}\left(\frac{\sin \pi f T_b / 2}{\pi f T_b / 2}\right)^2\left[1+\frac{1}{T_b} \sum_{n=-\infty}^{\infty} \delta\left(f-\frac{n}{T_b}\right)\right]<br>$$<br>$$<br>\lim\limits_{f \to 0}{P(f)=\frac{1}{4T_b}+\frac{1}{4}\delta(f)}<br>$$</p><p>f=R时<br>$$<br>{P(R)=\frac{1}{\pi^2 T_b}+\frac{1}{\pi^2}\delta(f-R)}<br>$$<br><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113213758272.png" alt="image-20221113213758272"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114151049589.png" alt="image-20221114151049589"></p><h5 id="Bipolar-RZ-signalling"><a href="#Bipolar-RZ-signalling" class="headerlink" title="Bipolar RZ signalling"></a>Bipolar RZ signalling</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221120191616429.png" alt="image-20221120191616429"></p><p>The permitted values for 𝑎𝑛 are +A, -A, and 0 where binary 1’s are represented by alternation +A and –A values, a binary 0 is represented by 𝑎𝑛 = 0. </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113215513168.png" alt="image-20221113215513168"></p><p>For 𝑘 = 1 （只考虑相邻比特的电平） and the data sequences 数据序列为(1,1), (1,0), (0,1) and (0,0) 𝑎𝑛 与𝑎𝑛+1乘积可能值为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113215716403.png" alt="image-20221113215716403" style="zoom:67%;">, 0, 0 and 0，每个的概率为0.25</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113220037925.png" alt="image-20221113220037925" style="zoom:80%;"><p>For 𝑘 &gt; 1, the bits being considered are not adjacent and an和an+k乘积为<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113220133981.png" alt="image-20221113220133981" style="zoom:67%;">, 0, 0 and 0</p><p>且$A^2 和-A^2$可能发生概率为0.125<br>$$<br>\mathrm{R}(k&gt;1)=\sum_{i=1}^8\left(a_n a_{n+k}\right)_i P_i=A^2 \frac{1}{8}-A^2 \frac{1}{8}=0<br>$$<br>Overall autocorrelation</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113220753174.png" alt="image-20221113220753174"></p><p>𝑇𝑠 = 𝑇𝑏/2, we find that the PSD for the bipolar RZ line code is</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113220908317.png" alt="image-20221113220908317"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113220922470.png" alt="image-20221113220922470"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114151446986.png" alt="image-20221114151446986"></p><h5 id="Manchester-NRZ-signalling"><a href="#Manchester-NRZ-signalling" class="headerlink" title="Manchester NRZ signalling"></a>Manchester NRZ signalling</h5><p>The PSD for Manchester </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113220949867.png" alt="image-20221113220949867" style="zoom:80%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113221009843.png" alt="image-20221113221009843"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221113221147302.png" alt="image-20221113221147302"></p><table><thead><tr><th>unipolar NRZ</th><th>有DC分量</th><th>R=0 有1/2冲击脉冲</th><th>带宽为R</th></tr></thead><tbody><tr><td>polar NRZ</td><td>有DC分量</td><td>无脉冲</td><td>带宽为R</td></tr><tr><td>unipolar RZ</td><td>有DC分量</td><td>R=0 R=R有脉冲</td><td>带宽为2R</td></tr><tr><td>bipolar RZ</td><td>无DC分量</td><td>无脉冲</td><td>带宽为R</td></tr><tr><td>Manchester　NRZ</td><td>无DC分量</td><td>无脉冲</td><td>带宽为2R</td></tr></tbody></table><h4 id="Power-spectra-for-multilevel-polar-NRZ-signal"><a href="#Power-spectra-for-multilevel-polar-NRZ-signal" class="headerlink" title="Power spectra for multilevel polar NRZ signal"></a>Power spectra for multilevel polar NRZ signal</h4><p>Multilevel signalling provides reduced bandwidth compared with binary signalling</p><p>𝑙 = 3-bit DAC is used, so that 𝐿 = 2＾3 = 8 levels</p><p>其NRZ的图像（区分Tb和Ts）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114161538194.png" alt="image-20221114161538194"></p><p>与之对应的w与t的图像 shows the corresponding eight-level multilevel output waveform, </p><p>where Ts is the time it takes to send on multilevel symbol</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114161735788.png" alt="image-20221114161735788"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114161847928.png" alt="image-20221114161847928"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114161855092.png" alt="image-20221114161855092"></p><p>当上表中各值等概率出现时，计算R（k）:</p><p>k=0时<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114162108148.png" alt="image-20221114162108148" style="zoom:67%;"></p><p>𝑘 ≠ 0时, 𝑅 （𝑘） = 0</p><p>可以得w2(t)的PSD为</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114162238173.png" alt="image-20221114162238173" style="zoom:67%;"><p>Where the pulse width (or symbol width) is $$T_s=3T_b$$</p><p>For the rectangular pulse shape of width $3𝑇_𝑏$, this becomes</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114195112188.png" alt="image-20221114195112188" style="zoom:67%;"><h4 id="Spectral-efficiency"><a href="#Spectral-efficiency" class="headerlink" title="Spectral efficiency"></a>Spectral efficiency</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114195505513.png" alt="image-20221114195505513" style="zoom:80%;"><p>The maximum possible spectral efficiency is limed by the channel noise if the error is to be small. It can be given by Shannon’s channel capacity formula</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114195614493.png" alt="image-20221114195614493"></p><p>The spectral efficiency for multilevel polar NRZ signalling is obtained by </p><p>substituting <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114195830311.png" alt="image-20221114195830311" style="zoom:67%;">  （0点带宽）to equation, so that </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114200108460.png" alt="image-20221114200108460" style="zoom:67%;"><p>多进制polar NRZ</p><p>各种line code的spectral efficiency</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114200217600.png" alt="image-20221114200217600"></p><h1 id="Inter-symbol-Interference-ISI"><a href="#Inter-symbol-Interference-ISI" class="headerlink" title="Inter-symbol Interference (ISI)"></a><strong>Inter-symbol Interference (ISI)</strong></h1><p>码间串扰：</p><ul><li>整个系统 （发送机 、接收机和信道 ）中有各种类型的滤波器 （以及惰性 电路元件 ，如电感和电容 ）</li></ul><p>– Filters and linear amplifiers in transmitter propagation medium</p><p>– Filters and linear amplifiers in the front end of the receiver</p><p>– Filters used in the demodulation process</p><ul><li>Electrical noise and interference produced by a variety of sources</li></ul><p>这两个原因会造成信号的码间串扰，什么是码间串扰：</p><p>由千系统的滤波作用 ，接收脉冲之间会发生交迭。脉冲出现拖尾占据了相邻码元间隔 ，从而干扰了信号检测过程 ，进而造成误差性能的降低。即便没有噪声，滤波和信道引起的失真也会导致码间串扰。</p><p>为了补偿发射机和信道引起的失真 ，接收滤波器通常是均衡滤波器 (equalizing filter):</p><p>该滤波器可以等效成一个系统其传输函数为：<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129233909726.png" alt="image-20221129233909726" style="zoom:50%;"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129233854972.png" alt="image-20221129233854972"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129233953778.png" alt="image-20221129233953778" style="zoom:67%;"><p>传输过程中，如果没有控制好速率，那么在接受下一个符号前，上一个符号还在传输，产生了重叠，这样就造成了ISI</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129235133040.png" alt="image-20221129235133040"></p><h4 id="Eye-diagram"><a href="#Eye-diagram" class="headerlink" title="Eye diagram"></a>Eye diagram</h4><p>分析工具</p><p>Use eye diagram to make an engineering judgement on the likely performance and source of degradation in a data communications link</p><p>通过眼图来反映码间串扰和噪声对系统性能的影响：“眼睛“张开的宽度表示可采样的时间范围 ，显然 ，最佳采样时刻应是 “眼睛“张开最大的时刻 ，此时受噪声干扰最小（码间串扰最小） 。</p><p>眼图的最常见用途是定性地估计码间串扰 的程度 。当 “眼睛＂闭合时 ，码间串扰增加 ；“眼睛＂睁开时 ，码间串扰减少 。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129235355749.png" alt="image-20221129235355749" style="zoom:67%;"><p>图a：理想滤波器，没有噪声，filter的带宽合适，没有ISI，所以眼图张的很大，且十分端正</p><p>图b：filter的带宽不合适产生了ISI，没有噪声，所以眼图没有完全张开，且不端正</p><p>图c：filter的带宽不合适产生了ISI，且有噪声干扰，所以眼图张的更小，更不端正，且模糊不清</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130095457385.png" alt="image-20221130095457385"></p><h4 id="Regenerative-repeater-for-unipolar-NRZ-signalling"><a href="#Regenerative-repeater-for-unipolar-NRZ-signalling" class="headerlink" title="Regenerative repeater for unipolar NRZ signalling"></a>Regenerative repeater for unipolar NRZ signalling</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130003256587.png" alt="image-20221130003256587" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130095730704.png" alt="image-20221130095730704"></p><p>Synchronisation Signals</p><p>用来同步信号：类似时钟</p><p>◆ Synchronisation signals are clock-type signals that are necessary within a receiver (or repeater) for detection (or regeneration) of the data from the corrupted input signal. </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130095704411.png" alt="image-20221130095704411"></p><p>◆ 数字通信通常至少需要三种类型的同步信号：<br>    –位同步，用于区分一个bit间隔和另一个bit间隔；<br>    –帧同步，用于区分一组数据；<br>    –载波同步，用于带通信号的相干检波。</p><p>Systems are designed so that the sync is derived either directly from the corrupted signal or from a separate channel that is used only to transmit the sync information. </p><p>系统的设计使同步要么直接从损坏的信号中获得，要么从仅用于传输同步信息的单独通道中获得。</p><h3 id="减小ISI"><a href="#减小ISI" class="headerlink" title="减小ISI"></a>减小ISI</h3><p>◆ ISI can be reduced by increasing the channel bandwidth.</p><p>◆ Reshape the pulse from the transmitter to minimise the ISI</p><h4 id="Baseband-pulse-transmission-system"><a href="#Baseband-pulse-transmission-system" class="headerlink" title="Baseband pulse-transmission system"></a>Baseband pulse-transmission system</h4><p>Consider a digital signalling system as shown in Figure below, in which the <strong>flat-topped</strong> (矩形波)multilevel signal at the input is<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130100426397.png" alt="image-20221130100426397"></p><p>where<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130100853375.png" alt="image-20221130100853375" style="zoom: 50%;">  , and <strong>𝑎𝑛</strong>（系数） may take on any of the allowed L multilevel (L=2 for binary signalling). The symbol rate is 𝐷 = 1/𝑇𝑠 pulses/s.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130101643740.png" alt="image-20221130101643740"></p><p>输出信号是输入信号于系统冲激响应的卷积：其中等效冲激响应为</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130102534639.png" alt="image-20221130102534639"></p><p>h(t)是矩形波</p><p>he(t)也具有脉冲形状，当单个平顶脉冲激励发送滤波器时，接收滤波器输出就是he(t)波形</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130102926923.png" alt="image-20221130102926923"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130103000515.png" alt="image-20221130103000515"></p><p>矩形波的傅里叶变换</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130103032116.png" alt="image-20221130103032116"></p><p>◆ When $𝐻_𝑒(𝑓)$ is chosen to minimize the ISI, $𝐻_𝑅(𝑓) $, obtained from equation (3-64) is called an <strong>equalising filter</strong>. 当选择的$𝐻_𝑒(𝑓)$使ISI最小，称上式中$𝐻_𝑅(𝑓) $为均衡滤波器</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130100119400.png" alt="image-20221130100119400"></p><p>The output of the receiving filter is </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130103509767.png" alt="image-20221130103509767"></p><p>The output pulse shape is affected by </p><p>– the input pulse shape (flat-topped in this case)</p><p>– The transmitter filter</p><p>– The channel filter</p><p>– The receiving filter</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130103559722.png" alt="image-20221130103559722"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130103609089.png" style="zoom:67%;"></p><h4 id="Nyquist’s-First-Method-Zero-ISI"><a href="#Nyquist’s-First-Method-Zero-ISI" class="headerlink" title="Nyquist’s First Method (Zero ISI)"></a>Nyquist’s First Method (Zero ISI)</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130104140323.png" alt="image-20221130104140323"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130110859739.png" alt="image-20221130110859739"></p><p>Then, there will be no ISI</p><p>但是想让冲激响应成为sinc函数在工程上存在两个问题：<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130111453608.png" alt="image-20221130111453608"></p><p>所以必须退而求其次找一个好实现，且ISI小的函数：</p><h4 id="Raised-cosine-rolloff-Nyquist-filtering"><a href="#Raised-cosine-rolloff-Nyquist-filtering" class="headerlink" title="Raised cosine-rolloff Nyquist filtering"></a>Raised cosine-rolloff Nyquist filtering</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130111739595.png" alt="image-20221130111739595"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130111802817.png" style="zoom: 150%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130111932769.png" alt="image-20221130111932769"></p><p>Plots of the frequency response and impulse response for rollofffactors r=0, r=0.5 and r=1.</p><p>频域：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130112010715.png" alt="image-20221130112010715" style="zoom:67%;"><p>时域：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130112117989.png" alt="image-20221130112117989" style="zoom:67%;"><p>The baud rate of the raised cosine rolloff system with ISI free is </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130112155926.png" alt="image-20221130112155926"></p><p>满足奈奎斯特第一准则系统所能支持的最大波特率</p><h1 id="Time-Division-Multiplexing"><a href="#Time-Division-Multiplexing" class="headerlink" title="Time-Division Multiplexing"></a><strong>Time-Division Multiplexing</strong></h1><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201194610621.png" alt="image-20221201194610621"></p><p>TDM is a digital multiplexing technique for combining several low-rate digital channels into one high-rate one.</p><p>In synchronous TDM, the data rate of the link is <em>n</em> times faster, and the unit duration is <em>n</em> times shorter.</p><p>由于帧是提前分配的所以长度是固定的（帧的长度无论是否TDM都固定），但是帧内的片数必须和通道数保持一致，所以data rate快n倍</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201195444446.png" alt="image-20221201195444446" style="zoom:67%;"><p>题目</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201195639637.png" alt="image-20221201195639637" style="zoom: 50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201195720093.png" alt="image-20221201195720093" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201195822702.png" alt="image-20221201195822702" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201195840207.png" alt="image-20221201195840207" style="zoom: 50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201195852782.png" alt="image-20221201195852782" style="zoom:50%;"><h1 id="Modulation-Techniques"><a href="#Modulation-Techniques" class="headerlink" title="Modulation Techniques"></a><strong>Modulation Techniques</strong></h1><p>调制与编码是用来把模拟（数字）信息转化为数字（模拟）信号的过程</p><p>数据：某种要传输的信息</p><p>信号：数据的电气或电磁表现</p><p>用数字信号承载数字或模拟数据——编码</p><p>用模拟信号承载数字或模拟数据——调制</p><h2 id="四种转换："><a href="#四种转换：" class="headerlink" title="四种转换："></a>四种转换：</h2><p>Digital data, digital signal：设备比数模调制设备更简单、更便宜</p><p>Analog data, digital signal：允许使用现代数字传输和交换设备（PAM、DM）</p><p>Digital data, analog signal：有些传输介质只传播模拟信号</p><p>Analog data, analog signal：电子形式的模拟数据可以方便而廉价地传输，通过语音级线路进行语音传输</p><p>信噪比、数据率、带宽决定了接收器成功接收信号的程度</p><p>◆ An increase in data rate increases bit error rate</p><p>◆ An increase in SNR decreases bit error rate</p><p>◆ An increase in bandwidth allows an increase in data rate</p><h3 id="数字数据转模拟信号"><a href="#数字数据转模拟信号" class="headerlink" title="数字数据转模拟信号"></a>数字数据转模拟信号</h3><p>– Amplitude-shift keying (ASK)</p><p>• Amplitude difference of carrier frequency</p><p>– Frequency-shift keying (FSK)</p><p>• Frequency difference near carrier frequency</p><p>– Phase-shift keying (PSK)</p><p>• Phase of carrier signal shifted</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201224906839.png" alt="image-20221201224906839"></p><p>分别对载波的振幅、频率和相位进行操作，使其可以表示各种数据</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201225042065.png" alt="image-20221201225042065" style="zoom:67%;"><p>都是以三角函数为载波</p><h4 id="Amplitude-Shift-Keying"><a href="#Amplitude-Shift-Keying" class="headerlink" title="Amplitude-Shift Keying"></a>Amplitude-Shift Keying</h4><p>幅移键控</p><p>通过移动幅度表示数据</p><p>◆ One binary digit represented by presence of carrier, at constant amplitude</p><p>◆ Other binary digit represented by absence of carrier</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201225510582.png" alt="image-20221201225510582"></p><h4 id="Binary-Frequency-Shift-Keying"><a href="#Binary-Frequency-Shift-Keying" class="headerlink" title="Binary Frequency-Shift Keying"></a>Binary Frequency-Shift Keying</h4><p>通过移动频率表示数据</p><p>Two binary digits represented by two different frequencies near the carrier frequency</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201225607934.png" alt="image-20221201225607934"></p><h5 id="Multiple-Frequency-Shift-Keying-MFSK"><a href="#Multiple-Frequency-Shift-Keying-MFSK" class="headerlink" title="Multiple Frequency-Shift Keying (MFSK)"></a>Multiple Frequency-Shift Keying (MFSK)</h5><p>◆ More than two frequencies are used</p><p>◆ More bandwidth efficient but more susceptible to error</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201225724285.png" alt="image-20221201225724285"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201225741256.png" alt="image-20221201225741256" style="zoom:67%;"><p>To match data rate of input bit stream, each output signal element is held for:</p><p><em>T</em>s =<em>LT</em> seconds</p><p>where <em>T</em> is the bit period (data rate = 1/<em>T</em>）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201230500633.png" alt="image-20221201230500633"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201230512456.png" alt="image-20221201230512456" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201230959895.png" alt="image-20221201230959895"></p><p>用四种不同的频率表示来表示一种数据（data）</p><h4 id="Phase-Shift-Keying-PSK"><a href="#Phase-Shift-Keying-PSK" class="headerlink" title="Phase-Shift Keying (PSK)"></a>Phase-Shift Keying (PSK)</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201231426574.png" alt="image-20221201231426574"></p><p>◆ Two-level PSK (BPSK)：Uses two phases to represent binary digits</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201231447465.png" alt="image-20221201231447465"></p><p>◆ Four-level PSK (QPSK)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201231734880.png" alt="image-20221201231734880"></p><p>每个之间差90°</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201231823151.png" alt="image-20221201231823151" style="zoom:80%;"><p>Multi bit modulation</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201231936567.png" alt="image-20221201231936567" style="zoom:67%;"><h4 id="数字调制的数学表示"><a href="#数字调制的数学表示" class="headerlink" title="数字调制的数学表示"></a>数字调制的数学表示</h4><p>用复数形式表示三角函数载波</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201234912298.png" alt="image-20221201234912298"></p><h5 id="Constellation-map（星座图）"><a href="#Constellation-map（星座图）" class="headerlink" title="Constellation map（星座图）"></a>Constellation map（星座图）</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201235359621.png" alt="image-20221201235359621" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201235424260.png" alt="image-20221201235424260" style="zoom:67%;"><p>可以理解成幅度加相位调制：QAM也被认为相位调制和幅度调制的组合。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221201235747160.png" alt="image-20221201235747160"></p><p>◆ Type of modulation: ASK,PSK,FSK,QAM</p><p>◆ OFDM uses PSK and QAM</p><p>◆ Digital modulation is mathematically characterized by the coefficient of complex base-band signal</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202000036626.png" alt="image-20221202000036626" style="zoom:67%;"><h2 id="Spread-Spectrum"><a href="#Spread-Spectrum" class="headerlink" title="Spread Spectrum"></a><strong>Spread Spectrum</strong></h2><p>扩频：采用前面学的调制技术可以让信号在不同频率进行传递，如M=4的MFSK中把信道分成频率不同的四个部分进行传递，但是这四个频率集中于中心频率且有一个较窄的带宽。扩频技术就是再对这个信道进行扩展，如可以扩展到4个信道（每四个一组）并且随机编码，使得信息传输时，在不同信道（四个）上随机跳转。这样 种跳转规律只有输入输出可以同步。对于窃听者无法得知，所以看起来像是一串乱码</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202002410907.png" alt="image-20221202002410907"></p><p>Effect of modulation is to increase bandwidth of signal to be transmitted</p><p>General Model of Spread Spectrum Digital Communication System：</p><p>两种扩频技术</p><ol><li><p>Frequency Hoping Spread Spectrum (FHSS)</p></li><li><p>Direct Sequence Spread Spectrum (DSSS)</p></li></ol><h3 id="Frequency-Hoping-Spread-Spectrum-FHSS"><a href="#Frequency-Hoping-Spread-Spectrum-FHSS" class="headerlink" title="Frequency Hoping Spread Spectrum (FHSS)"></a>Frequency Hoping Spread Spectrum (FHSS)</h3><p>调频扩频</p><p>◆ Signal is broadcast over seemingly random series of radio frequencies</p><p>◆ Signal hops from frequency to frequency at fixed intervals</p><p>信号在固定间隔里从一个频率跳到另一个频率。接收器知道这个跳转规则，也会跳频接收</p><p>这个载波经过一个时间间隔它的频率会突然变到另一个频率然后继续传输在外界看来，这个频率隔一会就变一下，难以解读但是发送方和接收方都知道这个信号频率的跳动方式所以可以抗干扰</p><p>Receiver, hopping between frequencies in synchronization with transmitter, picks up message</p><p>Channel sequence dictated by spreading code（PN码 扩频码（噪声、伪随机数）决定传输的信道）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202135019725.png" alt="image-20221202135019725"></p><ul><li>Advantages</li></ul><p>– Eavesdroppers hear only unintelligible blips（偷听者只听到难以理解的信号）</p><p>– Attempts to jam signal on one frequency succeed only at knocking out a few bits（在一个频率上干扰信号的尝试只能成功地破坏几个比特）</p><h4 id="FHSS-Using-MFSK-使用多相频移键控的跳频"><a href="#FHSS-Using-MFSK-使用多相频移键控的跳频" class="headerlink" title="FHSS Using MFSK 使用多相频移键控的跳频"></a>FHSS Using MFSK 使用多相频移键控的跳频</h4><p>MFSK signal is translated to a new frequency every <em>Tc</em> seconds by modulating the MFSK signal with the FHSS carrier signal</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202135249180.png" alt="image-20221202135249180"></p><p>写的有点问题: $M=2^L$</p><p>◆ For data rate of <em>R:</em></p><p>– duration of a bit: <em>T</em> = 1/<em>R</em> seconds</p><p>– duration of signal symbol: <em>Ts</em> = <em>LT</em> seconds</p><p>Tc是转换信道的周期</p><p>◆ <em>Tc</em> &gt;= <em>Ts</em> <em>–</em> slow-frequency-hop spread spectrum 慢速频跳扩频</p><p>◆ <em>Tc</em> &lt; <em>Ts</em> - fast-frequency-hop spread spectrum  快速频跳扩频</p><h6 id="Slow-FHSS-Using-MFSK-M-x3D-4-k-x3D-2"><a href="#Slow-FHSS-Using-MFSK-M-x3D-4-k-x3D-2" class="headerlink" title="Slow FHSS Using MFSK (M = 4,k= 2)"></a>Slow FHSS Using MFSK (M = 4,k= 2)</h6><p>M个不同的频率,K是PN码（随机扩频码）使用的比特</p><p>也就是说MFSK中把一个信道分成四个不同频率的部分</p><p>又被扩展了四倍</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202141520624.png" alt="image-20221202141520624"></p><p>可以看到PN=00时采用最低频率的带宽传输信号，PN=11采用最高频率</p><p>MFSK的带宽是Wd</p><p>FHSS的带宽是Ws</p><h5 id="快速FHSS：Fast-FHSS-Using-MFSK-M-x3D-4-k-x3D-2"><a href="#快速FHSS：Fast-FHSS-Using-MFSK-M-x3D-4-k-x3D-2" class="headerlink" title="快速FHSS：Fast FHSS Using MFSK (M = 4, k = 2)"></a>快速FHSS：Fast FHSS Using MFSK (M = 4, k = 2)</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202142450038.png" alt="image-20221202142450038"></p><p>每个symbol传输都需要两种频率</p><h4 id="FHSS-Performance-Considerations"><a href="#FHSS-Performance-Considerations" class="headerlink" title="FHSS Performance Considerations"></a>FHSS Performance Considerations</h4><p>◆ Large number of frequencies used</p><p>◆ Results in a system that is quite resistant to jamming</p><p>– <strong>Jammer must jam all frequencies</strong></p><p>– With fixed power, this reduces the jamming power in any one frequency band</p><p>在固定功率的情况下，这减少了任何一个频段的干扰功率</p><h3 id="Direct-Sequence-Spread-Spectrum-DSSS"><a href="#Direct-Sequence-Spread-Spectrum-DSSS" class="headerlink" title="Direct Sequence Spread Spectrum (DSSS)"></a>Direct Sequence Spread Spectrum (DSSS)</h3><p>◆ Each bit in original signal is represented by multiple bits in the transmitted signal</p><p>原来一位表示的数据，现在用多个位表示。</p><p>Spreading code spreads signal across a wider frequency band </p><p>One technique combines digital information stream with the spreading code bit stream using exclusive-OR</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202160321880.png" alt="image-20221202160321880"></p><p>利用异或将数字信息与扩展编码位流结合。</p><p>可以看到这里脉冲信号宽度（周期）缩短4倍，所以频率扩大了四倍（前面讲RZ linecode也有类似的）</p><h4 id="DSSS-Using-BPSK-使用二相相移键控的直接序列扩频"><a href="#DSSS-Using-BPSK-使用二相相移键控的直接序列扩频" class="headerlink" title="DSSS Using BPSK 使用二相相移键控的直接序列扩频"></a>DSSS Using BPSK 使用二相相移键控的直接序列扩频</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202160633031.png" alt="image-20221202160633031" style="zoom:67%;"><p>C(t)是[-1,1]内的随机PN序列</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202160747696.png" alt="image-20221202160747696"></p><p>在接收端， incoming signal multiplied by <em>c</em>(<em>t</em>)</p><p>– Since, <em>c</em>(<em>t</em>) x <em>c</em>(<em>t</em>) <em>=</em> 1, incoming signal is recovered</p><p>收到的信号乘c(t),恢复原信号</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202161003758.png" alt="image-20221202161003758"></p><h3 id="Code-Division-Multiple-Access"><a href="#Code-Division-Multiple-Access" class="headerlink" title="Code-Division Multiple Access"></a>Code-Division Multiple Access</h3><p>码分多址: 有很多数据通过前面的调制以及扩频技术发送传输（在一个信道），CDMA就是保证每个用户发送信号在乘以一个不同的ｃ（ｔ）的条件下，传输到接收方，接收方可以正确区分想要的信号，不会被别的用户的信号所干扰（与时分复用一个功能）。</p><p>Basic Principles of CDMA</p><p>– <em>D</em> = rate of data signal</p><p>– Break each bit into <em>k chips</em></p><p>• Chips are a user-specific fixed pattern （每个用户的编码模式不一样）</p><p>– Chip data rate of new channel = <em>kD</em>（保证与之前数据率一样，现在每秒需要发KD个分片）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202162512111.png" alt="image-20221202162512111"></p><p>If <em>k</em>=6 and code is a sequence of 1s and -1s</p><p>For a ‘1’ bit, A sends code as chip pattern  &lt;c1, c2, c3, c4, c5, c6&gt;</p><p>For a ‘0’ bit, A sends complement of code &lt;-c1, -c2, -c3, -c4, -c5, -c6&gt;（相反）</p><p> received chip pattern（接收到的分片图样）：*&lt;*d1, d2, d3, d4, d5, d6&gt;</p><p>解码：<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202162903361.png" alt="image-20221202162903361"></p><p>u代表用户，[-6,6]</p><ul><li>以A为例子：User A code = &lt;1, –1, –1, 1, –1, 1&gt;</li></ul><p>– To send a 1 bit = &lt;1, –1, –1, 1, –1, 1&gt;</p><p>– To send a 0 bit = &lt;–1, 1, 1, –1, 1, –1&gt;</p><ul><li>以B为例子：User B code = &lt;1, 1, –1, – 1, 1, 1&gt;</li></ul><p>– To send a 1 bit = &lt;1, 1, –1, –1, 1, 1&gt;</p><p>Receiver receiving with A’s code</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202163139998.png" alt="image-20221202163139998"></p><p>• User A ‘1’ bit: 6 -&gt; 1</p><p>• User A ‘0’ bit: -6 -&gt; 0</p><p>• User B ‘1’ bit: 0 -&gt; unwanted signal ignored（出错了或者是别的用户的数据）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202164028072.png" alt="image-20221202164028072" style="zoom:67%;"><p>ｎ个用户分别用BPSK调制后用DSSS扩频，由于扩频码不一样（相互正交）接收信号可以唯一收到目的信号</p><h3 id="Categories-of-Spreading-Sequences"><a href="#Categories-of-Spreading-Sequences" class="headerlink" title="Categories of Spreading Sequences"></a>Categories of Spreading Sequences</h3><p>扩展序列分类</p><p>Spreading Sequence Categories </p><p>– PN sequences（伪随机数）</p><p>– Orthogonal codes（正交编码）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202170235438.png" alt="image-20221202170235438"></p><p>◆ For FHSS systems</p><p>– PN sequences most common</p><p>◆ For DSSS systems not employing CDMA</p><p>– PN sequences most common</p><p>◆ For DSSS CDMA systems</p><p>– PN sequences</p><p>– Orthogonal codes</p><h4 id="PN-Sequences-伪随机数序列"><a href="#PN-Sequences-伪随机数序列" class="headerlink" title="PN Sequences 伪随机数序列"></a>PN Sequences 伪随机数序列</h4><p>◆ PN (Pseudonoise) generator produces periodic sequence that appears to be random</p><p>◆ PN Sequences </p><p>– Generated by an algorithm using initial seed</p><p>– Sequence isn’t statistically random but will pass many test of randomness</p><p>– Sequences referred to as pseudorandom numbers or pseudonoise sequences</p><p>– Unless algorithm and seed are known, the sequence is impractical to predict</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202170403321.png" alt="image-20221202170403321"></p><h5 id="Important-PN-Properties"><a href="#Important-PN-Properties" class="headerlink" title="Important PN Properties"></a>Important PN Properties</h5><p>◆ Randomness– Uniform distribution</p><p>• Balance property</p><p>• Run property</p><p>– Independence</p><p>– Correlation property</p><p>◆ Unpredictability</p><p>通过Linear Feedback Shift Register Implementation实现：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202172416994.png" alt="image-20221202172416994"></p><h1 id="Multiple-Access-Techniques"><a href="#Multiple-Access-Techniques" class="headerlink" title="Multiple Access Techniques"></a><strong>Multiple Access Techniques</strong></h1><p>Multiplexing：复用，更多的关注于对同一资源（如时空频码）的分配。（前面讲了时分复用）</p><p>multiple access：多址，更多的体现在对共同工作在同一资源上的多个用户的区分上面。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202173525208.png" alt="image-20221202173525208" style="zoom:67%;"><h3 id="Multiple-access"><a href="#Multiple-access" class="headerlink" title="Multiple access"></a>Multiple access</h3><p><strong>Multiple Access</strong>: to enable multiple users to share the same channel simultaneously.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202173146618.png" alt="image-20221202173146618"></p><p>◆ Possible approaches for multiple access</p><p>– Time.时分</p><p>– Pitch.频分</p><p>– Language.码分</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202173706863.png" alt="image-20221202173706863"></p><h4 id="Frequency-Division-Multiple-Access-FDMA"><a href="#Frequency-Division-Multiple-Access-FDMA" class="headerlink" title="Frequency Division Multiple Access (FDMA)"></a>Frequency Division Multiple Access (FDMA)</h4><p>◆ <strong>Key features</strong>: </p><p>– Assign each user to a particular channel.</p><p>– Transmit signals simultaneously and continuously. to enable multiple users to share the same channel simultaneously</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202173824471.png" alt="image-20221202173824471" style="zoom:67%;"><p>◆ <strong>Application</strong>: all 1G systems use FDMA</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202173911379.png" alt="image-20221202173911379" style="zoom:67%;"><p>◆ <strong>Advantages</strong></p><p>– Low overhead</p><p>– Simple hardware at users and base stations</p><p>◆ <strong>Disadvantages</strong></p><p>– If no talking, a channel sits idle (resource waste)</p><p>– Require tight radio frequency filters</p><h4 id="Time-Division-Multiple-Access-TDMA"><a href="#Time-Division-Multiple-Access-TDMA" class="headerlink" title="Time Division Multiple Access (TDMA)"></a>Time Division Multiple Access (TDMA)</h4><p>◆ <strong>Key features</strong></p><p>– Single carrier frequency with multiple users.</p><p>– Non-continuous transmission.</p><p>– Each user occupies a <strong>cyclically repeating</strong> time slot.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202174106176.png" alt="image-20221202174106176"></p><p>◆ <strong>Application</strong>: most 2G systems use TDMA</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202174121378.png" alt="image-20221202174121378"></p><p>◆ <strong>Advantages</strong></p><p>– Interference-free technique.</p><p>– Low battery consumption.</p><p>– Slots can be assigned on demand.</p><p>◆ <strong>Disadvantages:</strong></p><p>– “CLOCK” is required.</p><p>– Large synchronization overheads.</p><h4 id="GSM（全球移动通信系统）Multiple-access"><a href="#GSM（全球移动通信系统）Multiple-access" class="headerlink" title="GSM（全球移动通信系统）Multiple access"></a>GSM（全球移动通信系统）Multiple access</h4><p>uses combined TDMA/FDMA</p><h4 id="Code-Division-Multiple-Access-CDMA"><a href="#Code-Division-Multiple-Access-CDMA" class="headerlink" title="Code Division Multiple Access (CDMA)"></a>Code Division Multiple Access (CDMA)</h4><p>◆ <strong>Key features</strong></p><p>– All users use same time and frequency.</p><p>– Narrowband signals multiplied by wideband spreading codes.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202174458196.png" alt="image-20221202174458196" style="zoom:67%;"><p>◆ <strong>Advantages</strong></p><p>– Easy addition of more users.</p><p>– No absolute limit on the number of users.</p><p>◆ <strong>Disadvantages</strong></p><p>– QoS decreases as the number of users increases.</p><p>– Near-far problem exists (power control is required).</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202174605536.png" alt="image-20221202174605536"></p><p>◆FDMA:不同的频段分配给不同的用户。</p><p>◆TDMA:不同的时间段分配给不同的用户。</p><p>◆CDMA:不同的用户分配不同的编码。</p><h4 id="OFDMA-for-4G-3GPP-LTE-x2F-LTE-A"><a href="#OFDMA-for-4G-3GPP-LTE-x2F-LTE-A" class="headerlink" title="OFDMA for 4G (3GPP LTE/LTE-A)"></a>OFDMA for 4G (3GPP LTE/LTE-A)</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202175114601.png" alt="image-20221202175114601"></p><p>◆ Many orthogonal sub-carriers are multiplexed in one symbol</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202175351210.png" alt="image-20221202175351210"></p><p>◆ OFDMA is a multi-user version of the popular OFDM digital modulation scheme. Multiple access is achieved in OFDMA by assigning subsets of subcarriers to individual users</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202175731012.png" alt="image-20221202175731012" style="zoom: 50%;"><p>普通FDMＡ　的频谱：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202175857190.png" alt="image-20221202175857190" style="zoom:67%;"><p>为了防止ISI，保证各个频谱间有Guard Band</p><p>Use multiple channel (carrier frequency) for one data transmission</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202180007395.png" alt="image-20221202180007395" style="zoom: 50%;"><p>在sender乘不同的载波，再在接收端接收后乘不同的载波信号（正交特性使不想关的都为0）</p><p>如果使用OFDM，各个载波是正交的所以不用有 guard band 甚至可以重叠提高带宽利用率</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202180122963.png" alt="image-20221202180122963"></p><p>◆ OFDM is a multi-carrier modulation</p><p>◆ OFDM sub-carrier spectrum is overlapping</p><p>◆ In FDMA, band-pass filter separates each transmission（带通滤波器可以将其分开）</p><p>In OFDM, each sub-carrier is separated by DFT because carriers are orthogonal</p><p>◆ Each sub-carrier is modulated by PSK, QAM</p><h5 id="OFDM-carriers"><a href="#OFDM-carriers" class="headerlink" title="OFDM carriers"></a>OFDM carriers</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202181134359.png" alt="image-20221202181134359" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202181225726.png" alt="image-20221202181225726" style="zoom: 50%;"><p>都是正交的（信号与系统）</p><p>相位和幅度共同表示了要传递的信息：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202184145549.png" alt="image-20221202184145549" style="zoom:50%;"><p>所以说：Amplitude and Phase will be digitally modulated</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202184226275.png" alt="image-20221202184226275" style="zoom:50%;"><p>在时域上将各个信号叠加起来就得到了Sb(t)</p><p>在接收端可以根据正交性解调（乘上想要的那个信息对应的载波，可以获得想要的信息）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202184350092.png" alt="image-20221202184350092" style="zoom: 67%;"><p>According to the sinusoidal orthogonality, an ,bn can be extracted</p><p>实际工程实现使用DFT(FFT) </p><h4 id="OFDM频谱"><a href="#OFDM频谱" class="headerlink" title="OFDM频谱"></a>OFDM频谱</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202184642969.png" alt="image-20221202184642969"></p><p>fc+(k-1)f0</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202184853929.png" alt="image-20221202184853929" style="zoom:50%;"><h4 id="OFDM-signal-generation"><a href="#OFDM-signal-generation" class="headerlink" title="OFDM signal generation"></a>OFDM signal generation</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202193050935.png" alt="image-20221202193050935"></p><p>直接生成需要</p><p>N digital modulators</p><p>N carrier frequency generator</p><p>不太现实，所以要使用DFT的方法</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202194059549.png" alt="image-20221202194059549" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202194112253.png" alt="image-20221202194112253"></p><p>MAP形成dn-&gt; S/P串转并-&gt;IDFT得到了这个u(k)，是一堆复指数的和，携带着信息</p><p>-&gt;并转串-&gt;实部虚部分别乘载波-&gt;带通滤波器-&gt;传播到空气中</p><h4 id="OFDM-demodulation"><a href="#OFDM-demodulation" class="headerlink" title="OFDM demodulation"></a>OFDM demodulation</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202194911894.png" alt="image-20221202194911894" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221202194930417.png" alt="image-20221202194930417" style="zoom:67%;"><p>◆ Each symbol carries information</p><p>◆ Each symbol wave is sum of many sinusoidal</p><p>◆ Each sinusoidal wave can be PSK, QAM modulated</p><p>◆ Using IDFT and DFT, OFDM implementation became practica</p><h3 id="Multi-path"><a href="#Multi-path" class="headerlink" title="Multi-path"></a>Multi-path</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203164039609.png" alt="image-20221203164039609" style="zoom:50%;"><p>相同信号可能通过不同的路径传播，由于路不同，有延时存在，接收方会造成ISI</p><p>多径效应（multipath effect）：指电磁波经不同路径传播后，各分量场到达接收端时间不同，按各自相位相互叠加而造成干扰，使得原来的信号失真，或者产生错误</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203164336831.png" alt="image-20221203164336831" style="zoom:50%;"><p>图中不同符号间产生干扰（由于到达时间不同）</p><h4 id="Cyclic-Prefix-Guard-Interval-Tg"><a href="#Cyclic-Prefix-Guard-Interval-Tg" class="headerlink" title="Cyclic Prefix (Guard Interval) Tg"></a>Cyclic Prefix (Guard Interval) Tg</h4><p>为了避免符号间干扰，可以在OFDM符号之间以循环前缀的形式插入保护周期。该保护周期是前一个符号的时延扩展分量在下一个符号开始之前到达提供了一个时间窗口。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203164549717.png" alt="image-20221203164549717" style="zoom:67%;"><p><em>在实际系统中使用OFDM符号的周期扩展作为循环嵌缀，将OFDM符号的最后一段的时域信号的拷贝插入到保护时间当中。</em></p><p>By adding Cyclic Prefix, orthogonality can be maintained</p><p>multi-path causes Amplitude and Phase distortion for each sub-carrier造成各个载波的相位（旋转）幅度（到原点距离变了）畸变</p><p>失真必须由均衡器补偿</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203165047067.png" alt="image-20221203165047067" style="zoom:67%;"><h3 id="OFDM-总结"><a href="#OFDM-总结" class="headerlink" title="OFDM 总结"></a>OFDM 总结</h3><ol><li><p>High Frequency utilization by the square spectrum shape</p></li><li><p>Multi-path problem is solved by Cyclic Prefix</p></li><li><p>Multiple services in one OFDM by sharing sub-carriers</p></li><li><p>Implementation was complicated but NOW possible because of LSI technology progress</p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203165448144.png" alt="image-20221203165448144"></p><h1 id="Radio-Propagations、Network-Architecture"><a href="#Radio-Propagations、Network-Architecture" class="headerlink" title="Radio Propagations、Network Architecture"></a>Radio Propagations、Network Architecture</h1><h2 id="Radio-Propagations"><a href="#Radio-Propagations" class="headerlink" title="Radio Propagations"></a>Radio Propagations</h2><p>无线电传输</p><h4 id="Radio-transmission-impairments"><a href="#Radio-transmission-impairments" class="headerlink" title="Radio transmission impairments"></a>Radio transmission impairments</h4><p>◆ Path loss </p><p>接收功率随距离增加而减小。</p><p>◆ Shadowing ( slow fading ) </p><p>因建筑物、山峦、树木及树叶阻塞而造成。</p><p>◆ Multipath fading ( fast fading ) </p><p>由物体对透射波的多径反射引起</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203170455684.png" alt="image-20221203170455684" style="zoom:50%;"><h3 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h3><p>◆ An antenna is an electrical conductor or system of conductors</p><p>– Transmission - radiates electromagnetic energy into space</p><p>– Reception - collects electromagnetic energy from space</p><p>◆ In two-way communication, the same antenna can be used for transmission and reception</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203170700220.png" alt="image-20221203170700220" style="zoom:67%;"><h4 id="Radiation-pattern（辐射图样）"><a href="#Radiation-pattern（辐射图样）" class="headerlink" title="Radiation pattern（辐射图样）"></a>Radiation pattern（辐射图样）</h4><p>-天线辐射特性的图形表示</p><p>-用二维截面表示</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203170858888.png" alt="image-20221203170858888" style="zoom:67%;"><p>Beam width (or half-power beam width) </p><p>– Measure of directivity of antenna</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203170945096.png" alt="image-20221203170945096" style="zoom:67%;"><p>Reception pattern（接收图样）</p><p>– Receiving antenna’s equivalent to radiation pattern接收方的辐射图样</p><h4 id="Antenna-Gain（无线增益）"><a href="#Antenna-Gain（无线增益）" class="headerlink" title="Antenna Gain（无线增益）"></a>Antenna Gain（无线增益）</h4><p>Power output, in a particular direction, compared to that produced in any direction by a perfect omnidirectional antenna (isotropic antenna)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203171250249.png" alt="image-20221203171250249" style="zoom:67%;"><p>Effective area</p><p>– Related to physical size and shape of antenna</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203171319930.png" alt="image-20221203171319930" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203172009927.png" alt="image-20221203172009927" style="zoom:67%;"><h4 id="Propagation-Modes（传播方式）"><a href="#Propagation-Modes（传播方式）" class="headerlink" title="Propagation Modes（传播方式）"></a>Propagation Modes（传播方式）</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203173519583.png" alt="image-20221203173519583" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203173539198.png" alt="image-20221203173539198" style="zoom:67%;"><h3 id="Line-of-Sight-LOS-Wireless-Transmission-Impairments"><a href="#Line-of-Sight-LOS-Wireless-Transmission-Impairments" class="headerlink" title="Line of Sight (LOS) Wireless Transmission Impairments"></a>Line of Sight (LOS) Wireless Transmission Impairments</h3><p>◆ Attenuation and distortion</p><p>◆ Free space loss</p><p>◆ Noise</p><p>◆ Atmospheric absorption</p><p>◆ Multipath</p><p>◆ Refraction</p><p>◆ Thermal noise</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203173930623.png" alt="image-20221203173930623"></p><h4 id="Attenuation"><a href="#Attenuation" class="headerlink" title="Attenuation"></a>Attenuation</h4><p>◆ Strength of signal falls off with distance over transmission medium</p><p>◆ Attenuation factors for unguided media:</p><p>– Received signal must have sufficient strength so that circuitry in the receiver can interpret the signal</p><p>– Signal must maintain a level sufficiently higher than noise to be received without error</p><p>– Attenuation is greater at higher frequencies, causing distortion</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203174059687.png" alt="image-20221203174059687" style="zoom: 67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203174106801.png" alt="image-20221203174106801" style="zoom:67%;"><h4 id="Free-Space-Loss-自由空间损耗"><a href="#Free-Space-Loss-自由空间损耗" class="headerlink" title="Free Space Loss 自由空间损耗"></a>Free Space Loss 自由空间损耗</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203174251007.png" alt="image-20221203174251007" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203174627778.png" alt="image-20221203174627778" style="zoom:67%;"><h4 id="Categories-of-Noise"><a href="#Categories-of-Noise" class="headerlink" title="Categories of Noise"></a>Categories of Noise</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203174406046.png" alt="image-20221203174406046" style="zoom:67%;"><h5 id="Thermal-Noise-热噪声"><a href="#Thermal-Noise-热噪声" class="headerlink" title="Thermal Noise 热噪声"></a>Thermal Noise 热噪声</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203174459226.png" alt="image-20221203174459226" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203174645041.png" alt="image-20221203174645041" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203174749287.png" alt="image-20221203174749287" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203174801880.png" alt="image-20221203174801880" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203174810385.png" alt="image-20221203174810385" style="zoom:67%;"><h4 id="Noise-Terminology"><a href="#Noise-Terminology" class="headerlink" title="Noise Terminology"></a>Noise Terminology</h4><p>◆ Intermodulation noise – occurs if signals with different frequencies share the same medium</p><p>– Interference caused by a signal produced at a frequency that is the sum or difference of original frequencies</p><p>◆ Crosstalk – unwanted coupling between signal paths</p><p>◆ Impulse noise – irregular pulses or noise spikes</p><p>– Short duration and of relatively high amplitude</p><p>– Caused by external electromagnetic disturbances, or faults and flaws in the communications system</p><h4 id="Expression-Eb-x2F-N0"><a href="#Expression-Eb-x2F-N0" class="headerlink" title="Expression Eb/N0"></a>Expression <em>Eb</em>/<em>N0</em></h4><p>◆ Ratio of signal energy per bit to noise power density per Hertz每比特信号能量与每赫兹噪声功率密度的比值</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203175240399.png" alt="image-20221203175240399" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203175303288.png" alt="image-20221203175303288" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203183838550.png" alt="image-20221203183838550" style="zoom:67%;"><p>N0=kT 是上面的1Hz的热噪声</p><p>The bit error rate for digital data is a function of <em>Eb</em>/<em>N0</em></p><p>– Given a value for <em>Eb</em>/<em>N0</em> to achieve a desired error rate, parameters of this formula can be selected</p><p>– As bit rate <em>R</em> increases, transmitted signal power must increase to maintain required <em>Eb</em>/<strong><em>N</em>0</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203184100270.png" alt="image-20221203184100270"></p><h4 id="Other-Impairments"><a href="#Other-Impairments" class="headerlink" title="Other Impairments"></a>Other Impairments</h4><p>◆ Atmospheric absorption – water vapor and oxygen contribute to attenuation </p><p>大气吸收:主要由水蒸气、氧气造成</p><p>◆ Multipath – obstacles reflect signals so that multiple copies with varying delays are received</p><p>多径：障碍物反射信号，因此可以接收多个延迟不同的副本</p><p>◆ Refraction – bending of radio waves as they propagate through the atmosphere</p><p>折射：信号传输时弯曲</p><h3 id="Multipath-Propagation"><a href="#Multipath-Propagation" class="headerlink" title="Multipath Propagation"></a>Multipath Propagation</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203185300413.png" alt="image-20221203185300413" style="zoom: 50%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203185406828.png" alt="image-20221203185406828"></p><p>Destructive interference</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203185510086.png" alt="image-20221203185510086" style="zoom:50%;"><p>Constructive interference</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203185539705.png" alt="image-20221203185539705" style="zoom:50%;"><h4 id="Types-of-Fading"><a href="#Types-of-Fading" class="headerlink" title="Types of Fading"></a>Types of Fading</h4><p>◆ Fast fading, Slow fading, Flat fading, Selective fading</p><p>◆ Rayleigh fading, Nakagami-m and Rician fading</p><h2 id="Network-Architecture"><a href="#Network-Architecture" class="headerlink" title="Network Architecture"></a>Network Architecture</h2><h3 id="Cellular-concept（蜂窝网络的概念）"><a href="#Cellular-concept（蜂窝网络的概念）" class="headerlink" title="Cellular concept（蜂窝网络的概念）"></a>Cellular concept（蜂窝网络的概念）</h3><p>40年代后期:AT&amp;T开发了频率复用的蜂窝概念</p><p>◆ Break the service area into cells</p><p>◆ Shrink the cell size; adopt intensive frequency re-use</p><p>◆ Add more cells to add more capacity</p><p>◆ Mobility management is required</p><p>相邻的分区分为不同的载波，避免干扰（距离足够远有可能使用相同载波）</p><h4 id="Radio-access"><a href="#Radio-access" class="headerlink" title="Radio access"></a>Radio access</h4><p>该基站有3个扇区，每个扇区都配备独立的中继器(发射器/接收器)</p><p>它在每个扇区都有间隔对天线，以提供分集接收</p><p>微波将天线连接到网络</p><p>天线上的LNAs(LNA=低噪声放大器)</p><h4 id="Diversity-分集"><a href="#Diversity-分集" class="headerlink" title="Diversity 分集"></a>Diversity 分集</h4><p>Different phase relations will exist between the multipath rays from each antenna – so the interference will be different.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203230300524.png" alt="image-20221203230300524" style="zoom:67%;"><p>由于每个蜂窝的频率不同在传输中会造成频分（每个扇区对应不同的频率的载波）所以有多径问题会造成ISI</p><p>分集技术是研究如何充分利用传输中的多径信号能量，以改善传输的可靠性，它也是一项研究利用信号的基本参量在时域、频域与空域中，如何分散开又如何收集起来的技术</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203232022762.png" alt="image-20221203232022762"></p><h5 id="不同的分集中分的方式："><a href="#不同的分集中分的方式：" class="headerlink" title="不同的分集中分的方式："></a>不同的<strong>分</strong>集中分的方式：</h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221203230858904.png" alt="image-20221203230858904" style="zoom: 50%;"><h5 id="不同集（合并）的方式"><a href="#不同集（合并）的方式" class="headerlink" title="不同集（合并）的方式"></a>不同集（合并）的方式</h5><p>分集增益Diversity gain，通过分集技术使信号功率增益了多少，以实现某些规定的可靠性。通常为4-6dB，具体取决于环境。</p><p>结合来自每个分支的信号，得到一个比任何单个分支都更可靠的信号</p><p>– Switch diversity 切换合并– when one is too low, try another 当一个太低时，试试另一个</p><p>– Selection diversity 选择式合并– choose the largest signal 选择最大的信号</p><p>– Equal gain 等增益合并 – signals equally weighted and added in phase</p><p>– Maximal ratio<strong>最大比合并</strong> – weight the power in the branches in proportion to their signal amplitude and add in phase将支路中的功率按其信号振幅的比例加权，并加入相位</p><h3 id="Frequency-reuse"><a href="#Frequency-reuse" class="headerlink" title="Frequency reuse"></a>Frequency reuse</h3><p>频率重用</p><p>◆ Adjacent cells use different frequencies to avoid interference</p><p>◆ Cells sufficiently distant from each other can use the same channel (frequency) </p><p>Control cell size by choosing BS power and antennas– Make use of topographical screening</p><p>Reuse factor N: number of cells in a repeating pattern（一个小区簇里有几个使用不同频率的小区）</p><p>小区簇（cluster ）是可以使用全部可用频率的最小小区（cell）集合，即在该集合内的小区使用不同的频率，而在该集合之外的小区可以使用对应的相同频率。小区簇中小区的个数即称为频率复用系数，有时也被称作频率复用因子，典型值为1、4、7、12。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204000144368.png" alt="image-20221204000144368"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204001253541.png" alt="image-20221204001253541" style="zoom:67%;"></p><p>◆ Bigger cluster: less interference from next cell using the same frequency</p><p>– lower capacity – bandwidth available in cell is <em>FA</em> <em>/N</em> (<em>FA</em> is frequency spectrum allocated)</p><h5 id="Reminders-on-Geometry"><a href="#Reminders-on-Geometry" class="headerlink" title="Reminders on Geometry"></a>Reminders on Geometry</h5><p>Surface area of a hexagon（六边形）=6*area of equilateral triangle</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204001427081.png" alt="image-20221204001427081" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204001506493.png" alt="image-20221204001506493" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204001532946.png" alt="image-20221204001532946" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204002635937.png" alt="image-20221204002635937" style="zoom:67%;"><p>r是中心到ｃｅｌｌ顶点的距离</p><p>Ｒu是两个相同频率的cell的中心距离</p><p>从簇角度算：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204002721830.png" alt="image-20221204002721830" style="zoom: 50%;"><p>所以N只有下表中可能出现的值：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221204002809741.png" alt="image-20221204002809741" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> 电信系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSD-3.2- verilog</title>
      <link href="//post/DSD-3.2-%20verilog.html"/>
      <url>//post/DSD-3.2-%20verilog.html</url>
      
        <content type="html"><![CDATA[<h1 id="Verilog"><a href="#Verilog" class="headerlink" title="Verilog"></a>Verilog</h1><h2 id="difference-between-VHDL-and-Verilog"><a href="#difference-between-VHDL-and-Verilog" class="headerlink" title="difference between VHDL and Verilog"></a>difference between VHDL and Verilog</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221115172940312.png" alt="image-20221115172940312"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221115172947328.png" alt="image-20221115172947328"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221115172954153.png" alt="image-20221115172954153"></p><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>Verilog中2 种数据类型就是线网（wire）与寄存器（reg）</p><h5 id="线网（wire）"><a href="#线网（wire）" class="headerlink" title="线网（wire）"></a>线网（wire）</h5><p>带有延时的线网：</p><p><code>wire #3 x2;</code> #3：对x2的所有赋值操作都会延时三个单位</p><p><code>wire #(3,5) x2;</code> 对x2赋值1时时延3，赋值0时时延5</p><h5 id="寄存器（reg）"><a href="#寄存器（reg）" class="headerlink" title="寄存器（reg）"></a>寄存器（reg）</h5><p>寄存器（reg）用来表示存储单元，它会保持数据原有的值，直到被改写。声明举例如下：</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">reg</span>   clk_temp<span class="token punctuation">;</span><span class="token keyword">reg</span>  flag1<span class="token punctuation">,</span> flag2 <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Logical-Gate"><a href="#Logical-Gate" class="headerlink" title="Logical Gate"></a>Logical Gate</h3><h5 id="vhdl"><a href="#vhdl" class="headerlink" title="vhdl"></a>vhdl</h5><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> andGate <span class="token keyword">is</span><span class="token keyword">port</span><span class="token punctuation">(</span>A <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span> <span class="token comment">-- AND gate input</span>B <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span> <span class="token comment">-- AND gate input</span>Y <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- AND gate output</span><span class="token keyword">end</span> andGate<span class="token punctuation">;</span><span class="token keyword">architecture</span> andLogic <span class="token keyword">of</span> andGate <span class="token keyword">is</span><span class="token keyword">begin</span>Y <span class="token operator">&lt;=</span> A <span class="token operator">AND</span> B<span class="token punctuation">;</span><span class="token keyword">end</span> andLogic<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Verilog-1"><a href="#Verilog-1" class="headerlink" title="Verilog"></a><strong>Verilog</strong></h5><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">AND_2</span><span class="token punctuation">(</span><span class="token keyword">output</span> Y<span class="token punctuation">,</span> <span class="token keyword">input</span> A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">and</span><span class="token punctuation">(</span>Y<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">endmodule</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="Comparison"><a href="#Comparison" class="headerlink" title="Comparison"></a><strong>Comparison</strong></h5><p>Verilog 是区分大小写的。</p><p>必须以 module开始以endmodule结束</p><h3 id="Comparator"><a href="#Comparator" class="headerlink" title="Comparator"></a>Comparator</h3><h5 id="vhdl-1"><a href="#vhdl-1" class="headerlink" title="vhdl"></a>vhdl</h5><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">architecture</span> dataflow <span class="token keyword">of</span> comp_4 <span class="token keyword">is</span><span class="token keyword">begin</span><span class="token keyword">process</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">=</span> B<span class="token punctuation">)</span> <span class="token keyword">then</span>output <span class="token operator">&lt;=</span> <span class="token vhdl-vectors number">"0011"</span><span class="token punctuation">;</span><span class="token keyword">elsif</span> <span class="token punctuation">(</span>A <span class="token operator">&gt;</span> B<span class="token punctuation">)</span> <span class="token keyword">then</span>output <span class="token operator">&lt;=</span> <span class="token vhdl-vectors number">"1111"</span><span class="token punctuation">;</span><span class="token keyword">else</span>output <span class="token operator">&lt;=</span> <span class="token vhdl-vectors number">"0000"</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">process</span><span class="token punctuation">;</span><span class="token keyword">end</span> dataflow<span class="token punctuation">;</span><span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Verilog-2"><a href="#Verilog-2" class="headerlink" title="Verilog"></a>Verilog</h5><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">module mag_comp (A, B, ALTB, AGTB, AEQB);input [3:0] A, B;output ALTB, AGTB, AEQB;assign ALTB = (A &lt; B),AGTB = (A &gt; B),AEQB = (A == B);endmodule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>if A&lt;B is true, we assign a “1” to ALTB</p><p>连续赋值语句是 Verilog 数据流建模的基本语句，用于对 wire 型变量进行赋值。：</p><p>格式如下</p><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">assign     LHS_target = RHS_expression  ；<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>LHS_target 必须是一个标量或者线型向量，而不能是寄存器类型。</li><li>RHS_expression 的类型没有要求，可以是标量或线型或存器向量，也可以是函数调用</li></ul><h3 id="Half-adder"><a href="#Half-adder" class="headerlink" title="Half adder"></a>Half adder</h3><h5 id="vhdl-2"><a href="#vhdl-2" class="headerlink" title="vhdl"></a>vhdl</h5><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> half_adder <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>i_bit1 <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>i_bit2 <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">-</span>o_sum <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">;</span>o_carry <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> half_adder<span class="token punctuation">;</span>    <span class="token keyword">architecture</span> half_add_arch <span class="token keyword">of</span> half_adder <span class="token keyword">is</span><span class="token keyword">begin</span>o_sum <span class="token operator">&lt;=</span> i_bit1 <span class="token operator">xor</span> i_bit2<span class="token punctuation">;</span>o_carry <span class="token operator">&lt;=</span> i_bit1 <span class="token operator">and</span> i_bit2<span class="token punctuation">;</span><span class="token keyword">end</span> half_add_arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Verilog-3"><a href="#Verilog-3" class="headerlink" title="Verilog"></a>Verilog</h5><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> half_adder<span class="token punctuation">(</span>i_bit1<span class="token punctuation">,</span>i_bit2<span class="token punctuation">,</span>o_sum<span class="token punctuation">,</span>o_carry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">input</span> i_bit1<span class="token punctuation">;</span><span class="token keyword">input</span> i_bit2<span class="token punctuation">;</span><span class="token keyword">output</span> o_sum<span class="token punctuation">;</span><span class="token keyword">output</span> o_carry<span class="token punctuation">;</span><span class="token keyword">assign</span> o_sum <span class="token operator">=</span> i_bit1 <span class="token operator">^</span> i_bit2<span class="token punctuation">;</span> <span class="token comment">// bitwise xor</span><span class="token keyword">assign</span> o_carry <span class="token operator">=</span> i_bit1 <span class="token operator">&amp;</span> i_bit2<span class="token punctuation">;</span> <span class="token comment">// bitwise and</span><span class="token keyword">endmodule</span> <span class="token comment">// half_adder</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>取反（<del>），与（&amp;），或（|），异或（^），同或（</del>^）</p><h3 id="D-Latch-in-Verilog"><a href="#D-Latch-in-Verilog" class="headerlink" title="D-Latch in Verilog"></a>D-Latch in Verilog</h3><h5 id="vhdl-3"><a href="#vhdl-3" class="headerlink" title="vhdl"></a>vhdl</h5><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> mydlatch1 <span class="token keyword">is</span> <span class="token keyword">port</span> <span class="token punctuation">(</span><span class="token keyword">signal</span> data<span class="token punctuation">,</span> enable<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span><span class="token keyword">signal</span> q<span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> mydlatch1<span class="token punctuation">;</span><span class="token keyword">architecture</span> behavior <span class="token keyword">of</span> mydlatch1 <span class="token keyword">is</span><span class="token comment">-- rising edge triggered DFF</span>state<span class="token punctuation">:</span> <span class="token keyword">process</span> <span class="token punctuation">(</span>enable<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>enable <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>q <span class="token operator">&lt;</span> <span class="token operator">=</span> data<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">process</span><span class="token punctuation">;</span><span class="token keyword">end</span> behavior<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Verilog-4"><a href="#Verilog-4" class="headerlink" title="Verilog"></a><strong>Verilog</strong></h5><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> latchinf <span class="token punctuation">(</span>enable<span class="token punctuation">,</span> data<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">input</span> enable<span class="token punctuation">,</span> data<span class="token punctuation">;</span><span class="token keyword">output</span> q<span class="token punctuation">;</span><span class="token keyword">reg</span> q<span class="token punctuation">;</span><span class="token important">always @</span> <span class="token punctuation">(</span>enable <span class="token keyword">or</span> data<span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>enable<span class="token punctuation">)</span>q <span class="token operator">&lt;=</span> data<span class="token punctuation">;</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>always 语句是重复执行的。always 语句块从 0 时刻开始执行其中的行为语句；当执行完最后一条语句后，便再次执行语句块中的第一条语句，如此循环反复。</p><p>由于循环执行的特点，always 语句多用于仿真时钟的产生，信号行为的检测等。</p><p>@(敏感列表)</p><p>always里面用&lt;=赋值</p><p>The always block is executed when a particular event occurs</p><p><strong>The process statement, in VHDL is equivalent to the always statement, in Verilog</strong></p><h3 id="D-flip-flop"><a href="#D-flip-flop" class="headerlink" title="D flip-flop"></a>D flip-flop</h3><h5 id="VHDL"><a href="#VHDL" class="headerlink" title="VHDL"></a><strong>VHDL</strong></h5><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> D_flip_flop <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>clk<span class="token punctuation">,</span> Din <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>Q<span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">;</span>Qnot <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> D_flip_flop<span class="token punctuation">;</span><span class="token keyword">architecture</span> DFF_arch <span class="token keyword">of</span> D_flip_flop <span class="token keyword">is</span><span class="token keyword">begin</span><span class="token keyword">process</span> <span class="token punctuation">(</span>clk<span class="token punctuation">,</span> Din<span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">if</span><span class="token punctuation">(</span>clk’event <span class="token operator">and</span> clk<span class="token operator">=</span>’<span class="token number">1</span>′<span class="token punctuation">)</span> <span class="token keyword">then</span>Q <span class="token operator">&lt;=</span> Din<span class="token punctuation">;</span>Qnot <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token operator">not</span> Din<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">process</span><span class="token punctuation">;</span><span class="token keyword">end</span> DFF_arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Verilog-5"><a href="#Verilog-5" class="headerlink" title="Verilog"></a><strong>Verilog</strong></h5><p>不同的边沿触发</p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> Clock<span class="token punctuation">)</span> <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">negedge</span> Clock<span class="token punctuation">)</span> <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> Clock <span class="token keyword">or</span> <span class="token keyword">posedge</span> Reset<span class="token punctuation">)</span> <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> Clock <span class="token keyword">or</span> <span class="token keyword">negedge</span> Reset<span class="token punctuation">)</span> <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">negedge</span> Clock <span class="token keyword">or</span> <span class="token keyword">posedge</span> Reset<span class="token punctuation">)</span> <span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">negedge</span> Clock <span class="token keyword">or</span> <span class="token keyword">negedge</span> Reset<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">module dff (input d, input rstn, input clk, output reg q); always @ (posedge clk or negedge rstn) if (!rstn) // if rstn is lowq &lt;= 0; // reset qelse q &lt;= d;endmodule<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Shift-register"><a href="#Shift-register" class="headerlink" title="Shift register"></a>Shift register</h3><h5 id="VHDL-1"><a href="#VHDL-1" class="headerlink" title="VHDL"></a><strong>VHDL</strong></h5><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> shift_register <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>i_clk <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>i_rstb <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>i_data <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>o_data <span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> shift_register<span class="token punctuation">;</span><span class="token keyword">architecture</span> rtl <span class="token keyword">of</span> shift_register <span class="token keyword">is</span><span class="token keyword">signal</span> r0_data <span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">signal</span> r1_data <span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">signal</span> r2_data <span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">signal</span> r3_data <span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>o_data <span class="token operator">&lt;=</span> r3_data<span class="token punctuation">;</span>p_sreg <span class="token punctuation">:</span> <span class="token keyword">process</span><span class="token punctuation">(</span>i_clk<span class="token punctuation">,</span> i_rstb<span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">if</span><span class="token punctuation">(</span>i_rstb<span class="token operator">=</span><span class="token number">'0'</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">if</span> reset <span class="token operator">=</span> <span class="token number">0</span> <span class="token keyword">then</span> perform the resetr0_data <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">others</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token number">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r1_data <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">others</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token number">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r2_data <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">others</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token number">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r3_data <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token keyword">others</span><span class="token operator">=</span><span class="token operator">&gt;</span><span class="token number">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">elsif</span><span class="token punctuation">(</span><span class="token function">rising_edge</span><span class="token punctuation">(</span>i_clk<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token operator">/</span><span class="token operator">/</span> <span class="token keyword">if</span> there <span class="token keyword">is</span> a rising edge <span class="token keyword">on</span> i_clk <span class="token keyword">then</span> shift rightr0_data <span class="token operator">&lt;=</span> i_data<span class="token punctuation">;</span>r1_data <span class="token operator">&lt;=</span> r0_data <span class="token punctuation">;</span>r2_data <span class="token operator">&lt;=</span> r1_data <span class="token punctuation">;</span>r3_data <span class="token operator">&lt;=</span> r2_data <span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">process</span> p_sreg<span class="token punctuation">;</span><span class="token keyword">end</span> rtl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Verilog-6"><a href="#Verilog-6" class="headerlink" title="Verilog"></a><strong>Verilog</strong></h5><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> sreg4 <span class="token punctuation">(</span>data_out<span class="token punctuation">,</span> data_in<span class="token punctuation">,</span> clk<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">output</span> data_out<span class="token punctuation">;</span> <span class="token comment">// serial data output</span><span class="token keyword">input</span> data_in<span class="token punctuation">;</span> <span class="token comment">// serial data input</span><span class="token keyword">input</span> clk<span class="token punctuation">;</span> <span class="token comment">// clock input</span><span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span> sreg<span class="token punctuation">;</span> <span class="token comment">// 4 stage D-FF for this shift</span><span class="token keyword">initial</span> sreg <span class="token operator">=</span> <span class="token number">4'b0</span><span class="token punctuation">;</span> <span class="token comment">// set the 4 most significant bits of sreg to 0</span><span class="token important">always @</span> <span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token comment">// if there is a positive edge on clk then shift the data right</span><span class="token keyword">begin</span>sreg<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> sreg<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>sreg<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> sreg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>sreg<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> sreg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>sreg<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> data_in<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">wire</span> data_out<span class="token punctuation">;</span><span class="token keyword">assign</span> data_out <span class="token operator">=</span> sreg<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// sreg will become the serial output</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token comment">//用下面这个表示拼接数据</span>sreg <span class="token operator">&lt;=</span> <span class="token operator">{</span>sreg<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data_in<span class="token operator">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><h5 id="vhdl-4"><a href="#vhdl-4" class="headerlink" title="vhdl"></a>vhdl</h5><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> updown_count <span class="token keyword">is</span><span class="token keyword">Port</span> <span class="token punctuation">(</span> clk<span class="token punctuation">,</span> rst<span class="token punctuation">,</span> updown <span class="token punctuation">:</span> <span class="token keyword">in</span> STD_LOGIC<span class="token punctuation">;</span>count <span class="token punctuation">:</span> <span class="token keyword">out</span> STD_LOGIC_VECTOR <span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> updown_count<span class="token punctuation">;</span><span class="token keyword">architecture</span> Behavioral <span class="token keyword">of</span> updown_count <span class="token keyword">is</span><span class="token keyword">signal</span> temp<span class="token punctuation">:</span><span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:=</span><span class="token vhdl-vectors number">"0000"</span><span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">process</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span> rst<span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">if</span><span class="token punctuation">(</span>rst <span class="token operator">=</span> ‘<span class="token number">1</span>'<span class="token punctuation">)</span><span class="token keyword">then</span>temp <span class="token operator">&lt;=</span> <span class="token vhdl-vectors number">"0000"</span><span class="token punctuation">;</span><span class="token keyword">elsif</span><span class="token punctuation">(</span><span class="token function">rising_edge</span><span class="token punctuation">(</span>clk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">then</span><span class="token keyword">if</span><span class="token punctuation">(</span>updown <span class="token operator">=</span> <span class="token number">'0'</span><span class="token punctuation">)</span><span class="token keyword">then</span>temp <span class="token operator">&lt;=</span> temp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span>temp <span class="token operator">&lt;=</span> temp <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">process</span><span class="token punctuation">;</span>count <span class="token operator">&lt;=</span> temp<span class="token punctuation">;</span><span class="token keyword">end</span> Behavioral<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="verilog"><a href="#verilog" class="headerlink" title="verilog"></a>verilog</h5><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> <span class="token function">counter</span><span class="token punctuation">(</span>clk<span class="token punctuation">,</span> reset<span class="token punctuation">,</span> up_down<span class="token punctuation">,</span> load<span class="token punctuation">,</span> data<span class="token punctuation">,</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//define input and output ports</span><span class="token keyword">input</span> clk<span class="token punctuation">,</span> reset<span class="token punctuation">,</span> load<span class="token punctuation">,</span> up_down<span class="token punctuation">;</span><span class="token keyword">input</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> data<span class="token punctuation">;</span><span class="token keyword">output</span> <span class="token keyword">reg</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> count<span class="token punctuation">;</span>    <span class="token comment">//always block will be executed at each and every positive edge of the clock</span><span class="token important">always@</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">)</span> <span class="token keyword">begin</span><span class="token function">if</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token comment">//Set Counter to Zero</span>count <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>load<span class="token punctuation">)</span> <span class="token comment">//load the counter with data value</span>count <span class="token operator">&lt;=</span> data<span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token function">if</span><span class="token punctuation">(</span>up_down<span class="token punctuation">)</span> <span class="token comment">//count up</span>count <span class="token operator">&lt;=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token comment">//count down</span>count <span class="token operator">&lt;=</span> count <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">endmodule</span> <span class="token punctuation">:</span>counter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-Verilog" data-language="Verilog"><code class="language-Verilog">input [net_type] [range] list of names<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="FSM"><a href="#FSM" class="headerlink" title="FSM"></a>FSM</h3><p>case statement </p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">case</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span>STATE_0<span class="token punctuation">:</span> <span class="token comment">// Code for State 0</span>STATE_1<span class="token punctuation">:</span> <span class="token comment">// Code for State 1</span><span class="token comment">// ...</span>STATE_N<span class="token punctuation">:</span> <span class="token comment">// Code for State N</span><span class="token keyword">endcase</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Verilog-7"><a href="#Verilog-7" class="headerlink" title="Verilog"></a>Verilog</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221115180111458.png" alt="image-20221115180111458"></p><pre class="line-numbers language-verilog" data-language="verilog"><code class="language-verilog"><span class="token keyword">module</span> edgeDetector<span class="token punctuation">(</span><span class="token keyword">input</span> <span class="token keyword">wire</span> clk<span class="token punctuation">,</span> reset<span class="token punctuation">,</span> <span class="token keyword">input</span> <span class="token keyword">wire</span> level<span class="token punctuation">,</span> <span class="token keyword">output</span> <span class="token keyword">reg</span> flag<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">localparam</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token comment">// define three enumerated states</span>zeroMoore <span class="token operator">=</span> <span class="token number">2'b00</span><span class="token punctuation">,</span>edgeMoore <span class="token operator">=</span> <span class="token number">2'b01</span><span class="token punctuation">,</span> oneMoore <span class="token operator">=</span> <span class="token number">2'b10</span><span class="token punctuation">;</span><span class="token keyword">reg</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> stateMoore_reg<span class="token punctuation">,</span> stateMoore_next<span class="token punctuation">;</span><span class="token important">always @</span><span class="token punctuation">(</span><span class="token keyword">posedge</span> clk<span class="token punctuation">,</span> <span class="token keyword">posedge</span> reset<span class="token punctuation">)</span><span class="token keyword">begin</span>   <span class="token function">if</span><span class="token punctuation">(</span>reset<span class="token punctuation">)</span> <span class="token comment">// if reset is high then set the state of the FSM to zero</span>   <span class="token keyword">begin</span>    stateMoore_reg <span class="token operator">&lt;=</span> zeroMoore<span class="token punctuation">;</span>   <span class="token keyword">end</span>   <span class="token keyword">else</span> <span class="token comment">// otherwise update the state</span>   <span class="token keyword">begin</span>    stateMoore_reg <span class="token operator">&lt;=</span> stateMoore_next<span class="token punctuation">;</span>   <span class="token keyword">end</span><span class="token keyword">end</span>    <span class="token important">always @</span><span class="token punctuation">(</span>stateMoore_reg<span class="token punctuation">,</span> level<span class="token punctuation">)</span><span class="token keyword">begin</span>  <span class="token comment">// the following line stores current state as the next state. This ensures that the next </span>  state is specified  stateMoore_next <span class="token operator">=</span> stateMoore_reg<span class="token punctuation">;</span>  flag<span class="token operator">=</span> <span class="token number">1'b0</span><span class="token punctuation">;</span> <span class="token comment">// set flag to zero</span><span class="token function">case</span><span class="token punctuation">(</span>stateMoore_reg<span class="token punctuation">)</span> zeroMoore<span class="token punctuation">:</span> <span class="token comment">// if state is zero</span>  <span class="token function">if</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span> <span class="token comment">// and level is 1</span>    stateMoore_next <span class="token operator">=</span> edgeMoore<span class="token punctuation">;</span> <span class="token comment">// then set the state to edge</span> edgeMoore<span class="token punctuation">:</span>   flag <span class="token operator">=</span> <span class="token number">1'b1</span><span class="token punctuation">;</span> <span class="token comment">// set flag to 1</span>   <span class="token function">if</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span> <span class="token comment">// if level is 1</span>     stateMoore_next <span class="token operator">=</span> oneMoore<span class="token punctuation">;</span> <span class="token comment">// then set the state to edge</span>   <span class="token keyword">else</span>      stateMoore_next <span class="token operator">=</span> zeroMoore<span class="token punctuation">;</span> <span class="token comment">// else go to state zero</span>   <span class="token keyword">end</span>oneMoore<span class="token punctuation">:</span>    <span class="token function">if</span><span class="token punctuation">(</span><span class="token operator">~</span>level<span class="token punctuation">)</span> <span class="token comment">// if level is 0,</span>     stateMoore_next <span class="token operator">=</span> zeroMoore<span class="token punctuation">;</span> <span class="token comment">// then go to state zero. </span> <span class="token keyword">endcase</span><span class="token keyword">end</span><span class="token keyword">endmodule</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> DSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSD-3.3-datapathcontrol</title>
      <link href="//post/DSD-3.3-datapathcontrol.html"/>
      <url>//post/DSD-3.3-datapathcontrol.html</url>
      
        <content type="html"><![CDATA[<h1 id="Datapath-amp-Control"><a href="#Datapath-amp-Control" class="headerlink" title="Datapath &amp; Control"></a>Datapath &amp; Control</h1><p>A real digital system incorporates both elements (i.e. datapath and control) working in unison</p><p>Datapath – provides status to control unit and makes decisions on next state.</p><p>Control unit – determines the sequence of operations.</p><h2 id="Data-Flow-Control"><a href="#Data-Flow-Control" class="headerlink" title="Data Flow Control"></a>Data Flow Control</h2><p>假如只有一条输入线路，通过register控制A B信号同时到达加法器</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221115183508410.png" alt="image-20221115183508410" style="zoom:80%;"><p>初始情况加法器输入输出都为？（不确定）</p><p>先让input输入A 加法器B的值等于A，A=？</p><p>下一个时钟输入B加法器A=A,B=B</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221115183922945.png" alt="image-20221115183922945" style="zoom:67%;"><p>取A+B的程序是:</p><ol><li><p>初始条件</p></li><li><p>输入操作数A</p></li><li><p>将A存储到寄存器A中</p></li><li><p>输入操作数B</p></li><li><p>将B存储到寄存器B中</p></li><li><p>读取输出</p></li></ol><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221115184024574.png" alt="image-20221115184024574" style="zoom:67%;"><p>将整个任务分解成更小的子任务，这些子任务可以在FSM中依次执行。</p><p>模块化、层次化设计:将系统划分为模块化子系统。</p><p>输入/输出</p><h3 id="Datapath-and-Control-Unit"><a href="#Datapath-and-Control-Unit" class="headerlink" title="Datapath and Control Unit"></a>Datapath and Control Unit</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221115184742824.png" alt="image-20221115184742824"></p><p>– Datapath: data storage and processing</p><p>– Control unit: data flow and function selections</p><ul><li>There are three basic components in a datapath:</li></ul><p>– set of registers in the system.</p><p>– operations performed on data stored.</p><p>– control that determines sequence of operations.</p><h3 id="Register-Transfers-notation"><a href="#Register-Transfers-notation" class="headerlink" title="Register Transfers notation"></a>Register Transfers notation</h3><p>Register transfer notation (RTN) – notation which describes the datapath</p><p>寄存器传输表示法在描述数据路径时很有用。这种设计级别通常称为寄存器传输级别(RTL)。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221115184949965.png" alt="image-20221115184949965"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221115184958992.png" alt="image-20221115184958992"></p><p>从一个寄存器到另一个寄存器的数据传输使用替换运算符表示</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122201012644.png" alt="image-20221122201012644" style="zoom:80%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122201042694.png" style="zoom:50%;"><p>R2将被R1替代</p><p>布尔信号可以添加来创建条件传输，即数据传输依赖于控制信号:</p><p>K1是控制（使能信号）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122201200626.png" alt="image-20221122201200626" style="zoom:67%;"><p>当K1=1时，且时钟到来时将R1传到R2</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122201248279.png" alt="image-20221122201248279" style="zoom:67%;"><p>多个转移同时发生（一个时钟沿）：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122201329841.png" alt="image-20221122201329841" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122201349314.png" alt="image-20221122201349314" style="zoom:50%;"><p>RTN的表示方法：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/695031e123eb3bf646d91b73cf7a73a.jpg" alt="695031e123eb3bf646d91b73cf7a73a"></p><p>srR1 右移</p><p>slR1 左移</p><h3 id="Micro-Operations"><a href="#Micro-Operations" class="headerlink" title="Micro-Operations"></a>Micro-Operations</h3><p>RTN中的运算符：微操作-对存储在寄存器或存储器中的数据进行的基本操作。</p><p>4 main types:</p><p>– Transfer: normal and conditional transfer</p><p>– Arithmetic: addition, subtraction</p><p>– Logic: AND, OR, XOR, NOT</p><p>– Shift: shift left (towards MSB), shift right (towards LSB)</p><p>如：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122201700482.png" alt="image-20221122201700482" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122201724193.png" alt="image-20221122201724193" style="zoom:50%;"><p>移动微操作用于数据的横向移动;寄存器的内容可以向左或向右移动。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122201754186.png" alt="image-20221122201754186"></p><p>这里使用组合逻辑的移位器</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122201822355.png" style="zoom:67%;"><h2 id="Datapath"><a href="#Datapath" class="headerlink" title="Datapath"></a>Datapath</h2><p>数字系统可以分为datapath＋control unite</p><p>数据路径——数字系统的数据所采用的路径</p><p>包含寄存器以及组合逻辑器件： ALUs, multipliers, dividers, shifters and rotators</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122203701880.png" alt="image-20221122203701880"></p><p>一个例子：Adding 100 integers in an array <em>x</em>[<em>i</em>] together</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122202412729.png" alt="image-20221122202412729" style="zoom:67%;"><p>用datapath处理：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122202445627.png" alt="image-20221122202445627" style="zoom:67%;"><p>得到状态机：输入V为x[i]是否成功输入？</p><p>输出为load 和 clr</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122202537961.png" alt="image-20221122202537961"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122202527274.png" alt="image-20221122202527274" style="zoom:67%;"><h3 id="Register-File-寄存器堆"><a href="#Register-File-寄存器堆" class="headerlink" title="Register File:寄存器堆"></a>Register File:寄存器堆</h3><p>Control signals are: </p><p>•write enable (WE) 写使能</p><p>• write address (WA) 写地址（往哪个寄存器里保存数据）</p><p>• read address A (RA) A端口输出哪个寄存器的数据</p><p>• read address B RB) B端口输出哪个寄存器的数据</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122203348918.png" alt="image-20221122203348918"></p><p>一个例子：把input存到R3,portA输出R0, PortB输出R1</p><p>注意这是个同步电路但是没画出时钟</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122203418806.png" alt="image-20221122203418806" style="zoom:67%;"><h3 id="Control-Word"><a href="#Control-Word" class="headerlink" title="Control Word"></a>Control Word</h3><p>当数据路径中有许多组合电路时，就会有大量的控制信号。</p><p>控制字:发送到数据路径块的控制信号的集合。</p><p>控制字包含控制单元为控制数据路径中的不同功能而必须生成的所有控制信号。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122203742470.png" alt="image-20221122203742470" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122203828000.png" alt="image-20221122203828000" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122203750786.png" alt="image-20221122203750786" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122205640981.png" alt="image-20221122205640981"></p><p>由于数字电路的传播延时，应该将时钟信号周期设置大于电路延时</p><p>例子：Given a 8-bit binary number X, count the no. of ones in X找8bit 数据中有几个比特为1<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122204102308.png" alt="image-20221122204102308" style="zoom:67%;"></p><p>在运算过程中最后的三态门都是高阻态，只有在最后需要输出时，才设为1（打开）</p><p>流程的伪代码：使用00000001与上data,如果input的最后一位是1就加一，否则不变，然后进行向右移位，直到data为0</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122204232463.png" alt="image-20221122204232463" style="zoom:67%;"><p> RTL/RTN:</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122204439636.png" alt="image-20221122204439636" style="zoom:67%;"><p>注意一个时钟只能处理一行</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122204731573.png" alt="image-20221122204731573" style="zoom:67%;"><p> Control Words：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221122205402576.png" alt="image-20221122205402576"></p><p>注意第二行和第三行：第二行使用R0 XOR R0产生0</p><p>第三行使用 R2自增产生1</p><p>循环红框中的control word直到最终input data 为0</p><p>要解决一个问题，我们可以先设计一个具有适当微操作的数据路径，并给出一个正确控制步骤和dataflow的FSM。</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> DSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSD-4.1-memory</title>
      <link href="//post/DSD-4.1%20memory.html"/>
      <url>//post/DSD-4.1%20memory.html</url>
      
        <content type="html"><![CDATA[<h1 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h1><p>不同的方法来组织内存，如：ROM和RAM。</p><p>• Registers can store bits temporarily.</p><p>– But it is <strong>costly</strong> to use registers to store large amount of data.</p><p>– Key advantages of registers for data storage are <strong>speed and easy-of-use.</strong></p><p>use memory storage devices to store data in higher density (capacity) and over longer time (volatility：断电也能保留存储内容).</p><h2 id="Memory-Sizes"><a href="#Memory-Sizes" class="headerlink" title="Memory Sizes"></a>Memory Sizes</h2><p>内存大小通常使用2的幂来指定</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129182625082.png" alt="image-20221129182625082" style="zoom:67%;"><p>尽管通常在SI单位中使用10的幂</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129182655866.png" alt="image-20221129182655866" style="zoom:67%;"><p>IEC -国际电工技术委员会-建议对2的幂使用单独的术语，以避免通信中的混淆。</p><h2 id="General-Model-of-Memory-Device"><a href="#General-Model-of-Memory-Device" class="headerlink" title="General Model of Memory Device"></a>General Model of Memory Device</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129182729761.png" alt="image-20221129182729761"></p><p>control用来控制读写或者电源</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129182843250.png" alt="image-20221129182843250"></p><p>读/写头必须从当前位置传输到新地址，中间要经过其他地址，这很耗时。</p><p>适合于大量数据存储而不适合快速读写</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129185001113.png" alt="image-20221129185001113"></p><h2 id="Read-x2F-Write-Memory"><a href="#Read-x2F-Write-Memory" class="headerlink" title="Read/Write Memory"></a>Read/Write Memory</h2><p>读/写内存(RWM)的特点是能够随时支持存储和检索</p><p>Most RWMs are random-access memory (RAM)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129183041795.png" alt="image-20221129183041795"></p><p>Most RAMs are volatile, meaning that they lose their memory when power is removed</p><p>Two main types: </p><p>– <strong>Static RAM (SRAM)</strong> – once word written at a location it remains stored until chip power removed or bit overwritten.</p><p>– <strong>Dynamic RAM (DRAM)</strong> – data stored at each location must be refreshed periodically by reading it and writing it back again or else it disappears.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129190007702.png" alt="image-20221129190007702"></p><h3 id="Dynamic-RAM-DRAM"><a href="#Dynamic-RAM-DRAM" class="headerlink" title="Dynamic RAM (DRAM)"></a><strong>Dynamic RAM (DRAM)</strong></h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129190046614.png" alt="image-20221129190046614"></p><p>为了构建具有更高密度(每个芯片有更多比特)的ram，芯片设计师发明了每比特只使用一个晶体管的存储单元。基于dram的内存系统使用刷新周期定期更新每个内存单元。这涉及到将每个单元中有些退化的内容依次读入D-latch</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129190315516.png" alt="image-20221129190315516"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129190423920.png" alt="image-20221129190423920" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129190438468.png" alt="image-20221129190438468" style="zoom:50%;"><p>写5V(‘1’):先column设为5v,然后row设为5V, 最后等电容器电压到达5V后row设为0v</p><h5 id="读取数据："><a href="#读取数据：" class="headerlink" title="读取数据："></a>读取数据：</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129190357029.png" alt="image-20221129190357029"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129190406497.png" alt="image-20221129190406497"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129190454376.png" style="zoom:50%;"><p>Bit line (i.e. column) is first pre-charged to a voltage half-wave between HIGH and LOW (e.g. 2.5 V).</p><p>A sense amplifier detects this small change and recovers a ‘1‘ or ‘0’, respectively</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221129190559248.png" alt="image-20221129190559248"></p><p>• set column to 2.5 V</p><p>• assert row to turn transistor ON </p><p>• sense voltage raise  ‘1’ stored; otherwise  ‘0‘</p><p>• bit latched</p><p>• write back: set column = Q</p><p>• output data OE = ‘1’</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221208150314196.png" alt="image-20221208150314196"></p><p>Write down the sequence of data and control signals to</p><ol><li><p>write “10” to cells w and x;</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/75cd8a06c25c12a69fb5efcabb3f8f3.png" alt="75cd8a06c25c12a69fb5efcabb3f8f3"></p></li><li><p>read cells y and z;</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/0ff9224619c621be32fb5f70aae820a.png" alt="0ff9224619c621be32fb5f70aae820a"></p></li><li><p>copy cells y and z to cells w and x</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/8611373b15aa4ca2a5828c722d3c37a.png" alt="8611373b15aa4ca2a5828c722d3c37a"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> DSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSD-4.2 Arithmetic</title>
      <link href="//post/DSD-4.2%20Arithmetic.html"/>
      <url>//post/DSD-4.2%20Arithmetic.html</url>
      
        <content type="html"><![CDATA[<h1 id="Arithmetic-and-float"><a href="#Arithmetic-and-float" class="headerlink" title="Arithmetic and float"></a>Arithmetic and float</h1><h2 id="running-sums-计算无符号乘法"><a href="#running-sums-计算无符号乘法" class="headerlink" title="running sums 计算无符号乘法"></a>running sums 计算无符号乘法</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206155258203.png" alt="image-20221206155258203"></p><p>第一步： running sum清零：0000</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206185612108.png" alt="image-20221206185612108"></p><p><strong>结果一定为2N位</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206191008575.png" alt="image-20221206191008575" style="zoom:67%;"><h2 id="Longhand计算有符号乘法：两种纠错方式"><a href="#Longhand计算有符号乘法：两种纠错方式" class="headerlink" title="Longhand计算有符号乘法：两种纠错方式"></a>Longhand计算有符号乘法：两种纠错方式</h2><h3 id="At-the-end"><a href="#At-the-end" class="headerlink" title="At the end"></a>At the end</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206185709119.png" alt="image-20221206185709119"></p><p>注意：初始化多一位，每次写乘法结果要扩展一位符号，二者求和最高位进位要舍弃，并补一位。</p><p>在所有计算完成后进行纠错</p><p>加一个纠错码：纠错码是A的2‘s补码</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206190012733.png" alt="image-20221206190012733" style="zoom:50%;"><p>检验是不是到了2Nbit，到了2N后不再扩展，进位都舍弃</p><h3 id="in-last-step"><a href="#in-last-step" class="headerlink" title="in last step"></a>in last step</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206190301896.png" alt="image-20221206190301896"></p><p>计算部分与前面一样，但是在最后一次加法时，进行纠错：将A扩展后取2’s comp</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206190857746.png" alt="image-20221206190857746" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206191022954.png" alt="image-20221206191022954"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221208164133916.png" alt="image-20221208164133916" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206191527045.png" alt="image-20221206191527045"></p><h3 id="Reduced-Storage"><a href="#Reduced-Storage" class="headerlink" title="Reduced Storage"></a>Reduced Storage</h3><p>假设我们想要保持位的存储尽可能小，在前面的例子中，我们为running sum保留了8位，为乘数保留了4位。现在我们总共分配2N位给运行和和乘数（只用一个2N寄存器存结果和B）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206191449716.png" alt="image-20221206191449716" style="zoom:67%;"><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/d04632cb3035dffb2864923268d2611.png" alt="d04632cb3035dffb2864923268d2611"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221208163156157.png" alt="image-20221208163156157"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221208163203730.png" alt="image-20221208163203730"></p><h2 id="Floating-Point-Number-Representation"><a href="#Floating-Point-Number-Representation" class="headerlink" title="Floating Point Number Representation"></a>Floating Point Number Representation</h2><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206191757025.png" alt="image-20221206191757025" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206191851587.png" alt="image-20221206191851587" style="zoom:67%;"><p>后四位可以被四舍五入</p><h3 id="Floating-Point-FP-Numbers"><a href="#Floating-Point-FP-Numbers" class="headerlink" title="Floating Point (FP) Numbers"></a>Floating Point (FP) Numbers</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206191938984.png" alt="image-20221206191938984" style="zoom:50%;"><p>M:尾数（小数）</p><p>E：指数</p><h4 id="Excess-Code-余码"><a href="#Excess-Code-余码" class="headerlink" title="Excess Code(余码)"></a>Excess Code(余码)</h4><p>The general form is: value = code – bias</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206192104008.png" alt="image-20221206192104008" style="zoom:67%;"><p>如四位的码 bias=0111=7</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206192203516.png" alt="image-20221206192203516"></p><p>用8 bit 表示Floating Point Numbers</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206192247672.png" alt="image-20221206192247672" style="zoom:67%;"><p>第一个比特表示</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206192631046.png" alt="image-20221206192631046"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206193825273.png" alt="image-20221206193825273"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206194028056.png" alt="image-20221206194028056" style="zoom:50%;"><h4 id="浮点求和"><a href="#浮点求和" class="headerlink" title="浮点求和"></a>浮点求和</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221206193858808.png" alt="image-20221206193858808"></p><p>小数 2‘scomplement形式是取反后在最低位加一</p><p>有一部分借鉴学长的笔记：<a href="https://blog.csdn.net/weixin_56193843/article/details/127598299">(101条消息) 北邮 数字系统设计 12 Arithmetic_这不是Ourz的ID的博客-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> DSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>电信系统-0-Telecoms Systems</title>
      <link href="//post/%E7%94%B5%E4%BF%A1%E7%B3%BB%E7%BB%9F-0-Telecoms%20Systems.html"/>
      <url>//post/%E7%94%B5%E4%BF%A1%E7%B3%BB%E7%BB%9F-0-Telecoms%20Systems.html</url>
      
        <content type="html"><![CDATA[<h1 id="Telecoms-Systems"><a href="#Telecoms-Systems" class="headerlink" title="Telecoms Systems"></a>Telecoms Systems</h1><h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><h3 id="repeater作用"><a href="#repeater作用" class="headerlink" title="repeater作用"></a>repeater作用</h3><p>When a signal travels through a channel, it suffers <strong>attenuation</strong>, <strong>distortion</strong> and <strong>noise contamination</strong>. Since their negative effects increase with the distance, special equipment called repeaters are inserted along the way.</p><p>由于存在<a href="https://baike.baidu.com/item/%E6%8D%9F%E8%80%97/2731413?fromModule=lemma_inlink">损耗</a>，在线路上传输的信号功率会逐渐<a href="https://baike.baidu.com/item/%E8%A1%B0%E5%87%8F/10871592?fromModule=lemma_inlink">衰减</a>，衰减到一定程度时将造成信号失真，因此会导致接收错误。<strong>中继器就是为解决这一问题而设计的。它完成物理线路的连接，对衰减的信号进行放大，保持与原数据相同。</strong></p><p>在模拟系统中，传输的是连续变化（continuously- varying）的波形。为了保持发射波形，<strong>中继器</strong>主要对信号进⾏滤波、均衡和<strong>放⼤</strong>。（filter， equalize and amplify the signal）</p><ul><li><h5 id="analog-systems-repeaters-essentially-filter-equalize-and-amplify-the-signal"><a href="#analog-systems-repeaters-essentially-filter-equalize-and-amplify-the-signal" class="headerlink" title="analog systems: repeaters essentially filter, equalize and amplify the signal."></a><strong>analog systems:</strong> repeaters essentially filter, equalize and amplify the signal.</h5></li><li><p>In <strong>digital systems</strong> sequences predefined waveforms (symbols) are transmitted. In this case, repeaters <strong>regenerate</strong> such waveforms</p></li></ul><h3 id="Transmission-impairment"><a href="#Transmission-impairment" class="headerlink" title="Transmission impairment"></a>Transmission impairment</h3><p>媒介中信号传输会有 impairment（损失）其中包括：</p><blockquote><p><strong>attenuation 衰减, distortion 失真 and noise 噪声.</strong></p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920085443941.png" alt="image-20220920085443941"></p><p>如何去让信号的传输更加稳定可靠，就是本课程的目的。我们关注信号的处理方式，以及信道的设计等等，以尽可能的减少Impairment，让通信过程更加可靠。 </p><h4 id="Attenuation"><a href="#Attenuation" class="headerlink" title="Attenuation"></a>Attenuation</h4><p><strong>loss of energy</strong> for <strong>overcoming</strong> the **resistance **of  medium(<strong>克服介质的阻⼒</strong>). </p><p><strong>amplifiers</strong>(放大器) are used to boost the signal back up to its original level(compensate for energy loss)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920085432843.png" alt="image-20220920085432843" style="zoom:50%;"><h4 id="Distortion"><a href="#Distortion" class="headerlink" title="Distortion"></a>Distortion</h4><p>signal <em>changes</em> in its <strong>form</strong> or <strong>shape</strong>. </p><p>Typically effects complex or composite signals:  the composite signal carrying different frequencies suffers from the delay of some of these frequencies</p><p>Each frequency component has its own propagation <strong>attenuation</strong> through a medium. </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920085852630.png" alt="image-20220920085852630" style="zoom:67%;"><h4 id="Noise"><a href="#Noise" class="headerlink" title="Noise"></a>Noise</h4><p>◆ Noise is the <strong>main source</strong> of a signal being corrupted</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920090119278.png" alt="image-20220920090119278" style="zoom:70%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920090203227.png" alt="image-20220920090203227" style="zoom:67%;"><p>可以看出analog信号在传输过程中比digital更容易失真</p><h3 id="WIRELESS-COMMUNICATIONS"><a href="#WIRELESS-COMMUNICATIONS" class="headerlink" title="WIRELESS COMMUNICATIONS"></a><strong>WIRELESS COMMUNICATIONS</strong></h3><h4 id="Types-of-wireless-network"><a href="#Types-of-wireless-network" class="headerlink" title="Types of wireless network"></a>Types of wireless network</h4><p>◆ WPAN (Wireless Personal Area Network)</p><p>– typically operates within about 30 feet</p><p>无线个人网：主要用于个人用户工作空间，典型距离覆盖几米，可以与计算机同步传输文件，访问本地外围设备，如打印机等。目前主要技术包括蓝牙（Bluetooth）和红外（IrDA）。</p><p>◆ WLAN (Wireless Local Area Network)</p><p>– operates within 300 yards </p><p>无线局域网：主要用于宽带家庭、大楼内部以及园区内部，典型距离覆盖几十米至上百米。目前主要技术为802.11系列。</p><p>◆ WMAN (Wireless Metropolitan Area Network )</p><p>– operates within tens of miles</p><p>◆ WWAN (Wireless Wide Area Network )</p><p>– operates over a large geographical area, mobile phone, </p><p>无线城域网和广域网：覆盖城域和广域环境，主要用于Internet/email访问，但提供的带宽比无线局域网技术要低很多。</p><h4 id="Why-wireless"><a href="#Why-wireless" class="headerlink" title="Why wireless?"></a>Why wireless?</h4><p>◆ No more cables</p><p>◆ Mobility and convenience</p><p>◆ Flexibility</p><p>◆ Scalability</p><h3 id="INFORMATION-CONVERSION"><a href="#INFORMATION-CONVERSION" class="headerlink" title="INFORMATION CONVERSION"></a>INFORMATION CONVERSION</h3><h4 id="Formatting-Data"><a href="#Formatting-Data" class="headerlink" title="Formatting  Data"></a>Formatting  Data</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920091038908.png" alt="image-20220920091038908" style="zoom:50%;"><p>Different sources of information need different methods to transform the source information to a digital format（ <strong>minimise bitrate but maintain quality</strong>）</p><p>– Text – ASCII (used to be others)</p><p>Each alphanumeric character is transformed into binary by character coding. Most popular character coding method is ASCII</p><p>– Voice (PSTN) – Pulse Code Modulation (G711a/u) 64kps</p><p>– Voice (GSM) – GSM codec (13kbps) EFR (improved quality)</p><p>– 3G WCDMA – AMR (adaptive Multi Rate) </p><p>– Picture – JPEG …..</p><p>– Video – MPEG2, MPEG4, H264</p><h4 id="可靠的通信系统传输信息"><a href="#可靠的通信系统传输信息" class="headerlink" title="可靠的通信系统传输信息"></a>可靠的通信系统传输信息</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920125903361.png" alt="image-20220920125903361" style="zoom:67%;"><p>pulse shaping : <strong>脉冲整形</strong>是改变传输脉冲波形的过程。其目的是使发射的信号更适合其目的或通信信道，通常是通过限制传输的有效带宽。</p><p>Multiplex: 传输媒体的带宽或容量往往会大于传输单一信号的需求，为了有效地利用通信线路,希望一个信道同时传输多路信号，这就是所谓的多路复用技术(Multiplexing)。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920124632755.png" alt="image-20220920124632755"></p><p><strong>信源输出</strong>可以为 模拟 OR 数字；<strong>信源编码器</strong>把analog or digital signal转成二进制符号表示（被称为信息序列）；<strong>信道编码器</strong>以受控的方式向信息序列中提供某种冗余，以克服噪声和信道干扰对信道造成的失真；<strong>数字调制器</strong>把二进制序列映射成信号波形，是与信道的接口。</p><p><strong>数字解调器</strong>把传输波形映射为信号编码，判断波形是0/1，</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> 电信系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.2-JSP</title>
      <link href="//post/3.2-JavaBean.html"/>
      <url>//post/3.2-JavaBean.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaBeans"><a href="#JavaBeans" class="headerlink" title="JavaBeans"></a><strong>JavaBeans</strong></h1><p>javabean是符合标准格式的Java类（就是个类，只不过把一些诸如属性、数据库连接单独拿出来作为一个类存在）。</p><p>A bean class has the same basic structure as an ordinary Java class, but should follow these rules: </p><ol><li><p>It must be within a named package.</p></li><li><p>每个(不是库中的)公共方法都应该以get或set开头</p></li><li><p>需要被序列化并且实现了 Serializable 接口（该接口内无方法）</p><p>需要导包</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Import</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span>Serializable</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>It does not usually have a <strong>main()</strong> method, but will have if some initial activity is required.</p></li><li><p>Must have a zero-argument (empty) constructor.</p></li><li><p>全为私有属性，但是要public的访问方法</p></li><li><p>Persistent non-<strong>boolean</strong> values should be accessed through methods called <strong>getXxx()</strong> and <strong>setXxx</strong> <strong>()</strong>. Boolean values are accessed using methods called isXxx()and setXxx().</p><p>对于布尔类型 <propertyname> ， 可以按常规属性的规则编写getter/setter方法外， <strong>getter方法可以使用</strong> <strong>is + <propertyname>()的形式来代替</propertyname></strong></propertyname></p></li></ol><h2 id="Steps-to-Create-a-JavaBean"><a href="#Steps-to-Create-a-JavaBean" class="headerlink" title="Steps to Create a JavaBean"></a><strong>Steps to Create a JavaBean</strong></h2><p>为所需的bean功能编写程序代码(确保bean类实现了Serializable接口)</p><p><strong>为每个属性（前端可能用到的所有属性）添加 <em>accessor</em> and <em>mutator</em></strong></p><p>编译bean，并尽可能将它(以及任何所需的资源文件)包装在JAR (Java Archive)文件中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BMIBean</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bmiType <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"Normal"</span><span class="token punctuation">,</span> <span class="token string">"Overweight"</span><span class="token punctuation">,</span> <span class="token string">"Obese"</span><span class="token punctuation">,</span> <span class="token string">"Extremely Obese"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bmiThreshold <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">20.0</span><span class="token punctuation">,</span><span class="token number">25.0</span><span class="token punctuation">,</span><span class="token number">30.0</span><span class="token punctuation">,</span><span class="token number">40.0</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">double</span> height<span class="token punctuation">,</span> weight<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span> height <span class="token operator">=</span> h<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> w<span class="token punctuation">)</span> <span class="token punctuation">{</span> weight <span class="token operator">=</span> w<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> height<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> weight<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">if</span> <span class="token punctuation">(</span>height <span class="token operator">&lt;=</span> <span class="token number">0.0</span><span class="token punctuation">)</span>         <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Divide by zero"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> ratio <span class="token operator">=</span> weight<span class="token operator">/</span><span class="token punctuation">(</span>height <span class="token operator">*</span> height<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>ratio <span class="token operator">&gt;</span> bmiThreshold<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                 <span class="token keyword">return</span> bmiType<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token string">"You are seriously underweight.Please seek medical advice."</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Note: No constructor given（<em>default</em>constructor has no arguments.）</p><h2 id="JavaBean"><a href="#JavaBean" class="headerlink" title="JavaBean"></a>JavaBean</h2><h5 id="如何使用（在JSP中如何使用JavaBean）？"><a href="#如何使用（在JSP中如何使用JavaBean）？" class="headerlink" title="如何使用（在JSP中如何使用JavaBean）？"></a>如何使用（在JSP中如何使用JavaBean）？</h5><h6 id="1-jsp-useBean-action-lets-you-load-a-bean-within-a-JSP-page"><a href="#1-jsp-useBean-action-lets-you-load-a-bean-within-a-JSP-page" class="headerlink" title="1. jsp:useBean action lets you load a bean within a JSP page"></a>1. <strong>jsp:useBean</strong> action lets you load a bean within a JSP page</h6><p> 用于获取 Bean 对象。<a href="jsp:useBean">jsp:useBean</a> 首先会在scope内查找 Bean 对象，如果 Bean 对象不存在，则创建 Bean 对象。（相当于在servlet中实例化一个类）</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:useBean id=“name” class=“package.class” /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1）id</p><p>表示 Bean <strong>实例化对象</strong>的变量名，可以在指定范围内使用该变量名。</p><p>2）class</p><p>表示类的路径 package.class。</p><p>3）scope</p><p>指定 Bean 的作用域（实例化对象的作用域），取值为：</p><ul><li><p>page(default value):：只能在当前页面使用该 Bean 对象；（最小范围）</p><p> The bean is stored in the <strong>PageContext</strong> object for the duration of the current request</p></li><li><p>request：只能在一次请求范围内使用该 Bean 对象；（可以转发给别人）</p><p> The bean is stored in the <strong>HttpServletRequest</strong> object</p></li><li><p>session：只能在一次会话范围内使用该 Bean 对象；</p><p>The bean is stored in the <strong>HttpSession</strong> object.</p></li><li><p><strong>application</strong>: The bean is stored in the <strong>ServletContext</strong> and can be accessed by <em>other pages or servlets</em>.</p></li></ul><p>这通常意味着“实例化由class指定的类的对象，并将其绑定到由id指定的名称的变量”。</p><p><strong>&lt;jsp:useBean id=“bmi” class=“elem004.BMIBean” /&gt;<strong>等价于</strong>&lt;% elem004.BMIBean bmi = new elem004.BMIBean(); %&gt;</strong></p><h6 id="2-jsp-setProperty"><a href="#2-jsp-setProperty" class="headerlink" title="2.jsp:setProperty"></a>2.jsp:setProperty</h6><p>设置 Bean 的属性值</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:setProperty name = "beanName" property = "propname" value = "attributeValue"/&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>name 指定需要修改属性的 Bean对象的名称；property 指定 Bean 对象的属性，即 Bean 类中的属性（成员变量）；value 是要设定的属性值。也可以替换为param：将后面跟着的参数的值直接赋值给这个属性</p><p><strong>（本质上就是调用set方法）</strong></p><ol><li><p>属性名区分大小写。</p></li><li><p>值必须用单引号或双引号括起来。</p></li><li><p>非容器元素应该以/&gt;结束标记。</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">   &lt;jsp:setProperty name=“bmi” property=“height” value=“1.6”/&gt;   等价于   &lt;% bmi.setHeight(1.6); %&gt;   前提是这个属性以及被定义才能这么用         &lt;jsp:setProperty name=“beanName” property=“someProperty”    value=‘&lt;% request.getParameter(”someParam”) %&gt;’ /&gt;   简化为：   &lt;jsp:setProperty name=“beanName” property=“someProperty”param=“someParam”/&gt;   转换到servlet：bean.someProperty=setSomeProperty(request.getParameter(”someParam”));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果bean的属性和输入参数（前端表单里传入Http中的参数）具有完全相同的名称，则可以直接将它们关联起来。（不用写 param）</p></li></ol><p>如</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:setProperty name=“beanName” property=“someProperty” /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>设置所有属性(有参数的属性)</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:setProperty name=“beanName” property=“*” /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="3-jsp-getProperty"><a href="#3-jsp-getProperty" class="headerlink" title="3.jsp:getProperty"></a>3.<strong>jsp:getProperty</strong></h6><pre class="line-numbers language-none"><code class="language-none">&lt;jsp:getProperty name = "beanName" property = "attributeName"&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:getProperty name=“bmi” property=“height” /&gt;等价于&lt;%= bmi.getHeight() %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="HANDLING-ERRORS"><a href="#HANDLING-ERRORS" class="headerlink" title="HANDLING ERRORS"></a><strong>HANDLING ERRORS</strong></h2><p>&lt;%@ page errorPage=”BMIError.jsp” %&gt;</p><h2 id="INCLUDING-FILES-IN-A-JSP"><a href="#INCLUDING-FILES-IN-A-JSP" class="headerlink" title="INCLUDING FILES IN A JSP"></a><strong>INCLUDING FILES IN A JSP</strong></h2><h3 id="two-ways-to-include-other-files"><a href="#two-ways-to-include-other-files" class="headerlink" title="two ways to include other files"></a>two ways to include other files</h3><ul><li>Using the <strong>include</strong> directive <strong>用includejsp指令</strong></li></ul><p>Used to include other JSP pages at translation time.</p><p><strong>If file is changed, all JSP files that include it must also be updated.</strong></p><p>引入的文件发生变化，要重新加载JSP文件</p><ul><li>Using the <strong>jsp:include</strong> action </li><li>&lt;%@ include file=”ContactSection.jsp” %&gt;</li></ul><p>Used to include static HTML or other text files at request time.</p><p>Included files can be modified without retranslating JSP page.</p><p>引入的文件发生变化，可以不用重新加载JSP文件</p><p>Useful for updating web information by non-programmers.</p><p>对于非程序员更新网页信息很有用</p><h4 id="引入文件（include-directive）："><a href="#引入文件（include-directive）：" class="headerlink" title="引入文件（include directive）："></a>引入文件（<strong>include</strong> directive）：</h4><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">&lt;%@ page import="java.util.Date" %&gt;&lt;%-- The following become fields in each servlet thatresults from a JSP page that includes this file. --%&gt;&lt;%! private int accessCount = 0;private Date accessDate = new Date();private String accessHost = "&lt;I&gt;No previous access&lt;/I&gt;"; %&gt;&lt;P&gt;&lt;HR&gt;This page &amp;copy; 2000 &lt;A HREF="http//www.my-company.com/"&gt;my-company.com&lt;/A&gt;.This page has been accessed &lt;%= ++accessCount %&gt;times since server reboot. It was last accessed from &lt;%= accessHost %&gt; at &lt;%= accessDate %&gt;.&lt;% accessHost = request.getRemoteHost(); %&gt;&lt;% accessDate = new Date(); %&gt;&lt;BODY&gt;&lt;TABLE BORDER=5 ALIGN="CENTER"&gt;&lt;TR&gt;&lt;TH CLASS="TITLE"&gt;Some Random Page&lt;/TABLE&gt;&lt;P&gt; Information about our products and services.&lt;P&gt; Blah, blah, blah.&lt;P&gt; Yadda, yadda, yadda.&lt;%@ include file="ContactSection.jsp" %&gt;&lt;/BODY&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221214174507216.png" alt="image-20221214174507216" style="zoom:67%;"><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ include file="ContactSection.jsp" %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="jsp-include-action"><a href="#jsp-include-action" class="headerlink" title="jsp:include action"></a><strong>jsp:include</strong> action</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BODY</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>CENTER</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TABLE</span> <span class="token attr-name">BORDER</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>5</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TR</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TH</span> <span class="token attr-name">CLASS</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>TITLE<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>What's New at JspNews.com<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TABLE</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>CENTER</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>P</span><span class="token punctuation">&gt;</span></span>Here is a summary of our four most recent news stories:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>OL</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LI</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>include</span> <span class="token attr-name">page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>news/Item1.htm<span class="token punctuation">"</span></span> <span class="token attr-name">flush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LI</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>include</span> <span class="token attr-name">page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>news/Item2.htm<span class="token punctuation">"</span></span> <span class="token attr-name">flush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LI</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>include</span> <span class="token attr-name">page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>news/Item3.htm<span class="token punctuation">"</span></span> <span class="token attr-name">flush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LI</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>include</span> <span class="token attr-name">page</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>news/Item4.htm<span class="token punctuation">"</span></span> <span class="token attr-name">flush</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>OL</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BODY</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">&lt;jsp:include page="news/Item1.htm" flush="true" /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Redirect-and-Forward"><a href="#Redirect-and-Forward" class="headerlink" title="Redirect and Forward"></a>Redirect and Forward</h2><p><strong>jsp:forward</strong> action </p><pre class="line-numbers language-none"><code class="language-none">&lt;jsp:forward page=“Relative URL” /&gt;&lt;% String destination = “myDestination.jsp”; %&gt;&lt;jsp:forward page=“&lt;%= destination %&gt;” /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Forward必须在响应提交给客户端之前调用，在主体输出缓冲区被刷新之前。</p><p>如果响应缓冲区中有IllegalStateException，则在输出之前自动清除未提交的输出</p><p>所以一般来说，如果你在servlet中访问了ServletOutputStream或PrintWriter对象，你不能使用这个方法</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> ANP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.3-javaBean</title>
      <link href="//post/3.3-JSP.html"/>
      <url>//post/3.3-JSP.html</url>
      
        <content type="html"><![CDATA[<h1 id="JSPs-and-JavaBeans"><a href="#JSPs-and-JavaBeans" class="headerlink" title="JSPs and JavaBeans"></a><strong>JSPs and JavaBeans</strong></h1><p>JSPs allow static HTML to be mixed with dynamically generated content from <em>servlets</em>.</p><p>– Helps to create presentation on the server side more easily.</p><p>– Helps to separate presentation from content.</p><p>JSP全称Java Server Pages，是一种动态网页开发技术。它使用JSP标签在HTML网页中插入Java代码。标签通常以&lt;%开头以%&gt;结束。</p><p>JSP是一种Java servlet，主要用于实现Java web应用程序的用户界面部分。网页开发者们通过结合HTML代码、XHTML代码、XML元素以及嵌入JSP操作和命令来编写JSP。</p><h2 id="JSP的优势"><a href="#JSP的优势" class="headerlink" title="JSP的优势"></a>JSP的优势</h2><p>以下列出了使用JSP带来的其他好处：</p><ul><li>与ASP相比：JSP有两大优势。首先，动态部分用Java编写，而不是VB或其他MS专用语言，所以更加强大与易用。第二点就是JSP易于移植到非MS平台上。</li><li>与纯 Servlets相比：JSP可以很方便的编写或者修改HTML网页而<strong>不用去面对大量的println语句。</strong></li><li>与SSI相比：SSI无法使用表单数据、无法进行数据库链接。</li><li>与JavaScript相比：虽然JavaScript可以在客户端动态生成HTML，但是很难与服务器交互，因此不能提供复杂的服务，比如访问数据库和图像处理等等。</li><li>与静态HTML相比：静态HTML不包含动态信息。</li></ul><h2 id="JSP基础"><a href="#JSP基础" class="headerlink" title="JSP基础"></a>JSP基础</h2><p>On a web server, JSP files are often stored in the same directory as HTML files</p><p>脚本程序可以包含任意量的Java语句、变量、方法或表达式，只要它们在脚本语言中是有效的。</p><p>脚本程序的语法格式：</p><pre class="line-numbers language-none"><code class="language-none">&lt;% 代码片段 %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>任何文本、HTML标签、JSP元素必须写在脚本程序的外面。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221205205111255.png" alt="image-20221205205111255"></p><p>第二部中的转换：这种转化只是简单地将所有模板文本改用println()语句，并且将所有的JSP元素转化成Java代码。</p><h3 id="How-the-servlet-is-created-from-the-JSP"><a href="#How-the-servlet-is-created-from-the-JSP" class="headerlink" title="How the servlet is created from the JSP"></a><strong>How the</strong> <strong>servlet</strong> <strong>is created from the JSP</strong></h3><p>The HTML and JSP code forms the <strong>void _jspService()</strong> method of the new <em>servlet</em>, apart from JSP declarations</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221205205439341.png" alt="image-20221205205439341"></p><h3 id="JSP-生命周期"><a href="#JSP-生命周期" class="headerlink" title="JSP 生命周期"></a>JSP 生命周期</h3><ul><li><p><strong>编译阶段：</strong></p><p>servlet容器编译servlet源文件，生成servlet类。如果这个文件没有被编译过，或者在上次编译后被更改过，则编译这个JSP文件。</p></li><li><p>初始化阶段：</p><p><strong>加载与JSP对应的servlet类，创建其实例，并调用它的初始化方法。</strong></p><p>如果您需要执行自定义的JSP初始化任务，复写jspInit()方法就行了，就像下面这样：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">public void jspInit(){  // 初始化代码}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>程序只初始化一次</p></li><li><p>执行阶段：</p><p><strong>调用与JSP对应的servlet实例的服务方法</strong></p><p>当JSP网页完成初始化后，JSP引擎将会调用_jspService()方法。</p><p>_jspService()方法需要一个HttpServletRequest对象和一个HttpServletResponse对象作为它的参数，就像下面这样：</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">void _jspService(HttpServletRequest request,HttpServletResponse response){   // 服务端处理代码}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>销毁阶段：</p><p>调用与JSP对应的servlet实例的销毁方法，然后销毁servlet实例</p><p>当您需要执行任何清理工作时复写jspDestroy()方法，比如释放数据库连接或者关闭文件夹等等。</p></li></ul><p>很明显，JSP生命周期的四个主要阶段和servlet生命周期非常相似，下面给出图示：</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221205205812438.png" alt="image-20221205205812438" style="zoom:50%;"><h2 id="syntax"><a href="#syntax" class="headerlink" title="syntax"></a><strong>syntax</strong></h2><p><strong>scripting elements</strong>　which let you specify code that will be part of the resultant <em>servlet</em>;</p><p><strong>directives</strong> which let you control the overall structure of the <em>servlet</em>;</p><p>用来设置与整个JSP页面相关的属性。</p><p><strong>actions</strong>它能够动态插入一个文件，重用JavaBean组件，引导用户去另一个页面，为Java插件产生相关的HTML等等。</p><p>在servlet中相当于html 语法被out.print()包住，而JSP中HTML直接写，相当于Java语句被不同类型的JSP包住。</p><h3 id="Scripting-elements"><a href="#Scripting-elements" class="headerlink" title="Scripting elements"></a><strong>Scripting elements</strong></h3><p> insert code into the resulting <em>servlet</em> in three ways:</p><p>– <em>expressions</em> 　<strong>&lt;%= expression %&gt;</strong>　</p><p>– <em>scriptlets</em> 　<strong>&lt;% code %&gt;</strong>　脚本程序可以包含任意量的Java语句、变量、方法或表达式</p><p>– <em>declarations</em> 　<strong>&lt;%! code %&gt;</strong>　声明一个或多个变量、方法</p><p>• Comments:</p><p><strong>&lt;%– JSP Comment (won’t appear in source)–%&gt;</strong></p><p><strong>&lt;!-– HTML Comment (will appear in source)–&gt;</strong></p><p>Each element has also an alternative XML syntax.</p><h4 id="JSP-expressions"><a href="#JSP-expressions" class="headerlink" title="JSP expressions"></a><strong>JSP expressions</strong></h4><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">Current time: &lt;%= java.util.Date() %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>• The expression is evaluated, converted into a string, and inserted in the page (where it appears).</p><p>将表达式的计算结果转换为字符串并插入回原来的位置</p><p>在运行时执行计算:-拥有对请求信息的完全访问权限</p><p>表达式内部不能定义变量</p><p>To simplify expressions, you can use a number of predefined variables (<em>aka</em> implicit objects) e.g. <strong>request, response,</strong> <strong>session, out</strong></p><p>JSP支持九个自动定义的变量，江湖人称隐含对象。这九个隐含对象的简介见下表：</p><table><thead><tr><th align="left"><strong>对象</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">request</td><td align="left"><strong>HttpServletRequest</strong>类的实例</td></tr><tr><td align="left">response</td><td align="left"><strong>HttpServletResponse</strong>类的实例</td></tr><tr><td align="left">out</td><td align="left"><strong>PrintWriter</strong>类的实例，用于把结果输出至网页上</td></tr><tr><td align="left">session</td><td align="left"><strong>HttpSession</strong>类的实例 automatically created</td></tr><tr><td align="left">application</td><td align="left"><strong>ServletContext</strong>类的实例，与应用上下文有关</td></tr><tr><td align="left">config</td><td align="left"><strong>ServletConfig</strong>类的实例</td></tr><tr><td align="left">pageContext</td><td align="left"><strong>PageContext</strong>类的实例，提供对JSP页面所有对象以及命名空间的访问</td></tr><tr><td align="left">page</td><td align="left">类似于Java类中的this关键字</td></tr><tr><td align="left">Exception</td><td align="left"><strong>Exception</strong>类的对象，代表发生错误的JSP页面中对应的异常对象</td></tr></tbody></table><ul><li><p><strong>application</strong>: This is the <strong>ServletContext</strong> object that allows you to share data with other <em>servlets</em> and JSPs:</p><p>Attributes set in application are accessible to all <em>servlets</em>/JSPs in a web application.</p><p>Useful when some of the <em>servlets</em> are not part of a session or don’t need to maintain session</p><p>web应用程序中需要由所有servlet共享的信息片段(通常很小)可以在ServletContext对象中设置。</p></li><li><p>pageContext**: This is the **PageContext  object which gives a single point of access to many of the page attributes</p><p>如果一个方法或构造函数需要多个与页面相关的对象(request, response, out，…)传递pageContext更容易</p></li></ul><p>也可以编写与之等价的XML语句：</p><pre class="line-numbers language-none"><code class="language-none">&lt;jsp:expression&gt;     表达式&lt;/jsp:expression&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JSP <strong>表达式不能以分号结尾</strong></p><pre class="line-numbers language-JSP" data-language="JSP"><code class="language-JSP">&lt;jsp:setProperty name=“user”property=“id”value=‘&lt;%= “UserID” + Math.random() %&gt;’ /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="JSP-scriptlets"><a href="#JSP-scriptlets" class="headerlink" title="JSP scriptlets"></a><strong>JSP</strong> <strong>scriptlets</strong></h3><p><em>Scriplets</em> are used to insert arbitrary Java code:</p><p>– they have access to the same pre-defined variables</p><p>其中写的内容会<strong>翻译在Servlet的Service方法</strong>中，可以在Service方法中定义局部变量或者调用其他方法，但是不能在Service中再定义其他的方法，也就是可以在&lt;% %&gt;中定义局部变量或者调用方法，但不能定义方法。</p><p><em>Scriptlet</em> code gets inserted directly into a <em>servlet</em>’s <strong>_jspService</strong>method, so they can be used for:</p><p>– setting response headers and status codes;</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;% response.setContentType(“application/vnd.ms-excel”); %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– invoking side effects, e.g. writing to server log or updating a database;</p><p>– executing code containing loops, conditionals or other “complex” constructs.</p><pre class="line-numbers language-none"><code class="language-none">&lt;%String queryData = request.getQueryString();out.println(“Attached Get data is: ” + queryData);%&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> <em>scriplets</em> are much more powerful than expressions</p><p>可以编写与其等价的XML语句，就像下面这样：</p><pre class="line-numbers language-none"><code class="language-none">&lt;jsp:scriptlet&gt;     代码片段&lt;/jsp:scriptlet&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="HTML中的写法："><a href="#HTML中的写法：" class="headerlink" title="HTML中的写法："></a>HTML中的写法：</h4><p>• Static HTML is inserted as <strong>out.println()</strong> statements.</p><p>会将HTML自动转为 println中内容</p><p>• So we can write JSP code that looks like this:</p><pre class="line-numbers language-none"><code class="language-none">&lt;% if (Math.random()&lt;0.5) { %&gt;Have a &lt;b&gt;nice&lt;/b&gt; day!&lt;% } else { %&gt;Have a &lt;b&gt;lousy&lt;b&gt; day!&lt;% } %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>转化到servlet中长这样</p><pre class="line-numbers language-none"><code class="language-none">if (Math.random()&lt;0.5) { out.println(“Have a &lt;b&gt;nice&lt;/b&gt; day!”);} else { out.println(“Have a &lt;b&gt;lousy&lt;b&gt; day!”); }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSP-declarations"><a href="#JSP-declarations" class="headerlink" title="JSP declarations"></a><strong>JSP declarations</strong></h3><p>声明语句在class中而不在 **_**jspService method中</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%! private int accessCount = 0; %&gt; declaration +initialisationAccesses to page since last server reboot:&lt;% ++accessCount; %&gt;  scriptlet&lt;%= accessCount %&gt;    expression<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Since declarations appear in the class body of resultant <em>servlet</em>, they become instance variables shared by multiple requests. May need to <em>synchronize</em> access!</p><p>编写与其等价的XML语句，就像下面这样：</p><pre class="line-numbers language-none"><code class="language-none">&lt;jsp:declaration&gt;     代码片段&lt;/jsp:declaration&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>JSP 声明中定义的变量、方法和类(内部类)是全局性的，在 JSP 页面中的任何地方都能够使用。JSP 声明中不能使用out.print()系列方法输出操作。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221205213854799.png" alt="image-20221205213854799" style="zoom:67%;"><h4 id="例子：写出返回页面"><a href="#例子：写出返回页面" class="headerlink" title="例子：写出返回页面"></a>例子：写出返回页面</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221205215308875.png" alt="image-20221205215308875"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221205215333515.png" alt="image-20221205215333515"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221205215401868.png" alt="image-20221205215401868"></p><h3 id="JSP-directives"><a href="#JSP-directives" class="headerlink" title="JSP directives"></a><strong>JSP directives</strong></h3><p>JSP指令用来设置与整个JSP页面相关的属性</p><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ directive attribute = ‘value’ %&gt; &lt;%@ directive attribute1 = “value1”attribute2 = “value2”// ...attributeN = “valueN” %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>必须用引号！ 如果想单用引号<strong>\”</strong></p><p>这里有三种指令标签：</p><table><thead><tr><th align="left"><strong>指令</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">&lt;%@ page … %&gt;</td><td align="left">定义页面的依赖属性，比如脚本语言、error页面、缓存需求等等</td></tr><tr><td align="left">&lt;%@ include … %&gt;</td><td align="left">包含其他文件</td></tr><tr><td align="left">&lt;%@ taglib … %&gt;</td><td align="left">引入标签库的定义，可以是自定义标签</td></tr></tbody></table><p><strong>page</strong> directive: lets you control structure by importing classes, customising a superclass, setting content type, etc. Can be placed <em>anywhere</em> inside the JSP document.</p><p>– <strong>include</strong> directive: lets you insert a file into the <em>JSP</em> at translation time. It’s placed where you want the file to be inserted.</p><h4 id="Attributes-of-the-page-directive"><a href="#Attributes-of-the-page-directive" class="headerlink" title="Attributes of the page directive"></a><strong>Attributes of the</strong> <strong>page</strong> <strong>directive</strong></h4><p><strong>import</strong>: lets you import packages.</p><pre class="line-numbers language-none"><code class="language-none">&lt;%@ page import = “package.class” %&gt;&lt;%@ page import = “package.class1, ..., package.classN” %&gt;&lt;%@ page import = “java.util.*” %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>contentType</strong>: sets content type in the response header.</p><pre class="line-numbers language-none"><code class="language-none">&lt;%@ page contentType = “text/plain” %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>JSPs  for regular  “text/html” <em>servlets</em> is default MIME type for</strong> </p><p><strong>session</strong>: controls whether page participates in HTTP sessions</p><pre class="line-numbers language-none"><code class="language-none">&lt;%@ page session = “true” %&gt; &lt;%-- Default --%&gt;&lt;%@ page session = “false” %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当为true时，预定义变量session被绑定到现有会话，如果不存在，则创建一个新会话</p><p><strong>buffer</strong>: specifies size of buffer used by the <strong>out</strong> variable.</p><pre class="line-numbers language-none"><code class="language-none">&lt;%@ page buffer = “sizekb” %&gt; &lt;%@ page buffer = “none” %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>autoflush</strong>: controls whether buffer is automatically emptied when full</p><pre class="line-numbers language-none"><code class="language-none">&lt;%@ page autoflush = “true” %&gt; &lt;%-- Default --%&gt;&lt;%@ page autoflush = “false” %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>errorPage</strong>如果希望在当前页面运行时出现错误时，指定一个错误提示页面，那么<code>errorPage</code>属性告诉JSP引擎显示哪个页面。<code>errorPage</code>属性的值是相对URL。</p><p>当抛出所有未捕获的异常时，以下指令用于在页面出错时指定显示<code>MyErrorPage.jsp</code>的内容 -</p><pre class="line-numbers language-none"><code class="language-none">&lt;%@ page errorPage = “Relative URL” %&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>isErrorPage</strong></p><p> indicates whether or not the current page can act as an error page for another JSP page.</p><p><code>isErrorPage</code>的值可为<code>true</code>或<code>false</code>。 <code>isErrorPage</code>属性的默认值为<code>false</code>。</p><p>例如，<code>handleError.jsp</code>将<code>isErrorPage</code>选项设置为<code>true</code>，因为它应该处理错误</p><pre class="line-numbers language-none"><code class="language-none">&lt;%@ page isErrorPage = “true” %&gt; &lt;%@ page isErrorPage = “false” %&gt; &lt;%-- Default --&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>extends</strong>: indicates the superclass of the <em>servlet</em> (not often used)</p><p><strong>info</strong>: defines a string retrievable through <strong>getServletInfo</strong>.</p><p><strong>language</strong>: defines language used in the page.</p><p>– “java” is both the default and only legal choice!</p><p>xml版本</p><p>XML versions</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>directive.directiveType</span> <span class="token attr-name">attribute</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> “value”</span> <span class="token punctuation">/&gt;</span></span>&lt;%@ page import = “java.util.Date” %&gt;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">jsp:</span>directive.page</span> <span class="token attr-name">import</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> “java.util.Date”</span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JSP-actions"><a href="#JSP-actions" class="headerlink" title="ＪＳＰ　actions"></a>ＪＳＰ　actions</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221207160217176.png" alt="image-20221207160217176" style="zoom:67%;"><pre class="line-numbers language-jsp" data-language="jsp"><code class="language-jsp">&lt;jsp:setProperty name=“user”property=“id”value=‘&lt;%= “UserID” + Math.random() %&gt;’ /&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> ANP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.4-MVC</title>
      <link href="//post/3.4-MVC.html"/>
      <url>//post/3.4-MVC.html</url>
      
        <content type="html"><![CDATA[<h1 id="MVC-Model-View-Controller"><a href="#MVC-Model-View-Controller" class="headerlink" title="MVC (Model View Controller)"></a><strong>MVC (Model View Controller)</strong></h1><p>MVC模式中，M是指业务模型，V是指用户界面，C则是控制器，使用MVC的目的是将M和V的实现<a href="https://baike.baidu.com/item/%E4%BB%A3%E7%A0%81/86048?fromModule=lemma_inlink">代码</a>分离，从而使同一个程序可以使用不同的表现形式。</p><h2 id="Model-1-Architecture"><a href="#Model-1-Architecture" class="headerlink" title="Model 1 Architecture"></a><strong>Model 1 Architecture</strong></h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211110827545.png" alt="image-20221211110827545"></p><p>JSP页面单独处理传入的请求并将响应发回。由于数据访问是通过访问javabean进行的，因此表示和内容仍然是分离的</p><p>优点:适用于简单应用，易于实现。</p><p>缺点:如果处理很复杂，可能需要在JSP页面中嵌入大量的scriptlet代码，这使得维护很困难</p><h2 id="Model-2-Architecture（MVC）"><a href="#Model-2-Architecture（MVC）" class="headerlink" title="Model 2 Architecture（MVC）"></a><strong>Model 2 Architecture</strong>（MVC）</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221211110937260.png" alt="image-20221211110937260"></p><p>将servlet用于流程密集型任务，将JSP用于表示，而javabean则为数据的逻辑行为建模</p><p>优点:适用于大型应用，允许使用可重用的软件组件，易于维护和测试</p><p>缺点:如果控制器的代码改变了，那么就需要重新编译它的代码并重新部署应用程序。</p><h2 id="Typical-behaviour-in-an-MVC-approach"><a href="#Typical-behaviour-in-an-MVC-approach" class="headerlink" title="Typical behaviour in an MVC approach"></a><strong>Typical behaviour in an MVC approach</strong></h2><p><em>Servlet</em> responds to initial request</p><p>Calls code that extracts or creates user data and places the data in JavaBeans.</p><p>Servlet存储javabean</p><p>—基于请求的共享—将JavaBean存储在请求对象中。</p><p>—基于会话的共享—将JavaBean存储在会话对象中。</p><p>—基于应用程序的共享—将JavaBean存储在ServletContext对象。</p><p>Servlet将请求转发到JSP页面以显示结果。-然后该页面从存储的JavaBean中获取数据。</p><p>JSPs do not modify objects:– It uses <strong>jsp:getProperty</strong> but not <strong>jsp:setProperty</strong>.</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> ANP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSD-2.2-VHDL简介</title>
      <link href="//post/DSD-2.2-VHDL%E7%AE%80%E4%BB%8B.html"/>
      <url>//post/DSD-2.2-VHDL%E7%AE%80%E4%BB%8B.html</url>
      
        <content type="html"><![CDATA[<h1 id="VHDL简介"><a href="#VHDL简介" class="headerlink" title="VHDL简介"></a>VHDL简介</h1><h2 id="What-can-VHDL-do"><a href="#What-can-VHDL-do" class="headerlink" title="What can VHDL do?"></a>What can VHDL do?</h2><p>VHDL can be used to model digital circuits and system.</p><p>Some type of circuit model allows simulation and/or testing of the circuit.</p><p>比起Graphical Approach来说，在面对有更多门电路时很方便</p><h3 id="Synthesiser"><a href="#Synthesiser" class="headerlink" title="Synthesiser"></a>Synthesiser</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922134232414.png" alt="image-20220922134232414"></p><ol><li>VHDL is a hardware-design language.</li></ol><p><em>When you are working with VHDL, you are not programming, you are “designing hardware”.</em></p><ol start="2"><li>Have a general concept of what your hardware should look like</li></ol><p>If you don’t understand basic digital constructs (e.g. logic gates), you’ll probably fail to generate efficient digital circuits.</p><h3 id="“Black-Box”-Design-Approach"><a href="#“Black-Box”-Design-Approach" class="headerlink" title="“Black-Box” Design Approach"></a>“Black-Box” Design Approach</h3><p>A VHDL module is considered as a black-box which has an entity and an architecture. </p><p><strong>entity:</strong> the black-box itself input and output specification</p><p> entity给出ports的定义</p><p><strong>architecture:</strong> the stuff that goes inside</p><p>architecture描述电路实现的功能</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922135134706.png" alt="image-20220922135134706"></p><h3 id="About-VHDL"><a href="#About-VHDL" class="headerlink" title="About VHDL"></a>About VHDL</h3><p>•VHDL is a specific language for describing hardware – digital circuits &amp; systems.</p><p>• V = Very High-Speed Integrated Circuit (VHSIC)</p><p>HDL = Hardware Descriptive Language</p><p> Unlike other high computer languages, VHDL is NOT sequential in nature.</p><p>i.e. A; B; may have the meaning as B; A;</p><p><strong>VHDL is a concurrent language</strong>（并发的 Concurrent）</p><p>VHDL instructions/statements are all executed at the same time.</p><blockquote><p>VHDL describes hardware so actions are executed in a concurrent manner, i.e. in parallel</p><p> it has the ability to execute a virtually unlimited number of statements at the same time in a concurrent manner.</p></blockquote><h3 id="Basic-Rules-about-VHDL"><a href="#Basic-Rules-about-VHDL" class="headerlink" title="Basic Rules about VHDL"></a>Basic Rules about VHDL</h3><ol><li><p>VHDL is not case senitive.</p><p>You can choose the case of your keywords and identifiers for readability.</p><p><strong>Dout &lt;= A and B;</strong> is the same as <strong>doUt &lt;= a AnD b;</strong></p></li><li><p>VHDL is not senitive to white space.</p><p>You should use spaces and tabs to well indent your VHDL </p><p>code.</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl">nQ <span class="token operator">&lt;=</span> In_a <span class="token operator">or</span> In_b<span class="token punctuation">;</span> <span class="token keyword">is</span> the same asnQ     <span class="token operator">&lt;=</span> in_a <span class="token operator">OR</span>  in_b<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Comments</p><p>VHDL comments begins with the symbol (–).</p><p> there is no block-style comments in VHDL</p></li><li><p>Parentheses（括号）</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">if</span> x <span class="token operator">=</span> <span class="token number">'0'</span> <span class="token operator">and</span> y <span class="token operator">=</span> <span class="token number">'0'</span> <span class="token operator">or</span> z <span class="token operator">=</span> <span class="token number">'1'</span> <span class="token keyword">then</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">'0'</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span>y <span class="token operator">=</span> <span class="token number">'0'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>z <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">then</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>Every VHDL statement is terminated with a semicolon (;)</p></li></ol>   <pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">port</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span> C<span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>   is actually considered a statement instead of a block</p><h3 id="Identifiers"><a href="#Identifiers" class="headerlink" title="Identifiers"></a>Identifiers</h3><p>An identifier refers to the name given to items in VHDL</p><p>Examples of identifiers in VHDL include signal names, port names, variable names</p><p>• Identifiers should be self-describing.</p><p>• Identifiers can be as long as you want, it’s up to you.</p><p>• Identifiers can only contain a combination of letters (A-Z, a-z), digits (0-9) and the underscore (_).</p><p>• It must start with an alphabetic character</p><p>• It must not end with an underscore (e.g. xxyy_)</p><p>• It must not have two consecutive underscores (e.g. xx__yy)</p><h4 id="Reserved-Words"><a href="#Reserved-Words" class="headerlink" title="Reserved Words"></a>Reserved Words</h4><p>You cannot use them as identifiers.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220927143528827.png" alt="image-20220927143528827" style="zoom:50%;"><h4 id="Logic-Operator"><a href="#Logic-Operator" class="headerlink" title="Logic Operator"></a>Logic Operator</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220927143555071.png" alt="image-20220927143555071"></p><h4 id="Relational-Operators"><a href="#Relational-Operators" class="headerlink" title="Relational Operators"></a>Relational Operators</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220927153819989.png" alt="image-20220927153819989"></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">begin</span>F3 <span class="token operator">&lt;=</span> <span class="token number">'1'</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>L <span class="token operator">=</span> <span class="token number">'0'</span> <span class="token operator">and</span> M <span class="token operator">=</span> <span class="token number">'0'</span> <span class="token operator">and</span> N <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token keyword">else</span><span class="token number">'1'</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>L <span class="token operator">=</span> <span class="token number">'1'</span> <span class="token operator">and</span> M <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token keyword">else</span><span class="token number">'0'</span><span class="token punctuation">;</span><span class="token keyword">end</span> f3_3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Entity-Declaration"><a href="#Entity-Declaration" class="headerlink" title="Entity Declaration"></a>Entity Declaration</h2><p>• VHDL entity construct provides a method to abstract the functionality of a circuit description to a high level</p><p>The main usage of entity:</p><p> <strong>Interface</strong> - the list of signals from the underlying circuit（inputs and outputs ）</p><p> <strong>wrapper</strong>:  how the black box interfaces with the outside world (other black-boxes)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922135549657.png" alt="image-20220922135549657"></p><p>“–”表示注释</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922140058686.png" alt="image-20220922140058686"></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token comment">-- interface description of killer_ckt</span><span class="token keyword">entity</span> killer_ckt <span class="token keyword">is</span><span class="token keyword">port</span><span class="token punctuation">(</span> life_in1<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>life_in2<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>ctrl_a<span class="token punctuation">,</span> ctrl_b<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>kill_a<span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">;</span>kill_b<span class="token punctuation">,</span> kill_c<span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> killer_ckt<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You can have several port names on the same line, separated by commas.（，隔开）</p><h3 id="generic-语句"><a href="#generic-语句" class="headerlink" title="generic 语句"></a>generic 语句</h3><p>GENERIC（常数名 数据类型 := 设定值）;</p><ol><li><p>定义实体的端口大小；</p></li><li><p>设计实体的物理特征；</p><p>在例化时应该加generic map来修改不同需求下的元件例化参数</p></li></ol><h3 id="port语句："><a href="#port语句：" class="headerlink" title="port语句："></a>port语句：</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922140235792.png" alt="image-20220922140235792"></p><ul><li>端口模式：</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922140319557.png" alt="image-20220922140319557"></p><ul><li>数据类型：</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922140434437.png" alt="image-20220922140434437"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220922140449927.png" alt="image-20220922140449927"></p><p>BOOLEAN: 真假</p><p>INTEGER:32位整数</p><p>CHARACTER : 字符型</p><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><p>The architecture describes what the circuit actually does.</p><p> there can be any number of equivalent architectures for the same single entity</p><p>同一entry可能有多种architecture</p><p>一个vhdl文件中可以存在多个architecture</p><h3 id="connect-Operator"><a href="#connect-Operator" class="headerlink" title="connect Operator"></a>connect Operator</h3><p>可以将若干个标准逻辑类型或者逻辑向量首尾相接，描述成为一个新的逻辑向量。它的语法如下：<br>&lt;signal 1&gt; &amp; &lt;signal 2&gt; &amp;</p><p>该运算符尤其是在描述串行移位寄存器的时候最为方便，例如： d &lt;= d(2 downto 0) &amp; a;</p><h3 id="Signal-Assignment-Operator"><a href="#Signal-Assignment-Operator" class="headerlink" title="Signal Assignment Operator"></a>Signal Assignment Operator</h3><p>&lt;= 表示 assignment</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl">G <span class="token operator">&lt;=</span> A <span class="token operator">and</span> B<span class="token punctuation">;</span> <span class="token comment">--indicates the value of signal G represents an AND logic operation between A and B.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token operator">&lt;</span>target<span class="token operator">&gt;</span> <span class="token operator">&lt;=</span> <span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Conditional-Signal-Assignment"><a href="#Conditional-Signal-Assignment" class="headerlink" title="Conditional Signal Assignment"></a>Conditional Signal Assignment</h3><p>WHEN/ELSE语句：</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token operator">&lt;</span>target<span class="token operator">&gt;</span> <span class="token operator">&lt;=</span> <span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span> <span class="token keyword">when</span> <span class="token operator">&lt;</span>condition<span class="token operator">&gt;</span> <span class="token keyword">else</span>            <span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span> <span class="token keyword">when</span> <span class="token operator">&lt;</span>condition<span class="token operator">&gt;</span> <span class="token keyword">else</span>            <span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>each of the expressions associates with a condition</p><p>the conditions are evaluated until the first one is true, then the expression is assigned to the target</p><p><strong>Only one assignment is applied per assignment statement.</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220927153311551.png" alt="image-20220927153311551"></p><p>With-select statement:</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">with</span> <span class="token operator">&lt;</span>control<span class="token operator">&gt;</span> <span class="token keyword">select</span>  <span class="token operator">&lt;</span>target<span class="token operator">&gt;</span> <span class="token operator">&lt;=</span> <span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span> <span class="token keyword">when</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span class="token punctuation">,</span>              <span class="token operator">&lt;</span>expression<span class="token operator">&gt;</span> <span class="token keyword">when</span> <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span class="token punctuation">,</span>              <span class="token operator">&lt;</span>value<span class="token operator">&gt;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928105712914.png" alt="image-20220928105712914"></p><h3 id="Intermediate-Signals"><a href="#Intermediate-Signals" class="headerlink" title="Intermediate Signals"></a>Intermediate Signals</h3><p>• The declaration is similar that in entity, except that the <strong>mode specification (in/out) is not needed.</strong></p><p>在architecture里声明中间信号而不是在entity</p><p> There is little (hardware) cost to pay when you use more Intermediate signals.</p><p> it is like an internal wire of the circuit, and it helps you to <strong>connect different parts of your circuit together.</strong></p><blockquote><p>Never judge the quality of a VHDL code by its length</p></blockquote><h4 id="exercise"><a href="#exercise" class="headerlink" title="exercise"></a>exercise</h4><ol><li>与非门</li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220927151933439.png" alt="image-20220927151933439"></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">library</span> IEEE<span class="token punctuation">;</span><span class="token keyword">use</span> IEEE<span class="token punctuation">.</span>std_logic_1164<span class="token punctuation">.</span><span class="token keyword">all</span><span class="token punctuation">;</span><span class="token comment">-- three-input NAND gate named my_nand3</span><span class="token keyword">entity</span> my_nand3 <span class="token keyword">is</span><span class="token keyword">port</span><span class="token punctuation">(</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>F <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> my_nand3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token comment">-- behavioural architecture with logic operators</span><span class="token keyword">architecture</span> my_nand3_arch <span class="token keyword">of</span> my_nand3 <span class="token keyword">is</span><span class="token keyword">signal</span> D<span class="token punctuation">:</span> std_logic<span class="token punctuation">;</span><span class="token keyword">begin</span>D <span class="token operator">&lt;=</span> A <span class="token operator">and</span> B <span class="token operator">and</span> C<span class="token punctuation">;</span> F <span class="token operator">&lt;=</span> <span class="token operator">not</span> D<span class="token punctuation">;</span><span class="token keyword">end</span> my_nand3_arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>you must include libraries</p></li><li><p>operators: <strong>and</strong>, <strong>or</strong>, <strong>nand</strong>, <strong>nor</strong>, <strong>xor</strong>, <strong>xnor</strong>(binary) and <strong>not</strong> (unary)</p></li></ul><h4 id="Implement-Boolean-Equations-using-VHDL"><a href="#Implement-Boolean-Equations-using-VHDL" class="headerlink" title="Implement Boolean Equations using VHDL"></a>Implement Boolean Equations using VHDL</h4><p>Two ways:</p><p>(i) express the equation directly in a concurrent statement</p><p>(ii) sub-divide the equation into several parts and link them together using intermediate signals</p><p> <strong>F3 = L’M’N + LM</strong></p><p>method (i):</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">architecture</span> f3_2 <span class="token keyword">of</span> my_ckt_f3 <span class="token keyword">is</span><span class="token keyword">begin</span>F3 <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">not</span> L<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token operator">not</span> M<span class="token punctuation">)</span> <span class="token operator">and</span> N<span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span>L <span class="token operator">and</span> M<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> f3_2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>method (ii):</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">architecture</span> f3_2 <span class="token keyword">of</span> my_ckt_f3 <span class="token keyword">is</span><span class="token keyword">signal</span> A1<span class="token punctuation">,</span> A2<span class="token punctuation">:</span> std_logic<span class="token punctuation">;</span> <span class="token comment">-- intermediate signals</span><span class="token keyword">begin</span>A1 <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token operator">not</span> L<span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token punctuation">(</span><span class="token operator">not</span> M<span class="token punctuation">)</span> <span class="token operator">and</span> N<span class="token punctuation">;</span>A2 <span class="token operator">&lt;=</span> L <span class="token operator">and</span> M<span class="token punctuation">;</span>F3 <span class="token operator">&lt;=</span> A1 <span class="token operator">or</span> A2<span class="token punctuation">;</span><span class="token keyword">end</span> f3_2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Bus-Signals"><a href="#Bus-Signals" class="headerlink" title="Bus Signals"></a>Bus Signals</h3><p>In VHDL, a bus signal can be specified by the vector data type,</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220927154159950.png" alt="image-20220927154159950"></p><p> <strong>std_logic_vector</strong> </p><p>When you declare a bus, you need to decide on the direction, whether the most significant bit (<strong>MSB</strong>)最高位 is on the left or on the right (assuming left-to-right writing).</p><ul><li><p>On the left: <strong>downto</strong>; on the right: <strong>to</strong></p><p>四选一数据选择器</p></li></ul><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token comment">-- a MUX that selects one of four bus lines for the output</span><span class="token keyword">entity</span> mux4 <span class="token keyword">is</span><span class="token keyword">port</span><span class="token punctuation">(</span> a_data<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      b_data<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      c_data<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      d_data<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sel1<span class="token punctuation">,</span> sel0<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>      data_out<span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> mux4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220927155023093.png" alt="image-20220927155023093"></p><h2 id="IEEE-Standard-Libraries"><a href="#IEEE-Standard-Libraries" class="headerlink" title="IEEE Standard Libraries"></a>IEEE Standard Libraries</h2><p>The data type std_logic and std_logic_vector is standardised by IEEE for the representation of digital signals.</p><p>In its generous definition, it is a nine-valued logic containing: </p><p>0, 1, U, X, Z, W, L, H, -. </p><p>导入1164库</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">library</span> IEEE<span class="token punctuation">;</span><span class="token keyword">use</span> IEEE<span class="token punctuation">.</span>std_logic_1164<span class="token punctuation">.</span><span class="token keyword">all</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="VHDL-Module"><a href="#VHDL-Module" class="headerlink" title="VHDL Module"></a>VHDL Module</h2><p>vhdl代码框架：</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">library</span> IEEE<span class="token punctuation">;</span><span class="token keyword">use</span> IEEE<span class="token punctuation">.</span>std_logic_1164<span class="token punctuation">.</span><span class="token keyword">all</span><span class="token punctuation">;</span><span class="token comment">---- Descriptions about ----</span><span class="token comment">---- your VHDL code ----</span><span class="token keyword">library</span> IEEE<span class="token punctuation">;</span><span class="token keyword">use</span> IEEE<span class="token punctuation">.</span>std_logic_1164<span class="token punctuation">.</span><span class="token keyword">all</span><span class="token punctuation">;</span><span class="token comment">-- ENTITY --</span><span class="token keyword">entity</span> module_name <span class="token keyword">is</span><span class="token keyword">port</span><span class="token punctuation">(</span> in1<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>out1<span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">-- this is tricky</span><span class="token keyword">end</span> module_name<span class="token punctuation">;</span><span class="token comment">-- ARCHITECTURE --</span><span class="token keyword">architecture</span> module_arch <span class="token keyword">of</span> module_name <span class="token keyword">is</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">-- DECLARATIONS</span><span class="token keyword">begin</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token comment">-- STATEMENTS</span><span class="token keyword">end</span> module_arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>the order that these statements appear in your VHDL source code makes no difference.</strong></p><ul><li>exercise：</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220927161924224.png" alt="image-20220927161924224"></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">use</span> IEEE<span class="token punctuation">.</span>std_logic_1164<span class="token punctuation">.</span><span class="token keyword">all</span><span class="token punctuation">;</span><span class="token keyword">entity</span> my_circuit <span class="token keyword">is</span><span class="token keyword">port</span><span class="token punctuation">(</span> A_1<span class="token punctuation">,</span> A_2<span class="token punctuation">,</span> B_1<span class="token punctuation">,</span> B_2<span class="token punctuation">,</span> D_1<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>E_out <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> my_circuit<span class="token punctuation">;</span> <span class="token keyword">architecture</span> my_circuit_arch <span class="token keyword">of</span> my_circuit <span class="token keyword">is</span><span class="token keyword">signal</span> A_out<span class="token punctuation">,</span> B_out<span class="token punctuation">,</span> C_out<span class="token punctuation">:</span> std_logic<span class="token punctuation">;</span><span class="token keyword">begin</span>A_out <span class="token operator">&lt;=</span> A_1 <span class="token operator">and</span> A_2<span class="token punctuation">;</span>B_out <span class="token operator">&lt;=</span> B_1 <span class="token operator">or</span> B_2<span class="token punctuation">;</span>C_out <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token operator">not</span> D_1<span class="token punctuation">)</span> <span class="token operator">and</span> B_2<span class="token punctuation">;</span>E_out <span class="token operator">&lt;=</span> A_out <span class="token operator">or</span> B_out <span class="token operator">or</span> C_out<span class="token punctuation">;</span><span class="token keyword">end</span> my_circuit_arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Modular-Designs-in-VHDL"><a href="#Modular-Designs-in-VHDL" class="headerlink" title="Modular Designs in VHDL"></a>Modular Designs in VHDL</h2><p>• Structural modeling allows modular designs. </p><p>• It also supports hierarchical design which is essential in complex digital systems.</p><p>packing low-level functionality into modules把低级的代码打包成模块，方便调用（easily reused in other designs as black boxes）-层次化</p><p><strong>To further enhance module reuse, the VHDL modules can be placed in named files and libraries</strong></p><p>元件例化，简单来说就是将以前设计的实体当做本设计的一个元件，然后利用VHDL语句将各元件之间的连接关系描述出来。元件例化语句由两部分组成，一部分是元件定义，即将现成的设计实体定义为本设计的元件。第2部分是元件连接关系映射，即描述各个元件之间的连接关系。</p><ul><li>declaration and instantiation of components:</li></ul><ol><li><p>Name the module you plan to describe (entity)</p></li><li><p>Describe what the module do (architecture)</p></li><li><p>Let the program know the module exists (declaration)</p></li><li><p>Use the module in your code (component instantiation or mapping)</p></li></ol><p>以三位比较器为例</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220927203426161.png" alt="image-20220927203426161"></p><p><strong>Step 1: Generate top-level entity declaration</strong></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> my_compare <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>A_IN <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>B_IN <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>EQ_OUT <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> my_compare<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Step 2: Declare the lower-level design units used</strong></p><p> replace <strong>entity</strong> with <strong>component</strong>.</p><p> Place the component declarations before <strong>begin</strong> in the architecture.</p><p>放在architecture之前</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220927203527650.png" alt="image-20220927203527650"></p><p><strong>Step 3: Declare internal signals</strong></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">architecture</span> structural <span class="token keyword">of</span> my_compare <span class="token keyword">is</span><span class="token comment">-- component declarations</span><span class="token keyword">component</span> big_xnor <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>F <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">component</span><span class="token punctuation">;</span><span class="token keyword">component</span> big_and3 <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>F <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">component</span><span class="token punctuation">;</span><span class="token comment">-- internal signal declarations</span><span class="token keyword">signal</span> p1_out<span class="token punctuation">,</span> p2_out<span class="token punctuation">,</span> p3_out<span class="token punctuation">:</span> std_logic<span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">end</span> structural<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Step 4: Create instances of components and map</strong></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">begin</span>    x1<span class="token punctuation">:</span> big_xnor <span class="token keyword">port</span> <span class="token keyword">map</span><span class="token punctuation">(</span>A <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">A_IN</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">B_IN</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> F <span class="token operator">=</span><span class="token operator">&gt;</span> p1_out<span class="token punctuation">)</span><span class="token punctuation">;</span>     x2<span class="token punctuation">:</span> big_xnor <span class="token keyword">port</span> <span class="token keyword">map</span><span class="token punctuation">(</span>A <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">A_IN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">B_IN</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> F <span class="token operator">=</span><span class="token operator">&gt;</span> p2_out<span class="token punctuation">)</span><span class="token punctuation">;</span>     x3<span class="token punctuation">:</span> big_xnor <span class="token keyword">port</span> <span class="token keyword">map</span><span class="token punctuation">(</span>A <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">A_IN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> B <span class="token operator">=</span><span class="token operator">&gt;</span> <span class="token function">B_IN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> F <span class="token operator">=</span><span class="token operator">&gt;</span> p3_out<span class="token punctuation">)</span><span class="token punctuation">;</span>     a1<span class="token punctuation">:</span> big_and3 <span class="token keyword">port</span> <span class="token keyword">map</span><span class="token punctuation">(</span>A <span class="token operator">=</span><span class="token operator">&gt;</span> p1_out<span class="token punctuation">,</span> B <span class="token operator">=</span><span class="token operator">&gt;</span> p2_out<span class="token punctuation">,</span>     C <span class="token operator">=</span><span class="token operator">&gt;</span> p3_out<span class="token punctuation">,</span> F <span class="token operator">=</span><span class="token operator">&gt;</span> EQ_OUT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">end</span> structural<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Mapping:</strong> make connections from higher-level signals onto the interface of the lower-level blocks. 将元件预定义的端口与实例化时的实际端口联系起来</p><p>Each of the individual mappings include a unique name of the particular instance plus the original entity.</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token comment">--元件定义部分</span><span class="token keyword">COMPONENT</span> 元件名 <span class="token keyword">IS</span><span class="token punctuation">[</span><span class="token keyword">GENERIC</span><span class="token punctuation">(</span>类属表<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">PORT</span><span class="token punctuation">(</span>端口列表<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">COMPONENT</span> 元件名<span class="token punctuation">;</span><span class="token comment">--元件映射部分</span>例化名<span class="token number">1</span><span class="token punctuation">:</span>元件名<span class="token number">1</span> <span class="token keyword">PORT</span> <span class="token keyword">MAP</span><span class="token punctuation">(</span>元件端口名<span class="token operator">=</span><span class="token operator">&gt;</span>连接端口名<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>例化名n<span class="token punctuation">:</span>元件名n <span class="token keyword">PORT</span> <span class="token keyword">MAP</span><span class="token punctuation">(</span>元件端口名<span class="token operator">=</span><span class="token operator">&gt;</span>连接端口名<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Labels should be always be added to increase the understandability of your VHDL model.</p><p><strong>名称映射和位置映射</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220927205556802.png" alt="image-20220927205556802"></p><h4 id="GENERATE"><a href="#GENERATE" class="headerlink" title="GENERATE"></a>GENERATE</h4><p>是一种可以<strong>建立重复结构</strong>或者是<strong>在多个模块的表示形式之间进行选择</strong>的语句。由于生成语句<strong>可以用来产生多个相同的结构</strong>，因此使用生成语句就可以<strong>避免多段相同结构的VHDL程序的重复书写。</strong></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl">标号：<span class="token keyword">FOR</span> 变量 <span class="token keyword">IN</span> 不连续区间 <span class="token keyword">GENERATE</span><span class="token operator">&lt;</span>并发处理的生成语句<span class="token operator">&gt;</span><span class="token keyword">END</span> <span class="token keyword">GENERATE</span> <span class="token punctuation">[</span>标号名<span class="token punctuation">]</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token comment">-- generation statement</span>generate_label<span class="token punctuation">:</span><span class="token keyword">for</span> identifier <span class="token keyword">in</span> discrete_range <span class="token keyword">generate</span>    concurrent statements<span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">generate</span> generate_label<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有两种用途：</p><ul><li>生成<strong>相同的元件，多次例化</strong>；</li></ul><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl">MUX2_GEN<span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span> <span class="token keyword">generate</span>      L1<span class="token punctuation">:</span> mux2 <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span><span class="token function">D0</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">D1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">shift_n</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">X0</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      L2<span class="token punctuation">:</span> mux2 <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span><span class="token function">X0</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">X1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">shift_n</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Y</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">generate</span> MUX2_GEN<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同时例化四个MUX</p><ul><li>生成结构相同的多次赋值、组合逻辑；</li></ul><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">FOR</span> i <span class="token keyword">IN</span> <span class="token number">0</span> <span class="token keyword">TO</span> <span class="token number">99</span> <span class="token keyword">GENERATE</span><span class="token function">a</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token function">b</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">c</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">END</span> <span class="token keyword">GENERATE</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Standard-Models-in-VHDL"><a href="#Standard-Models-in-VHDL" class="headerlink" title="Standard Models in VHDL"></a>Standard Models in VHDL</h2><p>There are different standard models/approaches in writing VHDL architectures.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221014090238628.png" alt="image-20221014090238628"></p><p>More complicated VHDL circuits usually use a mixture of the three styles.</p><h3 id="Data-Flow-Style-Architecture"><a href="#Data-Flow-Style-Architecture" class="headerlink" title="Data-Flow Style Architecture"></a>Data-Flow Style Architecture</h3><p>Data-flow style: circuits are described by showing input and output relationships between the various built-in components.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221014090908715.png" alt="image-20221014090908715"></p><h3 id="Behavioural-Style-Architecture"><a href="#Behavioural-Style-Architecture" class="headerlink" title="Behavioural Style Architecture"></a>Behavioural Style Architecture</h3><p>行为建模</p><p> it is fairly straight forward to imagine the underlying circuitry in dataflow style</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221014091039835.png" alt="image-20221014091039835"></p><p>• <strong>provides no/fewer details as to how the design is implemented in actual hardware.</strong></p><p>• models how the circuit outputs react to the circuit inputs.</p><p>只处理电路对输出的反应，而不用研究具体的电路细节</p><p>• allows you to leave the implementation details to the synthesizer</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221014092739262.png" alt="image-20221014092739262"></p><p>sequential circuit 只能用 behavioural modeling</p><p>combination circuit 可以用 behavioural modeling和 flow data behavioural</p><h3 id="Process-Statement"><a href="#Process-Statement" class="headerlink" title="Process Statement"></a>Process Statement</h3><p>A process statement is a concurrent statement identified by its label, its sensitivity list, a declaration area and the set of instructions</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token comment">-- this is my first process</span>my_label<span class="token punctuation">:</span> <span class="token keyword">process</span><span class="token punctuation">(</span>sensitivity_list<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token keyword">is</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">-</span> optional    <span class="token operator">&lt;</span>item declaration<span class="token operator">&gt;</span><span class="token keyword">begin</span>    <span class="token operator">&lt;</span>sequential_statements<span class="token operator">&gt;</span><span class="token keyword">end</span> <span class="token keyword">process</span> my_label<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Major difference: the statements inside a process are executed and interpreted sequentially</p></blockquote><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> my_xor <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> A<span class="token punctuation">,</span> B <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>       F <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> my_xor<span class="token punctuation">;</span><span class="token keyword">architecture</span> dataflow <span class="token keyword">of</span> my_xor <span class="token keyword">is</span><span class="token keyword">begin</span>    F <span class="token operator">&lt;=</span> A <span class="token operator">xor</span> B<span class="token punctuation">;</span><span class="token keyword">end</span> dataflow<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">architecture</span> behav <span class="token keyword">of</span> my_xor <span class="token keyword">is</span><span class="token keyword">begin</span>    xor_proc<span class="token punctuation">:</span> <span class="token keyword">process</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        F <span class="token operator">&lt;=</span> A <span class="token operator">xor</span> B    <span class="token keyword">end</span> <span class="token keyword">process</span> xor_proc<span class="token punctuation">;</span><span class="token keyword">end</span> behav<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这两种代码形式是等价的</p><p>A B是敏感信号，所以一旦有一个改变 process就会执行。</p><p>For the behavioral architecture description, any time there is a change in signals in the process sensitivity list, all of the sequential statements in the process are re-evaluated until the end of the process body.</p><p><strong>But the whole process itself is a concurrent statement</strong></p><p>process 之间是并发关系</p><p>写VHDL时可以将预期功能分成不同进程来写，避免一个大进程</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221014211355151.png" alt="image-20221014211355151" style="zoom:67%;"><h4 id="IF-statement"><a href="#IF-statement" class="headerlink" title="IF statement"></a>IF statement</h4><p>The <strong>if</strong> statement creates a branch in the execution flow of the sequential statements.</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token keyword">then</span>    <span class="token operator">&lt;</span>statements<span class="token operator">&gt;</span><span class="token keyword">elsif</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token keyword">then</span>       <span class="token operator">&lt;</span>statements<span class="token operator">&gt;</span><span class="token keyword">else</span>       <span class="token operator">&lt;</span>statements<span class="token operator">&gt;</span><span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The parentheses around the condition are optional .Use them for improving readability</p><p>The final <strong>else</strong> clause, which serves as a catch-all statement, is optional, but should always be included.</p><h5 id="example"><a href="#example" class="headerlink" title="example"></a>example</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221014214510752.png" alt="image-20221014214510752"></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">architecture</span> silly_example <span class="token keyword">of</span> my_ex <span class="token keyword">is</span><span class="token keyword">begin</span>    proc1<span class="token punctuation">:</span> <span class="token keyword">process</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> C<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">=</span> <span class="token number">'1'</span> <span class="token operator">and</span> B <span class="token operator">=</span> <span class="token number">'0'</span> <span class="token operator">and</span> C <span class="token operator">=</span> <span class="token number">'0'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            F_OUT <span class="token operator">&lt;=</span> <span class="token number">'1'</span><span class="token punctuation">;</span>        <span class="token keyword">elsif</span> <span class="token punctuation">(</span>B <span class="token operator">=</span> <span class="token number">'1'</span> <span class="token operator">and</span> C <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>               F_OUT <span class="token operator">&lt;=</span> <span class="token number">'1'</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>               F_OUT <span class="token operator">&lt;=</span> <span class="token number">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>      <span class="token keyword">end</span> <span class="token keyword">process</span> proc1<span class="token punctuation">;</span><span class="token keyword">end</span> silly_example<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A process label is a form of self-description, which should be meaningful and easy-to-understand. </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221014213759573.png" alt="image-20221014213759573"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221014213813100.png" alt="image-20221014213813100"></p><h5 id="8-to-1-MUX-Example"><a href="#8-to-1-MUX-Example" class="headerlink" title="8-to-1 MUX Example"></a>8-to-1 MUX Example</h5><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> mux_8t1 <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> DIN<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       SEL<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       F <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> mux_8t1<span class="token punctuation">;</span><span class="token keyword">architecture</span> mux_8t1_arch <span class="token keyword">of</span> mux_8t1 <span class="token keyword">is</span><span class="token keyword">begin</span>    my_mux<span class="token punctuation">:</span> <span class="token keyword">process</span> <span class="token punctuation">(</span>DIN<span class="token punctuation">,</span> SEL<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>SEL <span class="token operator">=</span> <span class="token vhdl-vectors number">"111"</span><span class="token punctuation">)</span> <span class="token keyword">then</span> F <span class="token operator">&lt;=</span> <span class="token function">DIN</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">elsif</span> <span class="token punctuation">(</span>SEL <span class="token operator">=</span> <span class="token vhdl-vectors number">"110"</span><span class="token punctuation">)</span> <span class="token keyword">then</span> F <span class="token operator">&lt;=</span> <span class="token function">DIN</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>        <span class="token keyword">elsif</span> <span class="token punctuation">(</span>SEL <span class="token operator">=</span> <span class="token vhdl-vectors number">"000"</span><span class="token punctuation">)</span> <span class="token keyword">then</span> F <span class="token operator">&lt;=</span> <span class="token function">DIN</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> F <span class="token operator">&lt;=</span> <span class="token number">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">process</span> my_mux<span class="token punctuation">;</span><span class="token keyword">end</span> mux_8t1_arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Case-Statement"><a href="#Case-Statement" class="headerlink" title="Case Statement"></a>Case Statement</h4><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">case</span> <span class="token punctuation">(</span>expression<span class="token punctuation">)</span> <span class="token keyword">is</span>    <span class="token keyword">when</span> choices <span class="token operator">=</span><span class="token operator">&gt;</span>         <span class="token operator">&lt;</span>statements<span class="token operator">&gt;</span>    <span class="token keyword">when</span> choices <span class="token operator">=</span><span class="token operator">&gt;</span>         <span class="token operator">&lt;</span>statements<span class="token operator">&gt;</span>    <span class="token keyword">when</span> <span class="token keyword">others</span> <span class="token operator">=</span><span class="token operator">&gt;</span>         <span class="token operator">&lt;</span>statements<span class="token operator">&gt;</span><span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Only one set of sequential statements is executed, depending with <strong>when</strong> branch is evaluated as true.</p><h5 id="example-1"><a href="#example-1" class="headerlink" title="example"></a>example</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221014214537230.png" alt="image-20221014214537230"></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">architecture</span> case_ex <span class="token keyword">of</span> my_ex <span class="token keyword">is</span>    <span class="token keyword">signal</span> INPUT<span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    INPUT <span class="token operator">&lt;=</span> A <span class="token operator">&amp;</span> B <span class="token operator">&amp;</span> C<span class="token punctuation">;</span>    proc1<span class="token punctuation">:</span> <span class="token keyword">process</span> <span class="token punctuation">(</span>INPUT<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token keyword">case</span> <span class="token punctuation">(</span>INPUT<span class="token punctuation">)</span> <span class="token keyword">is</span>        <span class="token keyword">when</span> <span class="token vhdl-vectors number">"100"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> F_OUT <span class="token operator">&lt;=</span> <span class="token number">'1'</span><span class="token punctuation">;</span>        <span class="token keyword">when</span> <span class="token vhdl-vectors number">"011"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> F_OUT <span class="token operator">&lt;=</span> <span class="token number">'1'</span><span class="token punctuation">;</span>        <span class="token keyword">when</span> <span class="token vhdl-vectors number">"111"</span> <span class="token operator">=</span><span class="token operator">&gt;</span> F_OUT <span class="token operator">&lt;=</span> <span class="token number">'1'</span><span class="token punctuation">;</span>        <span class="token keyword">when</span> <span class="token keyword">others</span> <span class="token operator">=</span><span class="token operator">&gt;</span> F_OUT <span class="token operator">&lt;=</span> <span class="token number">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">case</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">process</span> proc1<span class="token punctuation">;</span><span class="token keyword">end</span> case_ex<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Simulation-amp-Test-Benches"><a href="#Simulation-amp-Test-Benches" class="headerlink" title="Simulation &amp; Test Benches"></a>Simulation &amp; Test Benches</h2><p>After we model a circuit, we have to verify the correctness of the model in terms of functionality and timing </p><p>Simulation tools often require a test bench file to specify how the testing is done on the <strong>Unit Under Test</strong> (UUT)被测单元.</p><p>A VHDL test bench is virtual circuit/system that creates an instance of the </p><p>top module (UUT) and generates stimuli to inputs of the instance.</p><p>Corresponding simulation outputs are recorded and visualised to assist verification.</p><p>The test bench itself is not involved in implementation (not synthesisable)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221014220237440.png" alt="image-20221014220237440"></p><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><p>If we are to test the XNOR gate, then we can prepare a test bench like this:</p><p><strong>A test bench is a closed system: no inputs/outputs.</strong></p><p><strong>Declare the UUT component and internal signals</strong></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> big_xnor_tb <span class="token keyword">is</span><span class="token keyword">end</span> big_xnor_tb<span class="token punctuation">;</span><span class="token keyword">architecture</span> behavior <span class="token keyword">of</span> big_xnor_tb <span class="token keyword">is</span>    <span class="token keyword">component</span> big_xnor <span class="token keyword">is</span>    <span class="token keyword">port</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>          F <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">component</span><span class="token punctuation">;</span>    <span class="token keyword">signal</span> A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> F<span class="token punctuation">:</span> std_logic<span class="token punctuation">;</span><span class="token keyword">begin</span>    uut<span class="token punctuation">:</span> big_xnor <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span>A<span class="token operator">=</span><span class="token operator">&gt;</span>A<span class="token punctuation">,</span> B<span class="token operator">=</span><span class="token operator">&gt;</span>B<span class="token punctuation">,</span> F<span class="token operator">=</span><span class="token operator">&gt;</span>F<span class="token punctuation">)</span><span class="token punctuation">;</span>    stim_proc<span class="token punctuation">:</span> <span class="token keyword">process</span>    <span class="token keyword">begin</span>        A <span class="token operator">&lt;=</span> <span class="token number">'0'</span><span class="token punctuation">;</span> B <span class="token operator">&lt;=</span> <span class="token number">'0'</span><span class="token punctuation">;</span> <span class="token keyword">wait</span> <span class="token keyword">for</span> <span class="token number">10</span> ns<span class="token punctuation">;</span>        A <span class="token operator">&lt;=</span> <span class="token number">'0'</span><span class="token punctuation">;</span> B <span class="token operator">&lt;=</span> <span class="token number">'1'</span><span class="token punctuation">;</span> <span class="token keyword">wait</span> <span class="token keyword">for</span> <span class="token number">10</span> ns<span class="token punctuation">;</span>        A <span class="token operator">&lt;=</span> <span class="token number">'1'</span><span class="token punctuation">;</span> B <span class="token operator">&lt;=</span> <span class="token number">'0'</span><span class="token punctuation">;</span> <span class="token keyword">wait</span> <span class="token keyword">for</span> <span class="token number">10</span> ns<span class="token punctuation">;</span>        A <span class="token operator">&lt;=</span> <span class="token number">'1'</span><span class="token punctuation">;</span> B <span class="token operator">&lt;=</span> <span class="token number">'1'</span><span class="token punctuation">;</span> <span class="token keyword">wait</span> <span class="token keyword">for</span> <span class="token number">10</span> ns<span class="token punctuation">;</span>        <span class="token keyword">wait</span><span class="token punctuation">;</span> <span class="token comment">-- finished.</span>    <span class="token keyword">end</span> <span class="token keyword">process</span><span class="token punctuation">;</span><span class="token keyword">end</span> behavior<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Clock-Signal"><a href="#Clock-Signal" class="headerlink" title="Clock Signal"></a>Clock Signal</h5><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> DFF_tb <span class="token keyword">is</span><span class="token keyword">end</span> DFF_tb<span class="token punctuation">;</span><span class="token keyword">architecture</span> behavior <span class="token keyword">of</span> DFF_tb <span class="token keyword">is</span>    <span class="token keyword">component</span> DFF <span class="token keyword">is</span>    <span class="token keyword">port</span> <span class="token punctuation">(</span>D<span class="token punctuation">,</span> CLK<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>          Q <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">component</span><span class="token punctuation">;</span>    <span class="token keyword">signal</span> D<span class="token punctuation">,</span> CLK<span class="token punctuation">,</span> Q<span class="token punctuation">:</span> std_logic <span class="token operator">:=</span> <span class="token number">'0'</span><span class="token punctuation">;</span>    <span class="token keyword">constant</span> period<span class="token punctuation">:</span> TIME <span class="token operator">:=</span> <span class="token number">10</span> ns；<span class="token comment">--时间常数</span><span class="token keyword">begin</span>    uut<span class="token punctuation">:</span> DFF <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span>D<span class="token operator">=</span><span class="token operator">&gt;</span>D<span class="token punctuation">,</span> CLK<span class="token operator">=</span><span class="token operator">&gt;</span>CLK<span class="token punctuation">,</span> Q<span class="token operator">=</span><span class="token operator">&gt;</span>Q<span class="token punctuation">)</span><span class="token punctuation">;</span>    stim_clk<span class="token punctuation">:</span> <span class="token keyword">process</span>    <span class="token keyword">begin</span>        CLK <span class="token operator">&lt;=</span> <span class="token number">'1'</span><span class="token punctuation">;</span> <span class="token keyword">wait</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>period <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CLK <span class="token operator">&lt;=</span> <span class="token number">'0'</span><span class="token punctuation">;</span> <span class="token keyword">wait</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>period <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">process</span><span class="token punctuation">;</span>    stim_proc<span class="token punctuation">:</span> <span class="token keyword">process</span>    <span class="token keyword">begin</span> <span class="token comment">-- add your stimuli</span>    <span class="token keyword">end</span> <span class="token keyword">process</span><span class="token punctuation">;</span><span class="token keyword">end</span> behavior<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>initial values given using operator :=</p><p>信号初始值要用：=</p><h3 id="type-类型"><a href="#type-类型" class="headerlink" title="type 类型"></a>type 类型</h3><p>TYPE 数据类型名 IS {枚举1，枚举2，…}</p><p><strong>type</strong> <strong>state_type</strong> <strong>is</strong> **(<strong>ST0</strong>,**ST1);</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> DSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSD-2&#39;s Complement Representations</title>
      <link href="//post/DSD-2.1-2&#39;s%20Complement%20Representations.html"/>
      <url>//post/DSD-2.1-2&#39;s%20Complement%20Representations.html</url>
      
        <content type="html"><![CDATA[<h1 id="2’s-Complement-Representations"><a href="#2’s-Complement-Representations" class="headerlink" title="2’s Complement Representations"></a>2’s Complement Representations</h1><p>二进制补码数制表示负数</p><p>reference： P31</p><h2 id="What-is-2’s-complement"><a href="#What-is-2’s-complement" class="headerlink" title="What is 2’s complement?"></a>What is 2’s complement?</h2><p>原数制是通过改变符号将一个数变为负数，而补码数制是通过补码来表示负数。<strong>也就是说一个数（10进制）的补码是这个数（10进制）的负数</strong> 负数不能直接读，判断一个负数是多大，必须用补码</p><p><strong>n</strong>位数B的补码为<strong>2^n 的二进制数- B的二进制数</strong></p><p>7（0111）=&gt; -7(10000-0111) </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004095541152.png" alt="image-20221004095541152"></p><p><strong>对应码相加为10000（2^3）所以-4的码为 10000-4的后四位码</strong></p><p>注意表示范围为（-8，7）$（-2^{n-1},2^{n-1}-1）$</p><ul><li><p>Assume <em>N</em> bits are used, for a value –A, </p></li><li><p>2’s complement representation is defined as 2^N（1后面加N个0） – A</p></li><li><p>the MSB (leftmost) represents the sign(正负号) (bit)</p></li></ul><p>​          <strong>0: positive</strong> </p><p>​          <strong>1: negative</strong></p><p>简便算一个数的补码(负数的码)的方法：<strong>Invert all bits and add 1</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221103125258341.png" alt="image-20221103125258341"></p><p>举例：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004095609147.png" alt="image-20221004095609147"></p><h2 id="Why-2’s-Complement"><a href="#Why-2’s-Complement" class="headerlink" title="Why 2’s Complement?"></a>Why 2’s Complement?</h2><p>It eliminates the need of subtraction.</p><p><strong>A – B = A + (-B) = A + (2’s complement of B)</strong></p><p>把减法转为加法</p><img src="C:%5CUsers%5Czzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221003214903990.png" alt="image-20221003214903990" style="zoom:67%;"><p><img src="C:%5CUsers%5Czzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221003214038713.png" alt="image-20221003214038713"></p><p>-7没溢出   <span class="github-emoji" style="display:inline;vertical-align:middle"><span>▶</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/25b6.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> 丢弃最高位！</p><h3 id="sign-extension（符号扩展）"><a href="#sign-extension（符号扩展）" class="headerlink" title="sign extension（符号扩展）"></a>sign extension（符号扩展）</h3><img src="C:%5CUsers%5Czzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221003213243981.png" alt="image-20221003213243981" style="zoom:50%;"><p>将4的码扩展一位表示符号（0-&gt; +）取补后得到新的符号扩展位上仍然为对应的符号（1 -&gt; -）</p><p><img src="C:%5CUsers%5Czzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221003213521520.png" alt="image-20221003213521520"></p><h2 id="Overflow"><a href="#Overflow" class="headerlink" title="Overflow"></a>Overflow</h2><p>Overflow happens when an operation produces a result outside the range that can be represented by <em>N</em> bits – either larger than the maximum or lower than the minimum representable value.</p><p>两个异号数相加肯定不会溢出</p><p>同号数相加看最高两位carry的值是否异号：异号溢出，同号不溢出（XOR）</p><img src="C:%5CUsers%5Czzh%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221003214736225.png" alt="image-20221003214736225" style="zoom:50%;">]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> DSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSD-2.3-Combinational Blocks</title>
      <link href="//post/DSD-2.3-Combinational%20Blocks.html"/>
      <url>//post/DSD-2.3-Combinational%20Blocks.html</url>
      
        <content type="html"><![CDATA[<h2 id="Combinational-Blocks"><a href="#Combinational-Blocks" class="headerlink" title="Combinational Blocks"></a>Combinational Blocks</h2><h3 id="基本门电路符号："><a href="#基本门电路符号：" class="headerlink" title="基本门电路符号："></a>基本门电路符号：</h3><p>AND:     <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220929221312721.png" alt="image-20220929221312721" style="zoom:50%;"></p><p>OR:        <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220929221337726.png" alt="image-20220929221337726" style="zoom:50%;"></p><p>NO：     <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220929221410805.png" alt="image-20220929221410805" style="zoom:50%;"></p><p>NAND：<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220929221435728.png" alt="image-20220929221435728" style="zoom:50%;"></p><p>NOR：   <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220929221456324.png" alt="image-20220929221456324" style="zoom:50%;"></p><p>XOR(异或门)：   <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220929221524321.png" alt="image-20220929221524321" style="zoom:50%;">  相同为0 不同为1</p><p>XNOR(同或门)： <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220929221556024.png" alt="image-20220929221556024" style="zoom:50%;">  相同为1 不同为0</p><h2 id="Hierarchical-Design"><a href="#Hierarchical-Design" class="headerlink" title="Hierarchical Design"></a>Hierarchical Design</h2><p>• The system is broken into pieces called blocks.</p><p>• Blocks are then interconnected to form the circuit.</p><p>– Functions and interfaces must be well defined.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928090722926.png" alt="image-20220928090722926"></p><h3 id="Top-Down-vs-Bottom-Up"><a href="#Top-Down-vs-Bottom-Up" class="headerlink" title="Top-Down vs Bottom Up"></a>Top-Down vs Bottom Up</h3><p>• Top-Down Approach</p><p>– Study high-level specification/requirement</p><p>– Break the whole system into sub-systems</p><p>– Identify usable blocks/modules for the sub-systems</p><p>– Implement and link sub-systems</p><p>• Bottom-Up Approach</p><p>– Design flexible and reusable blocks/modules</p><p>– Map blocks/modules to common problems</p><p>– Prepare a category of useful cores (e.g. processing, communications)</p><p>– Pick and connect cores for different applications</p><h3 id="Digital-Data-Terminology"><a href="#Digital-Data-Terminology" class="headerlink" title="Digital Data: Terminology"></a>Digital Data: Terminology</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928091118970.png" alt="image-20220928091118970"></p><p>4 bits is a nibble（半字节）; 8 bits is a byte</p><h2 id="Combinational-Circuits"><a href="#Combinational-Circuits" class="headerlink" title="Combinational Circuits"></a>Combinational Circuits</h2><p><strong>Logic circuits for digital systems can be combinational and sequential</strong></p><ul><li><p><strong>Combinational circuit</strong> has its outputs at any time determined only by the inputs (i.e. has no memory  不含有记忆原元件).</p><p>outputs = <em>f</em>(inputs)只与当前时刻输入有关，与过去输入无关</p></li><li><p><strong>Sequential circuit</strong> contains element that store bit values (i.e. has memory 有记忆元件).</p><p>outputs = <em>f</em>(inputs, current_states)  （输出方程）与输入变量和存储电路状态有关</p><p>next_states = <em>f</em>(inputs, current_states) （状态方程）</p></li></ul><h3 id="Binary-Decoder"><a href="#Binary-Decoder" class="headerlink" title="(Binary) Decoder"></a>(Binary) Decoder</h3><p>二进制译码器：输入m=2^n</p><p>A binary code of <em>n</em> bits is capable to representing up to 2^<em>n</em> distinct elements</p><p>n位二进制数可以最多表示2^n个数</p><p> converts binary inputs to a maximum of 2^<em>n</em> unique outputs</p><p>A common method to name decoders is by listing the no. of inputs and outputs: <em>n</em>-to-<em>m</em>-line decoders, e.g. 2-to-4-line decoder, 3-to-8 line decoder, etc.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928092922530.png" alt="image-20220928092922530" style="zoom:67%;"><h4 id="3-8-decoder"><a href="#3-8-decoder" class="headerlink" title="3-8 decoder"></a>3-8 decoder</h4><p>高电平有效（无enable）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928093317958.png" alt="image-20220928093317958"></p><p>The function at each output of the decoder is just a minterm of the inputs.</p><p>输出是输入的各种组合：一个输出对应一个最小项</p><p> example: D0 =A2’A1 ‘A0 ‘      D1 = A2 A1’A0</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> decoder_3_8 <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> A <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">--2是高位</span>       D <span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">--7是高位</span><span class="token keyword">end</span> decoder_3_8<span class="token punctuation">;</span><span class="token keyword">architecture</span> decoder_3_8_arch <span class="token keyword">of</span> decoder_3_8 <span class="token keyword">is</span><span class="token keyword">begin</span>    D <span class="token operator">&lt;=</span> <span class="token vhdl-vectors number">"00000001"</span> <span class="token keyword">when</span> A <span class="token operator">=</span> <span class="token vhdl-vectors number">"000"</span> <span class="token keyword">else</span>         <span class="token vhdl-vectors number">"00000010"</span> <span class="token keyword">when</span> A <span class="token operator">=</span> <span class="token vhdl-vectors number">"001"</span> <span class="token keyword">else</span>          …         <span class="token vhdl-vectors number">"01000000"</span> <span class="token keyword">when</span> A <span class="token operator">=</span> <span class="token vhdl-vectors number">"110"</span> <span class="token keyword">else</span>         <span class="token vhdl-vectors number">"10000000"</span><span class="token punctuation">;</span><span class="token keyword">end</span> decoder_3_8_arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Decoder-with-Enable"><a href="#Decoder-with-Enable" class="headerlink" title="Decoder with Enable"></a>Decoder with Enable</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928093734226.png" alt="image-20220928093734226" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928093756875.png" alt="image-20220928093756875"></p><p>/E（  加/低电平有效？) :低电平有效（active-low）：The decoder is enabled when /E = 0 (active-low), otherwise all outputs are ‘0’.</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">architecture</span> dataflow_arch <span class="token keyword">of</span> decoder_2_4_en <span class="token keyword">is</span><span class="token keyword">begin</span>    D <span class="token operator">&lt;=</span> <span class="token vhdl-vectors number">"0001"</span> <span class="token keyword">when</span> A <span class="token operator">=</span> <span class="token vhdl-vectors number">"00"</span> <span class="token operator">and</span> nE <span class="token operator">=</span> <span class="token number">'0'</span> <span class="token keyword">else</span>    <span class="token vhdl-vectors number">"0010"</span> <span class="token keyword">when</span> A <span class="token operator">=</span> <span class="token vhdl-vectors number">"01"</span> <span class="token operator">and</span> nE <span class="token operator">=</span> <span class="token number">'0'</span> <span class="token keyword">else</span>    <span class="token vhdl-vectors number">"0100"</span> <span class="token keyword">when</span> A <span class="token operator">=</span> <span class="token vhdl-vectors number">"10"</span> <span class="token operator">and</span> nE <span class="token operator">=</span> <span class="token number">'0'</span> <span class="token keyword">else</span>    <span class="token vhdl-vectors number">"1000"</span> <span class="token keyword">when</span> A <span class="token operator">=</span> <span class="token vhdl-vectors number">"11"</span> <span class="token operator">and</span> nE <span class="token operator">=</span> <span class="token number">'0'</span> <span class="token keyword">else</span>    <span class="token vhdl-vectors number">"0000"</span><span class="token punctuation">;</span> <span class="token comment">-- nE = '1</span><span class="token keyword">end</span> dataflow_arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Decoder-Expansion"><a href="#Decoder-Expansion" class="headerlink" title="Decoder Expansion"></a>Decoder Expansion</h4><p>How to construct a 3-to-8 decoder with two 2-to-4 decoders with enable ?</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928100516194.png" alt="image-20220928100516194"></p><h3 id="Binary-Encoder"><a href="#Binary-Encoder" class="headerlink" title="Binary Encoder"></a>Binary Encoder</h3><p>• An encoder performs the inverse operation of a decoder</p><p>It has 2^<em>n</em> input lines and <em>n</em> output lines</p><p>把2^n个输入转化成n个binary输出</p><p>Output is the binary code of the corresponding input line</p><p>Assumption: only one input has a value ‘1’ at any time（非优先）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928101138211.png" alt="image-20220928101138211"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928101253621.png" alt="image-20220928101253621"></p><p>• When-else / With-select statement</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> encoder_8_3 <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> D <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       A <span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> encoder_8_3<span class="token punctuation">;</span><span class="token keyword">architecture</span> arch <span class="token keyword">of</span> encoder_8_3 <span class="token keyword">is</span><span class="token keyword">begin</span>    A <span class="token operator">&lt;=</span> <span class="token vhdl-vectors number">"000"</span> <span class="token keyword">when</span> D<span class="token operator">=</span><span class="token vhdl-vectors number">"00000001"</span> <span class="token keyword">else</span>         <span class="token vhdl-vectors number">"001"</span> <span class="token keyword">when</span> D<span class="token operator">=</span><span class="token vhdl-vectors number">"00000010"</span> <span class="token keyword">else</span>         <span class="token vhdl-vectors number">"010"</span> <span class="token keyword">when</span> D<span class="token operator">=</span><span class="token vhdl-vectors number">"00000100"</span> <span class="token keyword">else</span>         <span class="token vhdl-vectors number">"011"</span> <span class="token keyword">when</span> D<span class="token operator">=</span><span class="token vhdl-vectors number">"00001000"</span> <span class="token keyword">else</span>         <span class="token vhdl-vectors number">"100"</span> <span class="token keyword">when</span> D<span class="token operator">=</span><span class="token vhdl-vectors number">"00010000"</span> <span class="token keyword">else</span>         <span class="token vhdl-vectors number">"101"</span> <span class="token keyword">when</span> D<span class="token operator">=</span><span class="token vhdl-vectors number">"00100000"</span> <span class="token keyword">else</span>         <span class="token vhdl-vectors number">"110"</span> <span class="token keyword">when</span> D<span class="token operator">=</span><span class="token vhdl-vectors number">"01000000"</span> <span class="token keyword">else</span>         <span class="token vhdl-vectors number">"111"</span> <span class="token punctuation">;</span><span class="token keyword">end</span> arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>• Boolean equations</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> encoder_8_3 <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> D <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       A <span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> encoder_8_3<span class="token punctuation">;</span><span class="token keyword">architecture</span> arch <span class="token keyword">of</span> encoder_8_3 <span class="token keyword">is</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span><span class="token keyword">end</span> arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Priority-Encoder"><a href="#Priority-Encoder" class="headerlink" title="Priority Encoder"></a>Priority Encoder</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928102916353.png" alt="image-20220928102916353" style="zoom:67%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928103026900.png" alt="image-20220928103026900"></p><p>• Inputs are given different priorities, e.g. D3 &gt; D2 &gt; D1 &gt;D0. </p><p>• Input having highest priority is encoded first.</p><p>• Easy implementation A1 = D3 + D2 , A0 = D3 + D2 ‘D1</p><p>V=valid（判断输出是否有效）<strong>高电平有效</strong></p><h3 id="Multiplexer-MUX-x2F-Data-Selector"><a href="#Multiplexer-MUX-x2F-Data-Selector" class="headerlink" title="Multiplexer (MUX) / Data Selector"></a>Multiplexer (MUX) / Data Selector</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928103700345.png" alt="image-20220928103700345"></p><p>多路复用器</p><p>• A multiplexer is a combinational circuit that selects binary information from one of many <strong>input lines</strong> and directs the information to a single output line</p><ul><li>It acts like a switch, though it repeats the logic value from the input.</li></ul><p>a 2-to-1 MUX selects one of its two inputs A or B to the output F based on the value at S.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928104209961.png" alt="image-20220928104209961"></p><p>Boolean equation: <em>F</em> = <em>S</em>‘<em>A</em> + <em>SB</em></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928104235392.png" alt="image-20220928104235392"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928104336661.png" alt="image-20220928104336661"></p><h4 id="VHDL-4-to-1-MUX"><a href="#VHDL-4-to-1-MUX" class="headerlink" title="VHDL: 4-to-1 MUX"></a>VHDL: 4-to-1 MUX</h4><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">port</span> <span class="token punctuation">(</span> D<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        S<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Y<span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> mux4<span class="token punctuation">;</span><span class="token keyword">architecture</span> arch_mux4 <span class="token keyword">of</span> mux4 <span class="token keyword">is</span><span class="token keyword">begin</span>    Y <span class="token operator">&lt;=</span> <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>S <span class="token operator">=</span> <span class="token vhdl-vectors number">"11"</span><span class="token punctuation">)</span> <span class="token keyword">else</span>    <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>S <span class="token operator">=</span> <span class="token vhdl-vectors number">"10"</span><span class="token punctuation">)</span> <span class="token keyword">else</span>    <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>S <span class="token operator">=</span> <span class="token vhdl-vectors number">"01"</span><span class="token punctuation">)</span> <span class="token keyword">else</span>    <span class="token function">D</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">when</span> <span class="token punctuation">(</span>S <span class="token operator">=</span> <span class="token vhdl-vectors number">"00"</span><span class="token punctuation">)</span> <span class="token keyword">else</span>    <span class="token number">'0'</span><span class="token punctuation">;</span><span class="token keyword">end</span> arch_mux4<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Reminder: double quotes (“xxx”) for multiple signals / bus, single quote (‘y’) for a single signal / bit</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> mux4_8 <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> D3<span class="token punctuation">,</span> D2<span class="token punctuation">,</span> D1<span class="token punctuation">,</span> D0<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      S <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Y <span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> mux4_8<span class="token punctuation">;</span><span class="token keyword">architecture</span> arch <span class="token keyword">of</span> mux4_8 <span class="token keyword">is</span><span class="token keyword">begin</span>    <span class="token keyword">with</span> S <span class="token keyword">select</span>       Y <span class="token operator">&lt;=</span> D3 <span class="token keyword">when</span> <span class="token vhdl-vectors number">"11"</span><span class="token punctuation">,</span>        D2 <span class="token keyword">when</span> <span class="token vhdl-vectors number">"10"</span><span class="token punctuation">,</span>        D1 <span class="token keyword">when</span> <span class="token vhdl-vectors number">"01"</span><span class="token punctuation">,</span>        D0 <span class="token keyword">when</span> <span class="token keyword">others</span><span class="token punctuation">;</span> <span class="token keyword">end</span> arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="MUX-Expansion"><a href="#MUX-Expansion" class="headerlink" title="MUX Expansion"></a>MUX Expansion</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928110316263.png" alt="image-20220928110316263"></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> mux16 <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> D<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        S<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Y<span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> mux16<span class="token punctuation">;</span><span class="token keyword">architecture</span> arch <span class="token keyword">of</span> mux16 <span class="token keyword">is</span><span class="token keyword">component</span> mux4 <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>D<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      S<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      Y<span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">end</span> <span class="token keyword">component</span><span class="token punctuation">;</span><span class="token keyword">signal</span> X<span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>     L1_M3<span class="token punctuation">:</span> mux4 <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span><span class="token function">D</span><span class="token punctuation">(</span><span class="token number">15</span> <span class="token keyword">downto</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">S</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">X</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     L1_M2<span class="token punctuation">:</span> mux4 <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span><span class="token function">D</span><span class="token punctuation">(</span><span class="token number">11</span> <span class="token keyword">downto</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">S</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">X</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     L1_M1<span class="token punctuation">:</span> mux4 <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span><span class="token function">D</span><span class="token punctuation">(</span> <span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">S</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">X</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     L1_M0<span class="token punctuation">:</span> mux4 <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span><span class="token function">D</span><span class="token punctuation">(</span> <span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">S</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">X</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     L2_M1<span class="token punctuation">:</span> mux4 <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token function">S</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>计算selection signal的 no. =log2(no. of inputs)</strong></p><h3 id="Shifting"><a href="#Shifting" class="headerlink" title="Shifting"></a>Shifting</h3><p>A word can be shifted left(right): the bits move towards MSB(LSB) side by a number of bits. New bits (incoming bits) are then shifted in to fill the empty bits.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928110927351.png" alt="image-20220928110927351"></p><p>Shifter is actually can be realised without any logic gate. The bits are aligned with the incoming bits as outputs.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928111116052.png" alt="image-20220928111116052"></p><h4 id="Barrel-Shifter"><a href="#Barrel-Shifter" class="headerlink" title="Barrel Shifter"></a>Barrel Shifter</h4><p>Barrel shifter can shift a data word by a number of bits. It is combinational: contains MUX to choose the shifted bits as the outputs</p><p>e.g. design a 4-bit barrel shifter that can shift a 4-bit word 0, 1, 2 or 3 bits to the left with incoming bits as ‘0’. 四位的barrel shifter可以移动0，1，2，3位（通过控制信号可以调节不同的位数）</p><p><em>n</em>比特数据的桶式移位器，需要的数据选择器数量为<em>n</em>比特数据的桶式移位器，需要的数据选择器数量为<img src="https://bkimg.cdn.bcebos.com/formula/8dcfddfc987526ae444d4110559e87d7.svg" alt="img"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928112114744.png" alt="le"></p><p>level 1：一次移动一位</p><p>level 2：一次移动两位</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220928112159366.png" alt="image-20220928112159366"></p><p>shift_n0 控制level 1是否移动</p><p>shift_n1控制level 2是否移动</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> barrel4 <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> D<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       shift_n<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Y<span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> barrel4<span class="token punctuation">;</span>    <span class="token keyword">architecture</span> arch <span class="token keyword">of</span> barrel4 <span class="token keyword">is</span>    <span class="token keyword">component</span> mux2 <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">,</span> S<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span> <span class="token comment">-- Y &lt;= A when S = '0' else B;</span>      Y<span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">end</span> <span class="token keyword">component</span><span class="token punctuation">;</span>    <span class="token keyword">signal</span> D1<span class="token punctuation">,</span> D0<span class="token punctuation">,</span> X1<span class="token punctuation">,</span> X0<span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>         MUX2_GEN<span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span> <span class="token keyword">generate</span>    L1<span class="token punctuation">:</span> mux2 <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span><span class="token function">D0</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">D1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">shift_n</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">X0</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    L2<span class="token punctuation">:</span> mux2 <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span><span class="token function">X0</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">X1</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">shift_n</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Y</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">generate</span> MUX2_GEN<span class="token punctuation">;</span>    D0 <span class="token operator">&lt;=</span> D<span class="token punctuation">;</span>    D1 <span class="token operator">&lt;=</span> <span class="token function">D0</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">'0'</span><span class="token punctuation">;</span> <span class="token comment">-- shifted bits level 1 利用&amp;将字节拼起来</span>    X1 <span class="token operator">&lt;=</span> <span class="token function">X0</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token vhdl-vectors number">"00"</span><span class="token punctuation">;</span> <span class="token comment">-- shifted bits level 2</span><span class="token keyword">end</span> arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Binary-Addition-and-Adders"><a href="#Binary-Addition-and-Adders" class="headerlink" title="Binary Addition and Adders"></a>Binary Addition and Adders</h3><p>Adder is the device to add two arithmetic operands (in binary) to give a sum (also in binary).</p><p>In addition, in order to handle subtraction, we just need a simple circuit to negate the operand (A – B → A + (-B)) and use the same adder.</p><h4 id="Half-Adders"><a href="#Half-Adders" class="headerlink" title="Half Adders"></a>Half Adders</h4><p>输入：X、Y</p><p>输出：carry out 和 half sum</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004104602586.png" alt="image-20221004104602586"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004104548070.png" alt="image-20221004104548070"></p><p>在此基础上加CIN构成full adder</p><h4 id="Full-Adders-FAs"><a href="#Full-Adders-FAs" class="headerlink" title="Full Adders (FAs)"></a>Full Adders (FAs)</h4><p>Specification: </p><p>Three 1-bit inputs – X, Y &amp; CIN;</p><p> Two 1-bit outputs – S &amp; COUT</p><p><strong>{COUT, S} = X + Y + CIN</strong> </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004104953139.png" alt="image-20221004104953139"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004105005099.png" alt="image-20221004105005099"></p><h4 id="Ripple-Adder"><a href="#Ripple-Adder" class="headerlink" title="Ripple Adder"></a>Ripple Adder</h4><p>可以进行有符号的加分</p><p>行波进位加法器(用FA构成)</p><p>cascade adders to form a bigger adder to handle a <em>N</em>-bit addition</p><p>• The carry to the LSB is normally cleared (i.e. c0=’0’)</p><p>• Ripple adder is a classic example of an iterative circuit.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004105733906.png" alt="image-20221004105733906" style="zoom:80%;"><p> <strong>ripple adder is simple but slow since in the worse case c0 propagates all the way to c4</strong></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> my_ripple_adder <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> X<span class="token punctuation">,</span> Y <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       S <span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       COUT <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> my_ripple_adder<span class="token punctuation">;</span><span class="token keyword">architecture</span> my_ra_arch <span class="token keyword">of</span> my_ripple_adder <span class="token keyword">is</span>    <span class="token keyword">signal</span> C<span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">'0'</span><span class="token punctuation">;</span> <span class="token comment">-- no carry in for LSB</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    COUT <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    S <span class="token operator">&lt;=</span> X <span class="token operator">xor</span> Y <span class="token operator">xor</span> C<span class="token punctuation">;</span><span class="token keyword">end</span> my_ra_arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Ripple-Adder-with-Port-Maps"><a href="#Ripple-Adder-with-Port-Maps" class="headerlink" title="Ripple Adder with Port Maps"></a>Ripple Adder with Port Maps</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004152610465.png" alt="image-20221004152610465" style="zoom:50%;"><p><strong>Step 1: Generate top-level entity declaration</strong></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> my_ripple_adder <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> X<span class="token punctuation">,</span> Y <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       CIN <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>       S <span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       COUT <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> my_ripple_adder<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Step 2: Declare the lower-level design units used</strong></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">component</span> FA <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> CIN<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>      S<span class="token punctuation">,</span> COUT <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">component</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Steps 3&amp;4: Declare internal signals and create instances (port maps)</strong></p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">architecture</span> structural <span class="token keyword">of</span> my_ripple_adder <span class="token keyword">is</span>    <span class="token keyword">component</span> FA <span class="token keyword">is</span>    <span class="token keyword">port</span> <span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> CIN<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>          S<span class="token punctuation">,</span> COUT <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">component</span><span class="token punctuation">;</span>    <span class="token keyword">signal</span> C<span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    I0<span class="token punctuation">:</span> FA <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Y<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CIN<span class="token operator">=</span><span class="token operator">&gt;</span>CIN<span class="token punctuation">,</span> S<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">S</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  COUT<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    I1<span class="token punctuation">:</span> FA <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Y<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CIN<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> S<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">S</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> COUT<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    I2<span class="token punctuation">:</span> FA <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Y<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CIN<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> S<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">S</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> COUT<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    I3<span class="token punctuation">:</span> FA <span class="token keyword">port</span> <span class="token keyword">map</span> <span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Y<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CIN<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> S<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">S</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> COUT<span class="token operator">=</span><span class="token operator">&gt;</span>COUT<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> structural<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004152921539.png" alt="image-20221004152921539" style="zoom:67%;"><p>generate statement：</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl">    <span class="token keyword">signal</span> C<span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    FA_map_gen<span class="token punctuation">:</span>     <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token number">0</span> <span class="token keyword">to</span> <span class="token number">3</span> <span class="token keyword">generate</span>        INST<span class="token punctuation">:</span> FA <span class="token keyword">port</span> <span class="token keyword">map</span><span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">X</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> Y<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">Y</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> CIN<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">C</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>                           S<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">S</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> COUT<span class="token operator">=</span><span class="token operator">&gt;</span><span class="token function">C</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">generate</span> FA_map_gen<span class="token punctuation">;</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> CIN<span class="token punctuation">;</span>    COUT <span class="token operator">&lt;=</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> structural<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Subtractor"><a href="#Subtractor" class="headerlink" title="Subtractor"></a>Subtractor</h4><p>{2’s complement of Y} = Y’ + 1 (Y’ is bitwise NOT/complement)</p><p>c0=1 代表着 Y’+ 000..01</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004111348686.png" alt="image-20221004111348686"></p><p>​      </p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> my_ripple_subtractor <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> X<span class="token punctuation">,</span> Y <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       S <span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       COUT <span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> my_ripple_subtractor<span class="token punctuation">;</span><span class="token keyword">architecture</span> my_rs_arch <span class="token keyword">of</span> my_ripple_subtractor <span class="token keyword">is</span>    <span class="token keyword">signal</span> C<span class="token punctuation">,</span> Yn<span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    Yn <span class="token operator">&lt;=</span> <span class="token operator">not</span> Y<span class="token punctuation">;</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">'1'</span><span class="token punctuation">;</span> <span class="token comment">-- extra '1' for 2's complement</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">Yn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">Yn</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">Yn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">Yn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">Yn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">Yn</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    COUT <span class="token operator">&lt;=</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">Yn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">X</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">(</span><span class="token function">Yn</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">and</span> <span class="token function">C</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    S <span class="token operator">&lt;=</span> X <span class="token operator">xor</span> Yn <span class="token operator">xor</span> C<span class="token punctuation">;</span><span class="token keyword">end</span> my_rs_arch<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Auto-Synthesis-of-Adders"><a href="#Auto-Synthesis-of-Adders" class="headerlink" title="Auto-Synthesis of Adders"></a>Auto-Synthesis of Adders</h4><p>In many design tools, adders can be described using the ‘+’ operator. (‘-‘ for subtractor).</p><p> an appropriate adder will be implemented automatically</p><p>it will try to choose an implementation that best fits the target device</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token comment">-- unsigned 8-bit adder/subtractor</span><span class="token keyword">library</span> IEEE<span class="token punctuation">;</span><span class="token keyword">use</span> IEEE<span class="token punctuation">.</span>std_logic_1164<span class="token punctuation">.</span><span class="token keyword">all</span><span class="token punctuation">;</span><span class="token keyword">use</span> IEEE<span class="token punctuation">.</span>std_logic_unsigned<span class="token punctuation">.</span><span class="token keyword">all</span><span class="token punctuation">;</span><span class="token keyword">entity</span> adder_7 <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> A<span class="token punctuation">,</span> B <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       OPER <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>       SUM <span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> adder_1<span class="token punctuation">;</span><span class="token keyword">architecture</span> archi <span class="token keyword">of</span> adder_7 <span class="token keyword">is</span><span class="token keyword">begin</span>    SUM <span class="token operator">&lt;=</span> A <span class="token operator">+</span> B <span class="token keyword">when</span> OPER <span class="token operator">=</span> <span class="token number">'0'</span> <span class="token keyword">else</span>           A <span class="token operator">-</span> B<span class="token punctuation">;</span><span class="token keyword">end</span> archi<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>You describe an adder and a subtractor for operands A and B and <strong>choose between sum and difference by an input OPER.</strong></p><h4 id="Arithmetic-Logic-Unit-ALU"><a href="#Arithmetic-Logic-Unit-ALU" class="headerlink" title="Arithmetic Logic Unit (ALU)"></a><strong>Arithmetic Logic Unit (ALU)</strong></h4><p>An arithmetic and logic unit (ALU) is a combinational circuit that can perform any of a number of different arithmetic and logical operations on a pair of <em>N</em>-bit operands</p><ul><li><p>The operations is chosen by a <strong>function-select inputs.</strong></p></li><li><p>it is simply a list of circuits whose outputs selected by a MUX.</p></li></ul><p>​              <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004155508605.png" alt="image-20221004155508605" style="zoom:50%;">                                 <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004155531348.png" alt="image-20221004155531348" style="zoom:50%;"></p><p> 4-bit AND gate and a 4-bit OR gate,  a 4-bit ripple adder for addition and increment. </p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004155920658.png" alt="image-20221004155920658" style="zoom:50%;"><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">architecture</span> simple_alu_arch <span class="token keyword">of</span> simple_alu <span class="token keyword">is</span>    <span class="token keyword">signal</span> P2<span class="token punctuation">,</span> P1<span class="token punctuation">,</span> P0<span class="token punctuation">,</span> T<span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    <span class="token comment">-- 4-bit AND gate and OR gate</span>    P0 <span class="token operator">&lt;=</span> A <span class="token operator">and</span> B<span class="token punctuation">;</span>    P1 <span class="token operator">&lt;=</span> A <span class="token operator">or</span> B<span class="token punctuation">;</span>    <span class="token comment">-- 2-to-1 MUX</span>    T <span class="token operator">&lt;=</span> B <span class="token keyword">when</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">'0'</span> <span class="token keyword">else</span> <span class="token vhdl-vectors number">"0001"</span><span class="token punctuation">;</span>    <span class="token comment">-- Auto-adder</span>    P2 <span class="token operator">&lt;=</span> A <span class="token operator">+</span> T<span class="token punctuation">;</span>    <span class="token comment">-- MUX 4-to-1</span>    <span class="token keyword">OUT</span> <span class="token operator">&lt;=</span> P2 <span class="token keyword">when</span> <span class="token punctuation">(</span>F <span class="token operator">=</span> <span class="token vhdl-vectors number">"11"</span><span class="token punctuation">)</span> <span class="token keyword">else</span>           P2 <span class="token keyword">when</span> <span class="token punctuation">(</span>F <span class="token operator">=</span> <span class="token vhdl-vectors number">"10"</span><span class="token punctuation">)</span> <span class="token keyword">else</span>           P1 <span class="token keyword">when</span> <span class="token punctuation">(</span>F <span class="token operator">=</span> <span class="token vhdl-vectors number">"01"</span><span class="token punctuation">)</span> <span class="token keyword">else</span>           P0 <span class="token keyword">when</span> <span class="token punctuation">(</span>F <span class="token operator">=</span> <span class="token vhdl-vectors number">"00"</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token number">'0'</span><span class="token punctuation">;</span><span class="token keyword">end</span> simple_alu_arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Bit-Slicing-the-ALU"><a href="#Bit-Slicing-the-ALU" class="headerlink" title="Bit-Slicing the ALU"></a>Bit-Slicing the ALU</h5><p>ALU位数切分</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> ALUSlice <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>    A<span class="token punctuation">,</span> B<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>   K<span class="token punctuation">,</span> CIN<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>   F<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">OUT</span><span class="token punctuation">,</span> COUT<span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> ALUSlice<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> create a bit-slice circuit that handles operation for a bit of the operands, e.g. A(0) vs B(0). （每位的ALU）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004160730756.png" alt="image-20221004160730756" style="zoom:50%;"><p>we can cascade <em>N</em> slices together to form a <em>N</em>-bit ALU.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221004160802265.png" alt="image-20221004160802265" style="zoom:50%;"><p>最低位的slice输入‘1’其余为‘0’ 因为加1操作实际上加00…01</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> DSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSD-2.4-Sequential Building Blocks</title>
      <link href="//post/DSD-2.4-Sequential%20Building%20Blocks.html"/>
      <url>//post/DSD-2.4-Sequential%20Building%20Blocks.html</url>
      
        <content type="html"><![CDATA[<h1 id="Sequential-Building-Blocks"><a href="#Sequential-Building-Blocks" class="headerlink" title="Sequential Building Blocks"></a>Sequential Building Blocks</h1><h2 id="Sequential-Circuits"><a href="#Sequential-Circuits" class="headerlink" title="Sequential Circuits"></a>Sequential Circuits</h2><p>Sequential circuits consist of combinational circuits and some form of memory.</p><p>（组合电路＋记忆元件）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019134804101.png" alt="image-20221019134804101" style="zoom:50%;"><p>记忆元件：锁存器和触发器</p><h2 id="Synchronous-System"><a href="#Synchronous-System" class="headerlink" title="Synchronous System"></a>Synchronous System</h2><p> <strong>synchronous</strong>： If a sequential circuit has its behavior/outputs changed at discrete moments in time, then it is said to be synchronous（只在特定点更改行为）</p><p> <strong>asynchronous：</strong> If the outputs can change at any instant of time, it is called asynchronous</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019140053491.png" alt="image-20221019140053491" style="zoom:50%;"><h2 id="Clock-Signal"><a href="#Clock-Signal" class="headerlink" title="Clock Signal"></a>Clock Signal</h2><p>We can use a signal shared by all storage elements for synchronisation – to ensure that each of them to change its output (if any) only at desired moments of changes.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019140532293.png" alt="image-20221019140532293" style="zoom:67%;"><h2 id="两种Storage-Elements与CLK有关"><a href="#两种Storage-Elements与CLK有关" class="headerlink" title="两种Storage Elements与CLK有关"></a>两种Storage Elements与CLK有关</h2><p> latches and flip-flops (FF)：<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019140652178.png" alt="image-20221019140652178" style="zoom:50%;"></p><p>锁存器与触发器区别：</p><p> 锁存器（latch）在电平信号的作用下改变状态，<strong>是一种对脉冲电平（即0或者1）敏感的存储单元电路（Sensitive to pulse level (i.e., 0 or 1)）</strong>。锁存器的数据存储动作取决于输入使能信号的电平值，仅当锁存器处于使能状态时，输出数据才会随着数据输入发生变化，否则处于锁存状态。</p><p>触发器<strong>（</strong>Flip-Flop，简写为 FF）<strong>是一种对脉冲边沿（即上升沿或者下降沿）敏感的存储电路（It is sensitive to the edge of the pulse (i.e. the rising edge or falling edge)）</strong>。随着输入的变化，输出会产生对应的变化。它通常是由至少两个相同的门电路构成的具有反馈性质的组合逻辑电路。应用中为了使触发过程容易控制，而做成由时钟触发控制的时序逻辑电路。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019140712477.png" alt="image-20221019140712477" style="zoom:50%;"><h3 id="D-Latch"><a href="#D-Latch" class="headerlink" title="D Latch"></a>D Latch</h3><p> <em>inputs</em>: Data (D) and Control (C)</p><p>​           Its output Q follows D when C = ‘1’ </p><p>​           otherwise Q remains unchanged.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019142542728.png" alt="image-20221019142542728" style="zoom:50%;"><p>当c=0时，Q保持不变，即锁存。</p><h3 id="Master-Slave-D-Flip-flop"><a href="#Master-Slave-D-Flip-flop" class="headerlink" title="Master-Slave D Flip-flop"></a>Master-Slave D Flip-flop</h3><p>D flip-flop is a very important sequential component which can be synchronised at clock edges.</p><p> use two latches to isolate output of the flip-flop from its input（用两个锁存器把输入输出隔离开，当主latch工作时候，slave latch出于锁存状态，当达到上升沿才解除锁存状态，把X传到Q）</p><p>Master-slave flip-flop: <strong>master latch holds input at an internal node and the slave latch holds the internal node (X) to output</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019143439792.png" alt="image-20221019143439792" style="zoom:67%;"><p>CLK = ‘0’: </p><p>master latch is ON, X = D; slave latch is OFF, Q unchanged.</p><p>CLK = ‘1’:</p><p>master latch is OFF, X unchanged; slave latch is ON, Q = X</p><p><strong>Overall effect: Q gets value of D when CLK changes from 0 to 1</strong></p><h3 id="D-Flip-flop"><a href="#D-Flip-flop" class="headerlink" title="D Flip-flop"></a>D Flip-flop</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019143602357.png" alt="image-20221019143602357" style="zoom:67%;"><p>用behavioural models去描述FF ,而不是去用 concurrent statement去描述。</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">architecture</span> my_d_ff <span class="token keyword">of</span> d_ff <span class="token keyword">is</span><span class="token keyword">begin</span>    dff<span class="token punctuation">:</span> <span class="token keyword">process</span> <span class="token punctuation">(</span>CLK<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CLK<span class="token attribute attr-name">'event</span> <span class="token operator">and</span> CLK <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token keyword">then</span> <span class="token comment">-- rising_edge(CLK)</span>            Q <span class="token operator">&lt;=</span> D<span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">process</span> dff<span class="token punctuation">;</span><span class="token keyword">end</span> my_d_ff<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>CLK’event</strong> means a 0 to 1 or 1 to 0 transition.</p><p><strong>Additional CLK=’1’</strong> implies we want a rising edge (0 to 1).</p><blockquote><p>It is important that you intentionally omit a signal assignment outside the if statement. </p><p>省略之后代表不改变当前输出 这其中implying a D flip-flop</p></blockquote><p><strong>The cryptic method of designing sequential circuit in VHDL</strong></p><p>设计时序电路的隐式规则：</p><p> combinational：signal always has an assignment after execution of all sequential statements</p><p>sequential： otherwise（少写一个if） memory element like D flip-flop is needed to keep the old value </p><p>如果代码不是涉及到所有情况，synthesiser就会自动生成一个latch。</p><p>但是现在数字设计中很少使用latch</p><p>So you’d better check your codes to make sure you provide a default signal assignment or a catch-all condition.</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">architecture</span> arch <span class="token keyword">of</span> entity1 <span class="token keyword">is</span>    <span class="token keyword">signal</span> S<span class="token punctuation">,</span> A<span class="token punctuation">,</span> B<span class="token punctuation">:</span> std_logic<span class="token punctuation">;</span><span class="token keyword">begin</span>    latch_ex<span class="token punctuation">:</span> <span class="token keyword">process</span> <span class="token punctuation">(</span>A<span class="token punctuation">,</span> B<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>A <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            S <span class="token operator">&lt;=</span> <span class="token number">'1'</span><span class="token punctuation">;</span>        <span class="token keyword">elsif</span> <span class="token punctuation">(</span>B <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            S <span class="token operator">&lt;=</span> <span class="token number">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">process</span> latch_ex<span class="token punctuation">;</span><span class="token keyword">end</span> arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>how about the remaining cases?VHDL assumes to keep value of S, so a latch is required.</p><h3 id="Register"><a href="#Register" class="headerlink" title="Register"></a>Register</h3><p>we group a set of D flip-flops to store a word, it is called a register</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019150814537.png" alt="image-20221019150814537" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019150800975.png" alt="image-20221019150800975" style="zoom:67%;"></p><h3 id="Loadable-Registers"><a href="#Loadable-Registers" class="headerlink" title="Loadable Registers"></a>Loadable Registers</h3><p>可加载的寄存器（使用一个MUX在新数据和原始数据间选择）</p><p>The idea is to use a MUX to pick between the new data DN or the original data QN . Imagine this structure is expanded for <em>N</em> bits.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019151437456.png" alt="image-20221019151437456" style="zoom:67%;"><p>A loadable register can therefore be built using a number of D flip-flops with enable.</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> reg8 <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span> REG_IN<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       LD<span class="token punctuation">,</span> CLK<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>       REG_OUT<span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">7</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> reg8<span class="token punctuation">;</span><span class="token keyword">architecture</span> reg8_arch <span class="token keyword">of</span> reg8 <span class="token keyword">is</span><span class="token keyword">begin</span>    reg<span class="token punctuation">:</span> <span class="token keyword">process</span> <span class="token punctuation">(</span>CLK<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CLK<span class="token attribute attr-name">'event</span> <span class="token operator">and</span> CLK <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>LD <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>                REG_OUT <span class="token operator">&lt;=</span> REG_IN<span class="token punctuation">;</span>            <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">process</span> reg<span class="token punctuation">;</span><span class="token keyword">end</span> reg8_arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>There is no <strong>else</strong> statement, inferring 8 D flip-flops</p><p>It is good and recommended to separate the CLK and LD signals to make a clear inferring of component(最好把CLK和LD分开)</p><h2 id="Shift-registers-amp-Counters-and-their-applications"><a href="#Shift-registers-amp-Counters-and-their-applications" class="headerlink" title="Shift registers &amp; Counters and their applications."></a>Shift registers &amp; Counters and their applications.</h2><h3 id="Serial-vs-Parallel"><a href="#Serial-vs-Parallel" class="headerlink" title="Serial vs Parallel"></a>Serial vs Parallel</h3><p>（书上有，记得看）</p><p>There are two main ways to present a input (<em>N</em> bits) to a system:</p><p>Serial: one bit is presented per cycle (<em>N</em> clock periods required)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019152310026.png" alt="image-20221019152310026" style="zoom:50%;"><p>Parallel: <em>N</em> bits together at a cycle (1 clock period required)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019152320069.png" alt="image-20221019152320069" style="zoom:50%;"><h3 id="Shift-Register"><a href="#Shift-Register" class="headerlink" title="Shift Register"></a>Shift Register</h3><p>We can cascade a number of D flip-flops sharing the same clock to construct a shift register.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019152543161.png" alt="image-20221019152543161" style="zoom:50%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221103224209580.png" alt="image-20221103224209580"></p><p>每个时钟到来都会把数据向前移动一位</p><p>因为从CLK上升沿到来到输出端新状态的建立还需要一段时间的传输延时，所以当clk上升沿同时作用于所有触发器时，它们的输入端的输入信号为前一个触发器原来的输出状态，即维持时钟到来前的状态。总的效果相当于所有代码向右移动了一位0</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221104125053030.png" alt="image-20221104125053030"></p><p>如图当第一个cp上升沿到达时只有Q0变化，第二个上升沿是Q0,Q1都变化….直到四个clk信号后串行输入的四位全部转入寄存器，四个触发器的输出端此时可以得到四个并行输出</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019152720859.png" alt="image-20221019152720859"></p><h4 id="Serial-to-Parallel-Conversion"><a href="#Serial-to-Parallel-Conversion" class="headerlink" title="Serial to Parallel Conversion"></a>Serial to Parallel Conversion</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019152803113.png" alt="image-20221019152803113" style="zoom:67%;"><p>可以看出中间红色为串行输入的并行输出，所以串并转换的寄存器只需要每一级都有输出</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019152913745.png" alt="image-20221019152913745" style="zoom:50%;"><h4 id="Shift-Register-with-Output-Hold"><a href="#Shift-Register-with-Output-Hold" class="headerlink" title="Shift Register with Output Hold"></a>Shift Register with Output Hold</h4><p>Use a MUX to choose between shift input and original output.</p><p>(This is the same as using D flip-flop with enable)</p><p>shift/hold’ = 1: shift s_in through the shift register</p><p>shift/hold’ = 0: keep the current data and stop shifting</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019153026611.png" alt="image-20221019153026611" style="zoom:67%;"><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> ShiftRegHold <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>CLK<span class="token punctuation">,</span> HOLDn <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>      S_IN <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>      Q <span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> ShiftRegHold<span class="token punctuation">;</span><span class="token keyword">architecture</span> beh <span class="token keyword">of</span> ShiftRegHold <span class="token keyword">is</span>    <span class="token keyword">signal</span> S<span class="token punctuation">,</span> Qint<span class="token punctuation">,</span> D<span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    Q <span class="token operator">&lt;=</span> Qint<span class="token punctuation">;</span> <span class="token comment">-- mirror to output</span>    reg<span class="token punctuation">:</span> <span class="token keyword">process</span> <span class="token punctuation">(</span>CLK<span class="token punctuation">)</span>    <span class="token keyword">begin</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>CLK<span class="token attribute attr-name">'event</span> <span class="token operator">and</span> CLK <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            Qint <span class="token operator">&lt;=</span> D<span class="token punctuation">;</span>        <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>    <span class="token keyword">end</span> <span class="token keyword">process</span><span class="token punctuation">;</span>    D <span class="token operator">&lt;=</span> Qint <span class="token keyword">when</span> HOLDn <span class="token operator">=</span> <span class="token number">'0'</span> <span class="token keyword">else</span> S<span class="token punctuation">;</span> <span class="token comment">-- 2-to-1 MUX</span>    S <span class="token operator">&lt;=</span> <span class="token function">Qint</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> S_IN<span class="token punctuation">;</span> <span class="token comment">-- shifted bits</span><span class="token keyword">end</span> beh<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意S_in 是一位信号</p><p>由于Q是一个输出信号不能直接读取，而且我们不知道Q初始值是啥，设一个Qint作为初始值赋值给Q，再对Qint 进行移位。</p><h4 id="Parallel-to-Serial-Conversion"><a href="#Parallel-to-Serial-Conversion" class="headerlink" title="Parallel to Serial Conversion"></a>Parallel to Serial Conversion</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019154537122.png" alt="image-20221019154537122"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019154750117.png" alt="image-20221019154750117"></p><p>shift/load’ = 1: shift s_in through the shift register</p><p>shift/load’ = 0: load parallel value from input bus D</p><p>So far the direction of shifting is fixed (shift right to the diagram, but literally left Q3Q2Q1Q0 )</p><h4 id="Universal-Shift-Register"><a href="#Universal-Shift-Register" class="headerlink" title="Universal Shift Register"></a>Universal Shift Register</h4><p>Let’s build a bit slice for a universal shift register: hold, load, shift left and shift right</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019155407048.png" alt="image-20221019155407048"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019155431530.png" alt="image-20221019155431530" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019155535054.png" alt="image-20221019155535054" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019155712992.png" alt="image-20221019155712992" style="zoom:67%;"><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> UnivShiftReg <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>D <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      CLK<span class="token punctuation">,</span> RST <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>      S<span class="token punctuation">:</span> <span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      S_IN <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>      Q <span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> UnivShiftReg<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h3><p>A counter is a circuit that counts (in binary): 0, 1, 2</p><p>It has to be sequential in nature since memory storage is necessary to keep the value of count</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025202903878.png" alt="image-20221025202903878" style="zoom:67%;"><p>模M计数器： a counter with <em>M</em> states is called a modulo-<em>M</em> counter.</p><p>因为 it can be used to calculate (<em>N</em> mod <em>M</em>) </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025204249208.png" alt="image-20221025204249208"></p><h4 id="Ripple-Counter"><a href="#Ripple-Counter" class="headerlink" title="Ripple Counter"></a>Ripple Counter</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025203636712.png" alt="image-20221025203636712"></p><ul><li>General structure: Each T (toggler) flip-flop is clocked by the rising edge of the previous Q’ output (i.e. the falling edge of Q).</li></ul><p>这里使用T触发器：在T=1时，时钟每个上升沿Q翻转</p><ul><li><p>The frequencies are being divided by 2 as you go along Q0 , Q1 , Q2 , Q3 .</p><p>每输出一个Q 频率就会减小一半（周期扩大一倍）这是由于只在q bar 的上升沿（q的下降沿）变化所以周期会变大</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025205257573.png" alt="image-20221025205257573"></p><p>频率越靠下越小</p><p> <strong>Effects of Delay</strong></p><p>In reality, the logic gates and flip-flops have some propagation delays, so the changes are not immediate</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025205426636.png" alt="image-20221025205426636" style="zoom:67%;"><p>640is propagation delay （output of Q0 Q1 Q2 are not synchronized）</p><h5 id="Asynchronous"><a href="#Asynchronous" class="headerlink" title="Asynchronous"></a>Asynchronous</h5><p>Ripple counter is asynchronous, since each flip-flop is clocked separately</p><p>You need to wait until the output becomes stable to read the correct results.</p><p>Therefore the clock frequency cannot be too high.</p><h4 id="Synchronous-Counters"><a href="#Synchronous-Counters" class="headerlink" title="Synchronous Counters"></a>Synchronous Counters</h4><p>Basic requirement: outputs change simultaneously(at/soon after the clock edge)</p><p>View the counter as adding 1 every clock So we can use (ripple) half adders to <strong>pre-calculate</strong> N+1, and then output <em>N</em>+1 using D flip-flops at clock edges.</p><p>理解为先全部加（00001）等一个时钟来全部输出到下一个状态的输入</p><p>We can derive an up counter as well as an up/down counter</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025223651010.png" alt="image-20221025223651010" style="zoom:67%;"><p>Suppose we now count to 5 “0101”, the HA chains will calculate “0101” + 1, giving “0110”, which is outputed at next clock edge.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221025224450635.png" alt="image-20221025224450635" style="zoom:67%;"><p>0101是现在状态，0101通过四个半加器后输出0110到D,然后等下个时钟到来时转移到q</p><p>可调加减的计数器的VHDL</p><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> CounterUpDown <span class="token keyword">is</span><span class="token keyword">port</span> <span class="token punctuation">(</span>CLK <span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>      nCLR<span class="token punctuation">,</span> UP<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>      Q <span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> CounterUpDown<span class="token punctuation">;</span><span class="token keyword">architecture</span> arch <span class="token keyword">of</span> CounterUpDown <span class="token keyword">is</span>    <span class="token keyword">signal</span> Qint<span class="token punctuation">:</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">begin</span>    cnt_proc<span class="token punctuation">:</span> <span class="token keyword">process</span> <span class="token punctuation">(</span>nCLR<span class="token punctuation">,</span> CLK<span class="token punctuation">)</span>     <span class="token keyword">begin</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>nCLR <span class="token operator">=</span> <span class="token number">'0'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>        Qint <span class="token operator">&lt;=</span> <span class="token vhdl-vectors number">"0000"</span><span class="token punctuation">;</span>      <span class="token keyword">elsif</span> <span class="token punctuation">(</span>CLK<span class="token attribute attr-name">'event</span> <span class="token operator">and</span> CLK <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>UP <span class="token operator">=</span> <span class="token number">'1'</span><span class="token punctuation">)</span> <span class="token keyword">then</span>            Qint <span class="token operator">&lt;=</span> Qint <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">else</span>            Qint <span class="token operator">&lt;=</span> Qint – <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>     <span class="token keyword">end</span> <span class="token keyword">if</span><span class="token punctuation">;</span>  <span class="token keyword">end</span> <span class="token keyword">process</span><span class="token punctuation">;</span>  Q <span class="token operator">&lt;=</span> Qint<span class="token punctuation">;</span><span class="token keyword">end</span> arch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> DSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSD-2.5-FIFO and LIFO Buffers</title>
      <link href="//post/DSD-2.5-FIFO%20and%20LIFO%20Buffers.html"/>
      <url>//post/DSD-2.5-FIFO%20and%20LIFO%20Buffers.html</url>
      
        <content type="html"><![CDATA[<h1 id="FIFO-and-LIFO-Buffers"><a href="#FIFO-and-LIFO-Buffers" class="headerlink" title="FIFO and LIFO Buffers"></a>FIFO and LIFO Buffers</h1><h2 id="First-In-First-Out-Buffer-FIFO"><a href="#First-In-First-Out-Buffer-FIFO" class="headerlink" title="First-In First-Out Buffer (FIFO)"></a>First-In First-Out Buffer (FIFO)</h2><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026104112265.png" alt="image-20221026104112265" style="zoom:67%;"><p>• It is digital device/block to regulate flow of data received in irregular time intervals</p><p>• Data can be read while the data fill up the buffer</p><p><em>M</em> x <em>N</em>-bit (or simply <em>M</em> x <em>N</em>) FIFO indicates a capacity of <em>M</em> data word, <em>N</em>-bit each.</p><p>可以存M个Nbit的字符</p><h3 id="External-Interface"><a href="#External-Interface" class="headerlink" title="External Interface"></a>External Interface</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026105153101.png" alt="image-20221026105153101" style="zoom:50%;"><pre class="line-numbers language-VHDL" data-language="VHDL"><code class="language-VHDL">entity FIFO_MN isgeneric (N: positive := 4; M: positive := 4);port ( D_IN: in std_logic_vector(N-1 downto 0);       Read_WriteN: in std_logic;       Enable: in std_logic;       Reset: in std_logic;       CLK: in std_logic;       D_OUT: out std_logic_vector(N-1 downto 0);       Empty, Full: out std_logic);end FIFO_MN;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>　GENERIC（常数名 数据类型 := 设定值）;</p><ol><li><p>定义实体的端口大小；</p></li><li><p>设计实体的物理特征；</p><p>在例化时应该加generic map来修改不同需求下的元件例化参数</p></li></ol><p>利用移位寄存器来设计FIFO</p><p>Suppose we want to implement a <em>M</em> x <em>N</em> FIFO, it is clearly that we will need at least <em>M</em> x <em>N</em> D flip flops to store the bits.</p><p>we make use of the <em>N M</em>-bit shift register to build the FIFO</p><p>我们使用N个M比特的移位寄存器来构建FIFIO</p><ol><li><p>when a new word is added, each of the bits in this word will be shifted into the <em>N</em> shift registers separately.</p></li><li><p>the older words are also shifted, therefore it is important that we remember where the oldest word is by a counter of a suitable size.</p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026121153920.png" alt="image-20221026121153920"></p><p>If it is full, we should read the output (and free the space) before we can receive more word(s); otherwise the buffer overflows</p><p>Overflow a buffer should be avoided at all costs. i.e. don’t write when Full = 1</p><p>Dout一直在读，R/W’直影响计数器加减以及移位寄存器保持还是移动</p><p>之所以把计数器初始化为1111，是为了统一计数器和shifer的索引，这样可以保证索引始终指在最后一个有效数字上。且由于M=4所以</p><h2 id="Last-In-First-Out-Buffer-LIFO"><a href="#Last-In-First-Out-Buffer-LIFO" class="headerlink" title="Last-In First-Out Buffer (LIFO)"></a>Last-In First-Out Buffer (LIFO)</h2><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026121320131.png" alt="image-20221026121320131" style="zoom:67%;"><p> push-down stack.</p><p>• Data words are pushed down into the buffer.</p><p>• The last word that goes into the stack (push) will be the first one be taken out (pop).</p><p><strong>PUSH</strong>   place a word onto the top of stack</p><p><strong>POP</strong>     remove a word from the top of stack</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026121804285.png" alt="image-20221026121804285" style="zoom:67%;"><pre class="line-numbers language-vhdl" data-language="vhdl"><code class="language-vhdl"><span class="token keyword">entity</span> LIFO_MN <span class="token keyword">is</span><span class="token keyword">generic</span> <span class="token punctuation">(</span>N<span class="token punctuation">:</span> positive <span class="token operator">:=</span> <span class="token number">4</span><span class="token punctuation">;</span> M<span class="token punctuation">:</span> positive <span class="token operator">:=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">port</span> <span class="token punctuation">(</span> D_IN<span class="token punctuation">:</span> <span class="token keyword">in</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span>N<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Push_PopN<span class="token punctuation">,</span> Enable<span class="token punctuation">,</span> Reset<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>       CLK<span class="token punctuation">:</span> <span class="token keyword">in</span> std_logic<span class="token punctuation">;</span>       D_OUT<span class="token punctuation">:</span> <span class="token keyword">out</span> <span class="token function">std_logic_vector</span><span class="token punctuation">(</span>N<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">downto</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       Empty<span class="token punctuation">,</span> Full<span class="token punctuation">:</span> <span class="token keyword">out</span> std_logic<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span> LIFO_MN<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> shift register has to shift to both left and right, so that after a word is shifted in to the right (push), it can be shifted out to the left (pop, last in first out).</p><p> use <em>N M</em>-bit bi-directional shift registers to build the LIFO</p><ol><li><p>when a new word is added (push), each of the bits will be shifted right into the <em>N</em> shift registers in parallel. At the same time, the older words are all shifted right.</p></li><li><p>the top of the stack is always at the leftmost.</p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026122316485.png" alt="image-20221026122316485"></p><p>因为这里读数据只读第一个位置，索引与计数器无关（不随计数器变化），所以计数器不用初始化为1111；FIFO和LIFO区别就在于索引动不动，其他没有本质区别</p><p>When it is full, we should pop data out before we push more words in ; otherwise the buffer overflows, which means that bottom of the stack - AAword0 is lost permanently</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026122429721.png" alt="image-20221026122429721"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> DSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSD-3.1-FSM</title>
      <link href="//post/DSD-3.1-FSM.html"/>
      <url>//post/DSD-3.1-FSM.html</url>
      
        <content type="html"><![CDATA[<h1 id="FSM"><a href="#FSM" class="headerlink" title="FSM"></a>FSM</h1><h2 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h2><p>Finite state machines (FSMs) are mathematical abstractions that are used to solve a large variety of problems</p><p>Actually simple FSM design is just a step beyond the sequential circuit design</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107154840809.png" alt="image-20221107154840809"></p><ul><li><p><strong>They are clocked synchronous sequential circuit</strong> 同步时序电路</p></li><li><p><strong>The state only changes on clock edges</strong> 只在时钟边沿改变状态</p></li><li><p><strong>They has only finite number of states.</strong> 拥有有限个状态</p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107155036137.png" alt="image-20221107155036137" style="zoom:50%;"><p>状态机分为Moore和Mealy</p><h3 id="Moore-Machines"><a href="#Moore-Machines" class="headerlink" title="Moore Machines"></a>Moore Machines</h3><p>一个时序电路输出同时取决于现态</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107160044838.png" alt="image-20221107160044838" style="zoom:67%;"><p>next_state = <em>F</em>(current_state, inputs)</p><p>outputs = <em>G</em>(current_state)</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107160705242.png" alt="image-20221107160705242" style="zoom:67%;"><h3 id="Mealy-Machines"><a href="#Mealy-Machines" class="headerlink" title="Mealy Machines"></a>Mealy Machines</h3><p>输出取决于现态和输入</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107160729787.png" alt="image-20221107160729787" style="zoom:67%;"><p>next_state = <em>F</em>(current_state, inputs)</p><p>outputs = <em>G</em>(current_state, inputs)</p><h3 id="State-Register"><a href="#State-Register" class="headerlink" title="State Register"></a>State Register</h3><p>A state register with <em>N</em> flip-flops has 2<em>N</em> possible states</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221107161040831.png" alt="image-20221107161040831" style="zoom:67%;"><h3 id="Designing-a-State-Machine"><a href="#Designing-a-State-Machine" class="headerlink" title="Designing a State Machine"></a>Designing a State Machine</h3><p>\1. Start with specification</p><p>\2. Draw state diagram</p><p>\3. Formalise with state/output table</p><p>\4. Carry out state assignment </p><p>\5. Create state transition/output table</p><p>\6. Get minimised Boolean equations</p><p>\7. Synthesise circuit &amp; optimise</p><p>这章笔记不太全，一部分手写了（字丑见谅）：</p><p>链接：<a href="https://pan.baidu.com/s/14fmdxCFF8gPnUzrQqdOnMg?pwd=bupt">https://pan.baidu.com/s/14fmdxCFF8gPnUzrQqdOnMg?pwd=bupt</a><br>       提取码：bupt</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> DSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DSD-1.1-Design Process</title>
      <link href="//post/DSD-1.1-Design%20Process.html"/>
      <url>//post/DSD-1.1-Design%20Process.html</url>
      
        <content type="html"><![CDATA[<h1 id="Design-Process"><a href="#Design-Process" class="headerlink" title="Design Process"></a>Design Process</h1><h2 id="Design-Process-1"><a href="#Design-Process-1" class="headerlink" title="Design Process"></a>Design Process</h2><h3 id="设计流程："><a href="#设计流程：" class="headerlink" title="设计流程："></a><strong>设计流程：</strong></h3><blockquote><p>Modelling → Entry → Test → Synthesis（合成） → Verification</p></blockquote><p><strong>• Modelling</strong> – associate inputs and outputs with Boolean/Switching logic</p><p>确立数字化模型：定义输入输出（二进制值）画truth table</p><p><strong>• Entry</strong> – learn to express your circuit using schematic (e.g. gate-level) or hardware descriptive language (HDL，Hardware descriptive language )</p><p>画成电路图或者HDL代码</p><p><strong>• Test</strong> – verify the correctness of your design manually</p><p>在图或者代码上检验正确性</p><p><strong>• Synthesis</strong> – transform the circuit to match the target technology (e.g. NAND gates only)</p><p>改造电路以匹配目标技术（比如数电中限定只能使用某个门）</p><p><strong>• Implementation</strong> – create/make the circuit on actual device（实物）</p><p><strong>• Verification</strong> – confirm the correctness on the final circuit and evaluate the performance </p><p>在电路上测试设计是否正确</p><h3 id="软件设计流程："><a href="#软件设计流程：" class="headerlink" title="软件设计流程："></a>软件设计流程：</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920201538706.png" alt="image-20220920201538706" style="zoom:67%;">]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> DSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.4-JavaScript</title>
      <link href="//post/2.4-JavaScript.html"/>
      <url>//post/2.4-JavaScript.html</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h1><h2 id="What-is-JavaScript"><a href="#What-is-JavaScript" class="headerlink" title="What is JavaScript?"></a>What is JavaScript?</h2><p>A scripting language most often used for client-side web development</p><ul><li><em>HTML</em> 定义网页的内容</li><li><em>CSS</em> 规定网页的布局</li><li><em>JavaScript</em> 对网页行为进行编程</li></ul><p>Different brands and/or different versions of browsers may support different implementations of JavaScript.</p><h5 id="JavaScript-1"><a href="#JavaScript-1" class="headerlink" title="JavaScript:"></a><strong>JavaScript:</strong></h5><p>• Validating forms before sending to server.</p><p>• Client-side language to manipulate all areas of the browser’s display, whereas e.g. <em>servlets</em> and PHPs run on server side.</p><p>• Event‐Driven Programming Model: event handlers.</p><p>• Heavyweight regular expression capability (<em>out of scope here!</em>)</p><p>• Interpreted language (interpreter in browser): dynamic typing.</p><p>• Functional object‐oriented language with prototypical inheritance (class free), which includes concepts of objects, arrays, prototypes …</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221101210525848.png" alt="image-20221101210525848" style="zoom:67%;"><p>在 HTML 中，JavaScript 代码必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221109102020089.png" alt="image-20221109102020089" style="zoom:67%;"><h3 id="Form-Validation"><a href="#Form-Validation" class="headerlink" title="Form  Validation"></a><strong>Form  Validation</strong></h3><p>使用 JavaScript 来验证提交数据（<strong>客户端验证</strong>）比将数据提交到服务器再进行验证（<strong>服务器端验证</strong>）用户体验要更好，因为客户端验证发生在用户浏览器中，无需向服务器发送请求，所以速度更快，而服务器端验证，需要先将数据提交到服务器，然后服务器再将结果返回给浏览器，用户需要等待服务器响应结果才能知道哪里出了问题。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HTML</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HEAD</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SCRIPT</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">     <span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token operator">==</span>“”<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>“please enter your email”<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SCRIPT</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HEAD</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BODY</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FORM</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“get”</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“someURL”</span>                     <span class="token special-attr"><span class="token attr-name">onSubmit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript">“<span class="token keyword">return</span></span></span></span> <span class="token attr-name">validate()”</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>text</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“email”</span><span class="token punctuation">&gt;</span></span>enter your email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“send”</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FORM</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BODY</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HTML</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>在 HTML 中，JavaScript 代码必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间。</p></li><li><p>validate():在这段代码中判断输入是否为空如果为空调用alert（在浏览器中弹出一个警告框）</p></li></ul><p>Variable names placed in <strong></strong> section; can’t start with a number, have spaces or other punctuation.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> greeting<span class="token operator">=</span>“Hello”<span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>“<span class="token operator">&lt;</span><span class="token constant">FONT</span> <span class="token constant">COLOR</span><span class="token operator">=</span>‘magenta’<span class="token operator">&gt;</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>greeting<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>“<span class="token operator">&lt;</span>br<span class="token operator">&gt;</span>world<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">FONT</span><span class="token operator">&gt;</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="声明（创建）-JavaScript-变量"><a href="#声明（创建）-JavaScript-变量" class="headerlink" title="声明（创建） JavaScript 变量"></a>声明（创建） JavaScript 变量</h6><p>通过 <code>var</code> 关键词来声明 JavaScript 变量：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> carName<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221101214834422.png" alt="image-20221101214834422"></p><h3 id="在HTML中调用JS代码的方法"><a href="#在HTML中调用JS代码的方法" class="headerlink" title="在HTML中调用JS代码的方法"></a>在HTML中调用JS代码的方法</h3><ol><li><p>JavaScript 代码必须位于 <code>&lt;script&gt;</code> 与 <code>&lt;/script&gt;</code> 标签之间。</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"demo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> <span class="token string">"我的第一段 JavaScript"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>​    脚本可被放置与 HTML 页面的 <code>&lt;body&gt;</code> 或 <code>&lt;head&gt;</code> 部分中，或兼而有之。</p><p>​    在<code>&lt;head&gt;</code>中声明类及书写功能, 在<code>&lt;body&gt;</code>中调用功能</p><ol start="2"><li><p>外部脚本</p><p>脚本可放置与外部文件中：</p><p>在 <code>&lt;script&gt;</code> 标签的 <code>src</code> (source) 属性中设置脚本的名称：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myScript.js<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h4 id="document-write"><a href="#document-write" class="headerlink" title="document.write"></a><strong>document.write</strong></h4><p><strong>document.write</strong>向文档中写入HTML表达式和JavaScript的代码。</p><p><em>document.writeln()输出结果相当于document.write()输出之后加空格</em>(html源码中换行)</p><p>– <strong>writeln</strong> break on the page need to add  adds a return character after the text string, but to get a line <code>&lt;br&gt;</code> 并不会换行</p><p>使用header也可以自动换行</p><p>– document.write(“</p><h1>Top level header</h1>”);<p></p><p>– document.write(“</p><h6> Lowest level header</h6>”);<p></p><p><strong>文本中可以写入HTML标签</strong></p><p>If just want a line break:</p><p>– <strong>document.write(<code>'&lt;br&gt;'</code>);</strong></p><h4 id="Dynamic-Typing-type-is-defined-by-the-literal-value-you-assign-to-it"><a href="#Dynamic-Typing-type-is-defined-by-the-literal-value-you-assign-to-it" class="headerlink" title="Dynamic Typing: type is defined by the literal value you assign to it"></a><strong>Dynamic Typing: type is defined by the literal value you assign to it</strong></h4><p>javaScript 拥有动态类型。这意味着相同的变量可用作不同的类型（取决于你赋的值）：</p><p>**值类型(基本类型)<strong>：字符串（String）、</strong>数字(Number)**、布尔(Boolean)、空（Null）、未定义（Undefined）、Symbol。</p><p><strong>引用数据类型（对象类型）</strong>：对象(Object)、数组(Array)、函数(Function)</p><p>变量的数据类型可以使用 <strong>typeof</strong> 操作符来查看：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token string">"John"</span>                <span class="token comment">// 返回 string</span><span class="token keyword">typeof</span> <span class="token number">3.14</span>                  <span class="token comment">// 返回 number</span><span class="token keyword">typeof</span> <span class="token boolean">false</span>                 <span class="token comment">// 返回 boolean</span><span class="token keyword">typeof</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>             <span class="token comment">// 返回 object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>x=null;</strong>  to identify a deliberately <em>null</em> or empty reference</p><p>If <strong>x</strong> is <em>undefined</em>, it has not been set a value (MUST define a value for a <strong>const</strong>).</p><h5 id="Implicit-conversion-between-types"><a href="#Implicit-conversion-between-types" class="headerlink" title="Implicit conversion between types"></a><strong>Implicit conversion between types</strong></h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221101221555148.png" alt="image-20221101221555148" style="zoom:67%;"><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“text/javascript”</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    x <span class="token operator">=</span> <span class="token number">0xF</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    z <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“text/javascript”</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"x+y = "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"x+z = "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>x<span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>   </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221101223015118.png" alt="image-20221101223015118" style="zoom:50%;"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>b <span class="token operator">=</span> “<span class="token number">20</span>”<span class="token punctuation">;</span>c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span> <span class="token comment">// 120  b+a  201</span>c <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token punctuation">(</span>b<span class="token operator">-</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 21</span>c <span class="token operator">=</span> a <span class="token operator">+</span> “”<span class="token punctuation">;</span> <span class="token comment">//The empty string, forcing conversion into a string.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The number <strong>0</strong>. JavaScript prefers numeric conversion with the <strong>minus</strong> (and prefers string conversion with <strong>+</strong>).</p><p>a+b=120</p><p>b+a=201</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">x <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>sum <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span>“<span class="token operator">&lt;</span><span class="token constant">H1</span><span class="token operator">&gt;</span>x <span class="token operator">+</span> y <span class="token operator">=</span> ” <span class="token operator">+</span> sum <span class="token operator">+</span> “ <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">H1</span><span class="token operator">&gt;</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span>“<span class="token operator">&lt;</span><span class="token constant">H1</span><span class="token operator">&gt;</span>x <span class="token operator">+</span> y <span class="token operator">=</span> ” <span class="token operator">+</span> x<span class="token operator">+</span>y <span class="token operator">+</span> “ <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">H1</span><span class="token operator">&gt;</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">writeln</span><span class="token punctuation">(</span>“<span class="token operator">&lt;</span><span class="token constant">H1</span><span class="token operator">&gt;</span>x <span class="token operator">+</span> y <span class="token operator">=</span> ” <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> “ <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">H1</span><span class="token operator">&gt;</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221101224206449.png" alt="image-20221101224206449" style="zoom:67%;"><h5 id="标签的属性"><a href="#标签的属性" class="headerlink" title="标签的属性"></a><script>标签的属性</h5><p>1、src</p><blockquote><p>定义引用外部脚本的URI，这可以用来代替直接在文档中嵌入脚本。指定了 src 属性的script元素标签内不应该再有嵌入的脚本。</p></blockquote><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、type</p><blockquote><p>该属性定义script元素包含或src引用的脚本语言。属性的值为MIME类型;</p></blockquote><p>只能是下面几种方式:</p><ul><li><strong>text/javascript（默认）</strong></li><li>text/ecmascript</li><li>application/javascript</li><li>application/ecmascript</li></ul><h5 id="Quotes-within-strings"><a href="#Quotes-within-strings" class="headerlink" title="Quotes within strings"></a><strong>Quotes within strings</strong></h5><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>“He said<span class="token punctuation">,</span> \”That’s mine\” ”<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>‘She said<span class="token punctuation">,</span> ”No it\’s not” ’<span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>‘He said<span class="token punctuation">,</span> ”That\’s mine” ’<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221101225055253.png" alt="image-20221101225055253"></p><p>这啥意思啊</p><h5 id="Comparison-Operators"><a href="#Comparison-Operators" class="headerlink" title="Comparison Operators"></a><strong>Comparison Operators</strong></h5><ul><li><p><strong>==</strong> and <strong>!=</strong></p><p>do perform type conversion before comparison</p><p><strong>“5”==5</strong> is <em>true</em></p></li><li><p><strong>===</strong> and <strong>!==</strong></p><p>do not perform type conversion</p><p><strong>“5”===5</strong> is <em>false</em></p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221102104308480.png" alt="image-20221102104308480"></p><h5 id="Explicit-Conversion-Functions"><a href="#Explicit-Conversion-Functions" class="headerlink" title="Explicit Conversion Functions"></a><strong>Explicit Conversion Functions</strong></h5><ul><li><p><strong>eval()</strong> takes a string parameter and evaluates it.</p><p><strong>x = eval(“123.35*67”);</strong></p><p> **eval(“x=1; y=2; x+y”);**Error if string doesn’t evaluate</p></li></ul><p>to a numeric value = <strong>NaN</strong></p><p>如果参数是字符串，并且字符串中是表达式，则eval()方法会计算字符串中的表达式，返回该表达式计算的结果。</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"'true'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回字符串"true"</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"ture"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回Boolean类型的true</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回整数1</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"[0,1,2]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回数组[0,1,2]</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"2+2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回整数4</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"2+'2'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回字符串"22"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>parseInt() returns the first integer in a string; if no integer returns NaN <em>将一个string转换成整数，只取第一个整数</em></p><p>parseInt(“123xyz”) returns 123 as an integer</p><p>parseInt(“xyz”) returns NaN(<strong>NaN 属性是代表非数字值的特殊值。</strong>)</p><p>语法：parseInt(<em>string</em>，radix)；</p><ul><li>string：要被解析的值。如果参数不是一个字符串，则将其转换为字符串(toString)。字符串开头的空白符将会被忽略。</li><li><em>radix：可选。</em>从 <code>2</code> 到 <code>36</code>，表示被解析的值的进制。例如说指定 <code>10</code> 就等于指定十进位。</li></ul></li><li><p>parseFloat()</p><p>parseFloat(“123.45xyz”) returns 123.45</p></li><li><p>isNaN() returns true if input is not a number（值）</p></li></ul><p>  isNaN(“4”) returns <strong>false</strong></p><p>  isNaN(4) returns false</p><p>  isNaN(parseInt(“4”)) returns false</p><p>  isNaN(parseInt(“four”)) returns true</p><p>  <code>isNaN</code>只对数值有效，如果传入其他值，会被先转成数值。 <strong><code>isNaN</code>为<code>true</code>的值，有可能不是<code>NaN</code>，而是一个字符串</strong></p><h5 id="implicit-conversion"><a href="#implicit-conversion" class="headerlink" title="implicit conversion"></a>implicit conversion</h5><p>JavaScript 中，表达式中包含以下运算符时，会发生隐式类型转换：</p><p>算术运算符：加（+）、减（-）、乘（*）、除（/）、取模（%）；逻辑运算符：逻辑与（&&）、逻辑或（||）、逻辑非（!）；字符串运算符：+、+=。</p><p>隐式转换规律：</p><ul><li>'string + number’字符串加数字，数字会转换为字符串；</li><li>‘number - string’ 数字减字符串，字符串会转换为数字，<strong>如果字符串无法转换为数字（如"abc"、“JavaScript”），则会转换为 NaN；</strong></li><li>'string - number’字符串减数字，字符串会转换为数字，如果字符串无法转换为数字，则会转换为 NaN；即’➖’优先向数字转换。<br>乘、除运算时，也会先将字符串转换为数字。<br><strong>当字符串和数字同时存在时，除了加号运算符转化为字符串，其他减、乘和除都优先转化为数字。</strong></li></ul><p>加号：如果有字符串，把所有都转成字符串然后拼接；如果没有直接转数值</p><p>减号：直接转数值</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token constant">HTML</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">HEAD</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">SCRIPT</span> type<span class="token operator">=</span><span class="token string">"text/javascript"</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function">updateOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">const</span> cakePrice <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> bunPrice <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">;</span><span class="token keyword">var</span> noCakes <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"cake"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span><span class="token keyword">var</span> noBuns <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"bun"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"count"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>noCakes<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">parseInt</span><span class="token punctuation">(</span>noBuns<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"total"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token string">"£"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>cakePrice<span class="token operator">*</span>noCakes <span class="token operator">+</span> bunPrice<span class="token operator">*</span>noBuns<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">placeOrder</span><span class="token punctuation">(</span><span class="token parameter">form</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">SCRIPT</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">HEAD</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">BODY</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">FORM</span> method<span class="token operator">=</span><span class="token string">"get"</span> action<span class="token operator">=</span><span class="token string">"someURL"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">H3</span><span class="token operator">></span>Cakes Cost £<span class="token number">1</span> each<span class="token punctuation">;</span> Buns 50p each<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">H3</span><span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span>text name<span class="token operator">=</span><span class="token string">"cakeNo"</span> id<span class="token operator">=</span><span class="token string">"cake"</span>onchange<span class="token operator">=</span><span class="token string">"updateOrder()"</span><span class="token operator">></span>enter no<span class="token punctuation">.</span> cakes<span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span>text name<span class="token operator">=</span><span class="token string">"bunNo"</span> id<span class="token operator">=</span><span class="token string">"bun"</span> onchange<span class="token operator">=</span><span class="token string">"updateOrder()"</span><span class="token operator">></span>enter no<span class="token punctuation">.</span> buns<span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span>text name<span class="token operator">=</span><span class="token string">"count"</span> id<span class="token operator">=</span><span class="token string">"count"</span><span class="token operator">></span>number <span class="token keyword">of</span> units<span class="token operator">&lt;</span>br<span class="token operator">></span><span class="token operator">&lt;</span>input type<span class="token operator">=</span>text name<span class="token operator">=</span><span class="token string">"total"</span> id<span class="token operator">=</span><span class="token string">"total"</span><span class="token operator">></span>Total Price<span class="token operator">&lt;</span>br<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span>button value<span class="token operator">=</span><span class="token string">"send"</span> onClick<span class="token operator">=</span><span class="token string">"placeOrder(this.form)"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">FORM</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">BODY</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">HTML</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221102112548088.png" alt="image-20221102112548088"></p><h3 id="Document-Object-Model"><a href="#Document-Object-Model" class="headerlink" title="Document Object Model"></a><strong>Document Object Model</strong></h3><p>Provides structural representation of a document, so its content and visual presentation can be modified</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108214606514.png" alt="image-20221108214606514"></p><p>Navigating to <em>elements</em> and accessing user input:</p><p>获取元素的方法：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108215034741.png" alt="image-20221108215034741"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">d <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>“usrname"<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果有多个值返回，返回类型为数组</p><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108221200869.png" alt="image-20221108221200869"></p><ul><li><strong>alert()</strong> 方法： 弹出信息（window 类中方法）</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span>“Please enter name<span class="token operator">:</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>windows.confirm()弹出带有确认和取消的对话框，返回true/false</p><ul><li><p>confirm("Are you sure you want to submit?")</p></li><li><p>setInterval() 以某个周期调用函数</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">setInterval</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> milliseconds<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>setTimeout(）</strong>delay before execution</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span>要执行的代码<span class="token punctuation">,</span> 等待的毫秒数<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> – delay <span class="token number">1</span> ms<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span> – delay <span class="token number">1</span> second<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token constant">HTML</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">HEAD</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">TITLE</span><span class="token operator">></span><span class="token constant">DHTML</span> Event Model <span class="token operator">-</span> <span class="token constant">ONLOAD</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">TITLE</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">SCRIPT</span><span class="token operator">></span><span class="token keyword">var</span> seconds <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">startTimer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> window<span class="token punctuation">.</span><span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token string">"updateTime()"</span><span class="token punctuation">,</span> <span class="token number">1000</span> <span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">updateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>seconds<span class="token operator">++</span><span class="token punctuation">;</span>soFar<span class="token punctuation">.</span>innerText <span class="token operator">=</span> seconds<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">SCRIPT</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">HEAD</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">BODY</span> <span class="token constant">ONLOAD</span> <span class="token operator">=</span> <span class="token string">"startTimer()"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">P</span><span class="token operator">></span>Seconds you have spent viewing <span class="token keyword">this</span> page so far<span class="token operator">:</span><span class="token operator">&lt;</span><span class="token constant">A</span> <span class="token constant">ID</span> <span class="token operator">=</span> <span class="token string">"soFar"</span> <span class="token constant">STYLE</span> <span class="token operator">=</span> <span class="token string">"font-weight: bold"</span><span class="token operator">></span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">A</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">P</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">BODY</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">HTML</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>之所以第7行直接使用id名可以使用：如果一个元素拥有ID属性,那么ID属性的属性值就会成为window对象的属性名.</p><ul><li><p><strong>clearInterval()</strong> 停止执行</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">myVar <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token function">clearInterval</span><span class="token punctuation">(</span>myVar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p><strong>clearTimeout()</strong> 停止执行</p></li></ul><h3 id="Event-Driven-Programming"><a href="#Event-Driven-Programming" class="headerlink" title="Event-Driven Programming"></a><strong>Event-Driven Programming</strong></h3><p>Web browser generates an event whenever anything ‘interesting’ occurs.</p><p>JavaScript application registers an <strong>event handler</strong>.</p><p>方法一：input标签里对应事件元素<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108213542145.png"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/ad7402a19b5f4d87be88d0cdafd47ad.jpg" alt="ad7402a19b5f4d87be88d0cdafd47ad"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108215132875.png" alt="image-20221108215132875" style="zoom:80%;" /><p>如：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“button”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“push”</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span></span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中Calls <strong>validate()</strong> function defined in <strong><head></strong></p><p><strong>document.forms[0].submit()</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“someURL”</span> <span class="token special-attr"><span class="token attr-name">onSubmit</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript">“<span class="token keyword">return</span></span></span></span> <span class="token attr-name">validate()”</span><span class="token punctuation">></span></span>// textboxes etc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“submit”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“send”</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>onSubmit=“return validate()”：当**validate()**返回true，submit。否则不提交</p><pre class="line-numbers language-js" data-language="js"><code class="language-js">onsubmit<span class="token operator">=</span><span class="token string">"return validate()"</span>　相当于：　　Form<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">onsubmit</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 　　　　<span class="token keyword">return</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <strong>onSubmit=validate()</strong> 总是提交（submit的机制）</p><p>可以使用button加onclick解决（其中onclick对应的函数中要用提交语句document.Formname.submit();）</p><p>只要进行submit，就必须在form标签里添加action和method，此外如果有表单验证函数，必须返回Boolean值</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“text/javascript”</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"> <span class="token keyword">function</span> <span class="token function">validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>usrname<span class="token punctuation">.</span>value<span class="token operator">==</span>“”<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">alert</span><span class="token punctuation">(</span>“please enter name”<span class="token punctuation">)</span><span class="token punctuation">;</span>     document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>usrname<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//提交时，光标定位在第一个输入框</span>     document<span class="token punctuation">.</span>forms<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>usrname<span class="token punctuation">.</span>value<span class="token operator">=</span>“please enter name”<span class="token punctuation">;</span>     document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span>“a”<span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>“please enter name above”<span class="token punctuation">;</span> <span class="token comment">//inner HTML插入文本到目标标签间</span><span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“arial”</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Please enter details<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  Name <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span> //设置空格      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“text”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“usrname”</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“red”</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>a<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 插入位置 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">face</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“arial”</span><span class="token punctuation">></span></span>  Email <span class="token entity named-entity" title="&nbsp;">&amp;nbsp;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“text”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“email”</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“button”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“Send”</span> <span class="token special-attr"><span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token value javascript language-javascript"><span class="token function">“validate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>”</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以用document.form[0]/document.formname/getElementBy...()方法 定位标签</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108220545701.png" alt="image-20221108220545701" style="zoom:67%;" /><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token constant">HTML</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">HEAD</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">TITLE</span><span class="token operator">></span>Object Model<span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">TITLE</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">SCRIPT</span><span class="token operator">></span><span class="token keyword">function</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token function">alert</span><span class="token punctuation">(</span>pText<span class="token punctuation">.</span>innerText<span class="token punctuation">)</span><span class="token punctuation">;</span>pText<span class="token punctuation">.</span>innerText <span class="token operator">=</span> “Thanks <span class="token keyword">for</span> coming<span class="token punctuation">.</span>”<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">SCRIPT</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">HEAD</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">BODY</span> <span class="token constant">ONLOAD</span> <span class="token operator">=</span> <span class="token function">“start</span><span class="token punctuation">(</span><span class="token punctuation">)</span>”<span class="token operator">></span><span class="token operator">&lt;</span><span class="token constant">P</span> <span class="token constant">ID</span> <span class="token operator">=</span> “pText”<span class="token operator">></span>Welcome to our Web page<span class="token operator">!</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">P</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">BODY</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token constant">HTML</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>pText.innerText</strong> or<strong>document.getElementById(“pText”).innerHTML</strong> 可以查找文本或替换文本</p><h3 id="STRINGS"><a href="#STRINGS" class="headerlink" title="STRINGS"></a><strong>STRINGS</strong></h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108220958551.png" alt="image-20221108220958551"></p><p>常用：</p><p> <strong>if (ph.charAt(i)>=‘A’ && ph.charAt(i) <= ‘Z’)</strong></p><p> <strong>if (ph.length < 9)</strong></p><p><strong>if (ph.substring(0, 1) == ‘,’)</strong></p><p><strong>if (ph.indexOf(‘@’) == 0)</strong></p><h3 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a><strong>Functions</strong></h3><p>function 语句用于声明一个函数。</p><p>在 JavaScript 中，函数是对象，函数也有属性和方法</p><p>返回直接用return，参数直接写名字不加类型</p><p>Local call: call a function directly: <strong>var x = square(4);</strong></p><p>Callback: function is called in response to something happening: <strong>events;</strong></p><h3 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a><strong>Arrays</strong></h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108222545924.png" alt="image-20221108222545924"></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">list <span class="token operator">=</span> <span class="token punctuation">[</span>“Karen”<span class="token punctuation">,</span> “John”<span class="token punctuation">,</span> “Stefan”<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token punctuation">[</span>“Karen”<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> “Stefan”<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// mixed array</span><span class="token keyword">var</span> emptyList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> myArray <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// array constructor</span>employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>employee<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> “Karen”<span class="token punctuation">;</span>employee<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> “John”<span class="token punctuation">;</span>employee<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> “Stefan”<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>employee<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变长：Sparse-Arrays"><a href="#变长：Sparse-Arrays" class="headerlink" title="变长：Sparse Arrays"></a>变长：<strong>Sparse Arrays</strong></h4><p><strong>new Array()</strong> </p><p>Length is <strong>0</strong> initially; automatically extends when new elements are initialised</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">employee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>employee<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> “John”<span class="token punctuation">;</span><span class="token comment">//length now becomes 6</span>employee<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> “Rachel”<span class="token punctuation">;</span><span class="token comment">//length now becomes 101</span><span class="token comment">//length is found as employee.length</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>No array bounds errors.</strong></p><h4 id="字符串索引"><a href="#字符串索引" class="headerlink" title="字符串索引"></a>字符串索引</h4><p>当我们为js数组添加字符串下标的时候，其实是为该<code>数组对象</code>添加了一个属性, 而添加到数组对象上的属性，并不影响该数组对象的<strong>length属性</strong>，所以在上图中打印数组，看到length为0。</p><p><strong>如果索引为字符串不会改变length</strong></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">A</span><span class="token punctuation">[</span>“red”<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token constant">A</span><span class="token punctuation">[</span>“green”<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span><span class="token constant">A</span><span class="token punctuation">[</span>“blue”<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span> <span class="token comment">//等同于：</span><span class="token constant">A</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token constant">A</span><span class="token punctuation">.</span>red <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span><span class="token constant">A</span><span class="token punctuation">.</span>green <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span><span class="token constant">A</span><span class="token punctuation">.</span>blue <span class="token operator">=</span> <span class="token number">64</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>typeof(new array())</strong> 返回object</p><h3 id="Scope"><a href="#Scope" class="headerlink" title="Scope"></a><strong>Scope</strong></h3><p>JavaScript has function scope, so variables defined within a function are visible everywhere in the function</p><p>declare at the start/top of the function body.</p><p>Inner functions can access actual parameters and variables (not copies) of their outer functions</p><ul><li><p>funcation 中的 declared variable have localscope</p></li><li><p>Non-declared variable have gloable scope</p></li></ul><p>如果在函数中我们没有使用var语句声明变量，默认为gloable scope，用了就是local scope</p><p>函数外部的都为gloable scope</p><h3 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a><strong>Cookies</strong></h3><p>Cookies allow you to store information between browser sessions, and you can set their expiry date</p><p>They contain:</p><p>• A <em>name-value pair</em> containing the actual data.</p><p>Cookie 保存在名称值对中 username = Bill Gates</p><p>• An expiry date after which it is no longer valid.</p><p>• The <em>domain and path of the server</em> it should be sent to</p><p>JavaScript 可以用 <code>document.cookie</code> 属性创建、读取、删除 cookie。</p><p>通过 JavaScript，可以这样创建 cookie：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> “version<span class="token operator">=</span>” <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> “version<span class="token operator">=</span>” <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>lastModified<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//最后修改cookie的时机</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>A cookie name cannot include semicolons,commas, or whitespace</p><p>Hence the use of <strong>encodeURIComponent(value)</strong>.对 URI 组件进行编码。</p><p>Must remember to <strong>decodeURIComponent()</strong> when reading the saved cookie 对 URI 组件进行解码。</p><p>下次用户登陆时再次调用document.cookie获取信息</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> “version<span class="token operator">=</span>” <span class="token operator">+</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>lastModified<span class="token punctuation">)</span> <span class="token operator">+</span>“ <span class="token punctuation">;</span> max<span class="token operator">-</span>age<span class="token operator">=</span>” <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token operator">*</span><span class="token number">365</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>cookie 的名字（cname），cookie 的值（cvalue），以及知道 cookie 过期的天数（exdays）</p><p>Note that <em>only</em> the name-value pair is stored in the name-value list associated with <strong>document.cookie</strong>.</p><p>Attributes are stored by the system.</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;html&gt;&lt;head&gt;&lt;title&gt;How many times have you been here before?&lt;&#x2F;title&gt;&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;expireDate &#x3D; new Date();expireDate.setMonth(expireDate.getMonth()+6);hitCt &#x3D; parseInt(cookieVal(&quot;pageHit&quot;));hitCt++;document.cookie&#x3D; &quot;pageHit&#x3D;&quot; + hitCt + &quot;;expires&#x3D;&quot; + expireDate.toGMTString();function cookieVal(cookieName) &#123;thisCookie &#x3D; document.cookie.split(&quot;; &quot;); &#x2F;&#x2F;用；分割并返回数组for (i&#x3D;0; i&lt;thisCookie.length; i++) &#123;if (cookieName &#x3D;&#x3D; thisCookie[i].split(&quot;&#x3D;&quot;)[0])&#x2F;&#x2F;找到名字为cookieName对应的值return thisCookie[i].split(&quot;&#x3D;&quot;)[1];&#125;return 0;&#125;&lt;&#x2F;script&gt;&lt;&#x2F;head&gt;    &lt;body bgcolor&#x3D;&quot;#FFFFFF&quot;&gt;&lt;h2&gt;&lt;script language&#x3D;&quot;Javascript&quot; type&#x3D;&quot;text&#x2F;javascript&quot;&gt;document.write(&quot;You have visited this page &quot; + hitCt + &quot; times.&quot;);&lt;&#x2F;script&gt;&lt;&#x2F;h2&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="A-Cautionary-Tale-SQL-Statements"><a href="#A-Cautionary-Tale-SQL-Statements" class="headerlink" title="**A Cautionary Tale: SQL Statements **"></a>**A Cautionary Tale: SQL Statements **</h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108225412740.png" alt="image-20221108225412740"></p><p>前端输入 <strong>‘||’a’=‘a</strong>看似无意义，却正好拼成一个绝对成立的SQL语句</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221108225510101.png" alt="image-20221108225510101"></p><p>用户非法获得后端数据</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HTML</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HEAD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TITLE</span><span class="token punctuation">></span></span>Forms<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TITLE</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>SCRIPT</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">var</span> helpArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"Enter your name in this input box."</span><span class="token punctuation">,</span>                 <span class="token string">"Enter your email address in this input box, \                  in the format user@domain."</span><span class="token punctuation">,</span>                 <span class="token string">"Check this box if you liked our site."</span><span class="token punctuation">,</span>                 <span class="token string">"In this box, enter any comments you would \                 like us to read."</span><span class="token punctuation">,</span>                 <span class="token string">"This button submits the form to the \                 server-side script"</span><span class="token punctuation">,</span>                 <span class="token string">"This button clears the form"</span><span class="token punctuation">,</span>                 <span class="token string">"This TEXTAREA provides context-sensitive help. \                 Click on any input field or use the TAB key to \                 get more information about the input field."</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">helpText</span><span class="token punctuation">(</span><span class="token parameter">messageNum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  document<span class="token punctuation">.</span>myForm<span class="token punctuation">.</span>helpBox<span class="token punctuation">.</span>value <span class="token operator">=</span> helpArray<span class="token punctuation">[</span>messageNum<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//myform是下面表单的名字，helpbox是最后定义的文本域</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">formSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">//默认不提交</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"Are you sure you want to submit?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//windows.confirm()弹出带有确认和取消的对话框，返回true/false</span>    window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// so in this case it now performs the action</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">formReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">confirm</span><span class="token punctuation">(</span><span class="token string">"Are you sure you want to reset?"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     window<span class="token punctuation">.</span>event<span class="token punctuation">.</span>returnValue <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>SCRIPT</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HEAD</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BODY</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>FORM</span> <span class="token attr-name">NAME</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>myForm<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">ONSUBMIT</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">formSubmit</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span>       <span class="token attr-name">ACTION</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>http://localhost/cgi-bin/mycgi</span>      <span class="token special-attr"><span class="token attr-name">ONRESET</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token keyword">return</span> <span class="token function">formReset</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>INPUT</span> <span class="token attr-name">TYPE</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">NAME</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">ONFOCUS</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">helpText</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span>      <span class="token special-attr"><span class="token attr-name">ONBLUR</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">helpText</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BR</span><span class="token punctuation">></span></span>Email: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>INPUT</span> <span class="token attr-name">TYPE</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">NAME</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>email<span class="token punctuation">"</span></span>      <span class="token special-attr"><span class="token attr-name">ONFOCUS</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">helpText</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token special-attr"><span class="token attr-name">ONBLUR</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">helpText</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BR</span><span class="token punctuation">></span></span>Click here if you like this site <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>INPUT</span> <span class="token attr-name">TYPE</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">NAME</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>like<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">ONFOCUS</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">helpText</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token special-attr"><span class="token attr-name">ONBLUR</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">helpText</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BR</span><span class="token punctuation">></span></span> Any comments?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BR</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TEXTAREA</span> <span class="token attr-name">NAME</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>comments<span class="token punctuation">"</span></span> <span class="token attr-name">ROWS</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> 5</span> <span class="token attr-name">COLS</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> 45</span>    <span class="token special-attr"><span class="token attr-name">ONFOCUS</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">helpText</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token special-attr"><span class="token attr-name">ONBLUR</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">helpText</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TEXTAREA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>BR</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>INPUT</span> <span class="token attr-name">TYPE</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">VALUE</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">ONFOCUS</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">helpText</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span>    <span class="token special-attr"><span class="token attr-name">ONBLUR</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">helpText</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>INPUT</span> <span class="token attr-name">TYPE</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">VALUE</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>Reset<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">ONFOCUS</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">helpText</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span>    <span class="token special-attr"><span class="token attr-name">ONBLUR</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">helpText</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TEXTAREA</span> <span class="token attr-name">NAME</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>helpBox<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">STYLE</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span> <span class="token property">right</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span> <span class="token property">top</span><span class="token punctuation">:</span> 0</span><span class="token punctuation">"</span></span></span> <span class="token attr-name">ROWS</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> 4</span> <span class="token attr-name">COLS</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> 45</span><span class="token punctuation">></span></span>This TEXTAREA provides context-sensitive help. Click on any input field or use the TAB key to get more information about the input field.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TEXTAREA</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>FORM</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>BODY</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>HTML</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></script></h5>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> ANP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.1-serverlet</title>
      <link href="//post/3.1-serverlet.html"/>
      <url>//post/3.1-serverlet.html</url>
      
        <content type="html"><![CDATA[<h1 id="Servlets"><a href="#Servlets" class="headerlink" title="Servlets"></a><strong>Servlets</strong></h1><h2 id="What-are-servlets"><a href="#What-are-servlets" class="headerlink" title="What are servlets?"></a><strong>What are servlets?</strong></h2><p>Servlet（Server Applet）是用Java编写的服务器端程序。其主要功能在于交互式地浏览和修改数据，生成动态Web内容。狭义的Servlet是指Java语言实现的一个接口，广义的Servlet是指任何实现了这个Servlet接口的类，一般情况下，人们将Servlet理解为后者。</p><p><em>Servlets</em> are Java’s answer to CGI</p><p>Java Servlet 通常情况下与使用 CGI（Common Gateway Interface，公共网关接口）实现的程序可以达到异曲同工的效果</p><p>– Used to generate <em>dynamic web pages</em> in response to client</p><p>– Used for <em>client requests</em> that cannot be satisfied using pre-built (static) documents.</p><p>– They are <em>programs that run on a web server</em> acting as middle layer between HTTP request and databases or other applications.是运行在web服务器上的程序，充当HTTP请求和数据库或其他应用程序之间的中间层。</p><p>web服务器只是提供静态的资源：从目录中找到它们直接发给client，无法区分client</p><p>而CGI（Java 中servlet）可以进行Dynamic response，辅助web服务器做出响应</p><p>tomcat是其容器</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114215446221.png" alt="image-20221114215446221" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114215511196.png" alt="image-20221114215511196" style="zoom:80%;"><h4 id="Advantages-of-Servlets-over-CGI"><a href="#Advantages-of-Servlets-over-CGI" class="headerlink" title="Advantages of Servlets over CGI"></a><strong>Advantages of</strong> <strong>Servlets</strong> <strong>over CGI</strong></h4><ul><li>性能明显更好<em>Efficient</em>。</li><li><em>Convenient</em>：提供解析和解码HTML表单的基础结构</li><li><em>Powerful</em>： 可以直接与web服务器通信。多个servlet可以共享数据库连接。简化会话跟踪</li><li><em>Portable</em>– Written in Java and follows standard API</li><li><em>Secure</em>服务器上的 Java 安全管理器执行了一系列限制，以保护服务器计算机上资源</li><li><em>Inexpensive</em></li></ul><h3 id="servlet-一个例子："><a href="#servlet-一个例子：" class="headerlink" title="servlet 一个例子："></a>servlet 一个例子：</h3><h4 id="servlet标准格式"><a href="#servlet标准格式" class="headerlink" title="servlet标准格式"></a>servlet标准格式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span>   request<span class="token punctuation">,</span><span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ServletExcpetion</span> <span class="token punctuation">{</span>   response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//响应格式</span>   <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“返回的HTML”<span class="token punctuation">)</span><span class="token punctuation">;</span>   out<span class="token punctuation">.</span>close<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="另一个例子：echo"><a href="#另一个例子：echo" class="headerlink" title="另一个例子：echo"></a>另一个例子：echo</h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221114214745977.png" alt="image-20221114214745977" style="zoom:67%;"><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import jakarta.servlet.*;import jakarta.servlet.http.*;import java.io.*;public class GetEchoServlet extends HttpServlet {  public void doGet(HttpServletRequest request,                    HttpServletResponse response)                        throws IOException, ServletException {  String userName = request.getParameter(“fname”);  response.setContentType("text/html");  PrintWriter out = response.getWriter();  out.println(“&lt;html&gt;&lt;body&gt;Hello”);  if (userName != null) out.println(userName);  else out.println(“mystery person”);  out.println(“&lt;/body&gt;&lt;/html&gt;”);  out.close(); //记得close！！！！！ }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>值得注意的点：</p><ol><li>导入的包：</li></ol><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import jakarta.servlet.*;import jakarta.servlet.http.*;import java.io.*;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>HTTP报文类型是get则这里使用doGet</p><p>继承该类时至少重写一个方法</p></li><li><p><strong>获取</strong>HTML form中的参数值value(是字符串类型，需要转换)</p></li></ol><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">String request.getParameter(attribute name )//其中要打双引号<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>attribute name 是HTML表单提交时的名字，把变量名提交到HTTP请求中</p><p>– returns <strong>null</strong> if unknown parameter;</p><p>– returns <strong>“”</strong> (i.e. empty string) if parameter has no value</p><p>可以用枚举获取全部参数：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Enumeration</span> <span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>    然后用这个获取每个的值构成的数组<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getParameterValues</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>• returns <strong>null</strong> if unknown parameter;</p><p>• returns a single string (<strong>“”</strong>) if parameter has no values.</p><ol start="4"><li>写入response报文：</li></ol><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">PrintWriter out = response.getWriter();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通常在HTML中</p><form>中action指向servlet<p></p><p><strong>&lt;FORM action=“servlet/myServlet” …&gt;</strong> 这个指向是由Deployment Descriptor实现的</p><h5 id="一个例子：获取html发送的报文中的键值对并打印在表格中返回"><a href="#一个例子：获取html发送的报文中的键值对并打印在表格中返回" class="headerlink" title="一个例子：获取html发送的报文中的键值对并打印在表格中返回"></a>一个例子：获取html发送的报文中的键值对并打印在表格中返回</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221121212755031.png" alt="image-20221121212755031"></p><p>html</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://localhost:8080/servlet/elem004.ProcessBigForm<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Please enter: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>Your login: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Login<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>Your favourite colour:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Colour<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>blue<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Blue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Colour<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>red<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Red<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Colour<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>green<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Green <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>Which of these courses you are taking: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Course<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>elem001<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ELEM001 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Course<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>elem002<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ELEM002 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Course<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>elem003<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ELEM003 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Course<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>elem004<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>ELEM004 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Send to Servlet<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>servlet</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// More code here ...</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;table border=1&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 从请求对象中获取表单的所有参数</span><span class="token class-name">Enumeration</span> paramNames <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterNames</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>paramNames<span class="token punctuation">.</span><span class="token function">hasMoreElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> paramName <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> paramNames<span class="token punctuation">.</span><span class="token function">nextElement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 获取该参数的值并检查有多少个。</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> paramValues <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameterValues</span><span class="token punctuation">(</span>paramName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>paramValues<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// 单值</span><span class="token class-name">String</span> paramVal <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>paramName<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;tr&gt;&lt;td&gt;"</span> <span class="token operator">+</span> paramName <span class="token operator">+</span><span class="token string">"&lt;/td&gt;&lt;td&gt;"</span> <span class="token operator">+</span> paramVal <span class="token operator">+</span> <span class="token string">"&lt;/td&gt;&lt;/tr&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 如果多个值在表中打印一个列表。 </span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;tr&gt;&lt;td&gt;"</span> <span class="token operator">+</span> paramName <span class="token operator">+</span><span class="token string">"&lt;/td&gt;&lt;td&gt;&lt;ul&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> paramValues<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;li&gt;"</span> <span class="token operator">+</span> paramValues<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"&lt;/li&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"&lt;/table&gt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221121213002075.png" alt="image-20221121213002075"></p><h2 id="Servlets-1"><a href="#Servlets-1" class="headerlink" title="Servlets"></a><strong>Servlets</strong></h2><ol><li><p>其中没有 NO method <strong>public static void main(String[] args)</strong></p></li><li><p>NO constructor: There is one (default) constructor but the <strong>developer should never write an explicit constructor.</strong></p><p>没有main()方法在，只有默认constructor</p></li><li><p>Two key (service) methods:</p><p>– <strong>doGet()</strong></p><p>– <strong>doPost()</strong></p></li></ol><h3 id="What-servlets-do"><a href="#What-servlets-do" class="headerlink" title="What servlets do"></a><strong>What</strong> <strong>servlets</strong> <strong>do</strong></h3><ul><li>读取客户端（浏览器）发送的数据（<strong>Read any data sent by the user</strong>）。这包括网页上的 HTML 表单，或者也可以是来自 applet 或自定义的 HTTP 客户端程序的表单。</li><li>读取客户端（浏览器）发送的隐式的 HTTP 请求数据（<strong>Look up information embedded in HTTP request</strong>）。这包括 cookies、媒体类型和浏览器能理解的压缩格式等等。</li><li>处理数据并生成结果（<strong>Generate results</strong>）。这个过程可能需要访问数据库，执行 RMI 或 CORBA 调用，调用 Web 服务，或者直接计算得出对应的响应。</li><li>发送显式的数据（即文档）到客户端（浏览器）（<strong>Format results inside a document，Send the document back to the client</strong>）。该文档的格式可以是多种多样的，包括文本文件（HTML 或 XML）、二进制文件（GIF 图像）、Excel 等。</li><li>发送隐式的 HTTP 响应到客户端（浏览器）（<strong>Set appropriate HTTP response parameters</strong>）。这包括告诉浏览器或其他客户端被返回的文档类型（例如 HTML），设置 cookies 和缓存参数，以及其他类似的任务。</li></ul><h3 id="Typical-generic-servlet-code"><a href="#Typical-generic-servlet-code" class="headerlink" title="Typical generic servlet code"></a><strong>Typical generic</strong> <strong>servlet</strong> <strong>code</strong></h3><p>通用的servlet： <code>extends GenericServlet</code></p><p>网路编程中继承其子类：<code>extends HttpServlet </code></p><p>GenericServlet类：实现了Servlet定义的方法</p><p>HttpServlet类：继承了GenericServlet 扩展了doGet, doPost, doDelete, doPut, doTrace等方法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import java.io.*;import jakarta.servlet.*;public class AnyServlet extends GenericServlet {public AnyServlet() {}  // constructor – BUT USE THE DEFAULT// NEVER ANY NEED TO WRITE ONEpublic void init(ServletConfig config) throws ServletException;// 传入一个servletconfig对象用其中参数初始化public void service(ServletRequest req, ServletResponse res)throws ServletException, IOException;// Called by a new thread (in the container) each time a // request is received.public void destroy();// Called when servlet is destroyed or removed.}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>Servlet 通过调用 <strong>init ()</strong> 方法进行初始化（配置文件和Servlet关联）。</p></li><li><p>Servlet 调用 <strong>service()</strong> 方法来处理客户端的请求会根据需求调用doGet()/doPut()。所以只需重写这两个方法即可</p></li><li><p>Servlet 通过调用 <strong>destroy()</strong> 方法终止（结束）。</p></li></ul><h4 id="A-Servlet-is-“deployed”-in-a-container"><a href="#A-Servlet-is-“deployed”-in-a-container" class="headerlink" title="A Servlet is “deployed” in a container"></a><strong>A</strong> <strong>Servlet</strong> <strong>is “deployed” in a</strong> <strong>container</strong></h4><p>A program that receives (e.g. HTTP) requests to <em>servlets</em> from a web server application:</p><p>(1)当服务器收到某一个Servlet请求时，它会检查该Servlet类的实例是否存在</p><ul><li><p>如果不存在就会创建这个Servlet的实例（创建该类的对象），同时启动一个线程，这个过程称为载入(load) Servlet</p></li><li><p>如果存在就会直接调用该Servlet的实例</p></li></ul><p>（2）Servlet对象创建之后，服务器就可以调用该实例响应客户的请求了，当多个客户请求一个Servlet时，服务器为每一个客户启动一个线程而不是进程，这个线程调用内存中的Servlet实例的service（）方法响应客户的请求。</p><p>（3）当服务器关闭或者卸载应用程序时，关闭该Servlet实例，释放Servlet所占用的资源</p><p>manages the life cycle of its <em>servlets</em></p><p>tomcat:<em>Calls</em> <em>constructor</em>, <strong>init()</strong>, <strong>service()</strong>, <strong>destroy()</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221116140206763.png" alt="image-20221116140206763"></p><p>每建立一个连接就新建一个线程运行servlet，destroy调用后servlet对象仍然存在，直到服务器关闭才被GC</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221116141258010.png" alt="image-20221116141258010" style="zoom:80%;"><h5 id="Constructor"><a href="#Constructor" class="headerlink" title="Constructor"></a>Constructor</h5><p>called by the <em>container</em></p><p>不能重写</p><h5 id="init-方法"><a href="#init-方法" class="headerlink" title="init() 方法"></a>init() 方法</h5><p>init 方法被设计成只调用一次。它在第一次创建 Servlet 时被调用，在后续每次用户请求时不再调用。</p><p>called after constructor</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="public-void-service-…"><a href="#public-void-service-…" class="headerlink" title="public void service(…)"></a><strong>public void service(…)</strong></h5><p>几乎不重写，没意义（会调用doGet/doPost）</p><h5 id="public-void-doGet-x2F-public-void-doPost"><a href="#public-void-doGet-x2F-public-void-doPost" class="headerlink" title="public void doGet() / public void doPost()"></a><strong>public void doGet()</strong> / <strong>public void doPost()</strong></h5><p>根据需求重写</p><h5 id="public-void-destroy"><a href="#public-void-destroy" class="headerlink" title="public void destroy()"></a><strong>public void destroy()</strong></h5><p>一般不用写新内容</p><p><a href="https://www.w3cschool.cn/servlet/servlet-life-cycle.html">https://www.w3cschool.cn/servlet/servlet-life-cycle.html</a>)</p><h3 id="TOMCAT中配置servlet"><a href="#TOMCAT中配置servlet" class="headerlink" title="TOMCAT中配置servlet"></a><strong>TOMCAT</strong>中配置servlet</h3><p><strong>Deployment Descriptor (DD)</strong></p><p>利用tomcat中<code>web.xml</code>文件将servlet名字和URL挂钩</p><p>关联 servlet 和 url 的一对标签（由两个标签共同决定），如下代码所示：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">＜web-app＞<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span> 名字    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>com.example.demo.HelloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span>maps internal name to fully qualified class name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>helloServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">&gt;</span></span>/hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">&gt;</span></span>maps internal name to public URL name＜/web-app＞<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>servlet</code>标签下有两个子标签，一个定义了一个servlet的名字，另一个将这个servlet的名字与一个具体的servlet Java的class文件（位于<strong>WEB-INF/classes/<strong>下直接写名字即可, 否则写</strong>包.类名</strong>（如上））关联起来</p><p>接着就是<code>servlet-mapping</code>标签了，这个标签下面同样有两个标签，一个标签指向之前定义的 servlet 部署名，另一个标签指向一个url（form表单中action后面的url）</p><p>Can use absolute or relative URLs or pre-configured names</p><p>比如：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130121100454.png" alt="image-20221130121100454"></p><h5 id="Tomcat文件结构："><a href="#Tomcat文件结构：" class="headerlink" title="Tomcat文件结构："></a>Tomcat文件结构：</h5><p>Level 1: <strong>WEB-INF</strong> (folder) and <strong>.html</strong>, <strong>.jsp</strong>（第一级）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221121214037245.png" alt="image-20221121214037245"></p><p>Level 2: (inside <strong>WEB-INF</strong> folder): <strong>web.xml</strong> and <strong>classes</strong> (folder)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221121214316410.png" alt="image-20221121214316410"></p><p>Level 3 (inside <strong>classes</strong> folder): servlet <strong>.class</strong> files (and other “business” class files e.g. <em>JavaBeans</em>)</p><h4 id="Servlet-Configuration"><a href="#Servlet-Configuration" class="headerlink" title="Servlet Configuration"></a><strong>Servlet Configuration</strong></h4><p>Prior to initialisation, the <strong>ServletConfig</strong> object is created <strong>初始化前会创建</strong>一个servletConfig对象, 包含 init params</p><p>servletConfig对象：用于封装servlet的配置信息。从一个servlet被实例化后，对任何客户端在任何时候访问有效，但仅对servlet自身有效，一个servlet的ServletConfig对象不能被另一个servlet访问。</p><p>all requests made to a <em>servlet</em> can access this object</p><p>用于加载<a href="https://so.csdn.net/so/search?q=servlet&amp;spm=1001.2101.3001.7020">servlet</a>的初始化参数，容器使用它将部署时信息（DD）传递给servlet。</p><p>运行过程中参数不会改。</p><p><strong>在一个web应用可以存在多个ServletConfig对象</strong>（一个Servlet对应一个ServletConfig对象one <strong>ServletConfig</strong> object per <em>servlet</em></p><p>• Step 1: container reads the <em>deployment descriptor</em></p><p>• Step 2: container creates <em>new</em> <strong>ServletConfig</strong> <em>object</em></p><p>• Step 3: container creates <em>name/value pair</em> (<strong>Strings</strong>) for each <em>servlet</em> <strong>init-param</strong></p><p>tomcat服务器把这些参数会在加载web应用的时候，封装到ServletConfig对象</p><p>• Step 4: container <em>passes references</em> to these to the <strong>ServletConfig</strong> object</p><p>• Step 5: container <em>creates new instance</em> of the <em>servlet</em> class</p><p>• Step 6: container <em>calls servlet’s</em> <strong>init()</strong> method passing in reference to the <strong>ServletConfig</strong> object</p><p>写在Web. xml中的servlet标签中！：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“http://java.sun.com/xml/ns/j2ee”</span><span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“http://www.w3.org/2001/XMLSchema-instance”</span><span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“http//java.sun.com/xml/ns/j2ee/web-app_2.4.xsd”</span><span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“2.4”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>Hello World Servlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>S1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>lecturersEmail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>paula.fonseca@qmul.ac.uk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>These are parameter name-value pairs，写在servlet标签中</p><h5 id="调用ServletConfig的初始参数"><a href="#调用ServletConfig的初始参数" class="headerlink" title="调用ServletConfig的初始参数"></a>调用ServletConfig的初始参数</h5><pre class="line-numbers language-none"><code class="language-none">getServletConfig().getInitParameter(“lecturersEmail”)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="设置ServletConfig中Attribute的方法"><a href="#设置ServletConfig中Attribute的方法" class="headerlink" title="设置ServletConfig中Attribute的方法"></a>设置<strong>ServletConfig</strong>中<strong>Attribute</strong>的方法</h5><p>属性是键值对：name是string，但是属性值为对象</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">获取属性：getAttribute(String);设置属性：setAttribute(String,Object)；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在调用servlet之前设置属性对象</p><h4 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a><strong>ServletContext</strong></h4><p>one per web application, 通常Web applications normally have several <em>servlets</em>/JSPs</p><p>ServletContext对象：servlet容器在启动时会加载web应用，并为每个<strong>web应用</strong>创建唯一的servlet context对象，可以把ServletContext看成是一个Web应用的<a href="http://server.chinaitlab.com/">服务器</a>端组件的共享内存，在ServletContext中可以存放共享数据。</p><p>Used to access web application parameters that need to be seen by all <em>servlets</em>/JSPs in the application.</p><p><strong>ServletContext</strong> object created and set up when web application is deployed.当web应用被部署时，servletcontext被创建</p><p>写在Web. xml中<servlet>标签外面</servlet></p><p>指定<strong>context parameters</strong>的例子</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">...</span><span class="token punctuation">&gt;</span></span> ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">&gt;</span></span> ... + other servlets    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context-param</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">&gt;</span></span>HOP_Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">&gt;</span></span>g.tyson@qmul.ac.uk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context-param</span><span class="token punctuation">&gt;</span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>These are parameter name-value pairs，并且不在servlet标签中</p><h5 id="调用ServletContext的初始参数（web-app-parameters-）"><a href="#调用ServletContext的初始参数（web-app-parameters-）" class="headerlink" title="调用ServletContext的初始参数（web app parameters ）"></a>调用ServletContext的初始参数（<strong>web app</strong> <strong>parameters</strong> ）</h5><p>Same name for <strong>get</strong> method as when accessing <strong>ServletConfig</strong> object.</p><ul><li>两种方法访问<strong>ServletContext</strong>：</li></ul><p>直接访问</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span>…<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>from ServletConfig（只有ServletConfig对象作为参数传递）:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">getServletConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInitParameter</span><span class="token punctuation">(</span>…<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Advanced-Servlets"><a href="#Advanced-Servlets" class="headerlink" title="Advanced Servlets"></a><strong>Advanced</strong> <strong>Servlets</strong></h2><h3 id="REDIRECTING-AND-FORWARDING"><a href="#REDIRECTING-AND-FORWARDING" class="headerlink" title="REDIRECTING AND FORWARDING"></a><strong>REDIRECTING AND</strong> <strong>FORWARDING</strong></h3><h4 id="REDIRECTING"><a href="#REDIRECTING" class="headerlink" title="REDIRECTING"></a>REDIRECTING</h4><p>重定向(Redirect)就是通过各种方法<strong>将各种网络请求重新定个方向转到其它位置</strong></p><p>使用respond对象</p><p>其中URL可以为jsp文件、HTML文件</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token string">"http://localhost:8080/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//参数是String，不是object</span>response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>“<span class="token class-name">Retrieve</span><span class="token operator">?</span>” <span class="token operator">+</span>request<span class="token punctuation">.</span><span class="token function">getQueryString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果请求中带参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Container sends response <strong>“302”</strong> <em>status code</em> with a location header containing the new URL as value</p><p>Browser reads response and location header, and makes <strong>new request</strong> using the URL. </p><p>调用这个方法后会向client发一个状态码为302 的响应，这个响应中包含新的URL，一旦客户端接收就会立刻像新URL进行请求（这个请求是原始的请求的重发）</p><p>特点就是：重定向其实就是两个请求，而且两个请求还是连续的，因为速度很快，所以你看不出这是两个请求。</p><p><strong>客户端的浏览器地址栏中的URL会发生改变</strong></p><p>Use a <em>redirect</em> if other file (<em>servlet</em>, JSPs, POJ) is <strong>in another web application.</strong></p><p>如果其他文件不在当前webapp中就要使用重定向。</p><p>返回的状态码可能为301或者302（不做区分）</p><p>Status codes sent back by the container:</p><p>– <strong>301 moved permanently</strong></p><p>– <strong>302 moved temporarily</strong></p><h4 id="forward-Request-Dispatch"><a href="#forward-Request-Dispatch" class="headerlink" title="forward (Request Dispatch)"></a><strong>forward</strong> <strong>(Request Dispatch)</strong></h4><p><em>Servlet</em> wants request to go to a different <em>servlet</em> or JSP <strong>in the same web application.</strong></p><p>登录验证Servlet在完成了验证之后会把请求转发给显示主页的Servlet。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">RequestDispatcher</span> view <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span>“display<span class="token punctuation">.</span>jsp”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取转发器</span><span class="token comment">//request.getRequestDispatcher(“其他servlet的URL地址”);//获取转发器</span>view<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//进行转发</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>客户端的浏览器地址栏中的URL不会发生改变</p><blockquote><p>二者区别:</p><p><strong>重定向</strong>：两个web-app,不能共享；<strong>请求转发</strong>：一个web-app；</p><p><strong>重定向</strong>：两个请求；<strong>请求转发</strong>：一个请求；</p><p> <strong>重定向</strong>：不能共享request和response；<strong>请求转发</strong>：可以共享request和response；</p><p><strong>重定向</strong>：浏览器地址栏发生变化；<strong>请求转发</strong>：浏览器地址栏不发生变化；</p><p><strong>重定向</strong>：调用目标servlet的doGet()方法；<strong>请求转发</strong>：由发出请求的方法决定到底调用目标servlet的哪个方法；</p><p><strong>重定向</strong>：可以跳转到百度；<strong>请求转发</strong>：只能在当前上下文内容跳转。</p></blockquote><h2 id="HTTP-REQUEST-AND-RESPONSE-HEADERS"><a href="#HTTP-REQUEST-AND-RESPONSE-HEADERS" class="headerlink" title="HTTP REQUEST AND RESPONSE HEADERS"></a><strong>HTTP REQUEST AND RESPONSE</strong> <strong>HEADERS</strong></h2><h3 id="HTTP-Request-Headers"><a href="#HTTP-Request-Headers" class="headerlink" title="HTTP Request Headers"></a><strong>HTTP Request Headers</strong></h3><p>As with form data, HTTP request headers can be <strong>extracted from</strong> the <strong>HttpServletRequest</strong> object.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> <span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– <strong>getContentLength()</strong></p><p>– <strong>getContentType()</strong></p><p>– <strong>getMethod()</strong></p><p>– <strong>getRequestURI()</strong></p><p>– <strong>getProtocol()</strong></p><p>access all headers using:</p><p>– <strong>Enumeration getHeaderNames()</strong>.</p><h4 id="Server-Response"><a href="#Server-Response" class="headerlink" title="Server Response"></a><strong>Server Response</strong></h4><p>– a <em>status line</em> (containing version, status code + message);</p><p>– some <em>response headers</em>;</p><p>– a <em>blank line</em>;</p><p>– the <em>document</em></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130160111105.png" alt="image-20221130160111105" style="zoom:67%;"><p>servlet可以通过操作状态行和响应头来执行各种任务。</p><h5 id="Status-Codes"><a href="#Status-Codes" class="headerlink" title="Status Codes"></a>Status Codes</h5><p><em>HTTP Status Codes</em>: 由服务器返回给客户端软件，以指示请求的结果。</p><p><strong>200–OK</strong> : The request sent by the client was successful.</p><p><strong>301–Moved Permanently</strong> : The resource has permanently moved to a different URI.</p><p><strong>303–See Other</strong> : The requested response is at a different URI and should be accessed using a GET command at the given URI.</p><p><strong>400–Bad Request</strong> : The syntax of the request was not understood by the server.</p><p><strong>403–Forbidden</strong> : The server has refused to fulfill the request.</p><p>servlet只需要设置状态码，因为版本是由服务器决定的，消息与状态码相关联。</p><p>最简单的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">response<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果响应包含特殊的状态码和文档，则<strong>必须在通过PrintWriter返回任何内容之前调用setStatus()</strong></p><p>使用HttpServletResponse类中定义的常量：<strong>HttpServletResponse.SC_NOT_FOUND</strong>（404）</p><p>两种状态码对应独特的方法：</p><ul><li><p><strong>public void sendError(int sc, String message)</strong></p><p>• This sets the status code plus a short message.</p></li><li><p><strong>public void sendRedirect(String url)</strong></p><p>• Generates a 301 response, along with a Location Header giving the URL of the new document that the browser should now request.</p></li></ul><h5 id="Setting-Response-Headers"><a href="#Setting-Response-Headers" class="headerlink" title="Setting Response Headers"></a><strong>Setting Response Headers</strong></h5><pre class="line-numbers language-java" data-language="java"><code class="language-java">res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token class-name">String</span> header<span class="token punctuation">,</span> <span class="token class-name">String</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>Allow, Content-Encoding, Content-Language,</strong> <strong>Content-Length,</strong> <strong>Content-Type</strong>, Date, Expires, Last-Modified, Location, **Refresh, Set-Cookie, **WWW-Authenticate</p><p>一些常见头部可以直接设置：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token class-name">String</span> type<span class="token punctuation">)</span><span class="token function">setContentLength</span><span class="token punctuation">(</span><span class="token keyword">int</span> length<span class="token punctuation">)</span><span class="token function">addCookie</span><span class="token punctuation">(</span><span class="token class-name">String</span> cookie<span class="token punctuation">)</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span><span class="token class-name">String</span> encodedURL<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Setting-the-Refresh-header"><a href="#Setting-the-Refresh-header" class="headerlink" title="Setting the Refresh header"></a><strong>Setting the Refresh header</strong></h6><p>指示浏览器请求更新页面所需的时间，表示浏览器应该在多少时间之后刷新文档，以秒计，浏览器会重新请求一次页面</p><p>或者每多少秒，重定向到别的页面一次。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>“<span class="token class-name">Refresh</span>”<span class="token punctuation">,</span> “<span class="token number">30</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span>“<span class="token class-name">Refresh</span>”<span class="token punctuation">,</span> “<span class="token number">5</span><span class="token punctuation">;</span> URL<span class="token operator">=</span>http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>host<span class="token operator">/</span>path”<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Sending status code <strong>204(SC_NO_CONTENT)</strong> stops browser reloading further:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> res<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span><span class="token number">204</span><span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">setStatus</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>SC_NO_CONTENT<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>204 – No Content</strong> : The request was successful but does not require the return of an entity-body. </p><h6 id="Setting-the-Content–Type-header"><a href="#Setting-the-Content–Type-header" class="headerlink" title="Setting the Content–Type header"></a><strong>Setting the</strong> <strong>Content–Type</strong> <strong>header</strong></h6><p>• <strong>Content-Type</strong> tells browser what sort of document is being sent.</p><p>通常就用这俩<strong>text/html</strong> <strong>text/plain</strong>（显示源代码）</p><p> 必须在写入到OutputStream之前设置</p><p><strong>text/plain</strong>, <strong>text/html</strong>, <strong>text/css</strong></p><p>– <strong>image/gif</strong>, <strong>image/png</strong>, <strong>image/jpeg</strong>, <strong>image/tiff</strong></p><p>– <strong>application/pdf</strong>, <strong>application/msword</strong></p><p>– <strong>application/vnd.ms-excel</strong></p><p>– <strong>video/mpeg</strong>, <strong>video/quicktime</strong></p><h6 id="根据客户端希望得到的响应数据类型，设置数据类型"><a href="#根据客户端希望得到的响应数据类型，设置数据类型" class="headerlink" title="根据客户端希望得到的响应数据类型，设置数据类型"></a>根据客户端希望得到的响应数据类型，设置数据类型</h6><p>获取数据类型：<strong>String req.getHeader(“Accept”)</strong></p><p>Accept属于http请求头，描述客户端希望接收的响应body 数据类型。就是希望服务器返回什么类型的数据。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> types <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span>”<span class="token class-name">Accept</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>types<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>“image<span class="token operator">/</span>jpeg”<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>res<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>“image<span class="token operator">/</span>jpeg”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Send a jpeg file.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>res<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span>“image<span class="token operator">/</span>gif”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Send a gif file.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SESSION-HANDLING"><a href="#SESSION-HANDLING" class="headerlink" title="SESSION HANDLING"></a><strong>SESSION HANDLING</strong></h2><p>HTTP 是一种”无状态”协议，这意味着每次客户端检索网页时，客户端打开一个单独的连接到 Web 服务器，服务器会自动不保留之前客户端请求的任何记录</p><p>Keeping the state of a user over a sequence of requests</p><p>有以下三种方式来维持 Web 客户端和 Web 服务器之间的 session 会话</p><ol><li>Cookies:</li></ol><ol><li><p>check for cookie in request header;</p></li><li><p>create a cookie and send back to client</p></li></ol><p>一个 Web 服务器可以分配一个唯一的 session 会话 ID 作为每个 Web 客户端的 cookie，对于客户端的后续请求可以使用接收到的 cookie 来识别。</p><p><strong>jakarta.servlet.http</strong> API contains a <strong>Cookie</strong> class to get and set cookies and their attributes.</p><ol start="2"><li>URL-rewriting</li></ol><p>​       attach a <em>session id</em> to the end of URLs</p><p>​       <strong><a href="http://host/path/file.html;sessionid=1234">http://host/path/file.html;sessionid=1234</a></strong></p><ol start="3"><li>The <strong>HttpSession</strong> API is a high-level interface built on top of cookies or URL-rewriting:</li></ol><h3 id="Session-tracking-in-servlets"><a href="#Session-tracking-in-servlets" class="headerlink" title="Session tracking in servlets"></a><strong>Session tracking in</strong> <strong>servlets</strong></h3><p>Session Tracker uses a <strong>session ID to match</strong> users up with <strong>Session objects</strong> on the server side.</p><p>会话ID是用户第一次访问服务器时创建的字符串，然后作为cookie发送给浏览器</p><p><strong>JSESSIONID=0ABC5019DE56</strong></p><p>session依赖Cookie，但如果浏览器关闭了对Cookie的支持。这时可以使用URL重写的方式</p><p>Tracks the users’ session by including the session ID <strong>in all URLs</strong> the users will communicate with the server <em>application</em>.</p><h4 id="HttpSession-objects"><a href="#HttpSession-objects" class="headerlink" title="HttpSession objects"></a><strong>HttpSession</strong> <strong>objects</strong></h4><p>servlet引擎保持一个HttpSession对象表:</p><p>使用“session id”作为键从表中查找对象。</p><p>从<em>cookie</em> or <em>rewritten URL</em>中提取session:</p><p>Extract or create a new session object.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>HttpSession对象本身就是哈希表，用于在与用户的“会话”期间存储数据。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130165419111.png" alt="image-20221130165419111" style="zoom:67%;"><p>当客户端第一次访问服务器时，服务器会为客户端创建一个session对象，然后把session对象放到session池中，在响应时把sessionId通过Cookie响应给客户端。注意，只有在第一次访问时，服务器才会创建session，给客户端响应sessionId。从此以后就不会了！</p><p>当客户端再次访问服务器时，会在请求中带着sessionId给服务器，服务器通过sessionId到session池中找到session对象，这就可以完成会话跟踪了。也就是说，服务器端保存的是session对象，而客户端只有sessionId。每次访问都需要通过客户端的sessionId来匹配服务器端的session对象！这样用户在session中保存的数据就可以再次被使用了。</p><p>sessionId是服务器通过Cookie发送给客户端浏览器的，这个Cookie的maxAge为-1，即只在浏览器内存中存在。如果你关闭所有浏览器窗口，那么这个Cookie就会消失了</p><ul><li>通常会判断是不是第一次创建session：</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// e.g., add username to it }</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token comment">// e.g., add new information, extract previous</span><span class="token comment">// stored information from the session object</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> uName <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>“fullName”<span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>“userName”<span class="token punctuation">,</span>uName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [session.setAttribute(String key, Object value)]//第一次建立session，设置name</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">isNew</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">int</span> uAge <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span>“age”<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span>“userAge”<span class="token punctuation">,</span> uAge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span>“userName”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//再次访问时，获取session中属性</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“hello ” <span class="token operator">+</span> name <span class="token operator">+</span> “ your age is ” <span class="token operator">+</span> uAge<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Can-a-session-track-over-many-pages"><a href="#Can-a-session-track-over-many-pages" class="headerlink" title="Can a session track over many pages?"></a><strong>Can a session track over many pages?</strong></h5><p>memory is held in the <strong>Session</strong> object:</p><p>– <strong>The session objects are held by the container (Tomcat)</strong></p><h5 id="设置最长session持续时间"><a href="#设置最长session持续时间" class="headerlink" title="设置最长session持续时间"></a>设置最长session持续时间</h5><p>When a session object has not been accessed for some time, when can it be discarded from the table of session objects?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">HttpSession</span> session <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>session<span class="token punctuation">.</span><span class="token function">setMaxInactiveInterval</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// two hours（秒）</span><span class="token comment">//设置为赋值代表session永远不会超时</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>服务器记录上一次访问的时间，如果时间间隔超过getMaxInactiveInterval()的值，则丢弃该session。</p><p> <strong>invalidate()</strong> and **logout() **explicitly delete the session object</p><p>We can also set this (in <em>minutes</em>) in the deployment descriptor:（分钟）</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">&gt;</span></span>30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="URL-Rewriting"><a href="#URL-Rewriting" class="headerlink" title="URL Rewriting"></a><strong>URL Rewriting</strong></h4><p>查找将被写回浏览器的所有链接，并将其写入，使其包含会话ID。</p><pre class="line-numbers language-none"><code class="language-none">&lt;a href=“/store/catalog”&gt; could become&lt;a href=“/store/catalog”;jsessionid$DA334rsg23&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>URL重写很好理解，就是在用户点击的超链接和提交的表单上添加参数。例如：If the user clicks on this link, the <strong>rewritten form</strong> of the URL is sent to the server</p><p>The session ID is then used to obtain the session object</p><p>用**response.**encodeURL（）实现URL rewriting，而不是直接加</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221130183850621.png" alt="image-20221130183850621" style="zoom:67%;"><p>这个方法有两个功能（在需要rewrite时候自动加 sessionID）</p><ul><li><p>Checks if the URL needs to be rewritten:</p><p>If the server detects that the browser is supporting cookies, then the URL is not rewritten</p></li><li><p>If URL needs to be rewritten, then the session ID is inserted into the URL and the rewritten URL returned.</p></li></ul><p>两种情况使用这个方法：</p><ol><li>When URLs are embedded in a generated web page（URL在生成的网站中，如上）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> originalURL <span class="token operator">=</span> someRelativeOrAbsoluteURL<span class="token punctuation">;</span><span class="token class-name">String</span> encodedURL <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">encodeURL</span><span class="token punctuation">(</span>originalURL<span class="token punctuation">)</span><span class="token punctuation">;</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token operator">&lt;</span><span class="token class-name">A</span> HREF<span class="token operator">=</span>\”” <span class="token operator">+</span> encodedURL <span class="token operator">+</span> “\”<span class="token operator">&gt;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>&lt;<span class="token operator">/</span><span class="token class-name">A</span><span class="token operator">&gt;</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="2"><li>When using <strong>sendRedirect</strong>（ when placed in location header)）</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> originalURL <span class="token operator">=</span> someURL<span class="token punctuation">;</span> <span class="token class-name">String</span> encodedURL <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">encodeRedirectURL</span><span class="token punctuation">(</span>originalURL<span class="token punctuation">)</span><span class="token punctuation">;</span>res<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>encodedURL<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果你不重写，且不支持cookie，会造成user’s session丢失</p></form>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> ANP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3-HTML</title>
      <link href="//post/2.3-HTML.html"/>
      <url>//post/2.3-HTML.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="An-HTML-File"><a href="#An-HTML-File" class="headerlink" title="An HTML File:"></a>An HTML File:</h2><ul><li><p>HTML 指的是超文本标记语言: <strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage</p></li><li><p>HTML 不是一种编程语言，而是一种<strong>标记</strong>语言</p></li><li><p>标记语言是一套<strong>标记标签</strong> (markup tag)</p></li><li><p><strong>.htm</strong> or <strong>.html</strong> file extension</p></li><li><p>Can be created using any text editor</p></li></ul><h3 id="HTML-tags-amp-HTML-elements"><a href="#HTML-tags-amp-HTML-elements" class="headerlink" title="HTML tags &amp; HTML elements"></a><strong>HTML tags &amp; HTML elements</strong></h3><h4 id="html-tage"><a href="#html-tage" class="headerlink" title="html tage:"></a>html tage:</h4><p>• Mark-up HTML elements.</p><p>• Surrounded by <strong>&lt; &gt;</strong></p><p>• Normally come in pairs:</p><p>– <em>start tag</em> and <em>end tag</em> 开始标签和结束标签</p><p>– E.g. <code>&lt;title&gt; and &lt;/title&gt;</code></p><p>• The text between the <em>start</em> and <em>end tags</em> is the element content.  元素=标签+内容</p><p>• HTML tags are not case-sensitive. HTML 文档中的标签名和属性名都是大小写<strong>不敏感的</strong></p><p>• HTML elements are defined using HTML tags e.g.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>My page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221030190052297.png" alt="image-20221030190052297" style="zoom:67%;"><p>• HTML documents are text files made up of HTML elements.</p><p>html中会忽略空格</p><p>基础结构</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221106195952116.png" alt="image-20221106195952116" style="zoom:67%;"><h4 id="common-tags"><a href="#common-tags" class="headerlink" title="common tags"></a>common tags</h4><p>• Paragraphs <code>&lt;p&gt; &lt;/p&gt;</code></p><p>html段落前后会自动空行</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is the 1st paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is the 2nd paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is the 3rd paragraph.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>• Headings <code>&lt;h&gt; &lt;/h&gt;</code></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>This is heading 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>This is heading 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">&gt;</span></span>This is heading 3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">&gt;</span></span>This is heading 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">&gt;</span></span>This is heading 5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h6</span><span class="token punctuation">&gt;</span></span>This is heading 6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h6</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>• Line Breaks换行 <code>&lt;br /&gt;</code></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918180309986.png" alt="image-20220918180309986"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This paragraph has <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>     a line break here<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">&lt;br&gt;//分割两段但不空行单独用空一行//没有结束标签，自己就是结束的证明<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Use <code>&lt;br&gt;</code> tag to enter line breaks, not to separate paragraphs. Browsers automatically add an empty line before and after a paragraph</p><ul><li><p>Horizontal rule **<code>&lt;hr&gt;</code>**水平分割线</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918222645641.png" alt="image-20220918222645641"></p></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is another paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Comments in HTML <!-- --></li></ul><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is a paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>     <span class="token comment">&lt;!-- This is a comment --&gt;</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This is another paragraph<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918181037334.png" alt="image-20220918181037334"></p><h3 id="HTML-Attributes-amp-HTML-Text-Formatting"><a href="#HTML-Attributes-amp-HTML-Text-Formatting" class="headerlink" title="HTML Attributes &amp; HTML Text Formatting"></a><strong>HTML Attributes &amp; HTML Text Formatting</strong></h3><h4 id="HTML-Attributes"><a href="#HTML-Attributes" class="headerlink" title="HTML Attributes"></a>HTML Attributes</h4><p>Attributes provide additional information to an HTML element</p><p>A bit like Java method parameters</p><ul><li>Inside the start tag, <strong>name=“value”</strong></li></ul><p>以<strong>名称=“值”</strong>的形式出现，在<strong>开始标签里规定</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918181939533.png" alt="image-20220918181939533"></p><p>Attributes and attribute values are <strong>case-insensitive</strong>, but the <em>W3C</em> recommends using lowercase.</p><h4 id="HTML-Text-Formatting"><a href="#HTML-Text-Formatting" class="headerlink" title="HTML Text Formatting"></a><strong>HTML Text Formatting</strong></h4><p>• <strong><code>&lt;b&gt;</code></strong> Defines bold text. </p><p>• <strong><code>&lt;big&gt;</code></strong> Defines big text. （不在html5里，不用）</p><p>• <strong><code>&lt;em&gt;</code></strong> Defines emphasized text. </p><p>• <strong><code>&lt;i&gt;</code></strong> Defines italic text. </p><p>• <strong><code>&lt;small&gt;</code></strong> Defines small text. </p><p>• <strong><code>&lt;strong&gt;</code></strong> Defines strong text. </p><p>• <strong><code>&lt;sub&gt;</code></strong> Defines subscripted text. 下标</p><p>• <strong><code>&lt;sup&gt;</code></strong> Defines superscripted text. 上标</p><p>• <strong><code>&lt;ins&gt;</code></strong> Defines inserted text. </p><p>• <strong><code>&lt;del&gt;</code></strong> Defines deleted text.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">&gt;</span></span>This text is bold<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">&gt;</span></span>This text is strong<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span><span class="token punctuation">&gt;</span></span>This text is big<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">&gt;</span></span>This text is emphasized<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span><span class="token punctuation">&gt;</span></span>This text is italic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>small</span><span class="token punctuation">&gt;</span></span>This text is small<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>small</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918182436691.png" alt="image-20220918182436691"></p><h4 id="Character-Entities"><a href="#Character-Entities" class="headerlink" title="Character Entities"></a><strong>Character Entities</strong></h4><p>在 HTML 中，某些字符是预留的。在 HTML 中不能使用小于号（&lt;）和大于号（&gt;），这是因为浏览器会误认为它们是标签。在 HTML 源代码中使用字符实体（character entities）。注意分号</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918182547736.png" alt="image-20220918182547736"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918182557651.png" alt="image-20220918182557651"></p><h3 id="HTML-Head"><a href="#HTML-Head" class="headerlink" title="HTML Head"></a><strong>HTML Head</strong></h3><p>• The title of a document:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>The is the title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>• For all:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>base</span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“_blank”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>&lt;base&gt;</code> 标签为页面上的所有链接规定默认地址或默认目标。</p><p>为所有该页面链接设置打开在新窗口</p><h3 id="HTML-Links"><a href="#HTML-Links" class="headerlink" title="HTML Links"></a><strong>HTML Links</strong></h3><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><h5 id="tage"><a href="#tage" class="headerlink" title="tage:"></a><a>tage:</a></h5><ul><a></a><li><a></a><a> 标签定义超链接，用于从一张页面链接到另一张页面。</a></li><a><li>href:指定访问资源的URL</li><li>target:指定打开资源的方式</li></a></ul><a></a><h5 id="文本链接："><a></a><a href="#文本链接：" class="headerlink" title="文本链接："></a>文本链接：</h5><p>HTML uses a hyperlink to link to another document on the Web: </p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Text to be displayed<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“linkpage.html”</span><span class="token punctuation">&gt;</span></span>This text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> is a link to a page on this Web site.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“http://www.qmul.ac.uk/”</span><span class="token punctuation">&gt;</span></span>This text<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> is a link to QMUL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221030191225705.png" alt="image-20221030191225705" style="zoom:67%;"><h5 id="图片链接："><a href="#图片链接：" class="headerlink" title="图片链接："></a>图片链接：</h5><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> Use an image as a link:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“linkpage.htm”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“0”</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“image.jpg”</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“65”</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“38”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="href"><a href="#href" class="headerlink" title="href"></a>href</h4><p>Open link in a new browser window:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“http://www.qmul.ac.uk/”</span><span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“_blank”</span><span class="token punctuation">&gt;</span></span>Visit QMUL<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Target: where to open the linked document</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918194750021.png" alt="image-20220918194750021"></p><h6 id="blank"><a href="#blank" class="headerlink" title="_blank"></a>_blank</h6><p>浏览器总在一个新打开、未命名的窗口中载入目标文档。</p><h6 id="self"><a href="#self" class="headerlink" title="_self"></a>_self</h6><p>这个目标的值对所有没有指定目标的 <a> 标签是默认目标，它使得目标文档载入并显示在相同的框架或者窗口中作为源文档。这个目标是多余且不必要的，除非和文档标题 <base> 标签中的 target 属性一起使用。</a></p><a></a><h6 id="parent"><a></a><a href="#parent" class="headerlink" title="_parent"></a>_parent</h6><p>这个目标使得文档载入父窗口或者包含来超链接引用的框架的框架集。如果这个引用是在窗口或者在顶级框架中，那么它与目标 _self 等效。</p><h6 id="top"><a href="#top" class="headerlink" title="_top"></a>_top</h6><p>这个目标使得文档载入包含这个超链接的窗口，用 _top 目标将会清除所有被包含的框架并将文档载入整个浏览器窗口。</p><p><strong>提示：</strong>这些 target 的所有 4 个值都以下划线开始。任何其他用一个下划线作为开头的窗口或者目标都会被浏览器忽略，因此，不要将下划线作为文档中定义的任何框架 name 或 id 的第一个字符。</p><h4 id="页面内跳转"><a href="#页面内跳转" class="headerlink" title="页面内跳转"></a>页面内跳转</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“top”</span><span class="token punctuation">&gt;</span></span>This is the top of this page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span> .........<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“section.html”#top</span><span class="token punctuation">&gt;</span></span>Jump to top of this page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#C4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>查看 Chapter 4。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>C4<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Chapter 4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>This chapter explains ba bla bla<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTML-Tables"><a href="#HTML-Tables" class="headerlink" title="HTML Tables"></a><strong>HTML Tables</strong></h3><p><a href="https://www.w3school.com.cn/tags/tag_table.asp">HTML  标签 (w3school.com.cn)</a></p><p><strong>Table Tags</strong></p><p>•**<code>&lt;table&gt;</code>** Defines a table.</p><p>• <strong><code>&lt;th&gt;</code></strong> Defines a table header. </p><p>• <strong><code>&lt;tr&gt;</code></strong> Defines a table row. 定义 HTML 表格中的行</p><p>• <strong><code>&lt;td&gt;</code></strong> Defines a table cell. </p><p>HTML 表单中有两种类型的单元格：</p><ul><li>表头单元格 - 包含表头信息（由 th 元素创建）</li><li>标准单元格 - 包含数据（由 td 元素创建）</li></ul><p>th 元素内部的文本通常会呈现为居中的粗体文本，而 td 元素内的文本通常是左对齐的普通文本。</p><p>• <strong><code>&lt;caption&gt;</code></strong> Defines a table caption. </p><p>• <strong><code>&lt;thead&gt;</code></strong> Defines a table head. </p><p>• <strong><code>&lt;tbody&gt;</code></strong> Defines a table body. </p><p>• <strong><code>&lt;tfoot&gt;</code></strong> Defines a table footer.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“1”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>caption</span><span class="token punctuation">&gt;</span></span> title <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>caption</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>thead</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>h1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>th</span><span class="token punctuation">&gt;</span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>th</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>thead</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tfoot</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>f1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>f2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tfoot</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tbody</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>row 1, cell 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>row 1, cell 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>row 2, cell 1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">&gt;</span></span>row 2, cell 2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tbody</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221030194446930.png" alt="image-20221030194446930" style="zoom:67%;"><p><code>&lt;table&gt;</code>标签定义 HTML 表格。简单的 HTML 表格由 table 元素以及一个或多个 tr、th 或 td 元素组成。tr 元素定义表格行，th 元素定义表头，td 元素定义表格单元</p><p>border-规定边框宽度</p><p>• Add background colour:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“1”</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“red”</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>• Add background image:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">border</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“1”</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“bg.jpg”</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>• Align(对齐) the text:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“left”</span><span class="token punctuation">&gt;</span></span>To left<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“right”</span><span class="token punctuation">&gt;</span></span>To right<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“center”</span><span class="token punctuation">&gt;</span></span>To center<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="HTML-Lists"><a href="#HTML-Lists" class="headerlink" title="HTML Lists"></a><strong>HTML Lists</strong></h3><h4 id="Unordered-list"><a href="#Unordered-list" class="headerlink" title="Unordered list:"></a>Unordered list:</h4><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Tea<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221030195547679.png" alt="image-20221030195547679"></p><h4 id="Ordered-list"><a href="#Ordered-list" class="headerlink" title="Ordered list:"></a>Ordered list:</h4><p><a href="https://www.w3school.com.cn/tags/tag_ol.asp">HTML  标签 (w3school.com.cn)</a></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Tea<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“A”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Tea<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“a”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Tea<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“I”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Tea<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ol</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“i”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Coffee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Tea<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">&gt;</span></span>Milk<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ol</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>效果图：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221030195504730.png" alt="image-20221030195504730"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918203258530.png" alt="image-20220918203258530" style="zoom:80%;"><h3 id="HTML-Images-amp-Colour"><a href="#HTML-Images-amp-Colour" class="headerlink" title="HTML Images &amp; Colour"></a><strong>HTML Images &amp; Colour</strong></h3><p>• Insert an image <strong><img></strong>:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“image.gif”</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“144”</span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“50”</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>• The <strong>alt</strong> attribute is used to define an “alternate text” for an image:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“me.jpg”</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“This</span> <span class="token attr-name">is</span> <span class="token attr-name">me”</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918203913199.png" alt="image-20220918203913199" style="zoom:67%;"><p>• Background image:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">background</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“background.jpg”</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>• Background colour:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“#d0d0d0”</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>• Text colour:</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">bgcolor</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“#000000”</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“yellow”</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918204516103.png" alt="image-20220918204516103"></p><h3 id="lt-embed-gt"><a href="#lt-embed-gt" class="headerlink" title="<embed>"></a><code>&lt;embed&gt;</code></h3><p>• The <embed> tag defines a container for an external application or interactive content (a plug-in).</p><p><code>&lt;embed&gt;</code> 标签定义嵌入的内容，比如插件。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>embed</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>helloworld.swf<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="HTML-Forms"><a href="#HTML-Forms" class="headerlink" title="**HTML Forms **"></a>**HTML Forms **</h3><p>• HTML Forms are used to select different kinds of user input.</p><p><strong>HTML 表单用于搜集不同类型的用户输入。</strong></p><h6 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h6><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建表单，表单用于给服务器传递数据</p><h6 id="Attribute"><a href="#Attribute" class="headerlink" title="Attribute"></a>Attribute</h6><ul><li><p>action:</p><p> The form’s <strong>action</strong> attribute defines <strong>the name of the file to send the content to</strong>.用于处理表单的服务器端页面（以URL 形式表示）</p></li><li><p>method</p><p>不指定method，默认为get</p><p>点击submit且form为get方法，会向action的页面提交 每一个控件的“name-value对”（长度有限制）</p><p>点击submit且form为post方法,则数据在http的entity body中（可以打开浏览器中的源代码查看）</p><p><strong>并且会提交所有拥有name的input的键值对（以&amp;隔开）</strong></p><p>格式为<a href="http://www.example.com/?name=value">http://www.example.com?name=value</a></p><p>表单项要想被提交则必须指定 input中的name属性</p></li></ul><h6 id="tag列表"><a href="#tag列表" class="headerlink" title="tag列表"></a>tag列表</h6><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220919084640529.png" alt="image-20220919084640529"></p><h4 id="表单项"><a href="#表单项" class="headerlink" title="表单项"></a>表单项</h4><p>包括：</p><p><code>&lt;input&gt;</code></p><p><code>&lt;select&gt;</code></p><p><code>&lt;label&gt;</code></p><p><code>&lt;textarea&gt;</code></p><p><code>&lt;Fieldset&gt;</code></p><h5 id="input"><a href="#input" class="headerlink" title="input"></a>input</h5><p>• The most used form tag is the <strong><input></strong> tag. The type of input is specified with the <em>type attribute</em>. <input> 标签用于搜集用户信息。根据不同的 type 属性值，输入字段拥有很多种形式。输入字段可以是文本字段、复选框、掩码后的文本控件、单选按钮、按钮等等。</p><p><input> 标签没有结束标签。</p><h6 id="input中的属性"><a href="#input中的属性" class="headerlink" title="input中的属性"></a>input中的属性</h6><ul><li><p>type：<img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221106210158214.png" alt="image-20221106210158214"></p></li><li><p>name属性：The name attribute is what is sent when the form is submitted.  </p><p><strong>The</strong> <strong>name</strong> <strong>is the identifier</strong> <strong>that is sent to the server</strong> when you submit the form.</p></li><li><p>ID属性：The id attribute uniquely identifies any element on the page</p></li></ul><blockquote><p>difference between name and id</p><p> id可以唯一标识，name可以标识多个值</p></blockquote><ul><li><strong>value属性：</strong></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221030214158257.png" alt="image-20221030214158257" style="zoom:67%;"><h6 id="Text-fields"><a href="#Text-fields" class="headerlink" title="Text fields"></a><strong>Text fields</strong></h6><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918212207859.png" alt="image-20220918212207859"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“”</span><span class="token punctuation">&gt;</span></span>First name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“text”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“firstname”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>Last name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“text”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“lastname”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>form<a href="https://so.csdn.net/so/search?q=%E8%A1%A8%E5%8D%95&amp;spm=1001.2101.3001.7020">表单</a>中input的text类型字段如果不填值的话，默认值为空串，即“”（不是null）</p><h6 id="Password-Fields"><a href="#Password-Fields" class="headerlink" title="Password Fields"></a><strong>Password Fields</strong></h6><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918212215024.png" alt="image-20220918212215024"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“”</span><span class="token punctuation">&gt;</span></span>Username: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“text”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“user”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>Password: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“password”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“password”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>When you type characters in a password field, the browser displays <em>asterisks</em> or <em>bullet points</em> instead of the characters. </p><h6 id="Radio-buttons"><a href="#Radio-buttons" class="headerlink" title="Radio buttons"></a><strong>Radio buttons</strong></h6><p>单选框Select <em>one</em> of the choices.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918212558361.png" alt="image-20220918212558361"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span><span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span><span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  Male<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>  Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果两个选项name一样,两个选择项互斥</p><h6 id="Checkboxes"><a href="#Checkboxes" class="headerlink" title="Checkboxes"></a><strong>Checkboxes</strong></h6><p>复选框Select <em>one or more</em> options.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918212656885.png" alt="image-20220918212656885"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">&gt;</span></span>I have a bike:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“checkbox”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“vehicle”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“Bike”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>I have a car: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“checkbox”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>vehicle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“Car”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span>I have an airplane: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“checkbox”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“vehicle”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“Airplane”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Defining-lt-label-gt-for-button"><a href="#Defining-lt-label-gt-for-button" class="headerlink" title="Defining <label> for button"></a><strong>Defining <code>&lt;label&gt;</code> for button</strong></h6><p>• The <label> tag defines a label for an <input> element. </label></p><p> This allows a user to click on the label <strong>as</strong> <strong>well</strong> as the button</p><p><label> 标签为 input 元素定义标注，点击字也会同点击单选框一个效果</label></p><p>• <strong>The</strong> <strong>for</strong> <strong>attribute of the <label> tag</label></strong> <strong>should be equal to the</strong> <strong>id</strong> <strong>attribute of</strong> <strong>the related element</strong>“for” 属性可把 label 绑定到另外一个元素。请把 “for” 属性的值设置为相关元素的 <strong>id</strong> 属性的值。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>demo_form.asp<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> Male <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span>Female<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Submit<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="Submit-Button"><a href="#Submit-Button" class="headerlink" title="Submit Button"></a><strong>Submit</strong> <strong>Button</strong></h6><p>When the user clicks on the <strong>“Submit”</strong> button, the <em>content of the form</em> <em>is sent to another file</em>.</p><p>发邮件的例子：</p><p>mailto: 邮箱地址</p><pre class="line-numbers language-HTML" data-language="HTML"><code class="language-HTML">&lt;form action=“MAILTO:yourname@company.com” method=“post” enctype=“text/plain”&gt;Name:&lt;br&gt;&lt;input type=“text” name=“name” size=“20”&gt;&lt;br&gt;Mail:&lt;br&gt;&lt;input type=“text” name=“mail” size=“20”&gt;&lt;br&gt;Comment:&lt;br&gt;&lt;input type=“text” name=“comment” size=“40”&gt;&lt;br&gt;&lt;br&gt;&lt;input type=“submit” value=“Send”&gt;&lt;input type=“reset” value=“Reset”&gt;&lt;/form&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The file defined in the <strong>action</strong> attribute usually does something with the received input.</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“input”</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“html_form_action.jsp”</span><span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“get”</span><span class="token punctuation">&gt;</span></span>Username: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“text”</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“user”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“submit”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“Submit”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Image acts as a submit button</strong></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>image<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>path to image<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The image type is by default a form submitting button.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918230723195.png" alt="image-20220918230723195"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221030205814716.png" alt="image-20221030205814716" style="zoom:67%;"><h6 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h6><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918235028274.png" alt="image-20220918235028274"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“button”</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“Hello</span> <span class="token attr-name">world!”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Difference between button and submit</strong></p><p>• <input type="button"> buttons will not submit a form on their own - they don’t do anything by default. </p><p>• <input type="submit"> buttons will submit the form they are in when the user clicks on them, unless you specify otherwise with JavaScript</p><p>– But depends on browser! having a form, without a submit-button but instead a <button> will apply submit-functionality to it. <strong>Firefox has this behaviour.</strong><p></p><h5 id="lt-select-gt"><a href="#lt-select-gt" class="headerlink" title="<select>"></a><code>&lt;select&gt;</code></h5><p><strong>dropdown box</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918234400970.png" alt="image-20220918234400970">的。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“cars”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“volvo”</span><span class="token punctuation">&gt;</span></span>Volvo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“saab”</span><span class="token punctuation">&gt;</span></span>Saab<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“fiat”</span><span class="token punctuation">&gt;</span></span>Fiat<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“audi”</span><span class="token punctuation">&gt;</span></span>Audi<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="Fieldset-控件组"><a href="#Fieldset-控件组" class="headerlink" title="Fieldset 控件组"></a><strong>Fieldset</strong> 控件组</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918234502800.png" alt="image-20220918234502800"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fieldset</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>legend</span><span class="token punctuation">&gt;</span></span>Health information:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>legend</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“”</span><span class="token punctuation">&gt;</span></span>Height <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“text”</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“3”</span><span class="token punctuation">&gt;</span></span>Weight <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“text”</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“3”</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fieldset</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>• The <code>&lt;fieldset&gt;</code> tag is used to group related elements in a form.</p><p>– The <code>&lt;fieldset&gt;</code> tag draws a box around the related elements.</p><p>• The <code>&lt;legend&gt;</code> tag defines a caption for the <code>&lt;fieldset&gt;</code> element</p><p>legend 元素为 <a href="https://www.w3school.com.cn/tags/tag_fieldset.asp">fieldset 元素</a>定义标题（caption）</p><h5 id="Textarea"><a href="#Textarea" class="headerlink" title="Textarea"></a><strong>Textarea</strong></h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220918234822463.png" alt="image-20220918234822463"></p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>textarea</span> <span class="token attr-name">rows</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“10”</span> <span class="token attr-name">cols</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>“30”</span><span class="token punctuation">&gt;</span></span>The cat was playing in the garden.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>textarea</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：</p><p>The <strong>textarea</strong> element does not support the <strong>value</strong> attribute.</p><p>默认的 value 为tag之间的文字</p><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220919085211723.png" alt="image-20220919085211723"></p><h2 id="CASCADING-STYLE-SHEETS"><a href="#CASCADING-STYLE-SHEETS" class="headerlink" title="CASCADING STYLE SHEETS"></a><strong>CASCADING STYLE SHEETS</strong></h2><p>• Separates the layout from the document structure:</p><p>– All formatting can be removed from the HTML document, and stored in a <em>style sheet</em>.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221030211832074.png" alt="image-20221030211832074"></p><p>使用class属性，值为css中对应的class</p><h2 id="SCALABLE-VECTOR-FORMAT"><a href="#SCALABLE-VECTOR-FORMAT" class="headerlink" title="SCALABLE VECTOR FORMAT"></a><strong>SCALABLE VECTOR FORMAT</strong></h2><p>SVG (Scalable Vector Graphics)</p><p>• SVG defines the graphics in XML format.</p><p>• Can be directly typed into a HTML file</p><p>• SVG graphics do NOT lose any quality if they are zoomed or resized.</p><p>• Every element and every attribute in SVG files can be animated</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221030212345900.png" alt="image-20221030212345900" style="zoom:67%;"><h2 id="补充零碎"><a href="#补充零碎" class="headerlink" title="补充零碎"></a>补充零碎</h2><h5 id="HTML中属性值是否加引号规则详解"><a href="#HTML中属性值是否加引号规则详解" class="headerlink" title="HTML中属性值是否加引号规则详解"></a><strong>HTML中属性值是否加引号规则详解</strong></h5><p><strong>说明：</strong></p><p>当属性值是一个单词或者一整串（中间不含空格）的字符时：可以不加引号</p><p>当属性值是多个单词或者一整串（中间含空格）的字符时：需要加引号</p><h5 id="对于radio-buttons：-如果两个button的name一样则只能二选一，如果不一样可以同时选"><a href="#对于radio-buttons：-如果两个button的name一样则只能二选一，如果不一样可以同时选" class="headerlink" title="对于radio buttons： 如果两个button的name一样则只能二选一，如果不一样可以同时选"></a>对于radio buttons： 如果两个button的name一样则只能二选一，如果不一样可以同时选</h5><p>html段落前后会自动空行</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221106193611080.png" alt="image-20221106193611080"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221106193630084.png" alt="image-20221106193630084"></p></button></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> ANP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2-HTTP</title>
      <link href="//post/2.2-HTTP.html"/>
      <url>//post/2.2-HTTP.html</url>
      
        <content type="html"><![CDATA[<h1 id="HTTP"><a href="#HTTP" class="headerlink" title="HTTP"></a>HTTP</h1><h2 id="http"><a href="#http" class="headerlink" title="http"></a>http</h2><p><strong>HyperText Transfer Protocol</strong></p><p>An application layer protocol used to transfer web pages (and other content) from a sever to a client</p><p><strong>What is a web page?</strong></p><p> A web page consists of objects:</p><p>– e.g. an HTML file, a JPEG image, an audio clip, an applet <em>that are addressable by a single URL</em>;</p><p>– also called a <strong>document</strong>.</p><p>Usually consists of a base HTML document and several other referenced objects.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105001209590.png" alt="image-20221105001209590"></p><h3 id="CLIENT-SERVER-WEB-ARCHITECTURE"><a href="#CLIENT-SERVER-WEB-ARCHITECTURE" class="headerlink" title="CLIENT-SERVER WEB ARCHITECTURE"></a><strong>CLIENT-SERVER</strong> <strong>WEB ARCHITECTURE</strong></h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105001012106.png" alt="image-20221105001012106"></p><ul><li>A Server</li></ul><p>exposes a listening socket Send a response containing e.g. html (other referenced resources)</p><p>Extract (and validate) user data, perform task and send response.</p><ul><li>A Client</li></ul><p>software that initiates a request </p><p>Send a request for the resource/document (webpage) addressable by ONE URL :</p><blockquote><p>HTTP follow the client-server model</p></blockquote><h3 id="Context-of-HTTP"><a href="#Context-of-HTTP" class="headerlink" title="Context of HTTP"></a><strong>Context of HTTP</strong></h3><p>HTTP is an application-layer protocol( it operates at the top of the OSI)</p><p>It relies on many other protocols to achieve its goals:</p><p>– <strong>TCP</strong> provides reliable in-order delivery</p><p>– <strong>IP</strong> delivers data packets between the end hosts (i.e. client and server)</p><p>– <strong>Layer 2</strong> (e.g. Ethernet) protocols deal with the individual networks (MAC)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026130155185.png" alt="image-20221026130155185"></p><ul><li><p>Network Layer delivers data <strong>packets</strong> between end hosts</p></li><li><p>Transport Layer delivers data <strong>segments</strong> between processes</p></li><li><p>Application Layer delivers services and applications <strong>Deals with advanced application specific functionality,</strong></p></li></ul><p><strong>Each layer adds routing information</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026130729072.png" alt="image-20221026130729072" style="zoom:50%;"><h3 id="HTTP-and-TCP"><a href="#HTTP-and-TCP" class="headerlink" title="HTTP and TCP"></a><strong>HTTP and TCP</strong></h3><p>HTTP is built over TCP</p><p>Socket socket = new Socket(“10.0.0.1”, 80)就是建立TCP连接的过程</p><p>– Initiates a TCP connection to 10.0.0.1’s port 80</p><p>TCP makes life much easier for HTTP</p><p>– No (perceived) packet loss</p><p>– No out-of-order delivery</p><p>– Congestion/flow control automatically handled</p><h4 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a><strong>TCP</strong></h4><p><strong>TCP = Transmission Control Protocol</strong></p><p>Connection-oriented protocol</p><p>Provides a reliable unicast(单播) 可靠的点对点传播 (i.e., one-to-one) end-to-end byte stream over an unreliable internetwork</p><p>Before any data transfer, TCP establishes a connection（建立socket时）:</p><p>– One TCP entity is waiting for a connection (“server”)</p><p>– The other TCP entity (“client”) contacts the server</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026134405131.png" alt="image-20221026134405131" style="zoom:67%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026134540421.png" alt="image-20221026134540421" style="zoom:67%;"><p>To the higher layers, TCP exposes a byte stream service</p><p>– i.e., OutputStream in your Socket class</p><p>在更高层看来TCP提供流服务，看不到报文段</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026135018823.png" alt="image-20221026135018823" style="zoom:67%;"><p>• System services reserve the use of <em>ports 0 through 1023</em>.</p><p>– Do not use them!</p><p>• Default port for web server is <strong>port 80</strong></p><h3 id="URL-Uniform-Resource-Locator"><a href="#URL-Uniform-Resource-Locator" class="headerlink" title="URL: Uniform Resource Locator"></a><strong>URL: Uniform Resource Locator</strong></h3><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。</p><p><a href="https://www.jianshu.com/p/406d19dfabd3">快速搞懂URL的构成 - 简书 (jianshu.com)</a></p><p>A way of locating a <em>resource</em> on the Internet</p><p>– a file, an e-mail address, a CGI program</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">protocol://hostname<span class="token punctuation">[</span>:port<span class="token punctuation">]</span>/path/filename<span class="token comment">#section</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>protocol– the <em>protocol</em> used to access the server</p></li><li><p>hostname– the <em>name of the server</em></p></li><li><p>/path/filename– the <em>location of a file on the server</em></p><p>Points to a file in the directory specified by <strong>path</strong>:</p><p>if omitted, it is left to the server to decide which file to send</p><p>• e.g. it may send an index of the directory, often in a file called <strong>index.html</strong></p></li><li><p>path - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。</p></li><li><p>#section is a <em>named anchor</em> in an HTML document:</p><p>– also called <em>fragment</em> or <em>Ref</em></p><p>– created using a tag 与HTML中的<a>标签相连</a></p><a><pre class="line-numbers language-none"><code class="language-none">&lt;A NAME="abc123"&gt; &lt;/A&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>in the HTML file specified</p></a></li><a></a></ul><a><p><code>fragment</code>可以理解为资源内部的<code>书签</code>.用来想服务器指明展示的内容所在的<code>书签</code>的点.例如对于<code>HTML</code>文件来说,浏览器会滚动到特定的或者上次浏览过的位置.对于音频或者视频资源来说,浏览器又会跳转到对应的时间节点.</p></a><h5 id="Other-possible-protocols-to-use-with-URLs"><a></a><a href="#Other-possible-protocols-to-use-with-URLs" class="headerlink" title="Other possible protocols to use with URLs"></a><strong>Other possible protocols to use with URLs</strong></h5><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026190542344.png" alt="image-20221026190542344" style="zoom:50%;"><h2 id="HTTP-PROTOCOL-DETAILS"><a href="#HTTP-PROTOCOL-DETAILS" class="headerlink" title="HTTP PROTOCOL DETAILS"></a><strong>HTTP PROTOCOL DETAILS</strong></h2><ul><li><p>无状态：It is <em>stateless</em>: it does not remember anything about previous connections, so it’s simple and robust</p><p><em>can lead to inefficiencies</em>：client请求一个页面，然而这个页面没变化，就需要重发</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026220836214.png" alt="image-20221026220836214"></p><p>HTTP/1.0, HTTP/1.1 and HTTP/2.0 use <em>TCP as the underlying</em> <em>transport protocol</em>.</p><p>– Client writes HTTP request messages into its socket and reads responses from the socket.</p><p>– Server reads HTTP requests and writes it responses to its sockets**.**</p><h5 id="持续连接与非持续"><a href="#持续连接与非持续" class="headerlink" title="持续连接与非持续"></a>持续连接与非持续</h5><p>persistent connection：一个请求建立一个TCP</p><p> Server leaves a TCP connection open (for some time) after sending a response.Subsequent requests and responses between same client and server can be made over same connection</p><p>Usually multiple resources are obtained by parallel TCP connections</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026223201320.png" alt="image-20221026223201320" style="zoom:67%;"><p>non-persistent　connection：一系列请求基于一个相同的TCP</p><ul><li><p>非流水线方式： 客户在收到前一个响应后才能发出下 一个请求。这比非持续连接的两倍 RTT 的开销节省了 建立 TCP 连接所需的一个 RTT时间。但服务器在发 送完一个对象后，其 TCP 连接就处于空闲状态，浪费 了服务器资源。</p></li><li><p>流水线方式： 客户在收到 HTTP的响应报文之前就能够接着发送新的请求报文。一个接一个的请求报文到 达服务器后，服务器就可连续发回响应报文。使用流水线方式时，客户访问所有的对象只需花费一个 RTT 时间，使 TCP 连接中的空闲时间减少，提高了下载文档效率。</p></li><li><p><strong>http 1.1及以后才支持persistent connection 和pipeline</strong></p></li></ul><h5 id="建立HTTP过程（no-persistent-connection）："><a href="#建立HTTP过程（no-persistent-connection）：" class="headerlink" title="建立HTTP过程（no-persistent connection）："></a>建立HTTP过程（no-persistent connection）：</h5><p>1个HTTP响应对应一个TCP连接</p><ol><li><p>Set up TCP connection from client to server.</p></li><li><p>HTTP client sends a message to the server requesting the page at specified URL using the TCP connection established in <em>step 1</em>.– Request includes the path name.</p></li><li><p>HTTP server receives message via connection socket set up in <em>step</em> 1 and then:</p><p>– retrieves the requested object from its data storage;</p><p>– encapsulates the object in an HTTP response message;</p><p>– sends the response back via the connection socket.</p></li><li><p>HTTP server tells TCP to close connection.</p><p>– TCP doesn’t actually do this until the client has successfully received the response.</p></li><li><p>Client receives message, and the TCP connection terminates.</p></li><li><p>The message tells the client that the response object is an HTML file.</p><p>– Client extracts the file from the response message, parses the HTML file and finds references to other referenced objects.</p></li></ol><p><em>7. Steps 1-5</em> are repeated for each of these referenced objects.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026220929714.png" alt="image-20221026220929714"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026215424833.png" alt="image-20221026215424833" style="zoom:67%;"><p>如果是persistent　connections　所有element　in　HTML都经过这一个TCP传</p><h4 id="HTTP-message-format"><a href="#HTTP-message-format" class="headerlink" title="HTTP  message format"></a><strong>HTTP  message format</strong></h4><p><a href="https://www.cnblogs.com/myseries/p/11239662.html">HTTP报文结构和内容（转） - myseries - 博客园 (cnblogs.com)</a></p><p>HTTP有两种报文：请求报文和响应报文</p><h5 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h5><p>Two key HTTP <strong>request</strong> methods:</p><p>– <strong>GET</strong></p><p>• Query string incorporated in the request URL.</p><p>• Idempotent（幂等性）: multiple requests have the same effect as a single one.</p><p>一次和多次请求某一个资源对于资源本身应该具有同样的结果（关注产生的影响而不是结果），也就是说任意执行对资源本身所产生的影响均与第一次执行的影响相同。<br>注意：（一次和多次结果中）可能返回得到不同的结果，当时并不影响资源</p><p>• Cachable.</p><p>– <strong>POST</strong></p><p>• Query string placed in the body of the HTTP request. 不显示在URL</p><p>• Non-idempotent: e.g. pressing a shopping button twice would result in two orders!</p><p>• Used when e.g. want to alter data on the server-side</p><p>GET 用于获取信息，是无副作用的，是幂等的，且可缓存</p><p> POST 用于修改<a href="https://cloud.tencent.com/product/cvm?from=10680">服务器</a>上的数据，有副作用，非幂等，不可缓存</p><h6 id="GET-message-request"><a href="#GET-message-request" class="headerlink" title="GET message request"></a><strong>GET message request</strong></h6><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/somedir/index.html</span> <span class="token http-version property">HTTP/1.1</span></span><span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">www.qmul.ac.uk</span></span><span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span><span class="token header"><span class="token header-name keyword">User-agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0</span></span><span class="token header"><span class="token header-name keyword">Accept-language</span><span class="token punctuation">:</span><span class="token header-value">fr</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>==第一行叫 request line==</li></ol><p><strong>请求行</strong>由三部分组成：<strong>请求方法</strong>，<strong>请求URL</strong>（不包括域名），<strong>HTTP协议版本</strong>请求方法比较多：<strong>GET、POST、HEAD、PUT、DELETE、OPTIONS、TRACE、CONNECT</strong></p><p>　　最常用的是GET和POST。</p><ol start="2"><li><p>==2-4行都是header line==</p><p>请求头部由关键字/值对组成，每行一对</p><ul><li><p>User-Agent : 产生请求的浏览器类型</p></li><li><p>Connection：设置persistent connect 是否启用</p></li><li><p>Accept : 客户端希望接受的数据类型，比如 Accept：text/xml（application/json）表示希望接受到的是xml（json）类型</p></li><li><p>Content-Type：发送端发送的实体数据的数据类型。<br>  比如，Content-Type：text/html（application/json）表示发送的是html类型。</p></li><li><p>Host : 请求的主机名</p></li></ul></li><li><p>请求头之后是一个空行（<em>extra carriage return（回车） and line feed（换行）</em>），通知服务器以下不再有请求头</p></li></ol><p>通用格式：</p><pre class="line-numbers language-none"><code class="language-none">＜request-line＞ //请求行＜headers＞ //首部行＜blank line＞ //空行 ＜entity body＞ //请求体（只有post有）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>This text is simply written into a socket!</strong></p><h6 id="request-message-format"><a href="#request-message-format" class="headerlink" title="request message format"></a><strong>request message format</strong></h6><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026222400602.png" alt="image-20221026222400602" style="zoom:67%;"><p>使用post时才使用entity body（用户的输入值）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026222434133.png" alt="image-20221026222434133" style="zoom:67%;"><h5 id="A-response-message"><a href="#A-response-message" class="headerlink" title="A response message"></a><strong>A response message</strong></h5><p>　HTTP响应报文和请求报文的结构差不多，也是由四个部分组成：</p><pre class="line-numbers language-none"><code class="language-none">＜status-line＞   //状态行＜headers＞   //消息报头＜blank line＞   //空行＜entity-body＞    //响应体<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-http" data-language="http"><code class="language-http"><span class="token response-status"><span class="token http-version property">HTTP/1.1</span> <span class="token status-code number">200</span> <span class="token reason-phrase string">OK</span></span>Connection : close<span class="token header"><span class="token header-name keyword">Date</span><span class="token punctuation">:</span> <span class="token header-value">Fri, 10th Nov 2000 12:01:14 GMT</span></span><span class="token header"><span class="token header-name keyword">Server</span><span class="token punctuation">:</span> <span class="token header-value">Apache/1.3.0 (Unix)</span></span><span class="token header"><span class="token header-name keyword">Last-Modified</span><span class="token punctuation">:</span> <span class="token header-value">Mon, 20 July 1999 08:44:01 GMT</span></span><span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">5993</span></span><span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">text/html</span></span><span class="token text-html">(data data data ...)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>初始状态行（status line）（服务器HTTP协议版本，响应状态码，状态码的文本描述）</p><p>常用状态码：</p><ol><li>1xx：指示信息，表示请求已接收，继续处理</li><li>2xx：成功，表示请求已被成功接受，处理</li><li>3xx: 重定向，需要进一步的操作以完成请求</li><li>4xx：客户端错误</li><li>5xx：服务器端错误，服务器未能实现合法的请求</li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026222845045.png" alt="image-20221026222845045"></p><p>300:有多个返回对象</p></li></ul><p><strong>response message format</strong><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026222832936.png" alt="image-20221026222832936" style="zoom:67%;"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026222738091.png" alt="image-20221026222738091"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026225818291.png" alt="image-20221026225818291"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026225825791.png" alt="image-20221026225825791"></p><h4 id="IMPORTANT-HEADERS"><a href="#IMPORTANT-HEADERS" class="headerlink" title="IMPORTANT HEADERS"></a><strong>IMPORTANT HEADERS</strong></h4><ul><li><p>Cache-Control 缓存控制</p><p>Holds instructions for caching in both  requests and responses</p><p>服务器使用此Header来向客户端建议缓存策略（是否缓存该响应）</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105143613273.png" alt="image-20221105143613273" style="zoom:67%;"></li><li><p>Etag</p><p>an identifier for a specific version of a resource</p><p>ETag是一个可以与<a href="http://www.hudong.com/wiki/Web">Web</a>资源关联的记号</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105143726676.png" alt="image-20221105143726676" style="zoom:67%;"></li><li><p>Vary</p><p>Allows to determine if a cached response may be returned for a subsequent request</p><p>应该使用一个缓存作为响应还是向源服务器请求一个新的响应</p></li><li><p>Date</p><p>– Shows the timestamp of when the response was generated</p><p>显示生成响应的时间戳</p></li><li><p>Expires</p><p>– Shows the time that the resource expires</p><p>显示资源过期的时间</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221105144243766.png" alt="image-20221105144243766" style="zoom:67%;"></li><li><p>Pragma</p><p>Similar to cache-control (e.g. often used to disable caching)</p></li><li><p>Content-Length</p><p>– Shows the length of the resource in bytes</p></li><li><p>Content-Encoding</p></li></ul><p>  – Describes how the content is encoded, e.g. gzip</p><ul><li><p>Content-Type</p><p>– MIME type of object, e.g. text/html</p><p>MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。</p></li></ul><h5 id="Set-Cookie-Header"><a href="#Set-Cookie-Header" class="headerlink" title="Set-Cookie Header"></a><strong>Set-Cookie Header</strong></h5><p><a href="https://zhuanlan.zhihu.com/p/27669892">认识HTTP—-Cookie和Session篇 - 知乎 (zhihu.com)</a></p><p>Many major websites use cookies. </p><p>Cookie 技术通过在请求和响应报文中写入Cookie 信息来控制客户端的状态。<br>Cookie 会根据从服务器端发送的响应报文内的一个叫做Set-Cookie的首部字段信息，通知客户端保存Cookie。当下次客户端再往该服务器发送请求时，客户端会自动在请求报文中加入Cookie 值后发送出去。服务器端发现客户端发送过来的Cookie 后，会去检查究竟是从哪一个客户端发来的连接请求，然后对比服务器上的记录，最后得到之前的状态信息。</p><ol><li><p>cookie header line of HTTP response message;</p></li><li><p>cookie header line in HTTP request message;</p></li><li><p>cookie file kept on user’s host, managed by user’s browser;</p></li><li><p>backend database at website</p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221026231132043.png" alt="image-20221026231132043"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221027002550840.png" alt="image-20221027002550840"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221027002610744.png" alt="image-20221027002610744"></p><p>When initial HTTP request arrives at site, site creates:</p><ol><li><p>unique ID;</p></li><li><p>entry in backend database for ID</p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221027002325120.png" alt="image-20221027002325120"></p><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a><strong>HTTPS</strong></h3><p>HTTP <strong>S</strong>ecure</p><p>The same as HTTP but</p><p>– Runs over **TLS (Transport Layer Security)**不是基于TCP，基于TLS</p><p>– <strong>Port 443</strong></p><p><strong>All traffic (headers and payloads) are encrypted</strong></p><h5 id="HTTPS-Issues"><a href="#HTTPS-Issues" class="headerlink" title="HTTPS Issues"></a><strong>HTTPS Issues</strong></h5><p>• <strong>Adds extra overhead</strong></p><p>• Increases connection setup time</p><p>– Requires TCP setup + TLS handshake</p><p>Thus, <strong>increases page load time</strong></p><p><em>The security of HTTPS depends on that of the underlying TLS protocol</em></p><p>Moreover, a website that uses mixed protocols (e.g., images served via HTTP, login info via HTTPS) can still make the user vulnerable to attacks/surveillance</p><h3 id="HTTP-2-0"><a href="#HTTP-2-0" class="headerlink" title="HTTP 2.0"></a><strong>HTTP 2.0</strong></h3><p>Initiated by the IETF to design a new version of HTTP</p><p>HTTP 2.0 has had a focus on reducing page load times</p><ul><li>Multiplexing</li></ul><p>– Multiple resources can be requested and fetched in parallel</p><p>可以并行地请求和获取多个资源</p><p>– Prevents “head of line” blocking</p><ul><li>Universal encryption</li></ul><p>– All traffic is encrypted by default</p><p>– Equivalent of running everything over HTTPS</p><ul><li>Server push/hint</li></ul><p>– Server can push resources before being requested</p><p> 服务器可以在请求之前推送资源</p><p>– Server can “hint” that clients fetch resources (e.g. if the server knows the client will need something in the future)</p><p>服务器可以“提示”客户端获取资源(例如，如果服务器知道客户端将来会需要某些东西)</p><ul><li>Content prioritization</li></ul><p>– Specify the preferred order and priority that server transfers resources to clie</p><p>指定服务器向客户端传输资源的首选顺序和优先级</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> ANP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1-Threads and Concurrency in Java（上）</title>
      <link href="//post/1.1-Threads%20and%20Concurrency%20in%20Java%EF%BC%88%E4%B8%8A%EF%BC%89.html"/>
      <url>//post/1.1-Threads%20and%20Concurrency%20in%20Java%EF%BC%88%E4%B8%8A%EF%BC%89.html</url>
      
        <content type="html"><![CDATA[<h1 id="Threads-and-Concurrency-in-Java（上）"><a href="#Threads-and-Concurrency-in-Java（上）" class="headerlink" title="Threads and Concurrency in Java（上）"></a>Threads and Concurrency in Java（上）</h1><h2 id="1-Jvm-is-a-process"><a href="#1-Jvm-is-a-process" class="headerlink" title="1. Jvm is a process"></a>1. Jvm is a process</h2><blockquote><p>A <strong>Java</strong> application runs by default in one <strong>process</strong>(java 一般在一个进程里运行)</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220830100327857.png" alt="image-20220830100327857"></p><blockquote><p>Within a Java application, you work with several <strong>threads</strong> to achieve pseudo-parallel processing or asynchronous behaviour. You can take advantage of different cores.</p></blockquote><p>对于<strong>多核</strong>的CPU电脑来说，真正的多线程并行是没问题的。</p><p><strong>单核</strong>的CPU表示只有一个大脑：不能够做到真正的多线程并发，但是可以做到给人一种“多线程并发”的感觉。</p><p>(pseudo parallel)</p><p>对于单核的CPU来说，在某一个时间点上实际上只能处理一件事情，但是由于CPU的处理速度极快，多个线程之间频繁切换执行，给别人的感觉是：多个事情同时在做！！！</p><blockquote><p>The starting point of a Java program is the <strong>main</strong> method</p></blockquote><p>main()是主线程的入口。</p><p>对于java程序来说，当在DOS命令窗口中输入：java HelloWorld 回车之后。会先启动JVM，而JVM就是一个进程。JVM再启动一个主线程调用main方法（main方法就是主线程）。同时再启动一个垃圾回收线程负责看护，回收垃圾。最起码，现在的java程序中至少有两个线程并发，一个是 垃圾回收线程，一个是 执行main方法的主线程。</p><h2 id="2-Processes-and-Threads"><a href="#2-Processes-and-Threads" class="headerlink" title="2. Processes and Threads"></a>2. Processes and Threads</h2><h4 id="Processes"><a href="#Processes" class="headerlink" title="Processes"></a>Processes</h4><p>A <em>process</em> runs independently and <strong>isolated</strong> from other processes. </p><p>A <em>process</em> cannot directly access shared data in other processes.</p><p>进程A和进程B的 <strong><code>内存独立不共享</code></strong>, 无法共享资源，但可以通过socket或者http通信</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220829181419255.png" alt="image-20220829181419255"></p><p><strong>The resources of the process, e.g. memory and CPU time, are</strong> <strong>allocated to it via the operating system.</strong></p><h4 id="thread"><a href="#thread" class="headerlink" title="thread"></a><em>thread</em></h4><p>A <em>thread</em> is a “<strong>lightweight process</strong>”.</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220830101159367.png" alt="image-20220830101159367" style="zoom: 50%;"><ol><li><p>Each has its own call <strong>stack</strong> </p></li><li><p>Can access <strong>shared data</strong> of other threads <strong>in the same process</strong>.</p></li><li><p>Every thread has its own <strong>memory cache</strong>.</p></li><li><p>If a thread reads <strong>shared data</strong>, it stores this data in its <strong>own memory cache</strong>. A thread can <strong>re‐read the shared data</strong></p></li></ol><p>线程A和线程B，**<code>堆内存</code>** 和 <strong><code>方法区</code></strong> 内存<strong>共享</strong>。但是 <strong><code>栈内存</code></strong> <strong>独立</strong>，<strong>一个线程一个栈</strong>。</p><h2 id="3-Key-Concepts-in-concurrent-programming"><a href="#3-Key-Concepts-in-concurrent-programming" class="headerlink" title="3. Key Concepts in concurrent programming"></a>3. Key Concepts in concurrent programming</h2><h4 id="lt-1-gt-Atomicity（原子的）"><a href="#lt-1-gt-Atomicity（原子的）" class="headerlink" title="<1> Atomicity（原子的） :"></a>&lt;1&gt; Atomicity（原子的） :</h4><p>• An operation is said <strong>atomic</strong> when it cannot be interrupted. </p><p>• Once it starts is <strong>always</strong> completes </p><p>• One example assignment a = 5</p><p>a++可拆所以不是原子的</p><blockquote><p><strong>Non‐atomic operation:</strong> It <em>can</em> be interrupted</p><p><strong>Atomic operation:</strong> It <em>cannot</em> be interrupted</p></blockquote><h4 id="lt-2-gt-Visibility-可见性"><a href="#lt-2-gt-Visibility-可见性" class="headerlink" title="<2>**Visibility **(可见性)"></a>&lt;2&gt;**Visibility **(可见性)</h4><p>可见性是一个线程对共享变量的修改，对于另一个线程来说是否是可以看到的。</p><p><a href="https://blog.csdn.net/fu123123fu/article/details/79794017">线程间的可见性</a></p><h4 id="lt-3-gt-Order-of-execution-有序性"><a href="#lt-3-gt-Order-of-execution-有序性" class="headerlink" title="<3>Order of execution(有序性) :"></a>&lt;3&gt;Order of execution(有序性) :</h4><p><strong>The order of execution is not guaranteed !</strong></p><p>无法保证多个线程的执行顺序</p><h4 id="lt-4-gt-Critical-code"><a href="#lt-4-gt-Critical-code" class="headerlink" title="<4> Critical code:"></a>&lt;4&gt; Critical code:</h4><p>– A part of code that must only be executed by a single thread at one time</p><h2 id="4-Two-methods-of-creating-threads"><a href="#4-Two-methods-of-creating-threads" class="headerlink" title="4. Two methods of creating threads"></a>4. Two methods of creating threads</h2><p><strong>Two ways</strong> of giving the Thread the run method</p><ol><li><p>Passing your class (object )(with a run() method) into a new Thread object</p></li><li><p><strong>Extending</strong> the Thread class</p></li></ol><h4 id="lt-1-gt-Useing-Runnable-interface"><a href="#lt-1-gt-Useing-Runnable-interface" class="headerlink" title="<1> Useing Runnable interface"></a>&lt;1&gt; Useing Runnable interface</h4><ol><li><h5 id="Runnable"><a href="#Runnable" class="headerlink" title="Runnable:"></a>Runnable:</h5>Runnable is an <strong>Interface</strong> that requires you to implement a run() method</li></ol><p>must implement(override) run() , which includes the code needs to be executed in this thread</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.定义一个实现Runnable的实现类</span><span class="token comment">//2.重写run()方法</span><span class="token comment">//3.创建实现类对象</span><span class="token comment">//4.将实现类对象作为参数传入Thread类的构造方法</span><span class="token comment">//5.开启线程</span><span class="token keyword">public</span> <span class="token keyword">class</span> construct_Thread_2 <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">MyRunnable</span> mr<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> mt<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>mr<span class="token punctuation">)</span><span class="token punctuation">;</span>        mt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"bbbbbbbb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aaaaa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">ThreadsLecture1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">25</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>                   thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Thread "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//设置线程名字</span>            thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//用start开启线程（不是run）</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">String</span> threadName <span class="token operator">=</span>  <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">//获取当前线程名字</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"I'm running in thread‐"</span> <span class="token operator">+</span> threadName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><h5 id="Using-anonymous-inner-class"><a href="#Using-anonymous-inner-class" class="headerlink" title="Using anonymous inner class:"></a>Using anonymous inner class:</h5></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// stuff here</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>run() 不会启动线程，只是普通的调用方法而已。不会分配新的分支栈。（这种方式就是单线程。）start() 方法的作用是：启动一个分支线程，在JVM中开辟一个新的栈空间，这段代码任务完成之后，瞬间就结束了。这段代码的任务只是为了开启一个新的栈空间，只要新的栈空间开出来，start()方法就结束了。线程就启动成功了。<br>启动成功的线程会自动调用run方法，并且run方法在分支栈的栈底部（压栈）。run方法在分支栈的栈底部，main方法在主栈的栈底部。run和main是平级的。</p><h4 id="lt-2-gt-Using-Thread-class"><a href="#lt-2-gt-Using-Thread-class" class="headerlink" title="<2>Using Thread class"></a>&lt;2&gt;Using Thread class</h4><ol><li><h5 id="Thread-class"><a href="#Thread-class" class="headerlink" title="Thread class"></a>Thread class</h5></li></ol><p>The <strong>Thread</strong> class is responsible for executing your stuff in a thread.</p><p>Your stuff is encapsulated in a <strong>run()</strong> method.</p><p>And the Thread class <strong>manages</strong> the running of the thread</p><ol><li><p>Write a class that <strong>extends</strong> the Thread class</p></li><li><p><strong>Override</strong> the <strong>run()</strong> method and insert all <em>your code</em></p></li><li><p>You then tell Java to <strong>execute</strong> your extended Thread class</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1.继承Thread</span><span class="token comment">//2.重写run方法</span><span class="token comment">//3.创建Thread子类对象</span><span class="token comment">//4.start方法开启线程</span><span class="token keyword">public</span> <span class="token keyword">class</span> construct_Thread_1<span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Mythread</span> mt <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Mythread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mt<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"777777"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Mythread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"5555"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-3-gt-which-one-is-better"><a href="#lt-3-gt-which-one-is-better" class="headerlink" title="<3> which one is better"></a>&lt;3&gt; which one is better</h4><p> Implement the Runnable interface </p><ol><li><p>With Method 2, you can only extend Thread. <strong>No other classes can be inherited by MyThread</strong>. Because Java only allows a class to extend one superclass</p></li><li><p>Using the Runnable interface allows a subclass of Thread to be used if required（”多继承”）</p></li></ol><h4 id="lt-4-gt-原理"><a href="#lt-4-gt-原理" class="headerlink" title="<4>原理"></a>&lt;4&gt;原理</h4><blockquote><p>Thread has two constructors: one with no parameters, one with a runnable parameter</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220906152652231.png" alt="image-20220906152652231"></p><ul><li><strong>target</strong> is the name of the parameter of type Runnable in the Thread constructor</li><li>有target用target的run(),无target用自己的</li><li>the run() method in thread class:</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        target<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Controlling-threads"><a href="#Controlling-threads" class="headerlink" title="Controlling threads"></a>Controlling threads</h2><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h4><p> Can make a thread（this.currentThread()返回的thread） sleep for a certain <strong>number of</strong> <strong>milliseconds.</strong> </p><p>阻塞调用该方法的线程(运行态变为阻塞态)，让出CPU资源，让其他线程竞争CPU资源；sleep时间结束后进入就绪状态，重新竞争CPU资源（与其他线程随机占用cpu）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">long</span> millis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>You can only make the <strong>current</strong> Thread sleep </p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>You <strong>cannot</strong> choose another thread you want to  sleep</p></blockquote><p> The thread will then **pause (<strong>suspend</strong>)**该线程将会被挂起</p><p>This will <strong>free up</strong> CPU time for <strong>other threads</strong></p><p>需要抛出异常InterruptedException</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>InterruptedException</p><p>This exception is thrown when a thread is <strong>interrupted</strong></p></li></ul><h4 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h4><p>礼让线程让出cpu  Allows other threads to take <strong>priority</strong></p><p>the executing thread is <strong>suspended</strong> and the CPU is given to <strong>some other runnable thread</strong>. </p><blockquote><p>This thread will <strong>wait</strong> until the CPU becomes <strong>available again</strong>. the executing thread is returned to the ready <strong>queue</strong> of the processor（处理器） and <strong>waits for its next turn.</strong></p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220912221152815.png" alt="image-20220912221152815"></p><p>不会有interruptedException：不会被打断</p><h4 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt()"></a>interrupt()</h4><p>Every Thread object contains an <strong>interrupt flag</strong> variable(boolean)</p><p>interrupt() 方法只是改变中断状态而已，它不会中断一个正在运行的线程。</p><p><strong>Other threads</strong> may change this flag to interrupt the thread</p><p>The programmer decides how a thread <strong>responds</strong> to an interrupt</p><p>只是改变一个标志值，具体是否interrupt还看程序员怎么处理interrupt flag</p><p> <strong>t1.interrupt()</strong>, where t1 is the target thread we want to interrupt </p><ul><li>Methods(指自己定义的方法) should check this flag</li></ul><ol><li><p>If <strong>true</strong>: finish the method immediately (i.e. return)</p></li><li><p>If <strong>false</strong>: continue as normal</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token class-name">MyThead</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该段代码是只更改标记但实际并未中断，因为run方法内未人为的check interrupt flag</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">try</span><span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">Finished</span><span class="token operator">!</span>"<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">I</span>’m interrupted<span class="token operator">!</span>”<span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>                   <span class="token punctuation">}</span>                   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">MyThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>t1<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Exception handled "</span><span class="token operator">+</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码使用sleep方法，该方法内部封装了check interrupt flag的过程，所以抛出异常，真正实现中断</p></li></ol><h5 id="How-to-interrupt-a-thread"><a href="#How-to-interrupt-a-thread" class="headerlink" title="How to interrupt a thread"></a><strong>How to interrupt a thread</strong></h5><ol><li><p>thread.interrupt() sets the interrupted <strong>flag</strong> </p></li><li><p>Blocking methods, such Thread.sleep(), try to detect when a thread has been interrupted and return early. </p></li><li><p>They respond to interruption by clearing the <strong>setting the flag to false</strong> and throwing InterruptedException.</p></li></ol><p>先睡眠后打断，则直接打断睡眠，并且清除停止状态值，使之变成false：</p><h5 id="Why-might-we-want-to-interrupt-a-thread"><a href="#Why-might-we-want-to-interrupt-a-thread" class="headerlink" title="Why might we want to interrupt a thread?"></a><strong>Why might we want to interrupt a thread?</strong></h5><ol><li>It is likely doing something that’s taking too long</li></ol><p><strong>2.  Blocking</strong> is when a thread is prevented from doing anything</p><p><strong>3. What if we were waiting for a thread to complete, but it had gone</strong> <strong>to sleep?</strong></p><p>​     We might want to interrupt() it so we can continue</p><h5 id="Interrupting-a-Thread"><a href="#Interrupting-a-Thread" class="headerlink" title="Interrupting a Thread:"></a>Interrupting a Thread:</h5><p>• If any thread is in <strong>sleeping</strong> or <strong>waiting</strong> state (i.e. sleep() or wait() is invoked), calling the <strong>interrupt</strong>() method on the thread, breaks out the sleeping or waiting state <strong>throwing InterruptedException</strong>. </p><p>如果线程被Object.wait, Thread.join和Thread.sleep三种方法之一阻塞，此时调用该线程的interrupt()方法，那么该线程将抛出一个 InterruptedException中断异常（该线程必须事先预备好处理此异常），从而提早地终结被阻塞状态。</p><p>• If the thread is not in the sleeping or waiting state, calling the interrupt() method performs normal behaviour and doesn’t interrupt the thread <strong>but sets the interrupt flag to true</strong>. </p><p>如果线程没有被阻塞，这时调用 interrupt()将不起作用，只会改变flag的值</p><p><strong>调用interrupt()方法，立刻改变的是中断状态，但如果不是在阻塞态，就不会抛出异常；如果在进入阻塞态后，中断状态为已中断，就会立刻抛出异常</strong></p><h5 id="The-3-methods-provided-by-the-Thread-class-for-interrupting-a-thread"><a href="#The-3-methods-provided-by-the-Thread-class-for-interrupting-a-thread" class="headerlink" title="The 3 methods provided by the Thread class for interrupting a thread"></a>The 3 methods provided by the Thread class for interrupting a thread</h5><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public void interrupt()    //不是静态方法public static boolean interrupted()    //测试当前线程是否中断。 该方法可以清除线程的中断状态 。 换句话说，如果这个方法被连续调用两次，那么第二个调用将返回falsepublic boolean isInterrupted()    //获取当前中断标志<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="概括interrupt-mechanism"><a href="#概括interrupt-mechanism" class="headerlink" title="概括interrupt mechanism"></a>概括interrupt mechanism</h5><ul><li><p>Invoking interrupt on a target thread sets interrupt flag</p></li><li><p>A thread may check for an interrupt (<strong>by itself</strong>) by invoking the <strong>static</strong> method <strong>Thread.interrupted()</strong>(<strong>then automatically</strong> <strong>cleared</strong>)</p><p>Thread.interrupted()是静态方法，只能判断当前线程是否interrupt</p></li><li><p>one thread can check the interrupt status of <strong>another</strong> by using the <strong>non-static isInterrupted()</strong>(not clear the flag)</p><p>isInterrupted()是成员方法，可以在一个进程里判断另一个进程是否interrupt</p></li></ul><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>用来<strong>coordinate threads</strong></p><blockquote><p>use the <strong>join()</strong> method of the Thread class which will <strong>pause</strong> until the other thread has <strong>finished</strong></p></blockquote><p>也会抛出InterruptedException异常</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>thread2<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该段代码所在线程必须等待thread2执行完毕才能重新竞争cpu</p><h4 id="isAlive"><a href="#isAlive" class="headerlink" title="isAlive()"></a>isAlive()</h4><p>判断线程是否存活</p><p>alive ：started but not dead(正在运行或者runnable)</p><h2 id="3-ways-to-terminate-a-thread"><a href="#3-ways-to-terminate-a-thread" class="headerlink" title="3 ways to terminate a thread"></a>3 ways to terminate a thread</h2><h3 id="Method-1-finish-the-thread-naturally"><a href="#Method-1-finish-the-thread-naturally" class="headerlink" title="Method 1: finish the thread naturally"></a><strong>Method 1: finish the thread naturally</strong></h3><ol><li><p>doing nothing</p></li><li><p>use a  <strong>shared Boolean</strong></p><p>使用退出标识使线程退出</p><p>变量用volatile修饰，保证了不同线程对共享变量操作的可见性，也就是说一个线程修改了 volatile 修饰的变量，当修改后的变量写回主内存时，其他线程能立即看到最新值。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//Do something..</span><span class="token comment">//Finish naturally…</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">boolean</span> pleaseFinish <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//Periodically check for pleaseFinish to be</span><span class="token comment">// set to true</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finishThreadPlease</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>pleaseFinish <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>If a thread is in a non-runnable state, setting a stop flag variable will have no effect! </p></li><li><p>A thread is in a non-runnable state if</p></li></ul><p>​            – Its <strong>sleep</strong> method is invoked</p><p>​           – The thread calls the <strong>wait</strong> method to wait for a specific condition to be satisfied</p><p>​           – The thread is <strong>blocking</strong> on I/O</p><h3 id="Method-2-daemon（守护）-threads"><a href="#Method-2-daemon（守护）-threads" class="headerlink" title="Method 2: daemon（守护） threads"></a><strong>Method 2: daemon（守护） threads</strong></h3><p>守护线程类似保姆，进程中所有用户线程parent thread结束后守护线程也没有必要存在，自动销毁(如 GC)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">myThread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– The worker thread <strong>continues</strong> to run after the parent thread has finished</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">myThread<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– The worker thread <strong>terminates</strong> when the parent thread terminates</p><blockquote><p>setDeamon() before starting the thread</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token class-name">WorkerThread</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WorkerThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">setDaemon</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//Do Something…</span><span class="token comment">//this thread completes</span><span class="token comment">//t1 will also be terminated</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Method-3-interrupt-the-thread"><a href="#Method-3-interrupt-the-thread" class="headerlink" title="Method 3: interrupt the thread"></a><strong>Method 3: interrupt the thread</strong></h3><p>By catching an InterruptedException and then stop the thread</p><blockquote><p>thread.interrupt()will <strong>not</strong> <strong>automatically</strong> stop a thread unless <strong>you</strong> <strong>programme it</strong> to do so</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> importantInfo<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token keyword">try</span> <span class="token punctuation">{</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>importantInfo<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> an InterruptedException is **only **automatically thrown when in sleep() or wait() ，hava to throw it manuly</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//Do nothing…</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//不知道什么意义，但熟悉一下用法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isInterrupted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//Doing some heavy operations </span><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Thread-状态"><a href="#Thread-状态" class="headerlink" title="Thread 状态"></a>Thread 状态</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220920221135441.png" alt="image-20220920221135441"></p><ol><li><p>新建( new )<br>当新建一个线程后，该线程处于新建状态，此时它和 Java对象一样，仅仅由Java 虚拟机为其分配内存空间，并初始化成员变量。同时已经有了相应的内存空间和其他资源，但是尚未运行start(）方法。</p></li><li><p>就绪（Runnable )<br>当线程有资格运行，但调度程序还没有把它选定为运行线程时线程所处的状态。当start()方法调用时,线程首先进人就绪状态。在线程运行之后或者从阻塞状态回来后，也返回到就绪状态。</p></li><li><p>运行（ Running )<br> 线程创建之后就具备了运行条件，当Java虚拟机(JVM)将CPU的使用权切换给该线程时,此线程就开始了自己的生命周期,Thread类的子类中的run()方法就会立即执行。</p></li></ol><p>  当一个线程进入“运行”状态下，并不代表它可以一直执行到run()结束。因为事实上它只是加入此应用程序执行安排的队列中，正在等待分享CPU资源，也就是等候执行权，在何时给予线程执行权则由JVM决定，同时也由线程的优先级决定。</p><ol start="4"><li><p>阻塞（ Blocked )<br>阻塞状态是线程因为某种原因放弃CPU使用权，暂时停止运行。直到线程进入就绪状态，才有机会转到运行状态。</p><p>运行的线程执行wait()方法，JVM会把该线程放入等待池中。运行的线程执行sleep()或join()方法，或者发出了IO 请求时，JVM 会把该线程置为阻塞状态。当sleep()状态超时、join()等待线程终止或者超时、或者I/O处理完毕时，线程重新转入就绪状态。</p></li><li><p>死亡(Dead )<br>处于死亡状态的线程不具有继续运行的能力，线程的死亡有两种，一种是正常运行的线程完成了它全部工作(run()方法中全部语句)，另一种是线程被提前强制终止，即强制run()方法结束。所谓死亡状态就是线程释放了分配给线程对象的内存。不要试图对死亡的线程调用start()方法来启动它,死亡线程不可能再次运行。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> ANP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.2-Threads and Concurrency in Java（下）</title>
      <link href="//post/1.2-Threads%20and%20Concurrency%20in%20Java%EF%BC%88%E4%B8%8B%EF%BC%89.html"/>
      <url>//post/1.2-Threads%20and%20Concurrency%20in%20Java%EF%BC%88%E4%B8%8B%EF%BC%89.html</url>
      
        <content type="html"><![CDATA[<h1 id="Threads-and-Concurrency-in-Java（下）"><a href="#Threads-and-Concurrency-in-Java（下）" class="headerlink" title="Threads and Concurrency in Java（下）"></a>Threads and Concurrency in Java（下）</h1><h2 id="volatile-variables-and-locks"><a href="#volatile-variables-and-locks" class="headerlink" title="volatile variables and locks"></a><strong>volatile variables and locks</strong></h2><h3 id="Volatile"><a href="#Volatile" class="headerlink" title="Volatile"></a><strong>Volatile</strong></h3><p><strong>Volatile</strong> helps Java keep variable <strong>safe</strong></p><p>Volatile is used to indicate that a variable’s value will be <strong>modified by different threads</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Access to the variable is only given to one thread at a time</p><p>The load, store, read, and write actions on volatile variables are atomic</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220924214404893.png" alt="image-20220924214404893" style="zoom:50%;"><h4 id="常见坑："><a href="#常见坑：" class="headerlink" title="常见坑："></a>常见坑：</h4><ol><li><p>declare arr[] as volatile means that the <strong>reference</strong> to the array is <strong>volatile</strong> individual <strong>field</strong> accesses (e.g., arr[5]) are <strong>not</strong> <strong>thread-safe</strong> </p></li><li><p><em>volatile</em>不保证原子性，只保证可见性</p></li></ol><ul><li><p><strong>Unary operations (++, –)</strong> <strong>aren’t atomic</strong> <strong>NOT SAFE</strong></p><p>举例：一百个线程每个从1加到100；</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220925104005004.png" alt="image-20220925104005004"></p><p>因为count++是非原子性的：可以分解为</p><ul><li><p>从主内存中读取数据到工作内存</p></li><li><p>对工作内存中的数据进行++操作</p></li><li><p>将工作内存中的数据写回到主内存</p><p>在某一个时刻对某一个操作的执行，有可能被其他的线程打断。</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220925104223829.png" alt="image-20220925104223829"></p><p>假设此时count=100</p><p>A线程读取数据后（还未自增）此时CPU切换到B, B线程也读取数据,此时AB线程分别进行自增操作，B返回给主内存101，而A也返回主线程101，也就是说两次加一的过程对结果只改变了1</p><p>count加volatile修饰后也是如此</p><ol start="3"><li>If you set a variable to volatile:</li></ol><p>– <strong>The value of this variable will never be cached thread-locally</strong></p><p>– All reads and writes will go straight to “main memory”;</p><p>（可见性）</p><p>不同线程之间也不能直接访问对方工作内存中的变量，线程间变量的值的传递需要通过主内存中转来完成。</p><p>用volatile定义的变量会在程序外被改变,每次都必须从主内存中读取，而不能重复使用放在cache或寄存器中的备份。</p><h4 id="When-not-to-use-volatile"><a href="#When-not-to-use-volatile" class="headerlink" title="When not to use volatile"></a><strong>When not to use volatile</strong></h4><ul><li><p>Volatile is not necessary for fields that declared <strong>final</strong></p><p>final 不用 volatile</p></li><li><p>Volatile is not necessary for variables that are accessed by <strong>only one thread</strong></p></li></ul><p>私有内存中，不共享</p><ul><li><strong>Volatile</strong> is not suitable for <strong>complex operations</strong></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220925145509859.png" alt="image-20220925145509859"></p><p>无法保证原子性</p><h3 id="Thread-safe-code"><a href="#Thread-safe-code" class="headerlink" title="Thread safe code"></a><strong>Thread safe code</strong></h3><p>Two threads should not manipulate the same variable at the same time without being protected against <strong>mistakes</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220925150144863.png" alt="image-20220925150144863"></p><p>线程中私有变量不会发生线程安全问题</p><p><strong>成员变量和静态变量是否线程安全？</strong></p><p>如果它们没有共享，则线程安全</p><p>如果它们被共享了，根据它们的状态是否能够改变，又分两种情况</p><p>如果只有读操作，则线程安全</p><p>如果有读写操作，则这段代码是临界区，需要考虑线程安全</p><p><strong>局部变量是否线程安全？</strong></p><p>局部变量是线程安全的</p><p>但局部变量引用的对象则未必</p><p>如果该对象没有逃离方法的作用范围，它是线程安全的</p><p>如果该对象逃离方法的作用范围，需要考虑线程安全</p><h3 id="Critical-sections"><a href="#Critical-sections" class="headerlink" title="Critical sections"></a><strong>Critical sections</strong></h3><blockquote><p>The code segments within a program that access the same data from within separate, <strong>concurrent</strong> threads are known as <strong>critical</strong> <strong>sections</strong></p></blockquote><p>In the Java language, you mark critical sections (e.g., methods) in your program with the <strong>synchronized</strong> keyword</p><p>用synchronized 标记临界区</p><p>• A <strong>synchronized</strong> section can only be accessed by <strong>a single thread at any give</strong> <strong>time</strong></p><p>在一段时间内只能被一个线程访问（原子的）多个线程会进行排队 </p><p><strong>We use locks to control/restrict access to critical sections</strong></p><h3 id="locks"><a href="#locks" class="headerlink" title="locks"></a><strong>locks</strong></h3><p>In Java, there are two types of locks:</p><p>– <strong>Intrinsic</strong> locks (the type locks we’ll talk about here) - every object can function as a lock that is triggered using the keyword <strong>synchronized</strong></p><p>– Extrinsic locks (not covered)</p><ul><li><p>A lock applies to a particular <strong>section of code</strong> If the code is locked, <strong>no other thread can</strong> <strong>execute it</strong></p></li><li><p>If the code is unlocked（ <strong>release the lock</strong>）, <strong>any thread</strong> can take the lock and execute it</p></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220925152455066.png" alt="image-20220925152455066" style="zoom:50%;"><h4 id="synchronized-methods同步方法"><a href="#synchronized-methods同步方法" class="headerlink" title="synchronized methods同步方法"></a>synchronized methods同步方法</h4><p>If you have <strong>two</strong> methods with the synchronized keyword（同步方法）</p><p>– <strong>only one method of the two will be executed at</strong> <strong>the same time</strong> </p><p>一次只能运行一个方法（printer1运行完，printer2才会运行）[不可能有两个线程同时运行这两个方法，因为这两个方法具有同一个锁]</p><p>– because the <strong>same lock</strong> is used for all methods in an object（都为this）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">printer1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上述代码为同步方法的写法，其锁为this所指对象（不用手动添加）</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">class Printer {//非静态同步方法锁对象是this指代的对象    public synchronized void printer1() { //同步方法            System.out.print("1");            System.out.print("2");            System.out.print("3");            System.out.print("4");            System.out.print("5");            System.out.println();    }    public void printer2() {        synchronized (this) {            System.out.print("a");            System.out.print("b");            System.out.print("c");            System.out.print("d");            System.out.print("e");            System.out.println();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="synchronized-statements同步代码块-Explicit-use"><a href="#synchronized-statements同步代码块-Explicit-use" class="headerlink" title="synchronized statements同步代码块-Explicit use"></a>synchronized statements同步代码块-<strong>Explicit use</strong></h4><p>非静态方法（锁为this）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span> <span class="token keyword">private</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getNextValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> value<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态方法（锁为Class object类字节码对象 <strong>类名.class</strong>）</p><p>– synchronized (getClass()) {…} </p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java"> public static void printer2() {        synchronized (Printer.class) {            System.out.print("a");            System.out.print("b");            System.out.print("c");            System.out.print("d");            System.out.print("e");            System.out.println();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> synchronized statements must specify the object that provides the intrinsic lock</p><p>For the <strong>majority of your Java programming purposes, it’s</strong> <strong>best to use synchronized only at the method level</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220925160934441.png" alt="image-20220925160934441"></p><h4 id="Scope-of-a-lock"><a href="#Scope-of-a-lock" class="headerlink" title="Scope of a lock"></a><strong>Scope of a lock</strong></h4><p>The time between when the lock is taken and when the lock is released</p><p><strong>determined by segments of code</strong></p><blockquote><p><strong>locks apply to objects not methods</strong></p><p>锁作用于对象而非方法</p></blockquote><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220925161605960.png" alt="image-20220925161605960" style="zoom:67%;"><p>创建一个锁对象（任意一个对象可以当作锁）：</p><p>只有两段代码使用相同锁才能同步</p><p>线程同步的真实意思，其实是“排队”：几个线程之间要排队，一个一个对共享资源进行操作，而不是同时进行操作。所以我们用同步机制来解决这些问题，加入同步锁以避免在该线程没有完成操作之前，被其他线程的调用，从而保证了该变量的唯一性和准确性。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220925161709603.png" alt="image-20220925161709603" style="zoom:50%;"><p><strong>synchronized method call another non synchronized/synchronized(same object) method</strong></p><p>• Each lock acts as a counter</p><p>– if counter is not 0 on entry to a synchronized method or block because another thread holds the lock, the current thread is blocked until the count is 0</p><p>– on entry the counter is incremented</p><p>– on return or exit by an exception the counter is decremented</p><ul><li>Any method or code block marked as <strong>synchronized is executed entirely</strong></li></ul><p>​    – Unless explicitly suspended by a <em>wait</em> (see later) </p><p>   – Other threads are <strong>blocked</strong> until the synchronized block can complete</p><ul><li><p>If a method is <strong>not</strong> marked as synchronized then it can be executed immediately</p><p>– Even when another method, even a synchronized method, of the object is executing</p><blockquote><p><strong>The synchronized qualifier is not automatically inherited</strong></p></blockquote></li></ul><h3 id="Synchronized-vs-volatile"><a href="#Synchronized-vs-volatile" class="headerlink" title="Synchronized vs volatile"></a><strong>Synchronized vs volatile</strong></h3><blockquote><p>Only a <strong>primitive</strong> variable may be declared <strong>volatile</strong></p><p>修饰引用类型变量，并不会让其引用的元素都保证可见</p></blockquote><p> Access to a volatile variable <strong>never</strong> has the potential to block</p><p>多线程访问volatile不会发生阻塞，而sychronized会出现阻塞。</p><p>A synchronized method can protect more complex code</p><h3 id="MONITORS"><a href="#MONITORS" class="headerlink" title="MONITORS"></a><strong>MONITORS</strong></h3><p>A lock that supports <strong>Cooperation</strong> through the wait() &amp; notify() methods is called a <strong>Monitor</strong></p><ul><li><p>Using <strong>synchronized</strong> creates the <strong>lock</strong> to protect the critical section of the code</p></li><li><p>Calling <strong>wait</strong>() on an object <strong>pauses</strong> a thread and puts it in a <strong>wait set</strong> (the set of threads waiting for the lock to become free)提前结束线程</p></li><li><p>Calling <strong>notify</strong>() on that object <strong>re-awakens</strong> a thread from the <strong>wait set</strong></p><h4 id="mechanism："><a href="#mechanism：" class="headerlink" title="mechanism："></a>mechanism：</h4></li></ul><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010083459376.png" alt="image-20221010083459376" style="zoom:67%;"><p>• In the center, a large rectangle contains a <strong>single <strong>thread, the lock <strong>owner</strong>（</strong>Notice only one active thread</strong>）</p><p>• On the left, a small rectangle contains the <strong>entry set</strong></p><p>• <strong>Active</strong> threads are shown as <strong>dark grey circles</strong></p><p>• Suspended (sleeping) threads are shown as <strong>light</strong> <strong>grey circles</strong></p><ol><li><p>线程进入同步方法中：</p><p>Threads entering a lock region are placed into an entry set for the associated monitor</p></li><li><p>为了继续执行临界区代码，线程必须获取 Monitor 锁。如果获取锁成功，将成为该监视者对象的拥有者。任一时刻内，监视者对象只属于一个活动线程（The Owner）</p><p>If no other thread is waiting in the entry set and no other thread currently owns the lock, the thread acquires the lock and continues executing the lock region</p></li><li><p>拥有监视者对象的线程可以调用 wait() 进入等待集合（Wait Set），同时释放监视锁，进入等待状态。</p></li><li><p>其他线程调用 notify() / notifyAll() 唤醒等待集合中的线程，这些等待的线程需要<strong>重新获取监视锁后</strong>才能执行 wait() 之后的代码。</p></li><li><p>同步方法执行完毕了，线程退出临界区，并释放监视锁。</p><p>When the thread finishes executing the lock region, it exits (and releases) the lock</p></li></ol><h4 id="Monitor-Vs-lock"><a href="#Monitor-Vs-lock" class="headerlink" title="Monitor Vs lock ?"></a>Monitor Vs lock ?</h4><p>Using the synchronized keyword ensures mutual exclusion</p><p><strong>A monitor also allows cooperation</strong> <strong>between threads</strong></p><p>– Allows threads to pause their execution and notify other threads of events</p><h4 id="wait-notify-notifyAll"><a href="#wait-notify-notifyAll" class="headerlink" title="wait(); notify(); notifyAll()"></a><em>wait(); notify(); notifyAll()</em></h4><p>这三个方法都是锁对象调用的（都是object类中方法）</p><ul><li><p><strong>wait（）:</strong> If a thread executing a <strong>synchronized</strong> method determines that it <strong>cannot</strong> <strong>proceed,</strong> then it may put itself into a <strong>waiting state</strong> by calling <em>wait</em>. This releases the thread’s <strong>lock</strong> on the <strong>shared object</strong> and <strong>allows other</strong> <strong>threads</strong> to obtain the lock. </p><p>当某个线程获取到锁后，可以调用<strong>对象锁的wait</strong>方法，进入等待状态。同时，wait()也会让当前线程释放它所持有的锁。</p><p>A call to <em>wait</em> may lead to an <strong>InterruptedException</strong>, which must either be <strong>caught</strong> or <strong>declared</strong> to be thrown by the containing (synchronized) method.</p></li><li><p><strong>notify（）:</strong> When a synchronized method reaches <strong>completion</strong>, a call may be made to <strong>notify</strong>, which will ‘wake up’ a thread that is in the waiting state. </p><p>其他线程调用此对象的 notify() 方法或 notifyAll() 方法”，当前线程被唤醒(进入“就绪状态”)  notify()是唤醒单个线程，而notifyAll()是唤醒所有的线程。</p><p>Since there is <strong>no way</strong> of specifying which thread is to be woken, this is only really appropriate if there <strong>is only one waiting thread</strong>. </p><p>notify被唤醒的线程是随机的，所以通常是没办法指定是谁被唤醒。</p></li></ul><p>If <strong>all threads</strong> waiting for a lock on a given object are to be woken, then we use <strong>notifyAll</strong>. </p><blockquote><p>However, there is still no way of determining which thread gets control of the object. <strong>The JVM will make this decision</strong>.</p></blockquote><blockquote><p>Methods <strong>wait</strong>, <strong>notify</strong> <strong>and</strong> <strong>notifyAll</strong> may only be called when the <strong>current thread</strong> has a <strong>lock</strong> on the object (i.e., from within a <strong>synchronized</strong> method or from within a method that has been called by a <strong>synchronized</strong> method). </p></blockquote><blockquote><p>If any of these methods is called from elsewhere, an <code>IllegalMonitorStateException</code> is thrown.</p></blockquote><h4 id="wait-set"><a href="#wait-set" class="headerlink" title="wait set"></a><strong>wait set</strong></h4><ul><li><p>A thread that currently owns the lock can <strong>suspend itself</strong> <strong>inside the lock</strong> by executing a wait() command</p></li><li><p>When a thread executes a wait(), it releases the lock and enters a wait set</p></li><li><p>The thread will stay suspended in the wait set until <strong>another</strong> thread executes a notify() command inside the lock </p></li><li><p>一个线程释放锁：要不被wait要不自然释放（当方法wait()被执行后，锁自动被释放，但执行完notify()方法后，<strong>锁不会自动释放</strong>。必须执行完notify()方法所在的synchronized代码块后才释放。）</p></li><li><p>If the (former) lock owner <strong>did not execute a notify before it</strong> <strong>released the lock</strong> then <strong>only</strong> the threads in the <strong>entry set</strong> will compete to acquire the lock</p><p>如果没有调用 notify，则entry set中的线程自己竞争。</p></li><li><p>If the former owner <strong>did</strong> execute a notify, then the entry set threads will have to compete with one or more threads from the wait set</p><p>如果上一个锁的拥有者在释放之前调用notify（） 则唤醒wait set和entry set 中的线程竞争</p></li><li><blockquote><p><strong>wait</strong> and <strong>notify</strong> should be placed within synchronized code to ensure that the current code owns the lock (只能在synchronized代码块中使用)</p></blockquote><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010154532953.png" alt="image-20221010154532953" style="zoom:80%;"><p>如果不使用monitor,输出的sum可能为1-10任何数字</p><p>如果使用monitor：1、wait(100)是为了如果sum线程先被调度，主线程在其结束后开始，会陷入一直等待的状态</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221010154759397.png" alt="image-20221010154759397"></p><p><strong>为什么不用join（）代替外wait+notify？</strong></p><p><strong>join必须等另一个线程完全结束才能切换线程，而notify等待某一个同步代码块结束就可以切换线程</strong></p></li></ul><h5 id="wait-condition"><a href="#wait-condition" class="headerlink" title="wait condition"></a><strong>wait condition</strong></h5><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">while( ! the condition which should be true) { wait(); }<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Code keeps waiting until condition is true</p><h4 id="Deadlock"><a href="#Deadlock" class="headerlink" title="Deadlock"></a><strong>Deadlock</strong></h4><p>Two or more threads waiting for two or more locks to be freed, and the circumstances in the program is such that the locks will never be freed</p><p>Java provides no mechanisms to support deadlock prevention</p><p>deadlock发生的情况：</p><p>示例参见<a href="%E9%AB%98%E7%BC%96%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90.md">case12: deadlock</a></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221011130317154.png" alt="image-20221011130317154" style="zoom:50%;"><p>• <strong>Prevention</strong></p><p>– Design code so deadlock is impossible</p><p>• <strong>Avoidance</strong></p><p>– Steer around deadlock with smart scheduling</p><p>• <strong>Detection</strong> and <strong>Recovery</strong></p><p>– <strong>Check</strong> for deadlock <strong>periodically</strong></p><p>– <strong>Recover</strong> by <strong>killing</strong> threads and <strong>restarting</strong></p><h5 id="Deadlock-prevention"><a href="#Deadlock-prevention" class="headerlink" title="Deadlock prevention"></a><strong>Deadlock prevention</strong></h5><ol><li><p>Avoid <strong>mutual exclusion</strong> 不用 synchronized（不合理）</p></li><li><p>Allow pre-emption（<strong>allow</strong> a thread to interrupt another to <strong>take its</strong> <strong>lock</strong>）-&gt;<strong>dangerous</strong></p></li><li><p><strong>Don’t allow</strong> a thread to hold <strong>multiple locks</strong></p><p>– Or force it to get <strong>all locks</strong> at the same time</p><h4 id="Thread-priority"><a href="#Thread-priority" class="headerlink" title="Thread priority"></a>Thread priority</h4><p>线程优先权只是说提升线程被调度的可能性，并不意味一定被调度</p></li></ol><h4 id="Method-table"><a href="#Method-table" class="headerlink" title="Method table"></a>Method table</h4><table><thead><tr><th>Name</th><th>try catch ?</th><th>clear  interrupt flag?</th><th>static?</th><th>只能给当前线程用？</th></tr></thead><tbody><tr><td>sleep</td><td>y</td><td>y</td><td>y</td><td>y</td></tr><tr><td>yield</td><td><strong>n</strong></td><td>n</td><td>y</td><td>y</td></tr><tr><td>join</td><td>y</td><td>y</td><td>n</td><td>n</td></tr><tr><td>wait</td><td>y</td><td>y</td><td>y</td><td>y</td></tr><tr><td>notify</td><td>n</td><td>n</td><td>n</td><td>y</td></tr><tr><td>notifyAll</td><td>n</td><td>n</td><td>n</td><td>y</td></tr><tr><td>interrupt</td><td>n</td><td>n</td><td>n</td><td>n</td></tr><tr><td>interrupted</td><td>n</td><td>y</td><td>y</td><td>y</td></tr><tr><td>isInterrupted</td><td>n</td><td>n</td><td>n</td><td>n</td></tr><tr><td>isAlive</td><td>n</td><td>n</td><td>n</td><td>n</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> ANP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1-Socket</title>
      <link href="//post/2.1-Socket.html"/>
      <url>//post/2.1-Socket.html</url>
      
        <content type="html"><![CDATA[<h1 id="Socket"><a href="#Socket" class="headerlink" title="Socket"></a>Socket</h1><p>An <strong>abstraction</strong> of a network interface</p><p> The Socket Application Programming Interface (<strong>API</strong>) allows you to:</p><p>– Send data (bytes)</p><p>– Receive data (bytes)</p><h2 id="Java-network-programming"><a href="#Java-network-programming" class="headerlink" title="Java network programming"></a><strong>Java network programming</strong></h2><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import java.net.*;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>先导包</p><p>Similar to reading and writing files:</p><p>– But the “file” exists on a remote machine;</p><p>– Receive/send data.</p><h3 id="What-is-I-x2F-O"><a href="#What-is-I-x2F-O" class="headerlink" title="What is I/O?"></a><strong>What is I/O?</strong></h3><p>– <em>Input</em>: to bring in information (<em>read</em>) </p><p>– <em>Output</em>: to send out information (<em>write</em>)</p><ul><li>Information for Input/Output can be:</li></ul><p>– <em>anywhere</em>: memory, disk, in a file, <em>over the network</em>, in another program …</p><p>– <em>of any type</em> (any object): Text, Image, Audio, Video</p><h5 id="Streams"><a href="#Streams" class="headerlink" title="Streams"></a><strong>Streams</strong></h5><ul><li>Java input/output makes use of <em>streams</em>:</li></ul><p> <strong>A stream is a connection to a source of data or to a destination for data (sometimes both)</strong></p><p>Streams can represent any data, so <strong>a stream is a sequence of bytes that flow from a source to a destination.</strong></p><p>In a program, we <em>read information</em> from an input stream and <em>write</em> <em>information</em> to an output stream.</p><p>在使用结束后记得关闭</p><p><em>Always close your streams</em></p><p><strong>∵A stream is an expensive resource, and there is a limit on the number of streams that you can have open at one time.</strong> </p><p>Some streams can be used only for input, others only for output, others for both</p><h5 id="Java-has-two-broad-categories-of-streams（socket-用字节流）"><a href="#Java-has-two-broad-categories-of-streams（socket-用字节流）" class="headerlink" title="Java has two broad categories of streams（socket 用字节流）:"></a><strong>Java has two broad categories of streams（socket 用字节流）:</strong></h5><p>在java.io包中操作文件内容的主要有两大类：字节流、<a href="https://so.csdn.net/so/search?q=%E5%AD%97%E7%AC%A6%E6%B5%81&amp;spm=1001.2101.3001.7020">字符流</a>，两类都分为输入和输出操作。在字节流中输出数据主要是使用OutputStream完成，输入使的是InputStream，在字符流中输出主要是使用Writer类完成，输入流主要使用Reader类完成</p><ol><li>byte streams, <strong>for machine-formatted data</strong> 字节流</li></ol><p>​       • <strong>InputStream</strong></p><p>​       • <strong>OutputStream</strong></p><p>​       • Writing and reading are very efficient. </p><p>​       <strong>网络编程中socket使用字节流</strong></p><ol start="2"><li>character streams (textual), <strong>for human-readable data</strong> 字符流</li></ol><p>​      • <strong>Reader</strong></p><p>​      • <strong>Writer</strong></p><p>​      • Require translation.</p><p>The <strong>java.io</strong> package contains a relatively large number of classes to deal with streams</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018173021376.png" alt="image-20221018173021376" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018173034801.png" alt="image-20221018173034801" style="zoom:50%;"><p><strong>Writing to a Socket is (in terms of code) similar to writing to a file</strong></p><p>socket中使用的IO方法　</p><p>BufferedReader/BufferedWriter   InputStreamReader/OutputStreamWriter</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Input</span>：<span class="token class-name">BufferedReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Output</span>：<span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span>getOutputStream<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="SEND-OVER-A-NETWORK"><a href="#SEND-OVER-A-NETWORK" class="headerlink" title="SEND OVER A NETWORK"></a>SEND OVER A NETWORK</h2><p>Uniquely identifying machines on a network:</p><p>   – <strong>Domain</strong> names or</p><p>  – Internet: <strong>IP</strong> (Internet Protocol) <strong>address</strong></p><h3 id="IP-addressing"><a href="#IP-addressing" class="headerlink" title="IP addressing"></a>IP addressing</h3><p><strong>Every computer in the world has a different IP address</strong> </p><ul><li><p>The familiar DNS (Domain Name System）</p></li><li><p>use the IP address directly (in the “dotted quad” format)</p></li></ul><p>​      • 127.0.0.1 is for <em>local machine</em></p><p>The IP address is represented internally as a <em>32-bit number</em>.(IPv4)</p><ul><li>usually presented as **dotted quad **点分十进制, e.g. <strong>10.0.0.1</strong></li></ul><ul><li><p>127.0.0.1 is for <em>local machine</em>.</p></li><li><p>A <em>special Java object</em> exists to represent this number from either of the forms:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span>getByName（）<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>在 <strong>java.net</strong> package.</p></li><li><p>在给定主机名的情况下确定主机的IP地址</p><p>如果参数为null,获得的是本机的IP地址</p></li></ul><p>　　　如：InetAddress.getByName(“<a href="http://www.163.com&quot;/">www.163.com"</a>)</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IPFinder</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token class-name">String</span> domainName <span class="token operator">=</span> “www<span class="token punctuation">.</span>qmul<span class="token punctuation">.</span>ac<span class="token punctuation">.</span>uk”<span class="token punctuation">;</span><span class="token class-name">InetAddress</span> a <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span>domainName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="domain-name-and-DNS"><a href="#domain-name-and-DNS" class="headerlink" title="domain name and DNS"></a>domain name and DNS</h3><p>Domain Name is simply a name that maps to an IP address</p><p>The Domain Name System (DNS) performs this mapping</p><p>由于<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80/150859?fromModule=lemma_inlink">IP地址</a>具有不方便记忆并且不能显示地址组织的名称和性质等缺点，人们设计出了域名，并通过网域名称系统（<a href="https://baike.baidu.com/item/DNS?fromModule=lemma_inlink">DNS</a>，Domain Name System）来将域名和<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80?fromModule=lemma_inlink">IP地址</a>相互<a href="https://baike.baidu.com/item/%E6%98%A0%E5%B0%84/20402621?fromModule=lemma_inlink">映射</a>，使人更方便地访问<a href="https://baike.baidu.com/item/%E4%BA%92%E8%81%94%E7%BD%91/199186?fromModule=lemma_inlink">互联网</a>，而不用去记住能够被机器直接读取的<a href="https://baike.baidu.com/item/IP%E5%9C%B0%E5%9D%80?fromModule=lemma_inlink">IP地址</a>数串。</p><p> using nslookup　查看domain　name　mapping的IP</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018175106091.png" alt="image-20221018175106091" style="zoom:50%;"><p>You can send DNS queries to a DNS server</p><p>It will return the IP address that maps to a domain name</p><p><strong>Need to map DNS name (<strong><a href="http://www.example.com/">www.example.com</a></strong>) to IP address</strong> <strong>(192.0.32.10) before you can send packets</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018175219739.png" alt="image-20221018175219739" style="zoom:67%;"><p> 客户端⾸先会发出⼀个 DNS 请求，问 <a href="http://www.server.com/">www.server.com</a> 的 IP 是啥，并发给本地 DNS 服务器（也就是客户端的 TCP/IP 设置中填写的 DNS 服务器地址）。</p><p>域名服务器收到客户端的请求后，返回 IP 地址</p><h3 id="Port"><a href="#Port" class="headerlink" title="Port"></a><strong>Port</strong></h3><p>– A unique identifier for a particular service running on a machine.</p><p>– E.g. A web server “listens” on Port 80</p><ul><li>When setting up a client or a server:</li></ul><p>​        – Must choose a port（必须选择server的port，也就是选择对应的服务）.</p><p>​        – Both client and server agree to connect.</p><p><strong>The port is not a physical location in a machine, but a software abstraction</strong></p><ul><li><p>System services reserve the use of <em>ports 0 through 1023</em>.</p><p>不要使用小于1023的端口号，都有对应的服务，如</p></li></ul><table><thead><tr><th align="center">80</th><th align="center">web servers (HTTP)</th></tr></thead><tbody><tr><td align="center">443</td><td align="center">encrypted web servers (HTTPS)</td></tr><tr><td align="center">22</td><td align="center">secure shell (SSH)</td></tr><tr><td align="center">20 and 21</td><td align="center">File Transfer Protocol (FTP)</td></tr><tr><td align="center">25</td><td align="center">Simple Mail Transfer Protocol (SMTP)</td></tr></tbody></table><ul><li><p>Usually choice for web proxy is <em>port 8080</em>:</p></li><li><p>Usually represented as ==<strong>IP address : port</strong>==.</p></li></ul><p>　　　　　• <strong>127.0.0.1:8080</strong></p><p>　　　　　• <strong>localhost:8080</strong></p><h2 id="CLIENT-SERVER-MODEL"><a href="#CLIENT-SERVER-MODEL" class="headerlink" title="CLIENT-SERVER MODEL"></a>CLIENT-SERVER MODEL</h2><h3 id="Server-and-Clients"><a href="#Server-and-Clients" class="headerlink" title="Server and Clients"></a><strong>Server and Clients</strong></h3><p>Network: allows two machines to connect and talk to each other. </p><p>server:  <strong>stay and listen</strong></p><p> client：<strong>makes requests</strong></p><p>The client is trying to connect to the server. Once connected, there is a <em>two way (双向) communication</em>.</p><p><strong>Server just listens. If no requests received: server</strong> <strong>does nothing</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018180317828.png" alt="image-20221018180317828" style="zoom:67%;"><h5 id="在本地运行：本地主机充当服务器和客户端"><a href="#在本地运行：本地主机充当服务器和客户端" class="headerlink" title="在本地运行：本地主机充当服务器和客户端"></a>在本地运行：本地主机充当服务器和客户端</h5><p>Run both client and server on one machine (localhost)</p><p>• Producing a <em>localhost</em>: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">InetAddress</span> addr <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or  </p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">InetAddress.getByName("localhost");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>or  </p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">InetAddress.getByName("127.0.0.1");<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Sockets"><a href="#Sockets" class="headerlink" title="Sockets"></a><strong>Sockets</strong></h2><h3 id="Sockets-1"><a href="#Sockets-1" class="headerlink" title="Sockets"></a><strong>Sockets</strong></h3><p>An <strong>abstraction</strong> of a network interface</p><p>The Socket object presents a stream to you (the programmer)</p><p>socket允许程序员将网络连接看成可以读写字节的流。socket对程序员掩盖了网络底层细节（计网那些）</p><p><strong>Java’s built-in multithreading（内置多线程）:</strong> </p><p>– Handles multiple connections at once</p><p>When a client wants a service, it attempts the connection with the server by supplying the port number associated with the service</p><p>对于客户端来说，需要提供服务端的端口号来建立连接</p><p>There are likely to be multiple clients waiting for the same service at the same time (e.g. web browsers wanting a web page)</p><p>每有一个client建立连接，creates a <em>socket</em> at its end of the communication link</p><p>这些socket需要相同的服务，所以连接到相同的server socket（port）上</p><p>server 通过client端的sockets来区分他们 并且 keeping their communication separate.</p><p>The server, upon receiving the client’s initial request (on a particular port number), creates a new <em>socket</em> at its end, dedicated to the communication with that specific client. 服务器端在接收到客户端的socket端口后，新建一个 <strong>socket对象</strong> （这个对象只是对客户端socket的引用，所以可以和客户端socket共享一个stream）与该用户进行通信</p><p>Socket实质上提供了进程通信的端点。进程通信之前，双方首先必须各自创建一个端点，否则是没有办法建立联系并相互通信的。正如打电话之前，双方必须各自拥有一台电话机一样。</p><p>想象成一根电缆，当两头都插入插座后就可以建立IO流，而不用管底层的控制</p><h3 id="Java中的socket"><a href="#Java中的socket" class="headerlink" title="Java中的socket"></a>Java中的socket</h3><p>如何在Java 里实现socket：</p><h4 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h4><p>使用<strong>ServerSocket</strong>:相当于开启一个服务，并等待客户端的连接（ listen for incoming　connections）。</p><p>– Only need to give the <em>port number</em>.构造方法只需要端口</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public ServerSocket(int port)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用该构造方法在创建ServerSocket对象时，就可以将其绑定到一个指定的端口号上，参数port就是端口号。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ServerSocket</span> server <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span><span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– Only need to give the <em>port number</em>. </p><p>这个port num是指定服务器要绑定的端口（服务器要监听的，与服务挂钩的端口）（用于给client看）</p><h5 id="accept"><a href="#accept" class="headerlink" title="accept()"></a>accept()</h5><p>​     为了区分不同client，serversocket有一个成员方法accept()　</p><p><strong>ServerSocket</strong> returns a corresponding <strong>Socket</strong> – via the <strong>accept()</strong> method  – through which communications will take place on the server side.　<strong>返回client的socket对象</strong></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Socket socket = s.accept();<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public Socket(String host, int port)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– Give both the <em>IP address</em> and <em>port number</em>.</p><p><code>String host</code>：<strong>服务器</strong>主机的名称/服务器的IP地址<br>　　<code>int port</code>:　　服务器的端口号</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Socket</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token number">6666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>成员方法：</p><p>To produce the corresponding <strong>InputStream</strong> and <strong>OutputStream</strong> objects from each <strong>Socket</strong>, use the methods:</p><p><code>OutputStream getOutputStream()</code>:返回此套接字的输出流</p><p><code>InputStream getInputStream()</code>:返回此套接字的输入流</p><p><code>void close()</code>：关闭此套接字</p></li></ul><p>下图为建立socket连接的整个流程</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221018214248532.png" alt="image-20221018214248532"></p><p>区分socket和serversocket  </p><p>server socket是用来监听，等待建立连接：<strong>ServerSocket</strong> returns a corresponding <strong>Socket</strong> – via the <strong>accept()</strong> method  – through which communications will take place on the server side.</p><p>socket：　a client is used to initiate a connection.</p><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><h3 id="A-simple-server-and-client"><a href="#A-simple-server-and-client" class="headerlink" title="A simple server and client"></a><strong>A simple</strong> <strong>server</strong> <strong>and</strong> <strong>client</strong></h3><h4 id="Server-description"><a href="#Server-description" class="headerlink" title="Server description:"></a>Server description:</h4><ol><li><p>Create a <strong>ServerSocket</strong> object.</p></li><li><p>Put the server in a waiting state.</p></li><li><p>Set up input and output streams.</p></li><li><p>Send and receive data.</p></li><li><p>Close the connection.</p><p>服务器的实现步骤：（in/out是针对于客户端、服务器端来说）<br>创建服务器ServerSocket对象和系统要指定的端口号<br>使用ServerSocket对象中的方法accept，获取到网络字节输入流InputStream对象</p><p>创建网络字节输入流InputStream对象（参数为accept的socket的成员方法socket.getInputStream）</p><p>再用BufferedReader套住这个InputStreaｍ，用其中的成员方法readLine读client发来的字符</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">BufferedReader in = new BufferedReader(new                        InputStreamReader(socket.getInputStream()));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建网络字节输出流OutputStream对象（参数为accept的socket的socket.getOutputStream方法）</p><p>再用BufferedWirter套住这个OutputStream</p><p>创建 PrintWriter对象（参数为OutputStream）用其中的println方法向流中写入信息</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">PrintWriter out = new PrintWriter(new                       BufferedWriter(new OutputStreamWriter(                       socket.getOutputStream())), true);//true自动刷行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>释放资源(先Socket　后ServerSocket)</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyServer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PORT <span class="token operator">=</span> <span class="token number">8080</span><span class="token punctuation">;</span><span class="token comment">//定义监听端口</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>        <span class="token class-name">ServerSocket</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServerSocket</span><span class="token punctuation">(</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">Started</span><span class="token operator">:</span> ” <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token class-name">Socket</span> socket <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">Connection</span> accepted<span class="token operator">:</span> ” <span class="token operator">+</span> socket<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">BufferedReader</span> in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span><span class="token keyword">new</span>                        <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span>                        <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>                        socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true自动刷行</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token class-name">String</span> str <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　／／从流中读                    <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>“END”<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">Echoing</span><span class="token operator">:</span> ” <span class="token operator">+</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>                    out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>　　　　／／向流中写刚刚读出来的                <span class="token punctuation">}</span>            <span class="token keyword">finally</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“closing<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>                socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span> s<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意抛出异常，或catch异常</p><p>记得finally里关闭socket</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019162718789.png" alt="image-20221019162718789"></p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">public class ServerMain{public static void main(String[] args){System.out.println("[Server Main] Starting server listening...");ServerSocket serverSocket = null;try{// Start a ServerSocket that lists on port serverSocket = new ServerSocket(5051);while(true) //Loop forever listening for connections{// Wait for a client to connectSocket socket = serverSocket.accept();System.out.println("[Server Main] Received new connection");BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));PrintWriter printWriter = new PrintWriter(writer, true);// Sends a message via the IO stream to the socketprintWriter.println("Hello!");socket.close();}}catch(Exception e){e.printStackTrace();}finally //A finally block *always* gets executed. It will close the listening socket.{try {serverSocket.close();}catch (IOException e) {e.printStackTrace();}}}}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假多线程：server加while一直listen，并且每个结束记得close</p><h4 id="Client-description"><a href="#Client-description" class="headerlink" title="Client description:"></a>Client description:</h4><ol><li><p>Establish the connection with the server.</p></li><li><p>Set up input and output streams.</p></li><li><p>Send and receive data.</p></li><li><p>Close the connection</p><p>实现步骤：<br>创建一个客户端对象Socket，构造方法绑定服务器的IP地址和端口号</p><p>创建网络字节输入流InputStream对象（参数为accept的socket的成员方法socket.getInputStream）</p><p>再用BufferedReader套住这个InputStreaｍ，用其中的成员方法readLine读sever回写到流的数据</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">BufferedReader in = new BufferedReader(new                        InputStreamReader(socket.getInputStream()));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建网络字节输出流OutputStream对象（参数为accept的socket的socket.getOutputStream方法）</p><p>再用BufferedWirter套住这个OutputStream</p><p>创建 PrintWriter对象（参数为OutputStream）用其中的println向流中写入信息</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">PrintWriter out = new PrintWriter(new                       BufferedWriter(new OutputStreamWriter(                       socket.getOutputStream())), true);//true自动刷行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>释放资源（Socket）</p></li></ol><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import java.net.*;import java.io.*;public class MyClient {    public static void main(String[] args) throws IOException {        InetAddress addr = InetAddress.getByName(null);        System.out.println(“addr = ” + addr);        Socket socket = new Socket(addr, MyServer.PORT);        try {            System.out.println("socket = " + socket);            BufferedReader in = new BufferedReader(new                    InputStreamReader(socket.getInputStream()));            PrintWriter out = new PrintWriter(new                    BufferedWriter(new OutputStreamWriter(                    socket.getOutputStream())), true);            for (int i=0; i &lt; 10; i++) {                out.println(“howdy ” + i);                String str = in.readLine();                System.out.println(str);            }            out.println(“END”);        }        finally {            System.out.println(“closing...”);            socket.close();        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20221019162737011.png" alt="image-20221019162737011"></p><h3 id="Serving-multiple-clients"><a href="#Serving-multiple-clients" class="headerlink" title="Serving multiple clients"></a><strong>Serving multiple clients</strong></h3><p>Procedure:</p><p>– Make a single <strong>ServerSocket</strong> in the server.</p><p>– Call <strong>accept()</strong> to wait for a new connection.</p><p>– When <strong>accept()</strong> returns, take the resulting <strong>Socket</strong> and use it to create a new thread whose job is to serve that particular client.</p><p>– Then call <strong>accept()</strong> again to wait for a new client.</p><h4 id="MultiServer"><a href="#MultiServer" class="headerlink" title="MultiServer"></a><strong>MultiServer</strong></h4><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">import java.io.*;import java.net.*;class ServeOne extends Thread {    private Socket socket;    private BufferedReader in;    private PrintWriter out;    public ServeOne(Socket s) throws IOException {        socket = s;        in = new BufferedReader(new InputStreamReader(                socket.getInputStream()));        out = new PrintWriter(new BufferedWriter(                new OutputStreamWriter(                        socket.getOutputStream())), true);        start();    }    public void run() {        try {            while (true) {                String str = in.readLine();                if (str.equals(“END”)) break;                System.out.println(“Echoing: ” + str);                out.println(str);            }            System.out.println(“closing...”);        }        catch (IOException e) { System.err.println(“IO Exception”); }        finally {            try { socket.close(); }            catch (IOException e) {                System.err.println(“Socket not closed”);            }        }    }}public class MultiServer {    static final int PORT = 8080;    public static void main(String[] args) throws IOException {        ServerSocket s = new ServerSocket(PORT);        System.out.println(“Server Started”);        try {            while (true) {                Socket socket = s.accept();                try { new ServeOne(socket); }                catch (IOException e) { socket.close(); }            }        }        finally { s.close(); }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="MultiClient"><a href="#MultiClient" class="headerlink" title="MultiClient"></a><strong>MultiClient</strong></h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ClientThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">Socket</span> socket<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">BufferedReader</span> in<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">PrintWriter</span> out<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id <span class="token operator">=</span> counter<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> threadcount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">threadCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> threadcount<span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">ClientThread</span><span class="token punctuation">(</span><span class="token class-name">InetAddress</span> addr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">Making</span> client ” <span class="token operator">+</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>        threadcount<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Socket</span><span class="token punctuation">(</span>addr<span class="token punctuation">,</span> <span class="token class-name">MultiServer</span><span class="token punctuation">.</span>PORT<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">Socket</span> failed”<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            in <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedReader</span><span class="token punctuation">(</span>                    <span class="token keyword">new</span> <span class="token class-name">InputStreamReader</span><span class="token punctuation">(</span>socket<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintWriter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BufferedWriter</span><span class="token punctuation">(</span>                    <span class="token keyword">new</span> <span class="token class-name">OutputStreamWriter</span><span class="token punctuation">(</span>                            socket<span class="token punctuation">.</span><span class="token function">getOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span> socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e2<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">Socket</span> not closed”<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">Client</span> ” <span class="token operator">+</span> id <span class="token operator">+</span> “<span class="token operator">:</span> ” <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> str <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“END”<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“IO <span class="token class-name">Exception</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>        <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span> socket<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>err<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“<span class="token class-name">Socket</span> not closed”<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            threadcount<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MultiClient</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_THREADS <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span>            <span class="token class-name">IOException</span><span class="token punctuation">,</span><span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">InetAddress</span> addr <span class="token operator">=</span> <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ClientThread</span><span class="token punctuation">.</span><span class="token function">threadCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> MAX_THREADS<span class="token punctuation">)</span>                <span class="token keyword">new</span> <span class="token class-name">ClientThread</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大三上课程笔记 </tag>
            
            <tag> ANP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qm Java note</title>
      <link href="//post/java.html"/>
      <url>//post/java.html</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA-NOTE"><a href="#JAVA-NOTE" class="headerlink" title="JAVA NOTE"></a><strong>JAVA NOTE</strong></h1><p>[TOC]</p><h2 id="Teaching-Block1"><a href="#Teaching-Block1" class="headerlink" title="Teaching Block1"></a>Teaching Block1</h2><h3 id="1-phase-of-java-program"><a href="#1-phase-of-java-program" class="headerlink" title="1.phase of java program"></a>1.phase of java program</h3><p>phase1: Edit(by editor ):  Every java program have the extensing <em>.java</em></p><p>phase2: Compile(编译器): </p><blockquote><p>translates your program into bytecode so that the Java interpreter can read the   program（MyProgram.class）                     </p></blockquote><pre class="line-numbers language-none"><code class="language-none">javac Myprogram.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Phase 3: Load + Phase 4: Verify</p><blockquote><p>loading into memory</p></blockquote><pre class="line-numbers language-none"><code class="language-none">java MyProgram<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Phase 5: Execute</p><p>The file name and the class name must be the same. </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">MyProgram</span><span class="token punctuation">.</span>java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>To compile the program, type (with file extension编译时加后缀):</p><pre class="line-numbers language-none"><code class="language-none">javac MyProgram.java<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>To run the program, type (without file extension运行不加后缀):</p><pre class="line-numbers language-none"><code class="language-none">java MyProgram<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The interpreter executes <strong>main</strong> first.</p><p>JVM包括：</p><p><strong>javac</strong>: compiler</p><p><strong>java</strong>: launcher for Java applications</p><p><strong>javadoc</strong>: API documentation generator</p><p><strong>jar</strong>: manages JAR files</p><p><strong>jdb</strong>: Java debugger</p><h5 id="1-1-补充1-常见dos命令"><a href="#1-1-补充1-常见dos命令" class="headerlink" title="1.1.补充1.常见dos命令"></a>1.1.补充1.常见dos命令</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155429917.png"></p><h5 id="1-2-补充2-main-method"><a href="#1-2-补充2-main-method" class="headerlink" title="1.2.补充2.main method"></a>1.2.补充2.main method</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155449779.png"></p><h3 id="2-Basic-data-types（基本数据类型、引用数据类型）"><a href="#2-Basic-data-types（基本数据类型、引用数据类型）" class="headerlink" title="2.Basic data types（基本数据类型、引用数据类型）"></a>2.Basic data types（基本数据类型、引用数据类型）</h3><h4 id="2-1-introduction"><a href="#2-1-introduction" class="headerlink" title="2.1.introduction"></a>2.1.introduction</h4><blockquote><p>   Java is strongly typed and strongly classed– Only variables with the same types or classes can be used together.</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155501582.png"></p><p>Every data type in Java has a default value</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155513020.png"></p><blockquote><p>long类型在数字后面加L否则整数默认为int类型</p></blockquote><blockquote><p>float 加F 否则小数默认为 double类型</p></blockquote><h4 id="2-2-补充1-变量命名规则"><a href="#2-2-补充1-变量命名规则" class="headerlink" title="2.2.补充1.变量命名规则"></a>2.2.补充1.变量命名规则</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155522944.png"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155531449.png"></p><h4 id="2-3-补充2-类型转换"><a href="#2-3-补充2-类型转换" class="headerlink" title="2.3.补充2.类型转换"></a>2.3.补充2.类型转换</h4><p> 自动类型转换：范围小的数赋值给范围大的数</p><p>强制类型转化(type cast operator.) ：范围大的数赋值给范围小的数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> k<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token number">88.8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>  Conversion between numeric types:</p><blockquote><p><strong>byte =&gt; short =&gt; int =&gt; long =&gt; float =&gt; double</strong></p></blockquote><p>​                                         </p><h3 id="3-Operators"><a href="#3-Operators" class="headerlink" title="3.Operators"></a>3.Operators</h3><h4 id="3-1-introduction"><a href="#3-1-introduction" class="headerlink" title="3.1.introduction"></a>3.1.introduction</h4><ul><li><h5 id="Increments-and-Decrements"><a href="#Increments-and-Decrements" class="headerlink" title="Increments and Decrements"></a>Increments and Decrements</h5></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155541419.png" alt="java1/image-20220602155541419"></p><blockquote><p>– A post operation causes the variable to first be used  in the current statement, and then it is incremented or decremented afterwards.</p></blockquote><blockquote><p>– A pre operation causes the variable to first be incremented or decremented, and then it is used in the current statement.</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Post</span> incrementing<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a<span class="token operator">++</span> <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">", a = "</span> <span class="token operator">+</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> OUTPUT<span class="token operator">:</span>result<span class="token operator">=</span><span class="token number">9</span> a<span class="token operator">=</span><span class="token number">5</span>a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>result <span class="token operator">=</span> a <span class="token operator">+</span> a<span class="token operator">++</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">", a = "</span> <span class="token operator">+</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span>OUTPUT<span class="token operator">:</span>result<span class="token operator">=</span><span class="token number">8</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token class-name">Pre</span> incrementing<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token operator">++</span>a <span class="token operator">+</span> a<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">", a = "</span> <span class="token operator">+</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> OUTPUT<span class="token operator">:</span>result<span class="token operator">=</span><span class="token number">10</span> a<span class="token operator">=</span><span class="token number">5</span>a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>result <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token operator">++</span>a<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result <span class="token operator">+</span> <span class="token string">", a = "</span> <span class="token operator">+</span> a <span class="token punctuation">)</span><span class="token punctuation">;</span> OUTPUT<span class="token operator">:</span>result<span class="token operator">=</span><span class="token number">9</span> a<span class="token operator">=</span><span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="Operator-Precedence-优先级"><a href="#Operator-Precedence-优先级" class="headerlink" title="Operator Precedence(优先级)"></a>Operator Precedence(优先级)</h5></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155603848.png" alt="java1/image-20220602155603848"></p><ul><li><h5 id="Relational-Operations"><a href="#Relational-Operations" class="headerlink" title="Relational Operations"></a>Relational Operations</h5></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155619089.png"></p><ul><li><h5 id="Logical-operators"><a href="#Logical-operators" class="headerlink" title="Logical operators"></a>Logical operators</h5></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155715737.png" alt="image-20220602155715737"></p><p>– binary operators (except assignment) are evaluated from left to right</p><p>– assignment operators are evaluated right to left</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c<span class="token punctuation">;</span>a<span class="token operator">/</span>b<span class="token operator">/</span>c都为<span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>if-else statement</p><p>Relational expression must evaluate to a <strong>boolean</strong> value</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155736411.png" alt="java1/image-20220602155736411"></p></li><li><h5 id="switch-statement"><a href="#switch-statement" class="headerlink" title="switch statement"></a>switch statement</h5></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155809690.png" alt="java1/image-20220602155809690"></p><blockquote><p><strong>break</strong> – causes the remainder of the **switch **statement to be skipped</p></blockquote><blockquote><p><strong>default</strong> – action in case none of the cases match</p></blockquote><ul><li><h5 id="Conditional-Operator"><a href="#Conditional-Operator" class="headerlink" title="Conditional Operator"></a><strong>Conditional Operator</strong></h5></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221226201632395.png" alt="image-20221226201632395"></p><ul><li><h5 id="The-break-and-continue-statements"><a href="#The-break-and-continue-statements" class="headerlink" title="The break and continue statements"></a><strong>The</strong> <strong>break</strong> <strong>and</strong> <strong>continue</strong> <strong>statements</strong></h5></li></ul><p>​         break——quitting the loop</p><p>​         continue——skipping the current iteration</p><p>​      补充:<strong>Using labelled statement blocks with</strong> <em>break</em> and <em>continue</em></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">outer<span class="token operator">:</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Begin outer for i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> inner<span class="token operator">:</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token keyword">break</span> outer<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">outer<span class="token operator">:</span>   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Begin outer for i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span> inner<span class="token operator">:</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> i<span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"   inner: i="</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" j="</span> <span class="token operator">+</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"End outer for i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-IDEA使用"><a href="#3-2-IDEA使用" class="headerlink" title="3.2.IDEA使用"></a>3.2.IDEA使用</h4><ul><li>项目结构：模块-包-java类</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220324132520475-1653819852851.png" alt="java1/image-20220324132520475"></p><ul><li>快捷键</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220324132751831-1653819852852.png" alt="java1/image-20220324132751831"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220324132830940-1653819852852.png" alt="java1/image-20220324132830940"></p><h3 id="4-OO-programming-and-objects"><a href="#4-OO-programming-and-objects" class="headerlink" title="4. OO programming and objects"></a>4. <strong>OO programming and objects</strong></h3><h4 id="4-1-introduction"><a href="#4-1-introduction" class="headerlink" title="4.1.introduction"></a>4.1.introduction</h4><ul><li><h5 id="What-is-OO-programming"><a href="#What-is-OO-programming" class="headerlink" title="What is OO programming?"></a><em>What is OO programming?</em></h5></li></ul><blockquote><p>Constructing software systems which are structured collections(or sets) of classes.</p><p>These classes produce instances called objects</p></blockquote><ul><li><h5 id="What-is-object"><a href="#What-is-object" class="headerlink" title="What is object?"></a><em><strong>What is object?</strong></em></h5><p>Objects are <em>things</em> or <em>nouns.</em></p></li><li><h5 id="Attributes-or-states-of-an-object"><a href="#Attributes-or-states-of-an-object" class="headerlink" title="Attributes (or states) of an object:"></a>Attributes (or states) of an object:</h5><blockquote><p>essentially anything that describes or quantifies an object. </p></blockquote></li><li><h5 id="Operations-or-behaviours-of-an-object"><a href="#Operations-or-behaviours-of-an-object" class="headerlink" title="Operations (or behaviours) of an object:"></a>Operations (or behaviours) of an object:</h5><blockquote><p>they mostly correspond to verbs in a requirements specification.</p></blockquote></li></ul><p> The class defines the attributes and operations exposed by one or more related objects</p><ul><li><h5 id="What-is-a-class"><a href="#What-is-a-class" class="headerlink" title="What is a class?"></a><strong>What is a class?</strong></h5></li></ul><p>​     An object is an instance of a particular class, We can split up code between different objects.</p><ul><li><h5 id="UML"><a href="#UML" class="headerlink" title="UML"></a><strong>UML</strong></h5><p>Class diagram notation</p><p><strong>UML</strong> = Unified Modelling Language</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220324140254211-1653819852852.png" alt="java1/image-20220324140254211"></p><h4 id="4-2-Methods"><a href="#4-2-Methods" class="headerlink" title="4.2.Methods"></a>4.2.<strong>Methods</strong></h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220324135119144-1653819852852.png" alt="java1/image-20220324135119144"></p><ul><li><h5 id="syntax"><a href="#syntax" class="headerlink" title="syntax"></a>syntax</h5></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">modifiers returnType <span class="token function">methodName</span><span class="token punctuation">(</span>parameters<span class="token punctuation">)</span> <span class="token punctuation">{</span>statements<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155836944.png" alt="java1/image-20220602155836944"></p><p>A method uses parameters=形参(formal parameter), whereas the caller passes arguments=实参(actual parameter).</p><ul><li><h5 id="Calling-调用-a-method"><a href="#Calling-调用-a-method" class="headerlink" title="Calling(调用) a method"></a><strong>Calling(调用) a method</strong></h5></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220324135158712-1653819852852.png" alt="java1/image-20220324135158712"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155849492.png" alt="java1/image-20220602155849492"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220324140705081-1653819852852.png" alt="java1/image-20220324140705081"></p><ul><li><h5 id="Pass-by-value（Pass-by-copy）"><a href="#Pass-by-value（Pass-by-copy）" class="headerlink" title="Pass-by-value（Pass-by-copy）"></a><strong>Pass-by-value</strong>（Pass-by-copy）</h5><blockquote><p>在方法被调用时，实参通过形参把它的内容副本传入方法内部，此时形参接收到的内容是实参值的一个拷贝，因此在方法内对形参的任何操作，都仅仅是对这个副本的操作，不影响原始值的内容。</p></blockquote></li><li><h5 id="Method-Overloading"><a href="#Method-Overloading" class="headerlink" title="Method Overloading"></a><strong>Method Overloading</strong></h5><p>Java allows several methods to be defined with the same name, as long as they have different sets of parameters</p><p>==The return type is NOT used to differentiate methods==</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220324140852742-1653819852852.png" alt="java1/image-20220324140852742"></p></li></ul><blockquote><p>只有参数类型有关,与返回值类型无关               </p></blockquote><h4 id="4-3-Create-a-class"><a href="#4-3-Create-a-class" class="headerlink" title="4.3.Create a class"></a>4.3.Create a class</h4><blockquote><p>instance variable(成员变量)+instance method（成员方法）+constructors（构造方法）</p></blockquote><p>attribute——instance variable    ， operation——instance method</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220324141950832-1653819852852.png" alt="java1/image-20220324141950832"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">XXX</span><span class="token punctuation">{</span>  <span class="token keyword">int</span> attribute1<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">double</span> attribute2<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>  <span class="token comment">//instance variable</span>   <span class="token function">XXX</span><span class="token punctuation">(</span><span class="token keyword">int</span> xxx<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token punctuation">}</span>   <span class="token comment">//constructors</span>        <span class="token keyword">double</span> <span class="token function">opeartion1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token punctuation">}</span>    <span class="token keyword">int</span> <span class="token function">opeartion2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token punctuation">}</span>   <span class="token comment">//instance method</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="create-a-object"><a href="#create-a-object" class="headerlink" title="create a object"></a>create a object</h5></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">className objectName<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">className</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><strong>A  object is a reference variable.</strong> </p></blockquote><ul><li><h5 id="Using-instance-variables-and-methods"><a href="#Using-instance-variables-and-methods" class="headerlink" title="Using instance variables and methods"></a><strong>Using instance variables and methods</strong></h5></li></ul><p>– to access a (public) instance variable <strong>v</strong> of an object <strong>o</strong>, we reference it using the dot notation*:*</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">o<span class="token punctuation">.</span>v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>– to invoke a (public) method <strong>m</strong> of an object <strong>o</strong>, we also reference it using the dot notation:</p><pre class="line-numbers language-none"><code class="language-none">o.m()<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><h5 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a><strong>Constructors</strong></h5>A constructor is a special method, with same name as the class name, used for initialisation.</li></ul><blockquote><p>It does not have a return type, not even <strong>void</strong>!</p></blockquote><p> An empty no-argument constructor is provided for you by Java(如果没有自定义，系统会自带一个无参构造方法，如果自己写了构造方法，系统将不提供无参构造方法)。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220324143702216-1653819852852.png" alt="java1/image-20220324143702216"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="Data-Encapsulation-对成员变量封装"><a href="#Data-Encapsulation-对成员变量封装" class="headerlink" title="Data Encapsulation(对成员变量封装)"></a><strong>Data Encapsulation</strong>(对成员变量封装)</h5></li></ul><p>This is a good thing! Since objects are only accessible through well defined interfaces, ideally nothing unexpected should happen!</p><blockquote><p>We should NOT allow direct access to an object’s variables.</p></blockquote><blockquote><p>Any changes to the object’s state (i.e. its variables) should be made ONLY by that object’s methods</p></blockquote><p>把成员变量定义加private，并且添加两个method实现访问和更改变量</p><p>accessor(访问器)：get方法——getXxx()</p><p>mutator(修改器)：set方法——setXxx()</p><p>All getters and setters should have names that conform to the following:</p><p>==<strong>variableType getVariableName()</strong>== </p><p>==<strong>void setVariableName(VariableType)</strong>==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> age<span class="token punctuation">;</span>   <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="this引用"><a href="#this引用" class="headerlink" title="this引用"></a>this引用</h5>this 是指向对象本身的引用名，利用this引用对象的instance variable</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>不加this指代parameters, 加this指代instance variable</p></blockquote><p>补充：this（）可以用来同类的另一个构造方法</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">Person(String nm) {        name = nm;    }Person(String nm, int a) {        this(nm);        age = a;    }<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><h5 id="toString-method"><a href="#toString-method" class="headerlink" title="toString() method"></a><strong>toString()</strong> <strong>method</strong></h5><p>This method returns a <strong>String</strong> representation of the object.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> “<span class="token class-name">Account</span> number<span class="token operator">:</span> ” <span class="token operator">+</span> accNo <span class="token operator">+</span> “\n” <span class="token operator">+</span> “<span class="token class-name">Account</span> name<span class="token operator">:</span> ” <span class="token operator">+</span> accName <span class="token operator">+</span> “\n”<span class="token operator">+</span> “<span class="token class-name">Balance</span><span class="token operator">:</span> ” <span class="token operator">+</span> balance <span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它通常只是为了方便输出,在main中需要输出class的变量时，直接使用：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classname<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>等同于</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>classname<span class="token punctuation">.</span>toString<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h4 id="4-4-Method-parameters-、-local-variables、instance-variables"><a href="#4-4-Method-parameters-、-local-variables、instance-variables" class="headerlink" title="4.4.Method parameters 、 local variables、instance variables"></a>4.4.<strong>Method parameters 、 local variables、instance variables</strong></h4><blockquote><p>Method parameters are virtually the same as local variables!</p><p>– They are declared inside the method.</p><p>– They are valid (or in scope) only inside the method.</p><p>– They are NOT initialised to the default value, and so must be initialised(by the caller of the method).必须初始化</p></blockquote><ul><li><h5 id="Initialisation（变量初始化）"><a href="#Initialisation（变量初始化）" class="headerlink" title="Initialisation（变量初始化）"></a><strong>Initialisation</strong>（变量初始化）</h5>Java automatically sets some initial values for you for variables of the class (instance variables), but not for variables in methods（local variable）</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155920027.png" alt="java1/image-20220602155920027"></p><p>class variable 也会自动初始化</p><h2 id="Teaching-Block2"><a href="#Teaching-Block2" class="headerlink" title="Teaching Block2"></a>Teaching Block2</h2><h3 id="1-Arrays"><a href="#1-Arrays" class="headerlink" title="1.Arrays"></a>1.Arrays</h3><p>Arrays provide fast random access by letting you use an index position to get any element in the array.</p><blockquote><p>Arrays must be given a size! </p><p>Standard arrays cannot grow and shrink in size</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221226201812505.png" alt="image-20221226201812505"></p><p>静态初始化：</p><pre class="line-numbers language-none"><code class="language-none">int[] arr={1,2,3};<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>动态初始化：</p><p>只指定数组的长度</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220328203135408-1653819852852.png"></p><ul><li><p>An array is an object, even though it may be an array of primitives.</p></li><li><p>Array elements can be either primitives or objects.</p></li><li><p>The main() method has the Array of <strong>String</strong>s.</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>数组的长度：array.length(是一个整形)</p><p>如果length=3 （length/2=1）注意在for循环里出现！</p><p>动态初始化一个对象数组时，new后面是类名（只是表示这个reference variable什么类型）并不是构造方法。</p><h4 id="1-1-copy-array"><a href="#1-1-copy-array" class="headerlink" title="1.1.copy array"></a>1.1.copy array</h4><p>reference copy: Only copies the reference value!</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Rabbit</span><span class="token punctuation">[</span><span class="token punctuation">]</span> racers2<span class="token punctuation">;</span>racers2 <span class="token operator">=</span> racers<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>copy the data type variables:</p><ol><li><p>Use a loop to copy all individual elements.</p></li><li><p>Use the static <strong>arraycopy</strong> method in the <strong>System</strong> class</p></li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220328203620636-1653819852852.png" alt="java1/image-20220328203620636"></p><p><strong>src</strong> is the array to copy from; <strong>dest</strong> is the array to copy to</p><p>• <strong>srcPos</strong> is where in the <strong>src</strong> array to start copying from.</p><p>• <strong>destPos</strong> is where, in the <strong>dest</strong> array, to start putting the newly copied </p><p>elements</p><h4 id="1-2-Passing-Arrays-to-Methods"><a href="#1-2-Passing-Arrays-to-Methods" class="headerlink" title="1.2.Passing Arrays to Methods"></a>1.2.<strong>Passing Arrays to Methods</strong></h4><p>Java uses pass-by-value, to pass arguments to a method(only have pass by value)</p><blockquote><p>Java passes (to the method) a copy of the reference variable to the array object </p><p>数组作为方法参数—传递地址</p></blockquote><h4 id="1-3-“Prep-code”"><a href="#1-3-“Prep-code”" class="headerlink" title="1.3.“Prep code”"></a>1.3.“Prep code”</h4><blockquote><p>A form of pseudocode, to help focus on the logic without the worry of syntax</p></blockquote><h3 id="2-String"><a href="#2-String" class="headerlink" title="2.String"></a>2.String</h3><p>java 中的所有双引号中都为字符串。</p><p>不是基本的数据类型。</p><ul><li><p>string 特点：</p><blockquote><p>String对象不可变 Strings are <strong>immutable</strong></p><p>但是如下代码是可以执行的（因为“java”创建的是对象，“java”内容不能改变，但是下方代码意思是s这个引用类型的变量指向新的对象“html”）</p></blockquote></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s<span class="token operator">=</span><span class="token string">"java"</span><span class="token punctuation">;</span>s<span class="token operator">=</span><span class="token string">"html"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不能改变s的值</p><p><strong>String Pool</strong>: Area of memory where <strong>String</strong> literals are put by the JVM when created</p><blockquote><p><strong>Garbage Collector</strong> doesn’t cleanup the String Pool!</p></blockquote><p>JVM doesn’t create a duplicate if there’s already a <strong>String</strong> in memory with </p><p>the same value; it refers the reference variable to the existing entry</p><p>JVM不会创建相同值的string，只会使引用变量指向这个字符串</p><ul><li><p>string构造方法：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155938368.png" alt="java1/image-20220602155938368"></p></li><li><p>两种创建字符串的方法以及内存分析：</p><p>通过new创建对象，每次都会申请一个新的内存空间。</p><p>以”“创建对象如果内容一样，则jvm只会创建一个String对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> st1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> st2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch2<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>st1<span class="token operator">==</span>st2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//new构建时，st1与st2地址不同</span>         <span class="token class-name">String</span> st3<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> st4<span class="token operator">=</span><span class="token string">"abc"</span><span class="token punctuation">;</span>       <span class="token class-name">System</span> <span class="token punctuation">.</span>out <span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>st3<span class="token operator">==</span>st4<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//直接赋值时，st3与st4的地址相同</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul> <pre class="line-numbers language-java" data-language="java"><code class="language-java">   <span class="token comment">//运行结果为true false</span>   <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"AB"</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"AB"</span><span class="token punctuation">;</span>   <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"AB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>由于常量池中不存在两个相同的对象，所以s1和s2都是指向JVM字符串常量池中的<span class="token string">"AB"</span>对象。<span class="token keyword">new</span>关键字一定会产生一个对象，并且这个对象存储在堆中。所以<span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>“AB”<span class="token punctuation">)</span><span class="token punctuation">;</span>产生了两个对象：保存在栈中的s3和保存堆中的<span class="token class-name">String</span>对象。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602155952465.png" alt="java1/image-20220602155952465"></p><p>   这是因为通过构造方法（new）创建字符串对象时，该对象位于heap上</p><p>而使用“”创建时，该字符串位于String Pool(通过＋组合时也是如此)</p><p>   <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160005972.png" alt="java1/image-20220602160005972"></p><blockquote><p>GC不会清理String pool，但是可以清理new出的在堆中的string</p></blockquote><p><strong>Methods:</strong> <strong>String</strong> <strong>Class</strong></p><ul><li>字符串的比较</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220331213600524-1653819852852.png" alt="java1/image-20220331213600524"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">string1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>字符串相加：</p><p>Java overloads the <strong>+</strong> operator for string concatenations.</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出 aaa11<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre> <pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"aaa"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>输出 aaa2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>字符串转字符</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220331214741862.png" alt="image-20220331214741862"></p><ul><li><p>字符串长度</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220331214828665-1653819852852.png" alt="java1/image-20220331214828665"></p><ul><li><p><strong>char charAt(int index)</strong>: returns the character at <strong>index</strong></p></li><li><p><strong>int indexOf(ch)</strong>: returns <strong>ch</strong>’s first occurrence position; if not found returns <strong>-1</strong>.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220511225550273-1653819852852.png" alt="java1/image-20220511225550273"></p></li><li><p><strong>int compareTo(str)</strong>: compares two strings, returns &lt; ,&gt; , =0 if the compared string is smaller, larger, or equal to <strong>str</strong>. </p></li><li><p><strong>substring(index1,index2)</strong>: returns the substring between <strong>index1</strong>and (excluding) <strong>index2</strong>.</p></li><li><p><strong>concat(s)</strong>: concatenates（连接） two strings.</p></li><li><p><strong>toUpperCase()</strong> <strong>/</strong> <strong>toLowerCase()</strong>: convert all characters in string to upper/lower case</p></li><li><p><strong>toString()</strong>: convert input to a string.</p></li><li><p>```java<br>double d = 12.3;<br>String dString = Double.toString(d); // dString = “12.3”</p><pre class="line-numbers language-none"><code class="language-none">  **void getChars(i,j,A,k)**: returns characters from **i** to **j** (excluding), and stores them into array* **A** starting from **A[k]**.    - ```java  char[] A = new char[4];  “The rain in Spain”.getChars(4,8,A,0);// A = {’r’,’a’,’i’,’n’}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> substring(index): returns substring from index to end.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> “<span class="token class-name">Monkeys</span>”<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// s = “keys”</span><span class="token class-name">String</span> s <span class="token operator">=</span> “<span class="token class-name">Monkeys</span>”<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>”<span class="token class-name">Monkeys</span>”<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul></li></ul><p>// s = “key”<br>    </p><pre class="line-numbers language-none"><code class="language-none">      replace(oldCh,newCh)**: replace **oldCh by **newCh** everywhere in the string.      ```javaString s = “goose”.replace(‘o’,‘e’); //s = “geese”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p></p><ul><li><p><strong>split(String s)</strong>: splits the string around matches of the given regular expression <strong>s</strong> and returns an array with those substrings</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UsingSplit</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"bar:foo:bar"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> splitStr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">":"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> splitStr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>splitStr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OUTPUT:</p><p>bar</p><p>foo</p><p>bar</p></li><li><p><strong>void getChars(i,j,A,k)</strong>: returns characters from <strong>i</strong> to <strong>j</strong> (excluding), and stores them into <em>array</em> <strong>A</strong> starting from <strong>A[k]</strong></p></li><li><p><strong>substring(index)</strong>: returns substring from <strong>index</strong> to end.</p></li><li><p><strong>replace(oldCh,newCh)</strong>: replace <strong>oldCh</strong> by <strong>newCh</strong> everywhere in the </p><p>string</p></li></ul><p> <strong>Format Specifier</strong></p><p>The following table shows the format specifiers:</p><p>format() 函数与数字，字符结合使用:</p><p><code>^</code> 、 <code>&lt;</code> 、 <code>&gt;</code> 分别是居中、左对齐、右对齐，后面带宽度</p><p><code>:</code> 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。</p><p><code>+</code> 表示数学中的正负号，在正数前显示<code>+</code>，负数前显示<code>-</code>； （空格）表示在正数前加空格</p><p><code>b、d、o、x</code> 分别是二进制、十进制、八进制、十六进制。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220502165204192-1653819852853.png" alt="java1/image-20220502165204192"></p><table><thead><tr><th>Format Specifier</th><th>Conversion Applied</th></tr></thead><tbody><tr><td>%a %A</td><td>Floating-point hexadecimal</td></tr><tr><td>%b %B</td><td>Boolean</td></tr><tr><td>%c</td><td>Character</td></tr><tr><td>%d</td><td>Decimal integer</td></tr><tr><td>%h %H</td><td>Hash code of the argument</td></tr><tr><td>%e %E</td><td>Scientific notation</td></tr><tr><td>%f</td><td>Decimal floating-point</td></tr><tr><td>%g %G</td><td>Uses %e or %f, whichever is shorter</td></tr><tr><td>%o</td><td>Octal integer</td></tr><tr><td>%n</td><td>Inserts a newline character</td></tr><tr><td>%s %S</td><td>String</td></tr><tr><td>%t %T</td><td>Time and date</td></tr><tr><td>%x %X</td><td>Integer hexadecimal</td></tr><tr><td>%%</td><td>Inserts a % sign</td></tr></tbody></table><p>format() 函数与参数结合使用</p><p>格式化字段将会被 format() 中的参数替换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"我叫{},今年{}!"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"我叫{0},今年{1}!"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"我叫{1},今年{0}!"</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">)</span>我叫张三<span class="token punctuation">,</span>今年<span class="token number">22</span><span class="token operator">!</span>我叫张三<span class="token punctuation">,</span>今年<span class="token number">22</span><span class="token operator">!</span>我叫<span class="token number">22</span><span class="token punctuation">,</span>今年张三<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="StringTokenizer-Class"><a href="#StringTokenizer-Class" class="headerlink" title="StringTokenizer Class"></a><strong>StringTokenizer</strong> <strong>Class</strong></h4><p>The <strong>StringTokenizer</strong> class is used to extract tokens and process text from a string, and it belongs to the <strong>java.util</strong> package.</p><p><strong>StringTokenizer</strong> is a legacy class; should <strong>not</strong> be used with new code,用 <strong>String.split()</strong></p><h3 id="3-StringBuilder"><a href="#3-StringBuilder" class="headerlink" title="3.StringBuilder"></a>3.StringBuilder</h3><blockquote><p>可变字符串</p></blockquote><ul><li>构造方法</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220331214451117-1653819852853.png" alt="java1/image-20220331214451117"></p><ul><li><p>添加和反转</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220331214902678-1653819852853.png" alt="java1/image-20220331214902678"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220331214948952-1653819852853.png" alt="java1/image-20220331214948952"></p><p>返回值是本身的类，所以可以链式编程</p></li><li><p>与String的转换</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220331215055566.png" alt="image-20220331215055566" style="zoom:80%;"></li></ul><h3 id="4-ArrayList"><a href="#4-ArrayList" class="headerlink" title="4.ArrayList"></a>4.<strong>ArrayList</strong></h3><p>ArrayList 类是一个可以动态修改的数组，与普通数组的区别就是它是没有固定大小的限制，我们可以添加或删除元素。</p><p>ArrayList 类位于 java.util 包中，使用前需要引入它，语法格式如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span> <span class="token comment">// 引入 ArrayList 类</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span> objectName <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>　 <span class="token comment">// 初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>E: 泛型数据类型，用于设置 objectName 的数据类型，<strong>只能为引用数据类型</strong>。</p></blockquote><h4 id="4-1-Some-ArrayList-methods"><a href="#4-1-Some-ArrayList-methods" class="headerlink" title="4.1.Some ArrayList methods"></a>4.1.<strong>Some</strong> <strong>ArrayList</strong> <strong>methods</strong></h4><p>常用的method：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221226202028926.png" alt="image-20221226202028926"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220331210908240-1653819852853.png" alt="java1/image-20220331210908240"></p><p> Find out if it contains something:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> inIt <span class="token operator">=</span> myList<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Find out where in the list something is:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> index <span class="token operator">=</span> myList<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Find out if the list is empty:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> empty <span class="token operator">=</span> myList<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>ArrayList字符串遍历的基本格式：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220331211646251-1653819852853.png" alt="java1/image-20220331211646251"></p><h3 id="5-Inheritance-and-Abstract-classes"><a href="#5-Inheritance-and-Abstract-classes" class="headerlink" title="5.Inheritance and Abstract classes"></a>5.<strong>Inheritance and Abstract classes</strong></h3><h4 id="5-1-two-primary-types-of-relationships-between-classes"><a href="#5-1-two-primary-types-of-relationships-between-classes" class="headerlink" title="5.1.two primary types of relationships between classes"></a>5.1.two primary types of relationships between classes</h4><p>– aggregation (referred as has-a)</p><p>– inheritance (referred as is-a)</p><h4 id="5-2-Inheritance"><a href="#5-2-Inheritance" class="headerlink" title="5.2.Inheritance"></a>5.2.<strong>Inheritance</strong></h4><blockquote><p>via the <strong>extends</strong> keyword</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160040255.png" alt="java1/image-20220602160040255"></p><p> Subclasses inherit the properties (attributes and operations(方法和成员变量)) of their superclass.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160049960.png" alt="java1/image-20220602160049960"></p><p>To provide specialisations, subclasses ==override== methods that they inherit from the superclass</p><p>父类的私有数据域在子类中仍是不能访问的。java中只支持单一继承。</p><p>构造方法不会被继承</p><p><strong>Access Modifiers</strong>（可访问修饰符）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220405151242251-1653819852853.png" alt="java1/image-20220405151242251"></p><ul><li><strong>public</strong></li></ul><p>– <strong>public</strong> instance variables and methods are inherited</p><p>• <strong>protected</strong></p><p>– <strong>protected</strong> instance variables and methods are inherited</p><p>• <strong>private</strong></p><p>– any <strong>private</strong> instance variables and methods</p><p>are not inherited and cannot be seen by the subclass</p><p>default: 不加任何修饰符</p><p>方法、变量四种都可以加</p><blockquote><p>普通类（外部类）：只能用public、default（不写）、abstract、final修饰。</p></blockquote><blockquote><p>（成员）内部类：可理解为外部类的成员，所以修饰类成员的public、protected、default、private、static等关键字都能使用。</p></blockquote><h5 id="5-2-1-override"><a href="#5-2-1-override" class="headerlink" title="5.2.1.override"></a>5.2.1.override</h5><p>要与父类方法声明一模一样</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220405145140022-1653819852853.png" alt="java1/image-20220405145140022"></p><p>方法重写时建议加注解@Override以区分是否为重写还是新子类方法</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220405145224830-1653819852853.png" alt="java1/image-20220405145224830"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220405145331663-1653819852853.png" alt="java1/image-20220405145331663"></p><h5 id="5-2-2-super的使用"><a href="#5-2-2-super的使用" class="headerlink" title="5.2.2.super的使用"></a>5.2.2.super的使用</h5><p>Every object holds both its own declared instance variables and everything from its superclasses.</p><p>super用于指代父类，可以调用父类中的普通方法和构造方法</p><p>调用普通方法类似于this的语法：super.方法名（参数）；</p><p>调用父类的构造方法</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220405153854142-1653819852853.png" alt="java1/image-20220405153854142"></p><p>每个子类构造方法执行的==第一步==都为隐式调用（先访问父类的无参构造方法）所以每个父类一定要重载无参构造方法。if no constructor is provided, the compiler adds one that looks like:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">ClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>this指本类，super指代父类。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160107277.png" alt="java1/image-20220602160107277"></p><p>5.2.3.成员方法访问的特点</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160116092.png" alt="java1/image-20220602160116092"></p><h5 id="5-2-4-final和static关键字"><a href="#5-2-4-final和static关键字" class="headerlink" title="5.2.4.final和static关键字"></a>5.2.4.final和static关键字</h5><ul><li>final可以修饰方法、变量、类</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160124588.png" alt="java1/image-20220602160124588"></p><p> Using this keyword will prevent child classes   (oranyone else) modifying the variable/method this applies to</p><p>final修饰的变量必须初始化（常量），不能被改变。</p><p>在使用final修饰基本类型变量的时候，不可以对基本类型变量重新赋值，所以的话，基本类型变量不能被改变，可是对于引用类型变量来说的话，它保存的仅仅是一个引用，final只保证这个引用类型变量所引用的地址不会改变，也就是一直引用同一个对象，但这个对象完全可以发生改变。</p><p>如果final修饰数组那么数组的内容可以改变，但是不能重新为这个reference variable分配新数组对象了</p><p><strong>final</strong> variables must either be initialised when declared or in the constructor</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160137226.png" alt="java1/image-20220602160137226"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>任意一个对象给a赋值之后所有对象共享a的值。</p><p><strong>All instances</strong> of the same <strong>class</strong> share one copy of an static variable.</p><blockquote><p><strong>Initialisation of static variables</strong> happens before any object of the class </p></blockquote><p>is created</p><p>一般对static修饰的变量访问时使用</p><p>类名.变量名=xxxx;</p><p>类名.方法名（）</p><p>使用类名对此变量统一赋值。</p><p>static修饰方法：（静态方法可以被继承，不能被重写）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160147324.png" alt="java1/image-20220602160147324"></p><p><strong>Static Imports</strong>(调用方法时不用写类名了)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token static">out</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">WithStaticImports</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>“square root is “ <span class="token operator">+</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">4.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th align="left">修饰符</th><th align="left">修饰变量</th><th>修饰方法</th><th>修饰类</th></tr></thead><tbody><tr><td align="left">static</td><td align="left">整个类都可以访问，直接用类名访问</td><td>静态方法，不可被重写</td><td>\</td></tr><tr><td align="left">final</td><td align="left">不可更改（常量）</td><td>不能被重写</td><td>最终类，不可被继承</td></tr></tbody></table><h3 id="6-polymorphism"><a href="#6-polymorphism" class="headerlink" title="6.polymorphism"></a><strong>6.polymorphism</strong></h3><p>Polymorphism ：Using a single definition (superclass) with different types (subclass)</p><p>（父类变量指向子类对象）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Creature</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Rabbit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">object o<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中object是o的声明类，student是o的实际类，o调用方法时由实际类型决定。</p><p>访问时要先看左边（声明类）中有无此变量或对象，如果有才可以执行。</p><p>执行方法时执行的是右边（实际类）的重写方法，执行变量时是执行声明类中的变量。</p><p>多态中的对象转换：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160247779.png" alt="java1/image-20220602160247779"></p><p>向上转型</p><p>object o=new student();</p><p>向下转换（强制）– Explicit cast</p><p>student b=(student)o;</p><h4 id="6-1-java的object类中常用方法："><a href="#6-1-java的object类中常用方法：" class="headerlink" title="6.1.java的object类中常用方法："></a>6.1.java的object类中常用方法：</h4><blockquote><p><strong>java.lang.Object</strong> is the ultimate parent of <strong>EVERY</strong> class in java</p></blockquote><p><strong>Some methods of the “object” class</strong></p><blockquote><p><strong>equals()</strong> determines when one object is equal to another</p></blockquote><p>未重写：判断两类的地址是否相同</p><p>在类中重写equals()判断两个类内容是否相等。</p><blockquote><p><strong>toString()</strong> allows objects to be printed</p></blockquote><p>输出：类名@加地址</p><p>重写toString()打印类中信息</p><blockquote><p><strong>hashCode()</strong> is a unique ID for every object, usually based on its memory address</p></blockquote><blockquote><p><strong>getClass()</strong> returns the class of the object返回类名</p></blockquote><h3 id="7-abstract-class"><a href="#7-abstract-class" class="headerlink" title="7.abstract class"></a>7.abstract class</h3><p>The compiler will not let you instantiate an <strong>abstract</strong> class.</p><p>– The only use it has is in being extended</p><p> A non-abstract class is called a concrete class.</p><p>• <strong>abstract</strong> in terms of classes  that class must be extended, in </p><p>order to be instantiated</p><p>• <strong>abstract</strong> for methods   the method must be overridden in the </p><p>child class</p><blockquote><p>subclass must implement ALL abstract methods from its superclass (or be declared <strong>abstract</strong>).</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160301686.png" alt="java1/image-20220602160301686"></p><p>抽象方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160309267.png" alt="java1/image-20220602160309267"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160318509.png" alt="java1/image-20220602160318509"></p><h3 id="8-inner-class"><a href="#8-inner-class" class="headerlink" title="8.inner class"></a>8.<em>inner class</em></h3><ul><li>Inner (or <em>Nested</em>) Class: Standard class declared within the scope of a standard top-level (or <em>enclosing</em>) class</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160331304.png" alt="java1/image-20220602160331304"></p><ul><li>An <em>inner class</em> is defined in the scope of an outer class.</li></ul><p> (An instance of) it can reference data and methods (even private ones) of the <em>outer class</em> it belongs to.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160346623.png" alt="java1/image-20220602160346623"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160359496.png" alt="java1/image-20220602160359496"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160408113.png" alt="java1/image-20220602160408113"></p><ul><li>An instance of an inner class (i.e. an <em>inner object</em>) must be associated with a specific outer object on the heap!</li><li></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160422782.png" alt="java1/image-20220602160422782"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160435539.png" alt="java1/image-20220602160435539"></p><p>An anonymous class is a special kind of class: a <em>local class without a</em> <em>name</em>.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160447672.png" alt="java1/image-20220602160447672"></p><p>• only one instance of the class can ever be made;</p><p>• class can’t be accessed from anywhere else in the program</p><p> It allows an object to be created using an expression that <em>combines</em> object creation with the declaration of the class.</p><p>An anonymous class is defined as <em>part of a new expression</em> and <em>must</em>be a subclass or implement an interface.（必须是子类或者接口的实现）</p><p>– The class body can define methods but cannot define any constructors.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160513949.png" alt="java1/image-20220602160513949"></p><p>匿名内部类，在【创建对象】的时候，只能使⽤唯⼀⼀次。</p><p>如果希望多次创建对象，⽽且类的内容⼀样的话，那么就需要使⽤单独定义的实现类了。</p><p>匿名对象，在【调⽤⽅法】的时候，只能调⽤唯⼀⼀次。</p><p>如果希望同⼀个对象，调⽤多次⽅法，那么必须给对象起个名字。</p><p>匿名内部类是省略了【实现类/⼦类名称】，但是匿名对象是省略了【对象名称】</p><blockquote><p>强调：匿名内部类和匿名对象不是⼀回事！！！</p></blockquote><h3 id="9-Debugger"><a href="#9-Debugger" class="headerlink" title="9.Debugger"></a>9.Debugger</h3><p> Compilation or syntactical errors: easiest type of error to debug</p><p> Logic errors: occur during the program’s execution.</p><p> <em>runtime errors</em> &amp; <em>threading errors</em></p><h2 id="Teaching-Block3"><a href="#Teaching-Block3" class="headerlink" title="Teaching Block3"></a>Teaching Block3</h2><h3 id="1-interface"><a href="#1-interface" class="headerlink" title="1.interface"></a>1.interface</h3><p>接口是一种与类类似的结构，只能包含常量和抽象方法。</p><p>无构造方法</p><ul><li>Before Java SE8, interfaces could have:</li><li>static final 位置可换！！</li></ul><p>constant fields (public static final可以省略)(引用时使用父类接口作为前缀<strong>Father.age</strong>)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>abstract</strong> methods （public abstract可以省略）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>From Java SE8, interfaces can also have:</li></ul><blockquote><p><strong>default</strong> methods  Allow developers to add new functionality to interfaces, without impacting any existing classes that are already implementing the interface.用了default关键字修饰方法之后，这个方法是可以有方法体</p></blockquote><p>==Can be overridden in the class that implements the interface.==Provide backward compatibility(向后兼容) for existing interfaces.</p><blockquote><p><strong>static</strong> methods  Allow developers to define utility methods in the interface也可以具有方法体（不可被重写）与类中加static一样均可用 接口名.方法名 调用</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160537759.png" alt="java1/image-20220602160537759"></p><p>接口中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>类实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> className <span class="token keyword">implements</span> interfaceName<span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220416114202044-1653819852853.png" alt="java1/image-20220416114202044"></p><p>接口不能利用new实例化，所以必须通过类继承接口后，实例化类间接实现接口实例化</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160610929.png" alt="java1/image-20220602160610929"></p><p>Java’s “multiple inheritance” is <em>at interface level</em> only!(可以利用接口实现Java中的多继承)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> className <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span><span class="token class-name">B</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Only interfaces can do multiple inheritance</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160619631.png" alt="java1/image-20220602160619631"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160627123.png" alt="java1/image-20220602160627123"></p><p>多继承中如果发生两个父类有相同方法：</p><ul><li><p><em>Same named methods</em>:</p><p>If they have different parameters, then <strong>Child</strong> interface has both (this is same as <em>overloading</em>).</p></li></ul><p>​    If they differ by only return type, then <em>error</em>.</p><p>​    If the two methods are identical, only keep one.</p><ul><li><p><em>Same named constants</em>:</p><p>we keep both constants. To refer to them, <em>use parent interface name</em> as prefix</p></li></ul><h3 id="2-Garbage-Collection"><a href="#2-Garbage-Collection" class="headerlink" title="2.Garbage Collection"></a>2.Garbage Collection</h3><ul><li><strong>Two main areas of memory in Java</strong>:</li></ul><p>– (Garbage-collectible) Heap (where <strong>objects</strong> live);</p><p>– Stack (where <strong>local variables</strong> and <strong>methods,</strong> when called, live)</p><h4 id="2-1-四种变量的存储位置："><a href="#2-1-四种变量的存储位置：" class="headerlink" title="2.1.四种变量的存储位置："></a>2.1.四种变量的存储位置：</h4><p>==Local (<em>also known as</em> stack) variables (on the <em>Stack</em>)== </p><p>• Variables declared in a method and method parameters.</p><p>• Temporary variables, alive only when the method they belong to is on the <em>Stack</em></p><p>==Instance variables (on the <em>Heap</em>)==</p><p>• Variables declared in a class (<strong>not</strong> inside of a method).</p><p>• Live inside the object they belong to</p><p>==Object reference <strong>(non-primitive）</strong> variables:==</p><p>– Hold a reference to an object, not the actual object.</p><p>– A local variable that is a reference to an object goes on the <em>Stack</em> (the object it refers to still goes on the <em>Heap</em>).</p><p>==类变量和实例变量：==</p><p> A class variable is created when the <em>class</em> is created, rather than when an <em>object</em> is created</p><p>To declare a class variable, use the modifier <strong>static</strong>.</p><p>If you declare something as <em>static</em>, it means that all objects have the <strong>same</strong> copy of that </p><p>variable/method（见block2）</p><p>• Static is <em>like global variables</em> but applies classwide.</p><p>• Static methods <em>become available when the class is loaded</em> (created), not </p><p>when you make an instance of it.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220511203936802-1653819852853.png" alt="java1/image-20220511203936802"></p><hr><h4 id="2-2-Methods-and-the-Stack"><a href="#2-2-Methods-and-the-Stack" class="headerlink" title="2.2.Methods and the Stack"></a>2.2.<strong>Methods and the Stack</strong></h4><p> Method goes on top of the <em>Stack</em> when it is called and stays in the <em>Stack</em> until it’s done </p><p><strong>Stack frame</strong>(栈帧):</p><p>– What actually is pushed onto the <em>Stack</em>.</p><p>– Contains the state of the method </p><p>(which line of code is executing and values of all local variables).</p><p>每一个方法从调用开始至执行完成的过程，都对应着一个栈帧在虚拟机里面从入栈到出栈的过程。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160643492.png" alt="java1/image-20220602160643492"></p><h4 id="2-3-Object-References"><a href="#2-3-Object-References" class="headerlink" title="2.3.Object References"></a>2.3.<strong>Object References</strong></h4><p>Object reference <strong>(<strong>aka non-primitive</strong>)</strong> variables:</p><p>– Hold a reference to an object, not the actual object.</p><p>– A local variable that is a reference to an object goes on the <em>Stack</em> (the object it refers to still goes on the <em>Heap</em>).</p><blockquote><p>reference variable是一个局部变量所以就在stack上，但是其指向的对象在heap上</p></blockquote><h4 id="2-4-构造函数链-constructor-chaining"><a href="#2-4-构造函数链-constructor-chaining" class="headerlink" title="2.4.构造函数链 constructor chaining"></a>2.4.构造函数链 constructor chaining</h4><p> When an object is created, that object will have “layers” of itself representing each superclass.</p><p>拥有父类的层次和自己的层次</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160654651.png" alt="java1/image-20220602160654651"></p><blockquote><p>When a new object is created, all the constructors in its inheritance tree must be run.</p><p>An object is only completely formed when all the superclass parts of itself are formed</p></blockquote><h4 id="2-5-Life-of-Objects-and-Variables"><a href="#2-5-Life-of-Objects-and-Variables" class="headerlink" title="2.5.Life of Objects and Variables"></a>2.5.<strong>Life of Objects and Variables</strong></h4><p>• Life of an object:</p><p> depends only on the life of reference variables referring to it.</p><p>– Object is <strong>alive</strong> (or <strong>dead</strong>) if its reference is <strong>alive</strong> (or <strong>dead</strong>).</p><p>• Variable lifetime:</p><p>– same for primitive and reference variables;</p><p>– different for local and instance variables</p><blockquote><p><strong>local variables</strong>: live only within the method that declared it</p><p> Is <strong>alive</strong> as long as its <em>Stack</em> frame is on the <em>Stack</em></p><p><strong>instance variables</strong>: live for as long as object they belong to lives.</p></blockquote><h4 id="2-6-GC（简单介绍）"><a href="#2-6-GC（简单介绍）" class="headerlink" title="2.6.GC（简单介绍）"></a>2.6.GC（简单介绍）</h4><p>Objects in Java are <em>dynamically</em> allocated and created <em>on demand</em>:</p><p>– memory space for an object is allocated at <em>runtime</em>, not at <em>compile time</em>;</p><p>– the <strong>new</strong> statement causes the memory for an object to be allocated</p><p> (similar to the <strong>C</strong> <strong>malloc()</strong> function)</p><p>java不会内存泄漏，因为有GC动态调整存储空间</p><p>If an object has only one reference to it and the <em>Stack</em> frame holding it gets popped off the <em>Stack</em>, then the object is now abandoned in the <em>Heap</em>.</p><p>如果没有引用变量指向一个对象，那么这个对象将被GC回收</p><p><strong>Making an Object Eligible for GC</strong>：</p><p>(1) The reference goes out of scope, permanently.</p><p>(2) The reference is assigned to another object.</p><p>(3) The reference is explicitly set to <strong>null</strong>.</p><p><strong>Setting a reference variable to</strong> <strong>null</strong> (it means <strong>no object</strong>)</p><ul><li>finalizer（终结方法）：The opposite of a Java constructor is a finalizer; it can sometimes be used for the <em>cleanup</em> of an object.</li></ul><h3 id="3-常用类"><a href="#3-常用类" class="headerlink" title="3.常用类"></a>3.常用类</h3><h4 id="3-1-Math类"><a href="#3-1-Math类" class="headerlink" title="3.1.Math类"></a>3.1.Math类</h4><h5 id="3-1-1方法（全部为类方法）"><a href="#3-1-1方法（全部为类方法）" class="headerlink" title="3.1.1方法（全部为类方法）"></a>3.1.1方法（全部为类方法）</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220511214937944-1653819852853.png" alt="java1/image-20220511214937944"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220420205927974-1653819852853.png" alt="java1/image-20220420205927974"></p><p>Math类中成员方法没有意义，所以没有成员方法</p><p>Math类不能实例化</p><blockquote><p>• <strong>Classes</strong> that can’t be instantiated: </p><p>– <strong>Abstract classes</strong> and <strong>interfaces</strong>.</p><p>– Classes with <strong>private constructors</strong>.</p><p>Only code inside the class can invoke a private constructor!</p></blockquote><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160740267.png" alt="java1/image-20220602160740267"></p><p>Math类设计如上：不能实例化</p><h5 id="3-1-2利用static-final定义变量"><a href="#3-1-2利用static-final定义变量" class="headerlink" title="3.1.2利用static final定义变量"></a>3.1.2利用static final定义变量</h5><p>– Variables that are <strong>static</strong> and <strong>final</strong> cannot be changed.</p><p>习惯变量名全大写</p><p><strong>Initialisation</strong> of <strong>static final</strong> variables（两种初始化方法）:</p><p>– When the variable is <strong>declared</strong>.</p><p>– In a <strong>static initialiser</strong>: block of code that runs when a class is loaded, before any code can use the class.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Bar</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">double</span> BAR_SIGN<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token punctuation">{</span>BAR_SIGN <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-2-Random-Class"><a href="#3-2-Random-Class" class="headerlink" title="3.2.Random Class"></a>3.2.<strong>Random</strong> <strong>Class</strong></h4><p>The <strong>Random</strong> class is part of the <strong>java.util</strong> package and provides methods that generate random numbers.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RandTest</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">float</span> aRandomFloat <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextFloat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> aRandomInt <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A random float is "</span> <span class="token operator">+</span> aRandomFloat<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A random int is "</span> <span class="token operator">+</span> aRandomInt<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-3-包装类-Wrapper-Classes"><a href="#3-3-包装类-Wrapper-Classes" class="headerlink" title="3.3.包装类(Wrapper Classes)"></a>3.3.包装类(<strong>Wrapper Classes</strong>)</h4><p>把基本数据类型包装成类</p><p> used when a variable of a primitive type needs to be treated as an object.</p><p>Wrapper classes are part of <strong>java.lang</strong> package no need to import them:</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220420211438457-1653819852853.png" alt="java1/image-20220420211438457"></p><p>注意除了int和char其余均为首字母大写</p><p>基本数据类型与字符串的转换：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160757574.png" alt="java1/image-20220602160757574"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a<span class="token operator">=</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token function">parssInt</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="3-2-1装箱、拆箱（Wrapping-versus-Unwrapping）"><a href="#3-2-1装箱、拆箱（Wrapping-versus-Unwrapping）" class="headerlink" title="3.2.1装箱、拆箱（Wrapping versus Unwrapping）"></a>3.2.1装箱、拆箱（<strong>Wrapping</strong> <em>versus</em> <strong>Unwrapping</strong>）</h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220420212052011-1653819852853.png" alt="java1/image-20220420212052011"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> iWrapped <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> unWrapped <span class="token operator">=</span> iWrapped<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>Autoboxing</strong>自动装箱（包装类和基本数据类型等效使用）</p><p>automatic wrapping ： conversion from primitive type to wrapper object is automatic!</p><p>体现在：</p><ul><li><p>Method Arguments</p><p>you can pass either a reference or a matching primitive to a method that takes in a wrapper type; reverse is also true!</p></li><li><p>Return Values</p><p>you can return either a reference or a matching </p><p>primitive on a method with a primitive return type; reverse is also true!</p></li><li><p>Boolean Expressions</p><p>where a boolean value is expected, you can use </p><p>either an expression evaluating to a boolean, a primitive or a matching </p><p>wrapper.</p></li><li><p>Operations on Numbers</p><p>in operations where a primitive type is expected, you can use a wrapper type!</p></li><li><p>Assignments</p><p>a variable declared as a wrapper (or primitive) can be assigned a matching wrapper (or </p><p>primitive)</p></li><li><p>All wrapper classes are subclasses of the <strong>Number</strong> abstract class (part of the <strong>java.lang</strong> package)</p></li></ul><p>we can construct a <strong>Number</strong> object of type <strong>Integer</strong>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Number</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> Often used when manipulating collections of numbers.</p><ul><li>Subclasses of <strong>Number</strong> provide constants to, e.g. represent the upper and lower</li></ul><p>bounds of the corresponding data type (<strong>MIN_VALUE</strong> and <strong>MAX_VALUE</strong>, </p><p>respectively)</p><h4 id="3-3-Scanner-Class"><a href="#3-3-Scanner-Class" class="headerlink" title="3.3.Scanner Class"></a>3.3.<strong>Scanner</strong> <strong>Class</strong></h4><ul><li><strong>Scanner</strong> class (of <strong>java.util</strong> package) allows a <em>word</em> to be specified as a delimiter（分隔符）</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> “<span class="token class-name">Let</span> your heart guide you<span class="token punctuation">.</span>”<span class="token punctuation">;</span><span class="token class-name">Scanner</span> myScanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>myScanner<span class="token punctuation">.</span><span class="token function">useDelimiter</span><span class="token punctuation">(</span>“you”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>myScanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myScanner<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Output is …</p><p>Let</p><p>r heart guide</p><ul><li><p>Scanning primitive type values: several methods can be used to obtain a token with a primitive data type value</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"1 10 100 1000"</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> myScanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>myScanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> sum <span class="token operator">+=</span> myScanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sum = "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Reading console input</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Please enter an int value: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> myScanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> myScanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="4-Recursion"><a href="#4-Recursion" class="headerlink" title="4.Recursion"></a>4.Recursion</h3><p><strong>Methods that call themselves</strong>, directly or indirectly</p><p>需要Stop condition</p><ul><li>brings additional overhead to programs:</li></ul><p> Everytime a program calls a recursive method, space needs to be assigned for the method’s local variables and parameters.  Extra memory required + time to manage the extra space</p><h2 id="Teaching-Block4"><a href="#Teaching-Block4" class="headerlink" title="Teaching Block4"></a>Teaching Block4</h2><h3 id="1-GUI"><a href="#1-GUI" class="headerlink" title="1.GUI"></a>1.GUI</h3><p><strong>GUI</strong>: Method for interacting with a computer via the manipulation of text, images and “widgets”.</p><p>使用awt和swing</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">java<span class="token punctuation">.</span>awtjavax<span class="token punctuation">.</span>swing<span class="token comment">//Javax表示扩展包</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="1-1-3-main-concepts"><a href="#1-1-3-main-concepts" class="headerlink" title="1.1.  3 main concepts:"></a>1.1.  <em>3 main concepts</em>:</h4><p>– Component: An <em>object</em> that the user can see on the screen and can also interact with.</p><p>– Container: A <em>component</em> that can hold other components.</p><p>– Event: An <em>action</em> triggered by the user (e.g. pressing a key, clicking a mouse button).</p><blockquote><p><em>Containers</em>: objects capable of containing other Componentobjects.</p><p><em>Components</em>: single entities with no <em>containment</em> abilities. </p></blockquote><p>二者都是抽象类</p><h4 id="1-2-两种容器："><a href="#1-2-两种容器：" class="headerlink" title="1.2.两种容器："></a>1.2.两种容器：</h4><p>• <em>Top-level Containers</em>: At least one of these containers <em>must</em> be present in any Swing application. </p><p>顶层容器是进行图形编程的基础，一切图形化的东西都必须包括在顶层容器中。顶层容器是任何图形界面程序都要涉及的主窗口，是显示并承载组件的容器组件。</p><p>• <em>General-purpose Containers</em>:Found in most Swing applications. </p><p>中间容器是容器组件的一种，也可以承载其他组件，但中间容器不能独立显示，必须依附于其他的顶层容器</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160826785.png" alt="java1/image-20220602160826785"></p><h4 id="1-3-awt包："><a href="#1-3-awt包：" class="headerlink" title="1.3.awt包："></a>1.3.awt包：</h4><p>The <strong>java.awt</strong> package contains most of the classes needed to create GUI applications and Applets in Java.</p><p>几种其中的类：</p><p>– Container Classes: Graphical <em>widgets</em> capable of containing collections of other graphical widgets (i.e. <strong>Panel</strong>, <strong>Window</strong>, <strong>Dialog</strong>and <strong>Frame</strong>).</p><p>– Component Classes: Atomic graphical widgets like <strong>Button</strong>, <strong>Menu</strong>and <strong>List</strong>. </p><p>– Layout Manager Classes: Control the layout of component objects on/in container objects.</p><p>– Primitive Graphics Classes: Control and access primitive graphics like <strong>Point</strong>, <strong>Rectangle</strong> and <strong>Polygon</strong>. </p><p>– Event Handling Classes: Deal with events received from the GUI and other system items.</p><p>– Listener Classes: Receive events from graphical components and act on them</p><ul><li>制作GUI步骤：</li></ul><ol><li>Make a frame: create an instance of <strong>JFrame</strong></li><li>Make a widget (e.g. make a button or text field)</li><li>Add the widget to the frame</li><li>Display the frame: must <em>give it a size</em> and <em>make it visible</em></li></ol><h4 id="1-4-Containers（主要用swing）"><a href="#1-4-Containers（主要用swing）" class="headerlink" title="1.4.Containers（主要用swing）"></a><strong>1.4.Containers</strong>（主要用swing）</h4><p>常用的containers包括：<strong>JDialog JFrame JPanel ScrollPane</strong>等等</p><h5 id="1-4-1-JFrame窗体（基础）"><a href="#1-4-1-JFrame窗体（基础）" class="headerlink" title="1.4.1.JFrame窗体（基础）"></a>1.4.1.<strong>JFrame</strong>窗体（基础）</h5><p>JFrame 是 Swing 组件的顶层容器，该类继承了 AWT 的 Frame 类</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token class-name">JFrame</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FrameDemo</span> <span class="token keyword">extends</span> <span class="token class-name">JFrame</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token class-name">FrameDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setTitle</span><span class="token punctuation">(</span><span class="token string">"EBU4201 Demo JFrame"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setSize</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">FrameDemo</span> myFrame <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FrameDemo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>You can extend Frame in your program (more common),or instantiate the Frame class in your own class (less common) to build a basic GUI. </p></li><li><p>通常在frame类中定义好组件，在main中实例化</p></li><li><p>未调用方法设置时，JFrame大小为0，且不可见</p></li><li><p>当创建一个 JFrame 类的实例化对象后，其他组件并不能够直接放到容器上面，需要将组件添加至==内容窗格==，而不是直接添加至 JFrame 对象。示例代码如下：</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">frame<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160846933.png" alt="java1/image-20220602160846933"></p><ul><li>常用的API方法:</li></ul><table><thead><tr><th>方法签名</th><th>方法功能</th></tr></thead><tbody><tr><td>setLocation(int x, int y)</td><td>设置组件的位置。</td></tr><tr><td>setSize(int width, int height)</td><td>设置组件的大小。</td></tr><tr><td>setBounds(int x, int y, int width, int height)</td><td>同时设置组件的位置、大小。</td></tr><tr><td>setVisible(Boolean b):</td><td>设置该组件的可见性。</td></tr><tr><td>setTitle(String s);</td><td>设置标题栏</td></tr><tr><td><strong>setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</strong></td><td>设置窗口关闭</td></tr></tbody></table><ul><li>添加组件的方法：</li></ul><table><thead><tr><th>方法签名</th><th>方法功能</th></tr></thead><tbody><tr><td>Component add(Component comp)</td><td>向容器中添加其他组件 (该组件既可以是普通组件，也可以是容器) ， 并返回被添加的组件 。</td></tr><tr><td>Component getComponentAt(int x, int y):</td><td>返回指定点的组件 。</td></tr><tr><td>int getComponentCount():</td><td>返回该容器内组件的数量 。</td></tr><tr><td>Component[] getComponents():</td><td>返回该容器内的所有组件 。</td></tr></tbody></table><blockquote><p><em>add两次相同的控件后，会把前面的自动取消掉</em></p></blockquote><h4 id="1-5-Event-handle-事件处理"><a href="#1-5-Event-handle-事件处理" class="headerlink" title="1.5.Event handle(事件处理)"></a>1.5.Event handle(事件处理)</h4><ul><li><p>A (user) <em>event</em> is triggered any time when some sort of defined signal is received by the program. </p></li><li><p>An event is generated by external user actions</p></li><li><p>.*表示该包内所有引用类</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span>event<span class="token punctuation">.</span>*<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>You need an <strong>listener</strong>（监听器） and a <strong>source</strong>（源） for each <strong>event</strong></li></ul><p>​     一个事件源可以拥有多个事件监听器</p><ul><li><p><strong>Listener Interface</strong>: the <em>bridge</em> between the listener (the user code) and the event source (e.g. the button).</p></li><li><p><strong>Event source</strong>: object that can turn user actions (e.g. click a mouse, close a window) into events.</p></li><li><p>Every event type has a matching listener interface：</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160922914.png" alt="java1/image-20220602160922914"></p><ul><li><p>创建event handle步骤：</p><p>1.首先创建事件源组件对象（比如按钮）；</p><p>2.自定义类，实现XxxListener接口，重写方法；Implement the <strong>ActionListener</strong> interface:</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token keyword">implements</span> <span class="token class-name">ActionListener</span> <span class="token punctuation">{</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​     3.调用事件源组件对象的addXxxListener方法完成==注册监听==Register with the widget: </p><pre class="line-numbers language-java" data-language="java"><code class="language-java">someComponent<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span>instanceOfMyClass<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//通常直接用this代指</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​     4.重写监听接口中的actionPerformed（e）方法 Define the event-handling method:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// code that reacts to the action ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    举例：</p><ul><li>方法一：相当于把程序所在类当成了监听类</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602160937169.png" alt="java1/image-20220602160937169"></p><ul><li><p>方法二：使用匿名内部类：</p><p>不用写implement</p></li></ul><p>​      deal with <em>multiple</em> event sources:</p><ol><li><p>Register each widget with the required listener and then determine which widget generated the event.</p></li><li><p>Use an <em>anonymous inner class</em> for each event source.</p></li><li><p>Use a specialised <em>inner class</em> for each event source.</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">minusButton<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ActionListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">actionPerformed</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>         label<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">""</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">--</span>number<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>方法三：使用内部类：在主界面的类中不实现接口，而是在内部类中实现</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">someComponent<span class="token punctuation">.</span><span class="token function">addActionListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> innerclassName<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161000360.png" alt="java1/image-20220602161000360"></p><p>  <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161027187.png" alt="java1/image-20220602161027187"></p><p>原理：例如，如果鼠标单击了按钮对象 Button，则该按钮 Button 就是事件源，而 Java 运行时系统会自动生成 ActionEvent 类的对象 ActionEvent，该对象中描述了单击事件发生时的一些信息。之后，事件监听器对象将接收由 Java 运行时系统传递过来的事件对象 ActionEvent，并进行相应的处理。</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161039631.png" alt="java1/image-20220602161039631"></p><h4 id="1-6-常用component："><a href="#1-6-常用component：" class="headerlink" title="1.6.常用component："></a>1.6.常用component：</h4><p>添加component的方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">myFrame<span class="token punctuation">.</span><span class="token function">getContentPane</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>myButton<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-6-1JLabel"><a href="#1-6-1JLabel" class="headerlink" title="1.6.1JLabel:"></a>1.6.1<strong>JLabel</strong>:</h5><p> component that you can put text into.</p><p>When creating a label, you can specify the initial value and the alignment （对齐方式）you wish to use within the label.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JLabel</span> myLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JLabel</span><span class="token punctuation">(</span>“text”<span class="token punctuation">,</span> <span class="token class-name">JLabel</span><span class="token punctuation">.</span>RIGHT<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-6-2-JButton"><a href="#1-6-2-JButton" class="headerlink" title="1.6.2 JButton"></a>1.6.2 JButton</h5><p> extends <strong>Component</strong>, displays a string and delivers an <strong>ActionEvent</strong> for each mouse click.</p><p>– Normally buttons are displayed with a <em>border</em>. </p><p>– In addition to text, <strong>JButtons</strong> can also display icons</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JButton</span> myButton <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JButton</span><span class="token punctuation">(</span>“text”<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>常用组件的<a href="https://cloud.tencent.com/developer/article/1732496">介绍</a></p><table><thead><tr><th align="left">组件名称</th><th align="left">定义</th></tr></thead><tbody><tr><td align="left">JButton</td><td align="left">代表Swing按钮，按钮可以带一些图片或文字</td></tr><tr><td align="left">JCheckBox</td><td align="left">代表Swing中的复选框组件</td></tr><tr><td align="left">JComboBox</td><td align="left">代表Swing下拉列表框，可以在下拉显示区域显示多个选项</td></tr><tr><td align="left">JFrame</td><td align="left">代表Swing的框架类</td></tr><tr><td align="left">JDialog</td><td align="left">代表Swing版本的对话框</td></tr><tr><td align="left">JLabel</td><td align="left">代表Swing中的标签组件</td></tr><tr><td align="left">JRadioButton</td><td align="left">代表Swing单选按钮</td></tr><tr><td align="left">JList</td><td align="left">代表能够在用户界面中显示一系列条目的组件</td></tr><tr><td align="left">JTextField</td><td align="left">代表文本框</td></tr><tr><td align="left">JPasswordField</td><td align="left">代表密码框</td></tr><tr><td align="left">JTextArea</td><td align="left">代表Swing中的文本区域</td></tr><tr><td align="left">JOptionPane</td><td align="left">代表Swing中的一些对话框</td></tr></tbody></table><h4 id="1-6-Layout"><a href="#1-6-Layout" class="headerlink" title="1.6.Layout"></a>1.6.<strong>Layout</strong></h4><p><strong>Layout Manager</strong>: An interface that defines methods for positioning and sizing objects within a container.</p><p>在java.awt包中</p><p>Java defines several default implementations of <strong>LayoutManager</strong>. </p><ul><li><p>JFrame默认使用BorderLayout管理其内部组件布局;</p></li><li><p>JPanel默认使用FlowLayout管理其内部组件布局；</p></li><li><p>JScrollPane 默认使用 BorderLayout 管理其内部组件布局； </p><p><strong>Geometrical placement in a Container</strong> is controlled by a <strong>LayoutManager</strong> object.</p><p>设置Frame为最佳大小(打开窗口就为这么大不用resize)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">frame<span class="token punctuation">.</span><span class="token function">pack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><strong>Layouts</strong> allow you to format components on the screen in a platformindependent way.</p><p>– <strong>FlowLayout</strong></p><p>– <strong>GridLayout</strong></p><p>– <strong>BorderLayout</strong></p><p>Step 1: Create the layout.</p><p>Step 2: Invoke the <strong>setLayout()</strong> method on the container to use the new layout.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JPanel</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token function">setLayout</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>or</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">JPanel</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JPanel</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlowLayout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="1-6-1-FlowLayout"><a href="#1-6-1-FlowLayout" class="headerlink" title="1.6.1.FlowLayout"></a>1.6.1.<strong>FlowLayout</strong></h5><p>is the default layout for the <strong>JPanel</strong> class. </p><p>– If the screen is resized, the components’ flow will change based on the new width and height.</p><p>屏幕resize时，每行按钮个数会变，但是按钮大小不会变</p><p>When you add components to the screen, they flow left to right(centered), based on the order added and the width of the screen. </p><p>– Constructors: </p><p>• FlowLayout()</p><p>• FlowLayout(int align)</p><p>• FlowLayout(int align, int hgap, int vgap)</p><p>!<img src="/FlowLayout-1653819852853.jpg"></p><h5 id="1-6-2-GridLayout"><a href="#1-6-2-GridLayout" class="headerlink" title="1.6.2.GridLayout"></a>1.6.2.<strong>GridLayout</strong></h5><table><thead><tr><th>构造方法</th><th>方法功能</th></tr></thead><tbody><tr><td>FlowLayout()</td><td>使用默认 的对齐方式及默认的垂直间距、水平间距创建 FlowLayout 布局管理器。</td></tr><tr><td>FlowLayout(int align)</td><td>使用指定的对齐方式及默认的垂直间距、水平间距创建 FlowLayout 布局管理器。</td></tr><tr><td>FlowLayout(int align,int hgap,int vgap)</td><td>使用指定的对齐方式及指定的垂直问距、水平间距创建FlowLayout 布局管理器。</td></tr></tbody></table><ul><li><strong>GridLayout</strong> arranges components in rows or columns:</li></ul><p>– If number of rows is specified, the number of columns will be the number of components divided by the rows.（组件数除行数）</p><p>– If number of columns is specified, the number of rows will be the number of components divided by the columns.（组件数除列数）</p><p>GridLayout 布局管理器将容器分割成纵横线分隔的网格 ， 每个网格所占的区域大小相同。当向使用 GridLayout 布局管理器的容器中添加组件时， 默认从左向右、 从上向下依次添加到每个网格中 。</p><p> 与 FlowLayout不同的是，放置在 GridLayout 布局管理器中的各组件的大小由组件所处的区域决定(每个组件将自动占满整个区域) 。    </p><p>也就是说当窗口resize时，每行每列按钮个数不变，大小会随着屏幕改变</p><p>– Constructors: </p><p>• GridLayout():default of 1 column per component, in a single row. </p><p>• GridLayout(int rows, int cols) </p><p>• GridLayout(int rows, int cols, int hgap, int vgap) </p><h5 id="1-6-3-BorderLayout"><a href="#1-6-3-BorderLayout" class="headerlink" title="1.6.3.BorderLayout"></a>1.6.3.<strong>BorderLayout</strong></h5><table><thead><tr><th>构造方法</th><th>方法功能</th></tr></thead><tbody><tr><td>BorderLayout()</td><td>使用默认的水平间距、垂直 间距创建 BorderLayout 布局管理器 。</td></tr><tr><td>BorderLayout(int hgap,int vgap):</td><td>使用指定的水平间距、垂直间距创建 BorderLayout 布局管理器。</td></tr></tbody></table><p>如果不往某个区域中放入组件，那么该区域不会空白出来，而是会被其他区域占用</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161102960.png" alt="java1/image-20220602161102960"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"西侧按钮"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>WEST<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"南侧按钮"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>SOUTH<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"北侧按钮"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>NORTH<span class="token punctuation">)</span><span class="token punctuation">;</span>frame<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Button</span><span class="token punctuation">(</span><span class="token string">"中间按钮"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">BorderLayout</span><span class="token punctuation">.</span>CENTER<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="1-7-Three-types-of-graphics-in-GUI"><a href="#1-7-Three-types-of-graphics-in-GUI" class="headerlink" title="1.7.Three types of graphics in GUI"></a>1.7.<strong>Three types of graphics in GUI</strong></h4><h5 id="1-7-1-Graphics-class"><a href="#1-7-1-Graphics-class" class="headerlink" title="1.7.1.Graphics class:"></a>1.7.1.<strong>Graphics</strong> class:</h5><p>Java graphics are based on <em>pixels</em> (small dot on the screen that can be accessed).像素</p><p> A <em>pixel</em> is identified by a pair of numbers(<em>coordinates</em>) starting at zero, (x,y):</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161114516.png" alt="java1/image-20220602161114516"></p><p>• x = horizontal position (increases left to right)</p><p>• y = vertical position (increases top to bottom)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220515104354341-1653819852853.png" alt="java1/image-20220515104354341"></p><p><strong>Step 1</strong>: Make a paintable widget.</p><p>• Create subclass of <strong>JPanel</strong> &amp; override the <strong>paintComponent()</strong> method.</p><p>• Put all the graphics code in the <strong>paintComponent()</strong> method.</p><p>• The <strong>paintComponent()</strong> method is called only by the JVM; the <em>programmer does not call it</em>!</p><p>• It takes a <strong>Graphics</strong> object – drawing canvas for what is displayed on the screen</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>awt<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>swing<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">MyDrawingPanel</span> <span class="token keyword">extends</span> <span class="token class-name">JPanel</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paintComponent</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span>g<span class="token punctuation">.</span><span class="token function">fillRect</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220515104815143-1653819852853.png" alt="java1/image-20220515104815143"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220515104825449-1653819852853.png" alt="java1/image-20220515104825449"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220515104942497-1653819852853.png" alt="java1/image-20220515104942497"></p><h5 id="1-7-2-Graphics2D-Class"><a href="#1-7-2-Graphics2D-Class" class="headerlink" title="1.7.2.Graphics2D Class"></a>1.7.2.<strong>Graphics2D</strong> <strong>Class</strong></h5><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220515105324652-1653819852853.png" alt="java1/image-20220515105324652"></p><h5 id="1-7-3-Color-Class"><a href="#1-7-3-Color-Class" class="headerlink" title="1.7.3.Color Class"></a>1.7.3.<strong>Color</strong> <strong>Class</strong></h5><p>Java has a <strong>Color</strong> class.</p><ul><li>To define the colour of an object, you can directly use the static colour variables of the <strong>Color</strong>class.</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161131822.png" alt="java1/image-20220602161131822"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">paintComponent</span><span class="token punctuation">(</span><span class="token class-name">Graphics</span> g<span class="token punctuation">)</span> <span class="token punctuation">{</span>g<span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">Color</span><span class="token punctuation">.</span>red<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// g object becomes red</span>g<span class="token punctuation">.</span><span class="token function">drawLine</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// draw a red line</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>• You can also set your own colour by choosing an RGB value:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Color</span> myColor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Color</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220515105915729-1653819852853.png" alt="java1/image-20220515105915729"></p><h3 id="2-Exception-Handling"><a href="#2-Exception-Handling" class="headerlink" title="2.Exception Handling"></a>2.<strong>Exception Handling</strong></h3><ul><li>Some causes of error situations:</li></ul><p>– Incorrect implementation </p><p>– Inappropriate object request</p><p>– Inconsistent or inappropriate object state</p><ul><li><p>programming errors</p><p>– Trying to access an array out of bounds </p><p> this throws an <strong>ArrayIndexOutOfBoundsException</strong> runtime error.</p><p>– Attempting to divide by zero </p><p>this throws an <strong>ArithmeticException</strong>runtime error</p></li></ul><blockquote><p>Exception: an object that signals to the calling code, the occurrence of an unusual condition.</p><p>Exceptions are <em>objects</em>, subclasses of **java.lang.Exception **class</p></blockquote><h4 id="2-1-Checked-versus-Unchecked-Exceptions"><a href="#2-1-Checked-versus-Unchecked-Exceptions" class="headerlink" title="2.1.Checked versus Unchecked Exceptions"></a>2.1.<strong>Checked</strong> <strong>versus</strong> <strong>Unchecked Exceptions</strong></h4><p>异常的分类：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161147594.png" alt="java1/image-20220602161147594"></p><p>Throwable类是所有异常的根</p><p>异常可以分为：系统错误、异常、运行时异常。</p><ol><li><p>系统错误（Error）、运行时异常（runtime exception）被称作免检异常（Unchecked exception）Unchecked exceptions: </p><p>– Subclasses of <strong>RuntimeException</strong>. </p><p>– Used for unanticipated failures.</p><p>– Where recovery is unlikely.</p><ul><li><p>Some exceptions thrown by Java class libraries are called <em>run-time</em> <em>exceptions</em></p><p>当出现这样的异常时，总是由虚拟机接管（提供好现成的异常对象）。</p><p>比如：我们从来没有人去处理过NullPointerException异常，它就是运行时异常，并且这种异常还是最常见的异常之一。</p></li><li><p>Java does not force client code to catch run-time exceptions (also called <em>unchecked exceptions</em>), because: </p></li><li><p>不强制要求写免检异常的捕获</p><p>– Run-time exceptions can occur so frequently that the cost of checking by the compiler would be very big.</p><p>– You <em>can</em> catch them if you believe there is ever likely to be a problem.</p><p>– Ideally, you should instead check input pre-conditions first!</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161203238.png" alt="java1/image-20220602161203238"></p></li></ul></li><li><p>其他异常都为必检异常（checked exception）</p><p>Checked exceptions: </p><p>– Subclasses of <strong>Exception</strong>. </p><p>– Used for anticipated failures.</p><p>– Where recovery may be possible.</p><p>编译器会强制程序员检查并处理必检异常</p></li></ol><h4 id="2-2-Run-Time-Error-Handling"><a href="#2-2-Run-Time-Error-Handling" class="headerlink" title="2.2.Run-Time Error Handling"></a>2.2.<strong>Run-Time Error Handling</strong></h4><p>Run-time programming errors are the most difficult to deal with</p><p>There’s <em>no support</em> given at <em>programming language level</em> for catching and managing errors in most languages.</p><p>Using exceptions enables potential <em>run-time</em> problems to be noticed at <em>compile time</em></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220517204741685-1653819852853.png" alt="java1/image-20220517204741685"></p><ul><li><p><strong>throws/throw</strong></p><p>抛出异常（不处理）</p><ol><li><p>throw:抛出异常的关键字</p><p>When writing code, we can <em>throw</em> exceptions, and thus force any clients that use it to <em>catch</em> these exceptions.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">XXXXException</span><span class="token punctuation">(</span><span class="token string">"错误信息"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>XXXXException必须为系统封装过的类，或者利用自己创建的其子类</p></li><li><p>throws:声明异常的关键字</p><p>不管这个方法中是否有throw语句，只要这个方法中调用过抛出异常的方法，就要给这个方法加throws（调用链中的每一层都要加）</p><p>表明此方法可能会抛出某个异常（抛没抛还得看throw的条件）</p><p>用于==方法==头：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">XXXExceotion</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">myMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">XXXExceotion1</span><span class="token punctuation">,</span><span class="token class-name">XXXExceotion2</span><span class="token punctuation">,</span><span class="token class-name">XXXExceotion3</span><span class="token punctuation">{</span>    <span class="token comment">//多个异常</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Javadoc documentation syntax to indicate that method <em>throws</em> an exception: @throws ExceptionType reason</p></blockquote><p>you <em>don’t</em> want to catch exceptions, but want client code to <em>handle</em> them</p><p>当编写类的人不打算处理一个异常，只是抛出此异常留给写实现类的人去处理</p><p>in this case, you should declare that your method <strong>throws</strong> them</p></li></ol></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161223587.png" alt="java1/image-20220602161223587"></p><ul><li><p><strong>try/catch</strong> <strong>Block</strong></p><p>捕获 异常并处理（需要有异常被抛出）</p><p>When a program is run, the JVM will attempt to execute each statement in the <strong>try</strong> block in turn.</p><p>If any statement <strong>throws</strong> <strong>an</strong> <em>exception</em> then either:</p><p>– the <strong>catch</strong> block corresponding to this exception will be executed; </p><p>– the method in which this code lies will itself throw the exception</p><p>如果使用系统jvm默认异常处理方式时：</p><p>先从try内部开始执行，直到出现异常（此时会自动生成一个默认异常类对象，并提交给系统，而系统运行时接受到异常，从catch中找匹配的异常类，然后进行异常处理）</p><p>如果使用自己建的异常类（try中某个有异常的方法在声明时必须抛出异常）。</p><p>A <strong>try/catch</strong> section can also have a <strong>finally</strong> section, usually to <em>tidy up</em> afterwards</p><p>无论是否发生异常，finally 代码块中的代码总会被执行。在 finally 代码块中，可以运行清理类型等收尾善后性质的语句。</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span><span class="token comment">// code that can throw exceptions E1, ..., En</span><span class="token comment">// ...protect one or more statements here</span><span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">E1</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// code to handle exception E1</span><span class="token comment">// ...report and recover from the exception here</span><span class="token punctuation">}</span><span class="token comment">// ...</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">En</span> en<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// code to handle exception En</span><span class="token comment">// ...</span><span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span><span class="token comment">// perform any actions here that are common, regardless of whether or not an exception is thrown</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果一个方法声明了一个必检异常，则必须使用try-catch中调用处理，或者声明要用用throws抛出</p></blockquote><h4 id="2-3-Creating-Exception-Classes"><a href="#2-3-Creating-Exception-Classes" class="headerlink" title="2.3.Creating Exception Classes"></a>2.3.<strong>Creating Exception Classes</strong></h4><p>Java programmers can create their own exception classes.</p><p>构建一些Java不认为是异常的异常</p><p>比如：-100岁</p><p><strong>User exception classes</strong> are like any other class, but they must extend the <strong>Exception</strong> class.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// call constructor of parent Exception</span>     <span class="token comment">// other appropriate code</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// call constructor of parent Exception</span>      <span class="token comment">// other appropriate code</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If a <em>program fails to catch an exception</em>(没捕获只抛出), the JVM interpreter prints information about the exception, and the location where it occurred.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220518161430969-1653819852853.png" alt="java1/image-20220518161430969"></p><h4 id="2-4-Assertions-in-Java"><a href="#2-4-Assertions-in-Java" class="headerlink" title="2.4.Assertions in Java"></a>2.4.<strong>Assertions in Java</strong></h4><p>在实现中，assertion就是在程序中的一条语句，它对一个boolean表达式进行检查，一个正确程序必须保证这个boolean表达式的值为true；如果该值为false，说明程序已经处于不正确的状态下，系统将给出警告或退出。</p><p>Java statements that enable you to assert (or check) an assumptionabout your program</p><p>一般来说，assertion用于保证程序最基本、关键的正确性。</p><p>Assertions are used to ensure program correctness and avoid logic errors. </p><p>– For internal consistency checks, e.g. to check the object state following mutation (due to a <em>setter</em> method being called).</p><p>– During development (to <em>enable debugging</em>) but usually removed in production versions, e.g. via a run-time option.在产品代码中移除</p><ul><li>Java assertions are declared via an <strong>assert</strong> statement</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">assert</span> assertion<span class="token operator">-</span>expression <span class="token keyword">assert</span> assertion<span class="token operator">-</span>expression <span class="token operator">:</span> detailMessage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>– The <strong>assertion-expression</strong>（boolean类型） expresses something that should be <em>true</em> at this point.</p><p>– The <strong>detailMessage</strong> is a primitive type or an <strong>Object</strong> value（是要传入AssertionError构造方法的信息，会打印该错误信息）.</p><p>– An <strong>AssertionError</strong> exception is thrown if the assertion is <em>false</em>.（如果assertion是false就抛出一个AssertionError）是Error的子类</p><ul><li><p>Assertions are disabled by default, at runtime. But you can always,</p><p>– enable your program to run with assertions by calling it with the </p><p>-enableassertions (<strong>or</strong> in short form, <strong>-ea</strong>) switch</p><p>– disable your program from running with assertions by calling it with the </p><p>-disableassertions (<strong>or</strong> in short form, <strong>-da</strong>) switch</p><p>– enable/disable assertions at <em>package level</em> and at <em>class level</em>.</p></li></ul><pre class="line-numbers language-none"><code class="language-none">java –ea AssertionDemojava –da Testjava –ea:ClassUsedByTest Testjava –da:ClassUsedByAssertionDemo AssertionDemo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>不要使用assertions的情况</li></ul><p>– Should not be used to check the validity of a public method’s argument(s). </p><p>对于公共函数，我们通常不使用assertion检查，因为一般来说，公共函数必须对无效的参数进行检查和处理。而私有函数往往是直接使用的</p><p>– Do not include normal functionality(不要用于改变程序中参数的操作，断言不应该以任何方式改变程序的状态)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// Incorrect use of assertions:</span><span class="token keyword">assert</span> book<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-File-I-x2F-O"><a href="#3-File-I-x2F-O" class="headerlink" title="3.File I/O"></a>3.<strong>File I/O</strong></h3><p>Data stored in variables, arrays, objects is temporary: once a program has finished executing, information is lost!</p><p><em>Saving data</em> requires information to be stored in a file on a disk/CD</p><ul><li><p>two ways of saving data：</p><ul><li><p>Using <em>serialisation</em>：[Java 序列化](<a href="https://www.runoob.com/java/java-serialization.html">Java 序列化 | 菜鸟教程 (runoob.com)</a>)</p><p>The data stored will only be used by the Java program that generated it. </p></li><li><p>Using a file (such as a plain text file)</p></li></ul></li></ul><p>This interaction with an external source is what we refer to as Input/Output: </p><p>– <em>Input</em>: to bring in information (<em>read</em>) </p><p>– <em>Output</em>: to send out information (<em>write</em>) </p><p>can be </p><p>– <em>anywhere</em>: </p><p>– <em>of any type</em> (any object)</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161326106.png" alt="java1/image-20220602161326106"></p><p>Java input/output makes use of <em>streams</em>: </p><p>– A stream is a connection to a source of data or to a destination for data (sometimes both).</p><p>– Streams can represent any data, so a stream is a sequence of bytes that flow from a source to a destination.</p><p>we <em>read information</em> from an input stream and <em>write</em> <em>information</em> to an output stream</p><blockquote><p>A program can manage multiple streams simultaneously</p></blockquote><h4 id="1-two-broad-categories-of-streams"><a href="#1-two-broad-categories-of-streams" class="headerlink" title="1.two broad categories of streams"></a>1.two broad categories of streams</h4><p>Java has two broad categories of streams:</p><p>– byte streams（字节流）</p><p>machine-formatted data（无法用文本编辑器读取二进制文件）</p><p>• <strong>InputStream</strong></p><p>• <strong>OutputStream</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220522182645667-1653819852853.png" alt="java1/image-20220522182645667"></p><p>– character streams（文本流）</p><p>for human readable data（可以用文本编辑器处理）</p><p>• <strong>Reader</strong></p><p>• <strong>Writer</strong></p><ul><li><p>Text files contain data represented in human-readable form. </p></li><li><p>Binary files contain data represented in binary form.</p></li></ul><h4 id="2-java-io-File-Class"><a href="#2-java-io-File-Class" class="headerlink" title="2.java.io.File Class"></a>2.<strong>java.io.File</strong> <strong>Class</strong></h4><p>File 类：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220522202319787-1653819852853.png" alt="java1/image-20220522201307571"></p><p>Files live in directories within the file system.</p><p>– Complete file name (represented by a <strong>String</strong>) consists of the path + name of file</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161408801.png" alt="java1/image-20220602161408801"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"E:\\文件夹\\文件名"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>java中使用\代表Windows中的\ 。</p><p><strong>java.io.File</strong>: contains methods to obtain file properties, for renaming and deleting files. </p><p>– A wrapper class for a file’s name and directory path: represents an abstract pathname. </p><p>– It hides file system differences.</p><p>– No exception is thrown if file does not exist</p><p>Constructors：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161440131.png" alt="java1/image-20220602161440131"></p><p>methods</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161449481.png" alt="java1/image-20220602161449481"></p><ul><li><p>boolean <strong>exists</strong>() <strong>/</strong> boolean <strong>isDirectory</strong>() / boolean <strong>isFile</strong>()</p></li><li><p>boolean <strong>canRead</strong>() <strong>/</strong> boolean <strong>canWrite</strong>()</p></li><li><p>boolean <strong>delete</strong>(): returns <strong>true</strong> if file successfully deleted</p></li><li><p>String <strong>getAbsolutePath</strong>(): returns complete absolutefile/directory name</p></li><li><p>boolean <strong>renameTo</strong>(File dest): returns <strong>true</strong> if operation successful</p></li><li><p>long <strong>length</strong>(): returns length of the file in bytes</p></li><li><p>String[] <strong>list</strong>(): returns an array of strings containing the list of files in this directory</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220522202635587-1653819852853.png" alt="java1/image-20220522202635587"></p></li></ul><h4 id="4-Reading-from-x2F-Writing-to-files"><a href="#4-Reading-from-x2F-Writing-to-files" class="headerlink" title="4. Reading from / Writing to files"></a>4. <strong>Reading from / Writing to files</strong></h4><p><em>1. Open file</em></p><p>– Needs the file’s name and maybe its location (path).</p><p>– Open file by creating an instance of an appropriate stream class.</p><p><em>2. Perform operations</em></p><p>– Read from and/or write to the file.</p><p>– Call instance methods that belong to the ==stream object==’s class.</p><p><em>3. Close file</em>(一定要释放资源)</p><p>– Any class from <strong>InputStream</strong>, <strong>OutputStream</strong>, <strong>Reader</strong> and <strong>Writer</strong> has a <strong>close()</strong> method.</p><blockquote><p> File I/O can cause a large number of <strong>exceptions</strong> to be thrown.</p></blockquote><h4 id="5-FileReader-versus-FileWriter"><a href="#5-FileReader-versus-FileWriter" class="headerlink" title="5.FileReader versus FileWriter"></a>5.<strong>FileReader</strong> <strong>versus</strong> <strong>FileWriter</strong></h4><p><strong>FileReader</strong> </p><p>Java <code>FileReader</code>类继承自<code>InputStreamReader</code>类。 <code>FileReader</code>用于读取字符流。<br><code>FileReader</code>类有几个构造函数来创建所需的对象。 以下是<code>FileReader</code>类提供的构造函数列表。 </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220522205201711-1653819852853.png" alt="java1/image-20220522205201711"></p><p><strong>java.io.FileNotFoundException</strong> will occur if you attempt to create a <strong>FileReader</strong> with a nonexistent file.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220522205131531-1653819852853.png" alt="java1/image-20220522205131531"></p><p>记得用close（）关闭所有与之相关的系统资源</p><p><strong>FileWriter</strong></p><p>在给出 File 对象的情况下构造一个 FileWriter 对象。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">FileWriter(File file)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在给出 File 对象的情况下构造一个 FileWriter 对象。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">FileWriter(File file, boolean append)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>构造与某个文件描述符相关联的 FileWriter 对象。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">FileWriter(FileDescriptor fd)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在给出文件名的情况下构造 FileWriter 对象，它具有指示是否挂起写入数据的 boolean 值（为true则下一次写入在本次末尾进行）。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">FileWriter(String fileName, boolean append)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>FileWriter</strong>: If the file doesn’t exist, a new file will be created.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220522205940428-1653819852853.png" alt="java1/image-20220522205940428"></p><p>void <strong>write</strong>(int c)</p><p>void <strong>write</strong>(byte[] cbuf)</p><p>void <strong>write</strong>(char[] cbuf,int off,int len)</p><p>void <strong>write</strong>(String str)</p><p>void <strong>write</strong>(String str, int off,int len) </p><p>记得用close（）关闭所有与之相关的系统资源</p><p><strong>BufferedReader</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161507595.png" alt="java1/image-20220602161507595"></p><p>BufferedReader维护一个内部<strong>的8192个字符缓冲器</strong>。在BufferedReader中进行读取操作期间，将从磁盘读取一部分字符并将其存储在内部缓冲区中。 并且从内部缓冲区中单独读取字符。因此，减少了与磁盘的通信次数。</p><p>为了创建一个BufferedReader，我们必须首先导入java.io.BuferedReader包。导入软件包后，就可以创建阅读器。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//创建一个FileReaderFileReader file = new FileReader(String file);//创建一个BufferedReaderBufferedReader buffer = new BufferedReader(file);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上面的示例中，我们创建了一个名为buffer的BufferedReader和一个名为file的FileReader。</p><p>此处，BufferedReader的内部缓冲区的默认大小为8192个字符。 但是，我们也可以指定内部缓冲区的大小。</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">//创建一个具有指定大小的内部缓冲区的BufferdReaderBufferedReader buffer = new BufferedReader(file, int size);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>read()方法</p><ul><li>read() - 从阅读器的内部缓冲区读取单个字符</li><li>read(char[] array) - 从阅读器读取字符并将其存储在指定的数组中</li><li>read(char[] array, int start, int length)- 从阅读器读取等于length字符的数量，并从start位置开始存储在指定的数组中</li></ul><p>skip()方法</p><p>要丢弃和跳过指定数量的字符，可以使用skip(int a)方法。</p><p>readline()方法（读取一行）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">readline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>**IOException **包含 <strong>FileNotFoundException</strong> 所以只需要抛出 <strong>IOException</strong>.</p><h3 id="4-Collection-Classes"><a href="#4-Collection-Classes" class="headerlink" title="4.Collection Classes"></a>4.<strong>Collection Classes</strong></h3><p>Collection in Java: “an object that groups multiple elements into a single unit”.</p><p>Java provides several interfaces, implementations and algorithms for handling collections of objects, via its Java Collections Framework (see <strong>java.util</strong> package).</p><p>集合类和数组不一样，数组元素既可以是基本类型的值，也可以是对象（实际上保存的是对象的引用变量），而集合里只能保存对象（实际上只是保存对象的引用变量，但通常习惯上认为集合里保存的是对象）。</p><p>Collection是单例集合的顶层接口,它表示一组对象,这些对象也称为Collection的元素，JDK不提供此接口的任何直接实现,它提供更具体的子接口(如Set和List)的实现</p><p>collection的常用方法</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161521978.png" alt="java1/image-20220602161521978"></p><p>处理集合时的接口、实现类、算法</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220529113726855-1653819852853.png" alt="java1/image-20220529113726855"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161534187.png" alt="java1/image-20220602161534187"></p><h4 id="4-1-集合的interface"><a href="#4-1-集合的interface" class="headerlink" title="4.1.集合的interface"></a>4.1.集合的interface</h4><ul><li><p>Set: A collection that contains no duplicate elements;（模拟数学中的集合）</p></li><li><p>List: An ordered collection (also known as a <em>sequence</em>). Elements can be accessed by their position      in the list, and it is possible to search for elements in the list. Lists allow for duplicate elements</p></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161547665.png" alt="java1/image-20220602161547665"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161555993.png" alt="java1/image-20220602161555993"></p><ul><li><p>Map: An object that maps keys to values. A map does not contain duplicate keys; each key can map to at most one value. </p><p>Each key maps to one value only.</p><p>Map 提供 key 到 value 的映射，你可以通过“键”查找“值”。一个 Map 中不能包含相同的 key ，每个 key 只能映射一个 value 。</p></li></ul><h4 id="4-2-集合的实现类"><a href="#4-2-集合的实现类" class="headerlink" title="4.2.集合的实现类"></a>4.2.集合的实现类</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161607517.png" alt="java1/image-20220602161607517"></p><ul><li><p>array 和arraylist: </p><p>array 在初始化时必须确定长度</p><p>array必须在分配值时必须确定位置（index）</p></li><li><p>Map的实现类 <strong>HashMap</strong> </p><p>The <strong>HashMap</strong> class implements <strong>Map</strong> and is efficient for locating a value, as well as inserting and deleting a mapping.</p><p>Entries are not ordered</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HashMapTester</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> petSounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>petSounds<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"Meow"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> petSounds<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"mouse"</span><span class="token punctuation">,</span> <span class="token string">"Squeak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>petSounds<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">,</span> <span class="token string">"Woof"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> petSounds<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"guineaPig"</span><span class="token punctuation">,</span> <span class="token string">"Squeak"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"map = "</span> <span class="token operator">+</span> petSounds<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> val <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>petSounds<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Value for key 'dog' is: "</span> <span class="token operator">+</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161619596.png" alt="java1/image-20220602161619596"></p><p>Java Iterator（迭代器）不是一个集合，它是一个接口，可以用于访问、遍历集合</p><p>其中的方法：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161629351.png" alt="java1/image-20220602161629351"></p><p>调用 it.next() 会返回迭代器的下一个元素，并且更新迭代器的状态。</p><p>调用 it.hasNext() 用于检测集合中是否还有元素。</p><p>调用 it.remove() 将迭代器返回的元素删除。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> alist <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Add Strings to alist</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> it <span class="token operator">=</span> alist<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">String</span> s <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// No downcasting required.</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-dimensional-2D-Arrays"><a href="#5-2-dimensional-2D-Arrays" class="headerlink" title="5.2-dimensional (2D) Arrays"></a>5.<strong>2-dimensional (2D) Arrays</strong></h3><p>Java stores a 2D array as an array of arrays, e.g.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// OK</span>nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// OK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>must <em>always</em> specify the first dimension,do <em>not</em> need to specify the second dimension</p><p>A 2D array of objects is an array of an array of references to objects 对象的reference的数组的数组</p><p>利用arraylist实现二维数组</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> topList <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ArrayList</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>topList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>topList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-Sorting"><a href="#6-Sorting" class="headerlink" title="6.Sorting"></a>6.<strong>Sorting</strong></h3><p><strong>Selection</strong> sort</p><ol><li><p>Find largest number and put it in the last position.</p></li><li><p>Find next largest number and put it next to last one.</p></li><li><p>Repeat until finished.</p></li></ol><p><strong>Insertion</strong> sort:</p><p>List of values is sorted by inserting (repeatedly) an unsorted element into a sorted sublist until the complete list is sorted</p><p><strong>Bubble</strong> sort:</p><p>– Several passes are made through the array.</p><p>– Each time, successive adjacent pairs are compared.</p><p>• If pair is in decreasing order, order of values is swapped.</p><p>• Otherwise, move on to next pair.</p><pre class="line-numbers language-Java" data-language="Java"><code class="language-Java">void bubbleSort(double[] list) {boolean changed = true;do {changed = false;for (int j = 0;j &lt; list.length-1; j++)if (list[j] &gt; list[j+1]) {double temp = list[j];list[j] = list[j + 1];list[j + 1] = temp;changed = true;}} while (changed);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-Comparing-objects"><a href="#7-Comparing-objects" class="headerlink" title="7.Comparing objects"></a>7.<strong>Comparing objects</strong></h3><p>在java中接口comparable使我们经常要接触到的，比如对集合或者数组进行排序，我们经常使用到Arrays.sort()或者Collections.sort().当集合中的对象是自定义的对象时，我们有两种方法能够使排序方法应用到自定义对象的集合（数组）中</p><p>Java defines two ways of comparing objects:</p><ol><li><p>The objects implement the <strong>Comparable</strong><e> interface.</e></p><p>被排序的对象类要实现cmparable<e></e></p></li><li><p>A <strong>Comparator</strong> object is used to compare the two objects.</p></li></ol><p>• If the objects are <strong>Comparable</strong><e>, they are said to be sorted by their “natural” order.（自然排序）</e></p><p>A <strong>Comparable<e></e></strong> object can only offer one form of sorting. </p><p>– To provide multiple forms of sorting, <strong>Comparators</strong> must be used.</p><p>如果想对元素进行自然排序，必须在元素对象的类上实现comparable接口，该接口只有compareTo()一个方法。所以要重写compareTo()方法使其满足要求进行比较</p><p>用sort方法 排序，表示升序排列（其算法简单来说就是每两个都比一次）<br>    （默认调用compareTo 如果返回1 则认为比较的对象比本对象大（放在后边））</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>    实现<span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">E</span><span class="token punctuation">&gt;</span></span>接口        <span class="token keyword">int</span> empID<span class="token punctuation">;</span><span class="token class-name">String</span> eName<span class="token punctuation">;</span><span class="token keyword">double</span> salary<span class="token punctuation">;</span><span class="token keyword">static</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> sal<span class="token punctuation">)</span> <span class="token punctuation">{</span>empID <span class="token operator">=</span> i<span class="token operator">++</span><span class="token punctuation">;</span>eName <span class="token operator">=</span> name<span class="token punctuation">;</span>salary <span class="token operator">=</span> sal<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"EmpID = "</span> <span class="token operator">+</span> empID <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"Ename = "</span> <span class="token operator">+</span> eName <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span><span class="token string">"Salary = "</span> <span class="token operator">+</span> salary<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Employee</span> o1<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">==</span> o1<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">&gt;</span> o1<span class="token punctuation">.</span>salary<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ComparableDemo</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> ts1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ts1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span> <span class="token number">40000.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ts1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Harry"</span><span class="token punctuation">,</span> <span class="token number">20000.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ts1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Maggie"</span><span class="token punctuation">,</span> <span class="token number">50000.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ts1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"Chris"</span><span class="token punctuation">,</span> <span class="token number">70000.00</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>ts1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Employee</span><span class="token punctuation">&gt;</span></span> itr <span class="token operator">=</span> ts1<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>itr<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">Object</span> element <span class="token operator">=</span> itr<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>element <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="细碎知识"><a href="#细碎知识" class="headerlink" title="细碎知识"></a>细碎知识</h1><h2 id="1-String类中的format方法"><a href="#1-String类中的format方法" class="headerlink" title="1.String类中的format方法"></a>1.String类中的format方法</h2><p>format方法使用占位符进行格式化<br>常规类型、字符类型和数值类型的占位符格式：<br><code>%[index$][标识][最小宽度][.精度]转换符</code><br>日期和时间类型的占位符格式：<br><code>%[index$][标识][最小宽度]转换符</code><br>与参数不对应的占位符格式：<br><code>%[标识][最小宽度]转换符</code><br>其中index表示参数列表中的位置上的值<br>可用标识：</p><table><thead><tr><th align="left">标识</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">-</td><td align="left">在最小宽度内左对齐，不可与0标识一起使用</td></tr><tr><td align="left">0</td><td align="left">若内容长度不足最小宽度，则在左边用0来填充</td></tr><tr><td align="left">#</td><td align="left">对8进制和16进制，8进制前添加一个0,16进制前添加0x</td></tr><tr><td align="left">+</td><td align="left">结果总包含一个+或-号</td></tr><tr><td align="left">空格</td><td align="left">正数前加空格，负数前加-号</td></tr><tr><td align="left">,</td><td align="left">只用与十进制，每3位数字间用,分隔</td></tr><tr><td align="left">(</td><td align="left">若结果为负数，则用括号括住，且不显示符号</td></tr></tbody></table><p>可用转换符：</p><table><thead><tr><th align="left">转换符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">b</td><td align="left">布尔类型，只要实参为非false的布尔类型，均格式化为字符串true，否则为字符串false</td></tr><tr><td align="left">n</td><td align="left">平台独立的换行符, 也可通过System.getProperty(“line.separator”)获取</td></tr><tr><td align="left">f</td><td align="left">浮点数型（十进制）。显示9位有效数字，且会进行四舍五入。如99.99</td></tr><tr><td align="left">a</td><td align="left">浮点数型（十六进制）</td></tr><tr><td align="left">e</td><td align="left">指数类型。如9.38e+5</td></tr><tr><td align="left">g</td><td align="left">浮点数型（比%f，%a长度短些，显示6位有效数字，且会进行四舍五入）</td></tr><tr><td align="left">s</td><td align="left">字符串类型</td></tr><tr><td align="left">c</td><td align="left">字符类型</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> result1 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"小明今年%d岁,他住在%s,他的月工资有%.2f"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span><span class="token string">"北京市"</span><span class="token punctuation">,</span><span class="token number">6633.435</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出:小明今年25岁,他住在北京市,他的月工资有6633.44</span><span class="token comment">/*****************************************************/</span><span class="token keyword">double</span> num <span class="token operator">=</span> <span class="token number">123.4567899</span><span class="token punctuation">;</span><span class="token class-name">String</span> result2 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"%e"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出：1.234568e+02</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-javadoc"><a href="#2-javadoc" class="headerlink" title="2.javadoc"></a>2.javadoc</h2><p>To generate <strong>javadoc</strong>documentation, type on the command line:</p><pre class="line-numbers language-none"><code class="language-none">javadoc -d docsfile.java <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>View the docs with a web browser:</p><p> – Start with the index.html file in the <strong>docs</strong> subdirectory.</p><p><a href="https://blog.csdn.net/lsy0903/article/details/89893934?ops_request_misc=%7B%22request_id%22:%22164847134316782246413290%22,%22scm%22:%2220140713.130102334..%22%7D&amp;request_id=164847134316782246413290&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-89893934.142%5Ev5%5Epc_search_insert_es_download,143%5Ev6%5Econtrol&amp;utm_term=javadoc%E6%B3%A8%E9%87%8A&amp;spm=1018.2226.3001.4187"> Java文档注释用法+JavaDoc的使用详解_阿★永的博客-CSDN博客_javadoc</a></p><h2 id="3-增强for"><a href="#3-增强for" class="headerlink" title="3.增强for"></a>3.增强for</h2><p>for 的其他语法</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220602161656225.png" alt="java1/image-20220602161656225"></p><p>for (循环变量类型 循环变量名称 : 要被遍历的对象) 循环体 </p><p>借助这种语法，遍历一个数组的操作就可以采取这样的写法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integers <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span>， <span class="token number">2</span>， <span class="token number">3</span>， <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">:</span> integers<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//等同于 int i;i&lt;integers;i++</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>可以实现遍历<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-导包"><a href="#4-导包" class="headerlink" title="4.导包"></a>4.导包</h2><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220405163334345-1653819852853.png" alt="java1/image-20220405163334345"></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20220405163354269-1653819852853.png" alt="java1/image-20220405163354269"></p><h2 id="5-Sting-和int-互换"><a href="#5-Sting-和int-互换" class="headerlink" title="5.Sting 和int 互换"></a>5.Sting 和int 互换</h2><p>字串 String 转换成整数 int</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token class-name">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将整数 int 转换成字串 String </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="6-scanner"><a href="#6-scanner" class="headerlink" title="6.scanner"></a>6.scanner</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span><span class="token class-name">Scanner</span> sc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="7-运行错误和编译错误"><a href="#7-运行错误和编译错误" class="headerlink" title="7.运行错误和编译错误"></a>7.运行错误和编译错误</h2><p>①编译错误一般指语法错误或者很明显的逻辑错误。<br>        如：缺少分号，少写括号，关键字书写错误等， 在eclipse往往会画红线。<br>     ②运行错误是在没有编译错误的基础上运行后产生的逻辑错误。<br>         如：空指针异常，除数为0，越界访问等，一般会抛出异常。</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大二下课程笔记 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wordle game</title>
      <link href="//post/Wordle%20game.html"/>
      <url>//post/Wordle%20game.html</url>
      
        <content type="html"><![CDATA[<h1 id="User-guide-for-Wordle-game"><a href="#User-guide-for-Wordle-game" class="headerlink" title="User guide for Wordle game"></a>User guide for Wordle game</h1><p>qm Java 的迷你project：利用swing实现一个简单wordle 游戏</p><ul><li>可执行文件如下：</li></ul><p>​     链接：<a href="https://pan.baidu.com/s/17MtqNlHzGVF0AtWP499R-w">https://pan.baidu.com/s/17MtqNlHzGVF0AtWP499R-w</a><br>​          提取码：bupt</p><ul><li>源码随后更新</li></ul><p>Thank you for choosing this game.</p><h2 id="one-How-to-run-this-interesting-game"><a href="#one-How-to-run-this-interesting-game" class="headerlink" title=":one:How to run this interesting game?"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>How to run this interesting game?</h2><p>To run this game you should download the entire java miniproject file and open the wordleTest.java file in the src directory. Or you can just open wordle.exe to play.</p><h2 id="two-Base-rule"><a href="#two-Base-rule" class="headerlink" title=":two:Base- rule"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Base- rule</h2><p>Guess the WORDLE in 6 tries(must be word). Each guess must be a valid 5 letter word(without enter). After each guess, the color of the tiles will change to show how close your guess was to the word.</p><p><strong>Examples</strong>:</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/image-20221226201216858.png" alt="image-20221226201216858"> </p><p>The letter <em>c</em> and <em>h</em> are in the word and in the correct spot.</p><p>The letter <em>a</em>is in the word but in the wrong spot.</p><p>The letter <em>b</em> and <em>e</em> is not in the word in any spot.</p><p>You can type letters through the keyboard and can modify it with backspace before the word ends.</p><h2 id="three-menu-setting"><a href="#three-menu-setting" class="headerlink" title=":three:menu setting"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>menu setting</h2><p>  <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/wps2-1653734343069.jpg" alt="img"></p><p>l You can adjust the difficulty of the game via difficulty in the menu bar</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/wps3.jpg" alt="img"> </p><ul><li><p>Simple mode:  5 minute countdown.</p></li><li><p>Common mode 3 minute countdown.</p></li><li><p>Hard mode: 1 minute countdown.</p></li><li><p>NoLimit mode(default)with out time limit.</p></li></ul><p>Once you choose a mode, you can’t change it again until the game is over</p><p>After you select the difficulty of the game, the time remaining will be displayed at the bottom of   the interface</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/wps4.jpg" alt="img"> </p><p>When the progress bar becomes empty, it means failure</p><p>You can get help via help in the menu bar.</p><p>  <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/wps5.jpg" alt="img"></p><p>You can adjust get a letter of wordle via <strong>hint</strong> in <strong>help.</strong></p><p>   If you want get more, press again(no more than 5 times)!</p><p> You can get this user guide via <strong>how to play</strong> in <strong>help.</strong></p><h2 id="four-Success"><a href="#four-Success" class="headerlink" title=":four:Success:"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Success:</h2><p>If you suc<strong>cessfully guess th</strong>e word within six chances. Congratulations, you made it. You can exit the program by selecting OK, or select Next to start a new round.</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture/wps6.jpg" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DFT的对称性</title>
      <link href="//post/DFT%E7%9A%84%E5%AF%B9%E7%A7%B0%E6%80%A7.html"/>
      <url>//post/DFT%E7%9A%84%E5%AF%B9%E7%A7%B0%E6%80%A7.html</url>
      
        <content type="html"><![CDATA[<h1 id="DFT的对称性"><a href="#DFT的对称性" class="headerlink" title="DFT的对称性"></a>DFT的对称性</h1><p>一直搞不懂的dft对称性</p><h2 id="共轭对称与奇偶对称"><a href="#共轭对称与奇偶对称" class="headerlink" title="共轭对称与奇偶对称"></a>共轭对称与奇偶对称</h2><ul><li><p>奇偶对称是基于实数域来定义的：</p><p>偶对称：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fwps1.jpg" alt="img"></p><p> 奇对称: </p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fwps2.jpg" alt="img"></p></li><li><p>共轭对称是基于复数域来定义的</p><p> 共轭对称 :</p><p>  <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fwps1-1653561528626.jpg" alt="img"></p><p> 共轭反对称 :</p><p>  <img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fwps2-1653561528627.jpg" alt="img"></p></li></ul><blockquote><p>偶对称是共轭对称在实数域中的特殊形式</p></blockquote><h2 id="DFT对称特性"><a href="#DFT对称特性" class="headerlink" title="DFT对称特性"></a>DFT对称特性</h2><p>时域为实函数，频域共轭对称</p><p>时域为虚函数，频域共轭反对称</p><ul><li>把上述两个结论综合表示，就是令x[n]为复序列，有如下关系：</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220526192144401.png"></p><p>这里Xe、Xo表示共轭对称部分和共轭反对称部分</p><p>其余结论见：<a href="https://blog.csdn.net/wjpwjpwjp0831/article/details/105624347">DSP学习杂记——DTFT、DFS、DFT对称性总结_wjpwjpwjp0831的博客-CSDN博客_dft对称性</a></p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> DSP </tag>
            
            <tag> 大二下课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品开发 topic8</title>
      <link href="//post/%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91-topic-8.html"/>
      <url>//post/%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91-topic-8.html</url>
      
        <content type="html"><![CDATA[<h1 id="Topic-8-–-Detail-Design-using-prototypes"><a href="#Topic-8-–-Detail-Design-using-prototypes" class="headerlink" title="Topic 8 – Detail Design using prototypes"></a>Topic 8 – Detail Design using prototypes</h1><p><strong>Detail Design</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220424190900120.png" alt="image-20220424190900120" style="zoom:67%;"><p>⚫ Aim</p><p>⚫ Control Documentation</p><p>⚫ Departmental responsibilities</p><p> <strong>Prototype</strong> </p><p>⚫ Definitions: Prototype, Prototyping</p><p>⚫ Phases of prototypes</p><p>⚫ Uses of prototypes</p><p>⚫ Principles of prototyping</p><p>⚫ Planning a prototype</p><p>⚫ Prototyping strategy</p><hr><h2 id="Detail-Design"><a href="#Detail-Design" class="headerlink" title="Detail Design"></a><strong>Detail Design</strong></h2><p>Control documentation</p><p>⚫The <strong>drawings</strong> or computer <strong>files</strong> describing the <strong>geometry</strong> of each part to be made and its production <strong>tooling</strong></p><p>⚫ The process descriptions for the <strong>fabrication</strong> and <strong>assembly</strong> of the product</p><p>⚫ The specifications of the parts to be <strong>purchased</strong></p><p>Departmental responsibilities</p><p>⚫ <strong>Marketing</strong></p><p>⚫ <strong>Design</strong></p><h2 id="two-Prototype"><a href="#two-Prototype" class="headerlink" title=":two:Prototype"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span><strong>Prototype</strong></h2><ol><li>Definitions: Prototype, Prototyping</li></ol><p>Prototype： an <strong>approximation</strong> of the product along one or more dimensions of interest（根据多方面兴趣得到的近似品）</p><p><strong>Prototyping</strong> is the <strong>process</strong> of developing an approximation of the product</p><ol start="2"><li>Phases of prototypes</li></ol><p><strong>Alpha</strong> prototypes： used to assess whether the product works <strong>as intended</strong></p><p><strong>Beta</strong> prototypes: used to assess <strong>reliability</strong> and to identify remaining <strong>bugs</strong> </p><p><strong>Pre-production</strong> prototypes(试产原型): These are the first products produced by the entire <strong>production process</strong></p><ol start="3"><li>Uses of prototypes</li></ol><ul><li><strong>Learning</strong></li></ul><p>Answering questions about performance or feasibility </p><ul><li><strong>Communication</strong></li></ul><p>Demonstration of a product to get <strong>feedback</strong> from all stakeholders</p><p>A <strong>physical</strong>, tactile, 3D representation of a product is much easier to understand than a verbal <strong>description</strong> or even a <strong>sketch</strong> of a product</p><ul><li><strong>Integration</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大二下课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>频率泄露</title>
      <link href="//post/%E9%A2%91%E7%8E%87%E6%B3%84%E9%9C%B2.html"/>
      <url>//post/%E9%A2%91%E7%8E%87%E6%B3%84%E9%9C%B2.html</url>
      
        <content type="html"><![CDATA[<h1 id="频率泄露"><a href="#频率泄露" class="headerlink" title="频率泄露"></a>频率泄露</h1><p>在上课学习时，实在没有听懂其具体含义，通过一些资料补充一些个人理解。（理解可能存在偏差，欢迎指正）这部分可能偏理解一些，课后作业也没有涉及</p><hr><h2 id="DFT得出："><a href="#DFT得出：" class="headerlink" title="DFT得出："></a>DFT得出：</h2><ul><li>DFT是对DTFT频域采样后再进行加窗处理得到的。</li></ul><p>首先，对于DTFT的频域采样处理，这时根据采样定理，我们不难发现，如果频域采样那么时域一定会发生一个频谱的搬移，所以需要加窗来选取其中一个部分，从而得出DFT。</p><ul><li>矩形窗对应频域是一个sinc函数：</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220424120653561.png" alt="image-20220424120653561"></p><h2 id="泄露现象："><a href="#泄露现象：" class="headerlink" title="泄露现象："></a>泄露现象：</h2><p>对具有N个数的输入序列，进行一个N点的DFT变换，产生一个具有N个点的频域序列。我们知道频率域坐标中横坐标的间隔实际上是分辨率fs/N；如果输入信号的频率恰好是坐标轴间隔的整数倍，那么加窗可以很好的反映DFT的频率特性（也就是可以用下式表示）。</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220424115528213.png" alt="image-20220424115528213" style="zoom:50%;"><p>1.输入信号的频率是坐标轴间隔的整数倍:</p><p>此时所有采样点（sin函数对应频率点以外）都与sinc函数0点重合，观测起来就是m=k处的一个冲激</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220424115649290.png" alt="image-20220424115649290"></p><p>2.输入信号的频率不是坐标轴间隔的整数倍:</p><p>就会发生谱泄露，其能量会被泄露到频域上的N个序列点上，可以理解峰值被相邻的基本函数“分摊”了</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220424120437652.png" alt="image-20220424120437652"></p><p>也就是采样点不在sinc函数的0点处</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> DSP </tag>
            
            <tag> 大二下课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品开发 topic 7</title>
      <link href="//post/%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91-topic-7.html"/>
      <url>//post/%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91-topic-7.html</url>
      
        <content type="html"><![CDATA[<hr><p>❑Aim of Phase 2. System- level Design</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220421201903779.png" alt="image-20220421201903779" style="zoom:67%;"><p>❑ Product architecture – what is it?</p><p>❑ Modular and integral architecture</p><p>❑ Implications of product architecture</p><p>❑ Role of the product architecture team</p><p>❑ <strong>4-step method</strong> for establishing the product architecture</p><p>❑ Key outcomes</p><hr><h2 id="one-Product-Architecture-产品架构"><a href="#one-Product-Architecture-产品架构" class="headerlink" title=":one:Product Architecture(产品架构)"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Product Architecture(产品架构)</h2><ul><li><p>Meaning：the <strong>scheme</strong> by which the <strong>functional</strong> <strong>elements</strong> of the product are <strong>arranged</strong> into <strong>physical chunks</strong> and by which the <strong>chunks</strong> (块)<strong>interact</strong></p></li><li><p>allow the <strong>detailed design</strong> and <strong>testing</strong> of these physical blocks to be assigned to <strong>teams</strong>, individuals, and/or suppliers</p></li><li><p>chunks: contains physical elements of a product, made up of a collection of components which implement of the functions of the product</p></li></ul><h2 id="two-Modular-amp-integral-architecture"><a href="#two-Modular-amp-integral-architecture" class="headerlink" title=":two:Modular &amp; integral architecture"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Modular &amp; integral architecture</h2><p>is <strong>key characteristic</strong></p><h3 id="1-Modular"><a href="#1-Modular" class="headerlink" title="1.Modular"></a>1.<strong>Modular</strong></h3><ul><li>Each chunk implements <strong>one</strong> or a <strong>few</strong> <strong>functions entirely.</strong></li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220421204735310.png" alt="image-20220421204735310"></p><ul><li><p><strong>interactions</strong> between chunks are <strong>well</strong> <strong>defined.</strong></p></li><li><p><strong>simplicity</strong> and <strong>reusability</strong></p></li></ul><blockquote><p>three main types：</p><ul><li><strong>Slot-modular</strong> (the most common type)</li></ul><p><strong>different</strong> <strong>type</strong> of interface, various <strong>chunks</strong> <strong>cannot</strong> be </p><p>interchanged</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220421205726669.png" alt="image-20220421205726669" style="zoom:50%;"><ul><li><strong>Bus-modular</strong></li></ul><p><strong>common bus</strong> to which the other chunks connect via the <strong>same type</strong> of interface</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220421205744892.png" alt="image-20220421205744892" style="zoom:50%;"><ul><li><p><strong>Sectional-modular</strong></p><p> <strong>interfaces</strong> are of the <strong>same type</strong>,<strong>no single element</strong> to which all the other chunks <strong>attach</strong></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220421210108435.png" alt="image-20220421210108435" style="zoom:50%;"></li></ul></blockquote><h3 id="2-Integral"><a href="#2-Integral" class="headerlink" title="2.Integral"></a>2.<strong>Integral</strong></h3><ul><li><strong>Functional elements</strong> are implemented by <strong>multiple</strong> chunks, or a chunk may implement many functions</li></ul><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220421204837468.png" alt="image-20220421204837468"></p><ul><li><p><strong>interactions</strong> between chunks are <strong>poorly</strong> <strong>defined</strong></p></li><li><p>increases performance and reduces costs</p></li></ul><h3 id="3-integral-and-modular-apply-at-several-levels"><a href="#3-integral-and-modular-apply-at-several-levels" class="headerlink" title="3.integral and modular apply at several levels:"></a>3.integral and modular apply at several levels:</h3><p>​       ⚫ System</p><p>​       ⚫ Sub-system</p><p>​       ⚫ Component</p><h2 id="three-Implications-of-product-architecture"><a href="#three-Implications-of-product-architecture" class="headerlink" title=":three:Implications of product architecture"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Implications of product architecture</h2><h3 id="1-Product-change"><a href="#1-Product-change" class="headerlink" title="1.Product change"></a>1.<strong>Product change</strong></h3><p> <strong>Modular</strong> chunks allow <strong>changes</strong> to be made to a <strong>few isolated</strong> functional elements of the product without affecting others</p><h3 id="2-Product-variety"><a href="#2-Product-variety" class="headerlink" title="2.Product variety"></a>2.<strong>Product variety</strong></h3><ul><li><p><strong>Range</strong> of product models within a particular <strong>time</strong> period </p></li><li><p>in response to market <strong>demand</strong></p></li></ul><p>Products built can be <strong>more easily varied</strong> </p><h3 id="3-Component-standardisation"><a href="#3-Component-standardisation" class="headerlink" title="3.Component standardisation"></a>3.<strong>Component standardisation</strong></h3><p>The use of the <strong>same</strong> component or chunk in <strong>multiple</strong> products</p><h3 id="4-Product-performance"><a href="#4-Product-performance" class="headerlink" title="4.Product performance"></a>4.<strong>Product performance</strong></h3><p>How <strong>well</strong> a product implements its intended <strong>functions</strong></p><h3 id="5-Manufacturability"><a href="#5-Manufacturability" class="headerlink" title="5.Manufacturability"></a>5.<strong>Manufacturability</strong></h3><p>ability of the team to design each chunk to be <strong>produced</strong> at <strong>low cost</strong></p><h3 id="6-Product-development-management"><a href="#6-Product-development-management" class="headerlink" title="6.Product development management"></a>6.<strong>Product development management</strong></h3><p><strong>Responsibility</strong> is usually assigned to a relatively <strong>small</strong> <strong>group</strong></p><h2 id="four-Role-of-Product-Architecture-Team"><a href="#four-Role-of-Product-Architecture-Team" class="headerlink" title=":four:Role of Product Architecture Team"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Role of Product Architecture Team</h2><p>⚫ subsequent product <strong>development</strong> activities </p><p>⚫ manufacturing and <strong>marketing</strong> of the product</p><h2 id="five-The-4-step-method"><a href="#five-The-4-step-method" class="headerlink" title=":five:The 4 step method"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>5⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0035-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>The 4 step method</h2><h3 id="Step-1-–-Create-a-schematic-of-the-product"><a href="#Step-1-–-Create-a-schematic-of-the-product" class="headerlink" title="Step 1 – Create a schematic of the product"></a><strong>Step 1</strong> – Create a schematic of the product</h3><ul><li>A schematic representes the team’s <strong>best</strong> understanding of the <strong>component elements</strong> of the product</li></ul><h3 id="Step-2-–-Cluster-the-elements-of-the-schematic"><a href="#Step-2-–-Cluster-the-elements-of-the-schematic" class="headerlink" title="Step 2 – Cluster the elements of the schematic"></a><strong>Step 2</strong> – Cluster the elements of the schematic</h3><ul><li><p><strong>assigning</strong> and/or <strong>clustering</strong>each of the <strong>elements</strong> of the schematic to a <strong>chunk</strong></p></li><li><p><strong>functionality split</strong></p></li><li><p>factors should be considered:</p></li></ul><ol><li><strong>Geometric integration and precision</strong></li><li><strong>Function sharing</strong></li><li><strong>Capabilities of vendors</strong></li><li><strong>Similarity of design or production technology</strong></li><li><strong>Localisation of change</strong></li><li><strong>Accommodating variety</strong></li><li><strong>Enabling standardisation</strong></li></ol><h3 id="Step-3-Create-a-rough-geometric-layout"><a href="#Step-3-Create-a-rough-geometric-layout" class="headerlink" title="Step 3 - Create a rough geometric layout"></a><strong>Step 3</strong> - Create a rough geometric layout</h3><p> <strong>2 or 3</strong> <strong>dimensions</strong> or as <strong>physical</strong> models</p><h3 id="Step-4-Identify-the-fundamental-and-incidental-interactions"><a href="#Step-4-Identify-the-fundamental-and-incidental-interactions" class="headerlink" title="Step 4 - Identify the fundamental and incidental interactions"></a><strong>Step 4</strong> - Identify the fundamental and incidental interactions</h3><p> two categories of interaction：</p><ol><li><strong>Fundamental</strong>：</li></ol><p>those which correspond to the lines on the schematic that connect the chunks to one another</p><ol start="2"><li><strong>Incidental</strong>：</li></ol><ul><li><p>physical implementation of functional elements</p></li><li><p>geometric arrangement of the chunks</p></li></ul><h2 id="six-Key-Outcomes"><a href="#six-Key-Outcomes" class="headerlink" title=":six:Key Outcomes"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>6⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0036-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Key Outcomes</h2><p>⚫ an approximate <strong>geometric layout</strong> of the product</p><p>⚫ <strong>descriptions</strong> of the major chunks </p><p>⚫ documentation of the key <strong>interactions</strong> among the chunks</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大二下课程笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>产品开发 topic 6</title>
      <link href="//post/%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91-topic-6.html"/>
      <url>//post/%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91-topic-6.html</url>
      
        <content type="html"><![CDATA[<h1 id="Topic-6-–-System-Level-Design"><a href="#Topic-6-–-System-Level-Design" class="headerlink" title="Topic 6 – System Level Design"></a>Topic 6 – System Level Design</h1><hr><p>⚫What is innovation?</p><p>⚫ Types of innovation</p><p>⚫ Models of innovation</p><p>⚫ What makes an innovative company?</p><hr> <span id="more"></span><h2 id="one-What-is-innovation"><a href="#one-What-is-innovation" class="headerlink" title=":one:What is innovation?"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>1⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0031-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>What is innovation?</h2><ol><li>meaning to <strong>renew</strong>, to <strong>make new</strong> or to <strong>alter,</strong> new way of doing things</li><li>research product to increase <strong>turnover</strong>(营业额) and <strong>profit</strong> </li><li>Is <strong>successful implementation</strong> of a <strong>new</strong>  <strong>improved product</strong> or <strong>process</strong>, a <strong>new marketing method</strong>, or a <strong>new</strong> <strong>organisational method</strong></li></ol><blockquote><p><span class="github-emoji" style="display:inline;vertical-align:middle"><span>⁉</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/2049.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Invention vs Innovation</p><p>-<strong>Innovation</strong> = theoretical conception + technical invention + <strong>commercial exploitation</strong></p><p>-invention can be an innovation even if it is unsuccessful</p></blockquote><h2 id="two-Types-of-innovation"><a href="#two-Types-of-innovation" class="headerlink" title=":two:Types of innovation"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>2⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0032-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Types of innovation</h2><p>⚫ <strong>Product</strong> (or service) innovation</p><p>⚫ <strong>Process</strong> Innovation</p><hr><h3 id="1-Product-Innovation"><a href="#1-Product-Innovation" class="headerlink" title="1.Product Innovation"></a>1.Product Innovation</h3><ol><li><p><strong>relate to actual products</strong></p></li><li><p><strong>Advantages</strong>:</p><p>⚫ Increased market share</p><p>⚫ Public relations </p><p>⚫ Enhanced reputation </p><p>⚫ Build customer loyalty</p><p>⚫ Added value</p><p>⚫ Higher prices and profitability</p><p>⚫ Competitive advantage</p></li><li><p>Can lead to <strong>process</strong>, <strong>management</strong>and/or <strong>organisational</strong> innovation</p></li></ol><h3 id="2-Process-Innovation"><a href="#2-Process-Innovation" class="headerlink" title="2.Process Innovation"></a>2.Process Innovation</h3><ol><li>Find more <strong>efficient</strong> and <strong>effective</strong> ways of</li></ol><p>   <strong>Producing</strong> and <strong>Delivering</strong> existing products</p><ol start="2"><li><p><strong>Advantages</strong>:</p><p>⚫ Reduced <strong>costs</strong></p><p>⚫ Improved <strong>quality</strong></p><p>⚫ More responsive <strong>customer service</strong></p><p>⚫ Greater <strong>flexibility</strong></p></li><li><p><strong>Disadvantages</strong>：</p><p>⚫Loss of <strong>jobs</strong></p><p>⚫ <strong>re-training</strong> of workers</p></li></ol><h2 id="three-Models-of-innovation"><a href="#three-Models-of-innovation" class="headerlink" title=":three:Models of innovation"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>3⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0033-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>Models of innovation</h2><h3 id="1-Linear-models"><a href="#1-Linear-models" class="headerlink" title="1.Linear models"></a>1.Linear models</h3><p><strong>Technology push</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220421191349867.png" alt="image-20220421191349867"></p><p><strong>Market pull</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220421191807027.png" alt="image-20220421191807027"></p><p><strong>Universities &amp; industry liaison</strong>（联络）</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220421191947517.png" alt="image-20220421191947517"></p><h3 id="2-Simultaneous-coupling"><a href="#2-Simultaneous-coupling" class="headerlink" title="2.Simultaneous coupling"></a>2.<strong>Simultaneous coupling</strong></h3><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220421192110813.png" alt="image-20220421192110813"></p><h3 id="3-Interactive"><a href="#3-Interactive" class="headerlink" title="3.Interactive"></a>3.<strong>Interactive</strong></h3><ol><li>Takes <strong>simultaneous</strong> coupling one step further</li><li>No <strong>starting</strong> point </li><li>links between the <strong>organisation</strong> (internal  external)  with the <strong>marketplace</strong> and <strong>science</strong> base .</li></ol><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220421192217840.png" alt="image-20220421192217840"></p><h2 id="four-What-makes-an-innovative-company"><a href="#four-What-makes-an-innovative-company" class="headerlink" title=":four:What makes an innovative company?"></a><span class="github-emoji" style="display:inline;vertical-align:middle"><span>4⃣</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/0034-20e3.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span>What makes an innovative company?</h2><ol><li><p>Growth orientation（定位）：<strong>long-term</strong> process、 requir investment.</p></li><li><p>vigilance（警觉）：By <strong>SWOT</strong> analysis Identifying <strong>threats</strong>, <strong>opportunities</strong>.</p></li><li><p>commitment to technology(技术承诺)：Need <strong>Long-term</strong> commitment.</p></li><li><p>acceptance of risks：<strong>Risk assessment</strong> strategies and balanced product portfolios.</p></li><li><p>cross-functional cooperation：removal of inter-departmental <strong>conflict</strong>.</p></li><li><p>Receptivity：the ability to accept technologies from outside of the company</p><p><strong>Joint activities</strong> allow knowledge sharing.</p></li><li><p>slack(宽松管理)：Allowing individuals time to <strong>think</strong> and investigate . <strong>flexibility</strong> on milestones.</p></li><li><p>adaptability: Ability for companies to <strong>adapt</strong> as required.</p></li><li><p>diverse range of skills.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大二下课程笔记 </tag>
            
            <tag> 产品开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Database note</title>
      <link href="//post/Database%20Note.html"/>
      <url>//post/Database%20Note.html</url>
      
        <content type="html"><![CDATA[<h1 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h1><h2 id="1-Overview-of-Data-Models"><a href="#1-Overview-of-Data-Models" class="headerlink" title="1.Overview of Data Models"></a>1.<strong>Overview of Data Models</strong></h2><h3 id="1-1-关系数据模型（Relational-Model）"><a href="#1-1-关系数据模型（Relational-Model）" class="headerlink" title="1.1.关系数据模型（Relational Model）"></a>1.1.关系数据模型（<strong>Relational Model</strong>）</h3><blockquote><p><strong>A two-dimensional table called a relation</strong></p></blockquote><p><strong>Each relation has a name</strong>——<strong>关系名</strong></p><p>Provides a simple, limited approach to structuring data</p><p>Provides a limited, yet useful, collection of operations on data</p><h4 id="1-1-1-Attribute-属性"><a href="#1-1-1-Attribute-属性" class="headerlink" title="1.1.1.Attribute(属性)"></a>1.1.1.<strong>Attribute(属性)</strong></h4><p><strong>The</strong> <strong>columns</strong> <strong>of a relation are named by</strong> <strong>attributes</strong></p><blockquote><p><strong>Any two attributes of a relation can’t have same name</strong></p></blockquote><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220325173408149.png" alt="image-20220325173408149" style="zoom:50%;"><p>​                                      第一行就是每列的attribute</p><h4 id="1-1-2-Schemas-模式"><a href="#1-1-2-Schemas-模式" class="headerlink" title="1.1.2.Schemas(模式)"></a>1.1.2.<strong>Schemas(模式)</strong></h4><blockquote><p><strong>Relation schema</strong> <strong>= relation name</strong>and the set of attributes.(关系名+属性集)</p></blockquote><p><strong>Example:</strong></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">Movies (title, year, length, genre)Movies (title: string, year: integer, length:integer, genre: string)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>关系名大写开头、属性名小写开头</p><p>数据库是collection of relations</p><p>数据库的关系模式集合——<strong>Relational database schema</strong></p><h4 id="1-1-3-Tuples-元组-x2F-⾏"><a href="#1-1-3-Tuples-元组-x2F-⾏" class="headerlink" title="1.1.3.Tuples (元组/⾏)"></a><strong>1.1.3.Tuples (元组/⾏)</strong></h4><blockquote><p><strong>The rows of a relation,</strong> <strong>other than the</strong> **header rowcontaining the attribute names,**are called tuples.</p></blockquote><p><strong>A tuple has one</strong> **component(**属性的分量) for each attribute of the relation.</p><p><strong>Use commas(,)逗号 to separate</strong> <strong>components</strong>, and **use parentheses(圆括号) to surround the tuple</p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220325174507331.png" alt="image-20220325174507331" style="zoom:50%;"><p><strong>Example: (‘Star Wars’, 1977, 124, ‘sciFi’)</strong></p><h4 id="1-1-4-Domains（域）"><a href="#1-1-4-Domains（域）" class="headerlink" title="1.1.4.Domains（域）"></a>1.1.4.<strong>Domains</strong>（域）</h4><blockquote><p><strong>The set of</strong> <strong>allowed values</strong> <strong>允许的值</strong> *<em>for each</em>***attribute is called the domain of the attribute</p></blockquote><blockquote><p><strong>Attribute values are (normally) required to be</strong> atomic, that is, indivisible.(不可分割类型)</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">Movies ( title:string, year:integer, length:integer, genre:string)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="1-1-5-Equivalent-Representations-of-a-Relation"><a href="#1-1-5-Equivalent-Representations-of-a-Relation" class="headerlink" title="1.1.5.Equivalent Representations of a Relation"></a>1.1.5.<strong>Equivalent Representations of a Relation</strong></h4><p>一个给定的关系中元组的集合：<strong>Relation Instances(实例)</strong> </p><p>属性、元组都是无序的，可以随便改变顺序但仍然为一个关系模型</p><p><strong>Order of tuples is irrelevant</strong></p><h4 id="1-1-6-Key"><a href="#1-1-6-Key" class="headerlink" title="1.1.6.Key"></a>1.1.6.Key</h4><blockquote><p><strong>A set of attributes forms</strong> <strong>a key</strong> <strong>for a relation if we do not allow</strong> <strong>two tuples in a relation</strong> instance <strong>to</strong> <strong>have the same values</strong> **in all the **attribute of the key.</p></blockquote><p><strong>关系中可作键的属性集可能有多个</strong></p><h3 id="1-2-Defining-a-Relation-Schema-in-SQL"><a href="#1-2-Defining-a-Relation-Schema-in-SQL" class="headerlink" title="1.2.Defining a Relation Schema in SQL"></a>1.2.<strong>Defining a Relation Schema in SQL</strong></h3><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220329145742934.png" alt="image-20220329145742934" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220329145806098.png" alt="image-20220329145806098" style="zoom:50%;"><h4 id="1-2-1-SQL启动语句以及基本语法"><a href="#1-2-1-SQL启动语句以及基本语法" class="headerlink" title="1.2.1.SQL启动语句以及基本语法"></a>1.2.1.SQL启动语句以及基本语法</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220329145849684.png" alt="image-20220329145849684" style="zoom:50%;"><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220329145941764.png" alt="image-20220329145941764" style="zoom:50%;"><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220329150023769.png" alt="image-20220329150023769"></p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220329150125120.png" alt="image-20220329150125120" style="zoom:50%;"><h4 id="1-2-2-SQL分类"><a href="#1-2-2-SQL分类" class="headerlink" title="1.2.2.SQL分类"></a>1.2.2.SQL分类</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220329150008417.png" alt="image-20220329150008417"></p><h4 id="1-2-3-Data-Types"><a href="#1-2-3-Data-Types" class="headerlink" title="1.2.3. Data Types"></a>1.2.3. <strong>Data Types</strong></h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220329150153645.png" alt="image-20220329150153645" style="zoom:50%;"><p>（mysql 不区分大小写）</p><blockquote><p><strong>All attributes must have a</strong> <strong>data type.</strong></p></blockquote><p>1.字符串</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CHAR(n)#定长字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">VARCHAR(n)#变长字符串<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其他：</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220329150244331.png" alt="image-20220329150244331"></p><p>2.位串由01组成</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">bit(n)#固定长度bit varying(n)#可变长度<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3.boolean</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">boolean#可能的值有true false unknown<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.int/interger、浮点型</p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220329150221533.png" alt="image-20220329150221533"></p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">double(2,1)#代表2位数据总长度，小数点在从右往左1的位置，如1.1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li><p><strong>Dates and times</strong></p><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220329150312985.png" alt="image-20220329150312985"></p></li></ol><h4 id="1-2-4-定义表和表操作"><a href="#1-2-4-定义表和表操作" class="headerlink" title="1.2.4.定义表和表操作"></a>1.2.4.定义表和表操作</h4><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220329150138192.png" alt="image-20220329150138192" style="zoom:50%;"><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE Salesman/*SQL对⼤⼩写不敏感*/(empid char(9) PRIMARY KEY,idno char(18) UNIQUE,name char(8) NOT NULL,gender bit NOT NULL,phone char(20),deptid int NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Note that there is no cognominal(同名的) tables in a DB</p></blockquote><ul><li><strong>Modifying Relation Schemas</strong></li></ul><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">ALTER TABLE ADD column-name datatype NULL；增加一列ALTER TABLE DROP column-name;删除一列ALTER TABLE tablename RENAME TO newname;改表名DROP TABLE tablename;删除表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>Default Values</strong></li></ul><p>When we create or modify tuples, we  sometimes do not  have values for all components.</p><p>SQL provides the NULL value as default value. (隐含默认NULL)</p><p> When we declare an attribute and its data type, we may add the keyword ==DEFAULT== and ==an appropriate value==.</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">gender CHAR(1) DEFAULT “？”<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Declaring Keys</li></ul><p>声明某⼀属性(⾮多属性)为“键”：在属性被列入关系时就声明。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">deptid  int    PRIMARY KEY,<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果声明一组(一个及以上)属性为键需要:</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">PRIMARY KEY (orderno, lineno)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Primary Key and Unique</li></ul><blockquote><p>Atable has and only has one Primary Key, (键只能声明⼀次)，while it may has any number of Unique declarations.</p></blockquote><p>1、Primary key的1个或多个列必须为NOT NULL，如果列为NULL，在增加PRIMARY KEY时，列自动更改为NOT NULL。而UNIQUE KEY 对列没有此要求。</p><p>2、一个表只能有一个PRIMARY KEY，但可以有多个UNIQUE KEY。</p><h3 id="1-3-An-Algebraic-Query-Language"><a href="#1-3-An-Algebraic-Query-Language" class="headerlink" title="1.3.An Algebraic Query Language"></a>1.3.An Algebraic Query Language</h3><p>关系代数的表达式称为查询（query）</p><p>Operands /操作数are relations or variables </p><p>Operators /操作符号are symbols denoting</p><h4 id="1-3-1-传统关系代数分类"><a href="#1-3-1-传统关系代数分类" class="headerlink" title="1.3.1.传统关系代数分类"></a>1.3.1.传统关系代数分类</h4><ul><li><p>The usual set operations: union, intersection and difference (关系：并、交、差)</p></li><li><p>Operations that remove parts of a relation:</p><p>Selection: eliminates(消除) some rows (tuples)按条件选取行</p></li></ul><p>​      Projection(投影): eliminates some colunms (attributes)选列</p><ul><li>Operations that combine(组合联接) the tuples of two relations</li></ul><p>​       Cartesian  product(笛卡尔积)：将两个关系的所有可能配对形成新关系。</p><p>​       Join(连接):</p><p>​         Natural join ⾃然联接</p><p>​         Theta-join θ联接</p><ul><li>Renaming改名:不影响关系中的元组但是改变了关系中的模式</li></ul><h4 id="1-3-2-Set-Operations-on-Relations集合操作"><a href="#1-3-2-Set-Operations-on-Relations集合操作" class="headerlink" title="1.3.2.Set Operations on Relations集合操作"></a>1.3.2.Set Operations on Relations集合操作</h4><p><img src="https://chilh-1311344212.cos.ap-beijing.myqcloud.com/picture%2Fimage-20220330163821111.png" alt="image-20220330163821111"></p><blockquote><p><strong>注意集合操作前，需要各个属性相同，否则需要重命名</strong></p></blockquote><h4 id="1-3-3-Projection-选属性"><a href="#1-3-3-Projection-选属性" class="headerlink" title="1.3.3.Projection 选属性"></a><strong>1.3.3.Projection</strong> <strong>选属性</strong></h4>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> BUPT </tag>
            
            <tag> 大二下课程笔记 </tag>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装Mysql</title>
      <link href="//post/%E5%AE%89%E8%A3%85MySQL.html"/>
      <url>//post/%E5%AE%89%E8%A3%85MySQL.html</url>
      
        <content type="html"><![CDATA[<h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h3><p><strong>下载安装包：</strong><br>下载网址：<br><a href="https://dev.mysql.com/downloads/">https://dev.mysql.com/downloads/</a></p><p><img src="https://img-blog.csdnimg.cn/81cc86510aa245848c28e03443f1a5ed.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2E4MDI5NzY=,size_16,color_FFFFFF,t_70" alt="img"></p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p><strong>添加环境变量</strong></p><ul><li><p>我的电脑-&gt;右键-&gt;属性-&gt;高级系统设置-&gt;<a href="https://so.csdn.net/so/search?q=%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F&amp;spm=1001.2101.3001.7020">环境变量</a></p></li><li><p>选择<code>Path</code>-&gt;编辑-&gt;新建，添加：你的mysql安装文件下的bin文件夹地址</p></li><li><p>在安装目录下新建<code>my.ini</code>文件（文本文档）</p></li><li><p>编辑<code>my.ini</code>文件，注意替换你自己电脑上的路径</p></li></ul><pre class="line-numbers language-none"><code class="language-none">[mysqld]basedir = D:\environment\mysql-5.7.31\  //把这两行路径改成自己的安装路径datadir = D:\environment\mysql-5.7.31\data\port = 3306skip-grant-tables<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>启动cmd(用管理员身份)</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqld -installmysqld --initialize-insecure --user=mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这步完成后，在文件夹里会生成一个<code>data</code>文件（如果没有就自己加一个）</p></li></ul><p>完成后会显示<code>MySQL 服务已经启动成功</code></p><p>然后通过命令<code>mysql -u root -p</code>，进入mysql管理界面（密码为空）</p><pre class="line-numbers language-none"><code class="language-none">ALTER USER 'root'@'localhost' IDENTIFIED BY '111111';<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入exit 退出</p>]]></content>
      
      
      <categories>
          
          <category> 大学笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> database </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
